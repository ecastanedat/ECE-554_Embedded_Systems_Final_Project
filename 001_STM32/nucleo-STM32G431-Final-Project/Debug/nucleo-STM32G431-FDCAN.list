
nucleo-STM32G431-FDCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007598  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08007778  08007778  00017778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078ec  080078ec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080078ec  080078ec  000178ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078f4  080078f4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078f4  080078f4  000178f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078f8  080078f8  000178f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080078fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ccc  20000074  08007970  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d40  08007970  00021d40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b9c3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000476a  00000000  00000000  0004ba67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad0  00000000  00000000  000501d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001928  00000000  00000000  00051ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c5f  00000000  00000000  000535d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eb16  00000000  00000000  0007522f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5192  00000000  00000000  00093d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00168ed7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007408  00000000  00000000  00168f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007760 	.word	0x08007760

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08007760 	.word	0x08007760

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96e 	b.w	8000524 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468c      	mov	ip, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	f040 8083 	bne.w	8000376 <__udivmoddi4+0x116>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d947      	bls.n	8000306 <__udivmoddi4+0xa6>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b142      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027c:	f1c2 0020 	rsb	r0, r2, #32
 8000280:	fa24 f000 	lsr.w	r0, r4, r0
 8000284:	4091      	lsls	r1, r2
 8000286:	4097      	lsls	r7, r2
 8000288:	ea40 0c01 	orr.w	ip, r0, r1
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbbc f6f8 	udiv	r6, ip, r8
 8000298:	fa1f fe87 	uxth.w	lr, r7
 800029c:	fb08 c116 	mls	r1, r8, r6, ip
 80002a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a4:	fb06 f10e 	mul.w	r1, r6, lr
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18fb      	adds	r3, r7, r3
 80002ae:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b2:	f080 8119 	bcs.w	80004e8 <__udivmoddi4+0x288>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8116 	bls.w	80004e8 <__udivmoddi4+0x288>
 80002bc:	3e02      	subs	r6, #2
 80002be:	443b      	add	r3, r7
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002c8:	fb08 3310 	mls	r3, r8, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	193c      	adds	r4, r7, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295
 80002de:	f080 8105 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f240 8102 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002e8:	3802      	subs	r0, #2
 80002ea:	443c      	add	r4, r7
 80002ec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f0:	eba4 040e 	sub.w	r4, r4, lr
 80002f4:	2600      	movs	r6, #0
 80002f6:	b11d      	cbz	r5, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	b902      	cbnz	r2, 800030a <__udivmoddi4+0xaa>
 8000308:	deff      	udf	#255	; 0xff
 800030a:	fab2 f282 	clz	r2, r2
 800030e:	2a00      	cmp	r2, #0
 8000310:	d150      	bne.n	80003b4 <__udivmoddi4+0x154>
 8000312:	1bcb      	subs	r3, r1, r7
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	fa1f f887 	uxth.w	r8, r7
 800031c:	2601      	movs	r6, #1
 800031e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000322:	0c21      	lsrs	r1, r4, #16
 8000324:	fb0e 331c 	mls	r3, lr, ip, r3
 8000328:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800032c:	fb08 f30c 	mul.w	r3, r8, ip
 8000330:	428b      	cmp	r3, r1
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000334:	1879      	adds	r1, r7, r1
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0xe2>
 800033c:	428b      	cmp	r3, r1
 800033e:	f200 80e9 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 8000342:	4684      	mov	ip, r0
 8000344:	1ac9      	subs	r1, r1, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000350:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x10c>
 800035c:	193c      	adds	r4, r7, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x10a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80d9 	bhi.w	800051c <__udivmoddi4+0x2bc>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e7bf      	b.n	80002f6 <__udivmoddi4+0x96>
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x12e>
 800037a:	2d00      	cmp	r5, #0
 800037c:	f000 80b1 	beq.w	80004e2 <__udivmoddi4+0x282>
 8000380:	2600      	movs	r6, #0
 8000382:	e9c5 0100 	strd	r0, r1, [r5]
 8000386:	4630      	mov	r0, r6
 8000388:	4631      	mov	r1, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f683 	clz	r6, r3
 8000392:	2e00      	cmp	r6, #0
 8000394:	d14a      	bne.n	800042c <__udivmoddi4+0x1cc>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0x140>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80b8 	bhi.w	8000510 <__udivmoddi4+0x2b0>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0103 	sbc.w	r1, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	468c      	mov	ip, r1
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d0a8      	beq.n	8000300 <__udivmoddi4+0xa0>
 80003ae:	e9c5 4c00 	strd	r4, ip, [r5]
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0xa0>
 80003b4:	f1c2 0320 	rsb	r3, r2, #32
 80003b8:	fa20 f603 	lsr.w	r6, r0, r3
 80003bc:	4097      	lsls	r7, r2
 80003be:	fa01 f002 	lsl.w	r0, r1, r2
 80003c2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c6:	40d9      	lsrs	r1, r3
 80003c8:	4330      	orrs	r0, r6
 80003ca:	0c03      	lsrs	r3, r0, #16
 80003cc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d0:	fa1f f887 	uxth.w	r8, r7
 80003d4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb06 f108 	mul.w	r1, r6, r8
 80003e0:	4299      	cmp	r1, r3
 80003e2:	fa04 f402 	lsl.w	r4, r4, r2
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x19c>
 80003e8:	18fb      	adds	r3, r7, r3
 80003ea:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ee:	f080 808d 	bcs.w	800050c <__udivmoddi4+0x2ac>
 80003f2:	4299      	cmp	r1, r3
 80003f4:	f240 808a 	bls.w	800050c <__udivmoddi4+0x2ac>
 80003f8:	3e02      	subs	r6, #2
 80003fa:	443b      	add	r3, r7
 80003fc:	1a5b      	subs	r3, r3, r1
 80003fe:	b281      	uxth	r1, r0
 8000400:	fbb3 f0fe 	udiv	r0, r3, lr
 8000404:	fb0e 3310 	mls	r3, lr, r0, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb00 f308 	mul.w	r3, r0, r8
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x1c4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f100 3cff 	add.w	ip, r0, #4294967295
 800041a:	d273      	bcs.n	8000504 <__udivmoddi4+0x2a4>
 800041c:	428b      	cmp	r3, r1
 800041e:	d971      	bls.n	8000504 <__udivmoddi4+0x2a4>
 8000420:	3802      	subs	r0, #2
 8000422:	4439      	add	r1, r7
 8000424:	1acb      	subs	r3, r1, r3
 8000426:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800042a:	e778      	b.n	800031e <__udivmoddi4+0xbe>
 800042c:	f1c6 0c20 	rsb	ip, r6, #32
 8000430:	fa03 f406 	lsl.w	r4, r3, r6
 8000434:	fa22 f30c 	lsr.w	r3, r2, ip
 8000438:	431c      	orrs	r4, r3
 800043a:	fa20 f70c 	lsr.w	r7, r0, ip
 800043e:	fa01 f306 	lsl.w	r3, r1, r6
 8000442:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000446:	fa21 f10c 	lsr.w	r1, r1, ip
 800044a:	431f      	orrs	r7, r3
 800044c:	0c3b      	lsrs	r3, r7, #16
 800044e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000452:	fa1f f884 	uxth.w	r8, r4
 8000456:	fb0e 1119 	mls	r1, lr, r9, r1
 800045a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800045e:	fb09 fa08 	mul.w	sl, r9, r8
 8000462:	458a      	cmp	sl, r1
 8000464:	fa02 f206 	lsl.w	r2, r2, r6
 8000468:	fa00 f306 	lsl.w	r3, r0, r6
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x220>
 800046e:	1861      	adds	r1, r4, r1
 8000470:	f109 30ff 	add.w	r0, r9, #4294967295
 8000474:	d248      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 8000476:	458a      	cmp	sl, r1
 8000478:	d946      	bls.n	8000508 <__udivmoddi4+0x2a8>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4421      	add	r1, r4
 8000480:	eba1 010a 	sub.w	r1, r1, sl
 8000484:	b2bf      	uxth	r7, r7
 8000486:	fbb1 f0fe 	udiv	r0, r1, lr
 800048a:	fb0e 1110 	mls	r1, lr, r0, r1
 800048e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000492:	fb00 f808 	mul.w	r8, r0, r8
 8000496:	45b8      	cmp	r8, r7
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x24a>
 800049a:	19e7      	adds	r7, r4, r7
 800049c:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a0:	d22e      	bcs.n	8000500 <__udivmoddi4+0x2a0>
 80004a2:	45b8      	cmp	r8, r7
 80004a4:	d92c      	bls.n	8000500 <__udivmoddi4+0x2a0>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4427      	add	r7, r4
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	eba7 0708 	sub.w	r7, r7, r8
 80004b2:	fba0 8902 	umull	r8, r9, r0, r2
 80004b6:	454f      	cmp	r7, r9
 80004b8:	46c6      	mov	lr, r8
 80004ba:	4649      	mov	r1, r9
 80004bc:	d31a      	bcc.n	80004f4 <__udivmoddi4+0x294>
 80004be:	d017      	beq.n	80004f0 <__udivmoddi4+0x290>
 80004c0:	b15d      	cbz	r5, 80004da <__udivmoddi4+0x27a>
 80004c2:	ebb3 020e 	subs.w	r2, r3, lr
 80004c6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ca:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ce:	40f2      	lsrs	r2, r6
 80004d0:	ea4c 0202 	orr.w	r2, ip, r2
 80004d4:	40f7      	lsrs	r7, r6
 80004d6:	e9c5 2700 	strd	r2, r7, [r5]
 80004da:	2600      	movs	r6, #0
 80004dc:	4631      	mov	r1, r6
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e70b      	b.n	8000300 <__udivmoddi4+0xa0>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0x60>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fd      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f0:	4543      	cmp	r3, r8
 80004f2:	d2e5      	bcs.n	80004c0 <__udivmoddi4+0x260>
 80004f4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f8:	eb69 0104 	sbc.w	r1, r9, r4
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7df      	b.n	80004c0 <__udivmoddi4+0x260>
 8000500:	4608      	mov	r0, r1
 8000502:	e7d2      	b.n	80004aa <__udivmoddi4+0x24a>
 8000504:	4660      	mov	r0, ip
 8000506:	e78d      	b.n	8000424 <__udivmoddi4+0x1c4>
 8000508:	4681      	mov	r9, r0
 800050a:	e7b9      	b.n	8000480 <__udivmoddi4+0x220>
 800050c:	4666      	mov	r6, ip
 800050e:	e775      	b.n	80003fc <__udivmoddi4+0x19c>
 8000510:	4630      	mov	r0, r6
 8000512:	e74a      	b.n	80003aa <__udivmoddi4+0x14a>
 8000514:	f1ac 0c02 	sub.w	ip, ip, #2
 8000518:	4439      	add	r1, r7
 800051a:	e713      	b.n	8000344 <__udivmoddi4+0xe4>
 800051c:	3802      	subs	r0, #2
 800051e:	443c      	add	r4, r7
 8000520:	e724      	b.n	800036c <__udivmoddi4+0x10c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <print_to_serial>:
#include "Globals.h"


/* Function prototypes -----------------------------------------------*/
void print_to_serial(char *myString)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b09c      	sub	sp, #112	; 0x70
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[100];

	strcpy((char*)buffer, myString);
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	6879      	ldr	r1, [r7, #4]
 8000536:	4618      	mov	r0, r3
 8000538:	f007 f8ae 	bl	8007698 <strcpy>
	HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff fe6d 	bl	8000220 <strlen>
 8000546:	4603      	mov	r3, r0
 8000548:	b29a      	uxth	r2, r3
 800054a:	f107 010c 	add.w	r1, r7, #12
 800054e:	f04f 33ff 	mov.w	r3, #4294967295
 8000552:	4803      	ldr	r0, [pc, #12]	; (8000560 <print_to_serial+0x38>)
 8000554:	f003 fc50 	bl	8003df8 <HAL_UART_Transmit>

}
 8000558:	bf00      	nop
 800055a:	3770      	adds	r7, #112	; 0x70
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20001c60 	.word	0x20001c60

08000564 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000568:	4a0c      	ldr	r2, [pc, #48]	; (800059c <MX_FREERTOS_Init+0x38>)
 800056a:	2100      	movs	r1, #0
 800056c:	480c      	ldr	r0, [pc, #48]	; (80005a0 <MX_FREERTOS_Init+0x3c>)
 800056e:	f004 fabb 	bl	8004ae8 <osThreadNew>
 8000572:	4603      	mov	r3, r0
 8000574:	4a0b      	ldr	r2, [pc, #44]	; (80005a4 <MX_FREERTOS_Init+0x40>)
 8000576:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000578:	4a0b      	ldr	r2, [pc, #44]	; (80005a8 <MX_FREERTOS_Init+0x44>)
 800057a:	2100      	movs	r1, #0
 800057c:	480b      	ldr	r0, [pc, #44]	; (80005ac <MX_FREERTOS_Init+0x48>)
 800057e:	f004 fab3 	bl	8004ae8 <osThreadNew>
 8000582:	4603      	mov	r3, r0
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <MX_FREERTOS_Init+0x4c>)
 8000586:	6013      	str	r3, [r2, #0]

  /* creation of ultra_sensor_tr */
  ultra_sensor_trHandle = osThreadNew(Start_ultra_sensor_tr, NULL, &ultra_sensor_tr_attributes);
 8000588:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <MX_FREERTOS_Init+0x50>)
 800058a:	2100      	movs	r1, #0
 800058c:	480a      	ldr	r0, [pc, #40]	; (80005b8 <MX_FREERTOS_Init+0x54>)
 800058e:	f004 faab 	bl	8004ae8 <osThreadNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a09      	ldr	r2, [pc, #36]	; (80005bc <MX_FREERTOS_Init+0x58>)
 8000596:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	080077d0 	.word	0x080077d0
 80005a0:	080005c1 	.word	0x080005c1
 80005a4:	20001a64 	.word	0x20001a64
 80005a8:	080077f4 	.word	0x080077f4
 80005ac:	080005ed 	.word	0x080005ed
 80005b0:	20001a7c 	.word	0x20001a7c
 80005b4:	08007818 	.word	0x08007818
 80005b8:	080005fd 	.word	0x080005fd
 80005bc:	20001a78 	.word	0x20001a78

080005c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);
 80005c8:	4a05      	ldr	r2, [pc, #20]	; (80005e0 <StartDefaultTask+0x20>)
 80005ca:	4906      	ldr	r1, [pc, #24]	; (80005e4 <StartDefaultTask+0x24>)
 80005cc:	4806      	ldr	r0, [pc, #24]	; (80005e8 <StartDefaultTask+0x28>)
 80005ce:	f001 f8a4 	bl	800171a <HAL_FDCAN_AddMessageToTxFifoQ>
	  Toggle_CAN_Data();
 80005d2:	f000 f953 	bl	800087c <Toggle_CAN_Data>



      osDelay(50);
 80005d6:	2032      	movs	r0, #50	; 0x32
 80005d8:	f004 fb18 	bl	8004c0c <osDelay>
	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);
 80005dc:	e7f4      	b.n	80005c8 <StartDefaultTask+0x8>
 80005de:	bf00      	nop
 80005e0:	20001a68 	.word	0x20001a68
 80005e4:	20001a80 	.word	0x20001a80
 80005e8:	20001acc 	.word	0x20001acc

080005ec <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005f4:	2001      	movs	r0, #1
 80005f6:	f004 fb09 	bl	8004c0c <osDelay>
 80005fa:	e7fb      	b.n	80005f4 <StartTask02+0x8>

080005fc <Start_ultra_sensor_tr>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_ultra_sensor_tr */
void Start_ultra_sensor_tr(void *argument)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_ultra_sensor_tr */
  HAL_TIM_Base_Start(&htim8);
 8000604:	480a      	ldr	r0, [pc, #40]	; (8000630 <Start_ultra_sensor_tr+0x34>)
 8000606:	f002 fe45 	bl	8003294 <HAL_TIM_Base_Start>

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(ULTR_TRG_GPIO_Port, ULTR_TRG_Pin, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	2110      	movs	r1, #16
 800060e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000612:	f001 fdad 	bl	8002170 <HAL_GPIO_WritePin>
	  delay_us(100);
 8000616:	2064      	movs	r0, #100	; 0x64
 8000618:	f000 fc74 	bl	8000f04 <delay_us>
	  //osDelay(1000);
	  HAL_GPIO_WritePin(ULTR_TRG_GPIO_Port, ULTR_TRG_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2110      	movs	r1, #16
 8000620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000624:	f001 fda4 	bl	8002170 <HAL_GPIO_WritePin>

      osDelay(10);
 8000628:	200a      	movs	r0, #10
 800062a:	f004 faef 	bl	8004c0c <osDelay>
	  HAL_GPIO_WritePin(ULTR_TRG_GPIO_Port, ULTR_TRG_Pin, GPIO_PIN_SET);
 800062e:	e7ec      	b.n	800060a <Start_ultra_sensor_tr+0xe>
 8000630:	20001b7c 	.word	0x20001b7c

08000634 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000638:	4b20      	ldr	r3, [pc, #128]	; (80006bc <MX_FDCAN1_Init+0x88>)
 800063a:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <MX_FDCAN1_Init+0x8c>)
 800063c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800063e:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <MX_FDCAN1_Init+0x88>)
 8000640:	2200      	movs	r2, #0
 8000642:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <MX_FDCAN1_Init+0x88>)
 8000646:	f44f 7240 	mov.w	r2, #768	; 0x300
 800064a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800064c:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <MX_FDCAN1_Init+0x88>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_FDCAN1_Init+0x88>)
 8000654:	2201      	movs	r2, #1
 8000656:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000658:	4b18      	ldr	r3, [pc, #96]	; (80006bc <MX_FDCAN1_Init+0x88>)
 800065a:	2200      	movs	r2, #0
 800065c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_FDCAN1_Init+0x88>)
 8000660:	2200      	movs	r2, #0
 8000662:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <MX_FDCAN1_Init+0x88>)
 8000666:	2201      	movs	r2, #1
 8000668:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_FDCAN1_Init+0x88>)
 800066c:	2210      	movs	r2, #16
 800066e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 63;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_FDCAN1_Init+0x88>)
 8000672:	223f      	movs	r2, #63	; 0x3f
 8000674:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_FDCAN1_Init+0x88>)
 8000678:	2210      	movs	r2, #16
 800067a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_FDCAN1_Init+0x88>)
 800067e:	2201      	movs	r2, #1
 8000680:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_FDCAN1_Init+0x88>)
 8000684:	2204      	movs	r2, #4
 8000686:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_FDCAN1_Init+0x88>)
 800068a:	2205      	movs	r2, #5
 800068c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <MX_FDCAN1_Init+0x88>)
 8000690:	2204      	movs	r2, #4
 8000692:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_FDCAN1_Init+0x88>)
 8000696:	2201      	movs	r2, #1
 8000698:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <MX_FDCAN1_Init+0x88>)
 800069c:	2200      	movs	r2, #0
 800069e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_FDCAN1_Init+0x88>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_FDCAN1_Init+0x88>)
 80006a8:	f000 fe2a 	bl	8001300 <HAL_FDCAN_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80006b2:	f000 fa19 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20001acc 	.word	0x20001acc
 80006c0:	40006400 	.word	0x40006400

080006c4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b09a      	sub	sp, #104	; 0x68
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	2244      	movs	r2, #68	; 0x44
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f006 ff65 	bl	80075b4 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a24      	ldr	r2, [pc, #144]	; (8000780 <HAL_FDCAN_MspInit+0xbc>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d141      	bne.n	8000778 <HAL_FDCAN_MspInit+0xb4>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80006f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80006fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	4618      	mov	r0, r3
 8000706:	f002 fb7d 	bl	8002e04 <HAL_RCCEx_PeriphCLKConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000710:	f000 f9ea 	bl	8000ae8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <HAL_FDCAN_MspInit+0xc0>)
 8000716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000718:	4a1a      	ldr	r2, [pc, #104]	; (8000784 <HAL_FDCAN_MspInit+0xc0>)
 800071a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800071e:	6593      	str	r3, [r2, #88]	; 0x58
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <HAL_FDCAN_MspInit+0xc0>)
 8000722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <HAL_FDCAN_MspInit+0xc0>)
 800072e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000730:	4a14      	ldr	r2, [pc, #80]	; (8000784 <HAL_FDCAN_MspInit+0xc0>)
 8000732:	f043 0301 	orr.w	r3, r3, #1
 8000736:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_FDCAN_MspInit+0xc0>)
 800073a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000744:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000748:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074a:	2302      	movs	r3, #2
 800074c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000756:	2309      	movs	r3, #9
 8000758:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800075e:	4619      	mov	r1, r3
 8000760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000764:	f001 fb82 	bl	8001e6c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000768:	2200      	movs	r2, #0
 800076a:	2105      	movs	r1, #5
 800076c:	2015      	movs	r0, #21
 800076e:	f000 fd9f 	bl	80012b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000772:	2015      	movs	r0, #21
 8000774:	f000 fdb6 	bl	80012e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000778:	bf00      	nop
 800077a:	3768      	adds	r7, #104	; 0x68
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40006400 	.word	0x40006400
 8000784:	40021000 	.word	0x40021000

08000788 <FDCAN1_MSG_config>:
  }
}

/* USER CODE BEGIN 1 */
void FDCAN1_MSG_config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;

	//Prepare CAN data
	myTxData[0] = 0xFF;
 800078e:	4b38      	ldr	r3, [pc, #224]	; (8000870 <FDCAN1_MSG_config+0xe8>)
 8000790:	22ff      	movs	r2, #255	; 0xff
 8000792:	701a      	strb	r2, [r3, #0]
	myTxData[1] = 0x00;
 8000794:	4b36      	ldr	r3, [pc, #216]	; (8000870 <FDCAN1_MSG_config+0xe8>)
 8000796:	2200      	movs	r2, #0
 8000798:	705a      	strb	r2, [r3, #1]
	myTxData[2] = 0xFF;
 800079a:	4b35      	ldr	r3, [pc, #212]	; (8000870 <FDCAN1_MSG_config+0xe8>)
 800079c:	22ff      	movs	r2, #255	; 0xff
 800079e:	709a      	strb	r2, [r3, #2]
	myTxData[3] = 0x00;
 80007a0:	4b33      	ldr	r3, [pc, #204]	; (8000870 <FDCAN1_MSG_config+0xe8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	70da      	strb	r2, [r3, #3]

	myTxData[4] = 0xFF;
 80007a6:	4b32      	ldr	r3, [pc, #200]	; (8000870 <FDCAN1_MSG_config+0xe8>)
 80007a8:	22ff      	movs	r2, #255	; 0xff
 80007aa:	711a      	strb	r2, [r3, #4]
	myTxData[5] = 0x00;
 80007ac:	4b30      	ldr	r3, [pc, #192]	; (8000870 <FDCAN1_MSG_config+0xe8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	715a      	strb	r2, [r3, #5]
	myTxData[6] = 0xFF;
 80007b2:	4b2f      	ldr	r3, [pc, #188]	; (8000870 <FDCAN1_MSG_config+0xe8>)
 80007b4:	22ff      	movs	r2, #255	; 0xff
 80007b6:	719a      	strb	r2, [r3, #6]
	myTxData[7] = 0x00;
 80007b8:	4b2d      	ldr	r3, [pc, #180]	; (8000870 <FDCAN1_MSG_config+0xe8>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	71da      	strb	r2, [r3, #7]

	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80007c6:	2302      	movs	r3, #2
 80007c8:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80007ca:	2301      	movs	r3, #1
 80007cc:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x321;
 80007ce:	f240 3321 	movw	r3, #801	; 0x321
 80007d2:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 80007d4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80007d8:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80007da:	463b      	mov	r3, r7
 80007dc:	4619      	mov	r1, r3
 80007de:	4825      	ldr	r0, [pc, #148]	; (8000874 <FDCAN1_MSG_config+0xec>)
 80007e0:	f000 fee8 	bl	80015b4 <HAL_FDCAN_ConfigFilter>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <FDCAN1_MSG_config+0x66>
	{
	    Error_Handler();
 80007ea:	f000 f97d 	bl	8000ae8 <Error_Handler>
	}

	/* Configure global filter to reject all non-matching frames */
	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80007ee:	2300      	movs	r3, #0
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	2300      	movs	r3, #0
 80007f4:	2202      	movs	r2, #2
 80007f6:	2102      	movs	r1, #2
 80007f8:	481e      	ldr	r0, [pc, #120]	; (8000874 <FDCAN1_MSG_config+0xec>)
 80007fa:	f000 ff35 	bl	8001668 <HAL_FDCAN_ConfigGlobalFilter>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <FDCAN1_MSG_config+0x80>
	{
	    Error_Handler();
 8000804:	f000 f970 	bl	8000ae8 <Error_Handler>
	}

	/* Activate Rx FIFO 0 watermark notification */
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000808:	2200      	movs	r2, #0
 800080a:	2101      	movs	r1, #1
 800080c:	4819      	ldr	r0, [pc, #100]	; (8000874 <FDCAN1_MSG_config+0xec>)
 800080e:	f000 ffc8 	bl	80017a2 <HAL_FDCAN_ActivateNotification>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <FDCAN1_MSG_config+0x94>
	{
	    Error_Handler();
 8000818:	f000 f966 	bl	8000ae8 <Error_Handler>
	}

	/* Prepare Tx Header */
	TxHeader.Identifier = 0x322;
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <FDCAN1_MSG_config+0xf0>)
 800081e:	f240 3222 	movw	r2, #802	; 0x322
 8000822:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <FDCAN1_MSG_config+0xf0>)
 8000826:	2200      	movs	r2, #0
 8000828:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <FDCAN1_MSG_config+0xf0>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <FDCAN1_MSG_config+0xf0>)
 8000832:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000836:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <FDCAN1_MSG_config+0xf0>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <FDCAN1_MSG_config+0xf0>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <FDCAN1_MSG_config+0xf0>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <FDCAN1_MSG_config+0xf0>)
 800084c:	2200      	movs	r2, #0
 800084e:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <FDCAN1_MSG_config+0xf0>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]

	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000856:	4807      	ldr	r0, [pc, #28]	; (8000874 <FDCAN1_MSG_config+0xec>)
 8000858:	f000 ff37 	bl	80016ca <HAL_FDCAN_Start>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <FDCAN1_MSG_config+0xde>
	{
	    Error_Handler();
 8000862:	f000 f941 	bl	8000ae8 <Error_Handler>
	}
}
 8000866:	bf00      	nop
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20001a68 	.word	0x20001a68
 8000874:	20001acc 	.word	0x20001acc
 8000878:	20001a80 	.word	0x20001a80

0800087c <Toggle_CAN_Data>:

void Toggle_CAN_Data(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
	if(myTxData[0] == 0x00)
 8000880:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <Toggle_CAN_Data+0x78>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d118      	bne.n	80008ba <Toggle_CAN_Data+0x3e>
	{
		myTxData[0] = 0xFF;
 8000888:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <Toggle_CAN_Data+0x78>)
 800088a:	22ff      	movs	r2, #255	; 0xff
 800088c:	701a      	strb	r2, [r3, #0]
		myTxData[1] = 0x00;
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <Toggle_CAN_Data+0x78>)
 8000890:	2200      	movs	r2, #0
 8000892:	705a      	strb	r2, [r3, #1]
		myTxData[2] = 0xFF;
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <Toggle_CAN_Data+0x78>)
 8000896:	22ff      	movs	r2, #255	; 0xff
 8000898:	709a      	strb	r2, [r3, #2]
		myTxData[3] = 0x00;
 800089a:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <Toggle_CAN_Data+0x78>)
 800089c:	2200      	movs	r2, #0
 800089e:	70da      	strb	r2, [r3, #3]

		myTxData[4] = 0xFF;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <Toggle_CAN_Data+0x78>)
 80008a2:	22ff      	movs	r2, #255	; 0xff
 80008a4:	711a      	strb	r2, [r3, #4]
		myTxData[5] = 0x00;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <Toggle_CAN_Data+0x78>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	715a      	strb	r2, [r3, #5]
		myTxData[6] = 0xFF;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <Toggle_CAN_Data+0x78>)
 80008ae:	22ff      	movs	r2, #255	; 0xff
 80008b0:	719a      	strb	r2, [r3, #6]
		myTxData[7] = 0x00;
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <Toggle_CAN_Data+0x78>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	71da      	strb	r2, [r3, #7]
		myTxData[4] = 0x00;
		myTxData[5] = 0xFF;
		myTxData[6] = 0x00;
		myTxData[7] = 0xFF;
	}
}
 80008b8:	e017      	b.n	80008ea <Toggle_CAN_Data+0x6e>
		myTxData[0] = 0x00;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <Toggle_CAN_Data+0x78>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
		myTxData[1] = 0xFF;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <Toggle_CAN_Data+0x78>)
 80008c2:	22ff      	movs	r2, #255	; 0xff
 80008c4:	705a      	strb	r2, [r3, #1]
		myTxData[2] = 0x00;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <Toggle_CAN_Data+0x78>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	709a      	strb	r2, [r3, #2]
		myTxData[3] = 0xFF;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <Toggle_CAN_Data+0x78>)
 80008ce:	22ff      	movs	r2, #255	; 0xff
 80008d0:	70da      	strb	r2, [r3, #3]
		myTxData[4] = 0x00;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <Toggle_CAN_Data+0x78>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	711a      	strb	r2, [r3, #4]
		myTxData[5] = 0xFF;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <Toggle_CAN_Data+0x78>)
 80008da:	22ff      	movs	r2, #255	; 0xff
 80008dc:	715a      	strb	r2, [r3, #5]
		myTxData[6] = 0x00;
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <Toggle_CAN_Data+0x78>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	719a      	strb	r2, [r3, #6]
		myTxData[7] = 0xFF;
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <Toggle_CAN_Data+0x78>)
 80008e6:	22ff      	movs	r2, #255	; 0xff
 80008e8:	71da      	strb	r2, [r3, #7]
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	20001a68 	.word	0x20001a68

080008f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b2e      	ldr	r3, [pc, #184]	; (80009c8 <MX_GPIO_Init+0xd0>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a2d      	ldr	r2, [pc, #180]	; (80009c8 <MX_GPIO_Init+0xd0>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b2b      	ldr	r3, [pc, #172]	; (80009c8 <MX_GPIO_Init+0xd0>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <MX_GPIO_Init+0xd0>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4a27      	ldr	r2, [pc, #156]	; (80009c8 <MX_GPIO_Init+0xd0>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <MX_GPIO_Init+0xd0>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTR_TRG_GPIO_Port, ULTR_TRG_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2110      	movs	r1, #16
 8000942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000946:	f001 fc13 	bl	8002170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000950:	481e      	ldr	r0, [pc, #120]	; (80009cc <MX_GPIO_Init+0xd4>)
 8000952:	f001 fc0d 	bl	8002170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULRT_ECHO_Pin;
 8000956:	2302      	movs	r3, #2
 8000958:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800095a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800095e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ULRT_ECHO_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	4619      	mov	r1, r3
 800096a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096e:	f001 fa7d 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTR_TRG_Pin;
 8000972:	2310      	movs	r3, #16
 8000974:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ULTR_TRG_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	4619      	mov	r1, r3
 8000988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098c:	f001 fa6e 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000994:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	4619      	mov	r1, r3
 80009a8:	4808      	ldr	r0, [pc, #32]	; (80009cc <MX_GPIO_Init+0xd4>)
 80009aa:	f001 fa5f 	bl	8001e6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2105      	movs	r1, #5
 80009b2:	2007      	movs	r0, #7
 80009b4:	f000 fc7c 	bl	80012b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80009b8:	2007      	movs	r0, #7
 80009ba:	f000 fc93 	bl	80012e4 <HAL_NVIC_EnableIRQ>

}
 80009be:	bf00      	nop
 80009c0:	3720      	adds	r7, #32
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000
 80009cc:	48000400 	.word	0x48000400

080009d0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == ULRT_ECHO_Pin) /* Interrupt function for ECHO signal */
 80009da:	88fb      	ldrh	r3, [r7, #6]
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d102      	bne.n	80009e6 <HAL_GPIO_EXTI_Callback+0x16>
	{
		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		print_to_serial("Echo signal received!");
 80009e0:	4803      	ldr	r0, [pc, #12]	; (80009f0 <HAL_GPIO_EXTI_Callback+0x20>)
 80009e2:	f7ff fda1 	bl	8000528 <print_to_serial>
	}

}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	080077a0 	.word	0x080077a0

080009f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f8:	f000 fb6b 	bl	80010d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fc:	f000 f815 	bl	8000a2a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a00:	f7ff ff7a 	bl	80008f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a04:	f000 fa98 	bl	8000f38 <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8000a08:	f7ff fe14 	bl	8000634 <MX_FDCAN1_Init>
  MX_TIM6_Init();
 8000a0c:	f000 f964 	bl	8000cd8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000a10:	f000 f998 	bl	8000d44 <MX_TIM7_Init>
  MX_TIM8_Init();
 8000a14:	f000 f9cc 	bl	8000db0 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  FDCAN1_MSG_config();
 8000a18:	f7ff feb6 	bl	8000788 <FDCAN1_MSG_config>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000a1c:	f004 f81a 	bl	8004a54 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000a20:	f7ff fda0 	bl	8000564 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000a24:	f004 f83a 	bl	8004a9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <main+0x34>

08000a2a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b094      	sub	sp, #80	; 0x50
 8000a2e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a30:	f107 0318 	add.w	r3, r7, #24
 8000a34:	2238      	movs	r2, #56	; 0x38
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f006 fdbb 	bl	80075b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a4c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a50:	f001 fbbe 	bl	80021d0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a54:	2302      	movs	r3, #2
 8000a56:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a5e:	2340      	movs	r3, #64	; 0x40
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a62:	2302      	movs	r3, #2
 8000a64:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a66:	2302      	movs	r3, #2
 8000a68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a6e:	230a      	movs	r3, #10
 8000a70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a72:	2302      	movs	r3, #2
 8000a74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a76:	2302      	movs	r3, #2
 8000a78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7e:	f107 0318 	add.w	r3, r7, #24
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 fc58 	bl	8002338 <HAL_RCC_OscConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000a8e:	f000 f82b 	bl	8000ae8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a92:	230f      	movs	r3, #15
 8000a94:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a96:	2303      	movs	r3, #3
 8000a98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 ff5c 	bl	8002968 <HAL_RCC_ClockConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000ab6:	f000 f817 	bl	8000ae8 <Error_Handler>
  }
}
 8000aba:	bf00      	nop
 8000abc:	3750      	adds	r7, #80	; 0x50
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d101      	bne.n	8000ada <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ad6:	f000 fb15 	bl	8001104 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40012c00 	.word	0x40012c00

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <Error_Handler+0x8>
	...

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_MspInit+0x50>)
 8000afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afe:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <HAL_MspInit+0x50>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6613      	str	r3, [r2, #96]	; 0x60
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <HAL_MspInit+0x50>)
 8000b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <HAL_MspInit+0x50>)
 8000b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b16:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <HAL_MspInit+0x50>)
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_MspInit+0x50>)
 8000b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	210f      	movs	r1, #15
 8000b2e:	f06f 0001 	mvn.w	r0, #1
 8000b32:	f000 fbbd 	bl	80012b0 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b36:	f001 fbef 	bl	8002318 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40021000 	.word	0x40021000

08000b48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	; 0x30
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b5e:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <HAL_InitTick+0xcc>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	4a2c      	ldr	r2, [pc, #176]	; (8000c14 <HAL_InitTick+0xcc>)
 8000b64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b68:	6613      	str	r3, [r2, #96]	; 0x60
 8000b6a:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <HAL_InitTick+0xcc>)
 8000b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b76:	f107 020c 	add.w	r2, r7, #12
 8000b7a:	f107 0310 	add.w	r3, r7, #16
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f002 f8c7 	bl	8002d14 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b86:	f002 f8af 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 8000b8a:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b8e:	4a22      	ldr	r2, [pc, #136]	; (8000c18 <HAL_InitTick+0xd0>)
 8000b90:	fba2 2303 	umull	r2, r3, r2, r3
 8000b94:	0c9b      	lsrs	r3, r3, #18
 8000b96:	3b01      	subs	r3, #1
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b9a:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <HAL_InitTick+0xd4>)
 8000b9c:	4a20      	ldr	r2, [pc, #128]	; (8000c20 <HAL_InitTick+0xd8>)
 8000b9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ba0:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <HAL_InitTick+0xd4>)
 8000ba2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ba6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ba8:	4a1c      	ldr	r2, [pc, #112]	; (8000c1c <HAL_InitTick+0xd4>)
 8000baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bac:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bae:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <HAL_InitTick+0xd4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb4:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <HAL_InitTick+0xd4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000bba:	4818      	ldr	r0, [pc, #96]	; (8000c1c <HAL_InitTick+0xd4>)
 8000bbc:	f002 fb12 	bl	80031e4 <HAL_TIM_Base_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000bc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d11b      	bne.n	8000c06 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000bce:	4813      	ldr	r0, [pc, #76]	; (8000c1c <HAL_InitTick+0xd4>)
 8000bd0:	f002 fbc2 	bl	8003358 <HAL_TIM_Base_Start_IT>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000bda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d111      	bne.n	8000c06 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000be2:	2019      	movs	r0, #25
 8000be4:	f000 fb7e 	bl	80012e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b0f      	cmp	r3, #15
 8000bec:	d808      	bhi.n	8000c00 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	6879      	ldr	r1, [r7, #4]
 8000bf2:	2019      	movs	r0, #25
 8000bf4:	f000 fb5c 	bl	80012b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <HAL_InitTick+0xdc>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	e002      	b.n	8000c06 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 8000c06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3730      	adds	r7, #48	; 0x30
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000
 8000c18:	431bde83 	.word	0x431bde83
 8000c1c:	20001b30 	.word	0x20001b30
 8000c20:	40012c00 	.word	0x40012c00
 8000c24:	20000004 	.word	0x20000004

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <NMI_Handler+0x4>

08000c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <BusFault_Handler+0x4>

08000c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <UsageFault_Handler+0x4>

08000c46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ULRT_ECHO_Pin);
 8000c58:	2002      	movs	r0, #2
 8000c5a:	f001 faa1 	bl	80021a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <FDCAN1_IT0_IRQHandler+0x10>)
 8000c6a:	f000 fe80 	bl	800196e <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20001acc 	.word	0x20001acc

08000c78 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c7e:	f002 fbd5 	bl	800342c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20001b30 	.word	0x20001b30

08000c8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <TIM6_DAC_IRQHandler+0x10>)
 8000c92:	f002 fbcb 	bl	800342c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20001bc8 	.word	0x20001bc8

08000ca0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <TIM7_IRQHandler+0x10>)
 8000ca6:	f002 fbc1 	bl	800342c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20001c14 	.word	0x20001c14

08000cb4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <SystemInit+0x20>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cbe:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <SystemInit+0x20>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <MX_TIM6_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_TIM6_Init+0x64>)
 8000cea:	4a15      	ldr	r2, [pc, #84]	; (8000d40 <MX_TIM6_Init+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <MX_TIM6_Init+0x64>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_TIM6_Init+0x64>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <MX_TIM6_Init+0x64>)
 8000cfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d00:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_TIM6_Init+0x64>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d08:	480c      	ldr	r0, [pc, #48]	; (8000d3c <MX_TIM6_Init+0x64>)
 8000d0a:	f002 fa6b 	bl	80031e4 <HAL_TIM_Base_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000d14:	f7ff fee8 	bl	8000ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_TIM6_Init+0x64>)
 8000d26:	f002 ff4f 	bl	8003bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000d30:	f7ff feda 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20001bc8 	.word	0x20001bc8
 8000d40:	40001000 	.word	0x40001000

08000d44 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <MX_TIM7_Init+0x64>)
 8000d56:	4a15      	ldr	r2, [pc, #84]	; (8000dac <MX_TIM7_Init+0x68>)
 8000d58:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <MX_TIM7_Init+0x64>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <MX_TIM7_Init+0x64>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <MX_TIM7_Init+0x64>)
 8000d68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d6c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <MX_TIM7_Init+0x64>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d74:	480c      	ldr	r0, [pc, #48]	; (8000da8 <MX_TIM7_Init+0x64>)
 8000d76:	f002 fa35 	bl	80031e4 <HAL_TIM_Base_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000d80:	f7ff feb2 	bl	8000ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d84:	2300      	movs	r3, #0
 8000d86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_TIM7_Init+0x64>)
 8000d92:	f002 ff19 	bl	8003bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000d9c:	f7ff fea4 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20001c14 	.word	0x20001c14
 8000dac:	40001400 	.word	0x40001400

08000db0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000dce:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <MX_TIM8_Init+0xa0>)
 8000dd0:	4a20      	ldr	r2, [pc, #128]	; (8000e54 <MX_TIM8_Init+0xa4>)
 8000dd2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 80-1;
 8000dd4:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <MX_TIM8_Init+0xa0>)
 8000dd6:	224f      	movs	r2, #79	; 0x4f
 8000dd8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dda:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <MX_TIM8_Init+0xa0>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65534;
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <MX_TIM8_Init+0xa0>)
 8000de2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000de6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <MX_TIM8_Init+0xa0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <MX_TIM8_Init+0xa0>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df4:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <MX_TIM8_Init+0xa0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000dfa:	4815      	ldr	r0, [pc, #84]	; (8000e50 <MX_TIM8_Init+0xa0>)
 8000dfc:	f002 f9f2 	bl	80031e4 <HAL_TIM_Base_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8000e06:	f7ff fe6f 	bl	8000ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	4619      	mov	r1, r3
 8000e16:	480e      	ldr	r0, [pc, #56]	; (8000e50 <MX_TIM8_Init+0xa0>)
 8000e18:	f002 fc88 	bl	800372c <HAL_TIM_ConfigClockSource>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8000e22:	f7ff fe61 	bl	8000ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	4619      	mov	r1, r3
 8000e36:	4806      	ldr	r0, [pc, #24]	; (8000e50 <MX_TIM8_Init+0xa0>)
 8000e38:	f002 fec6 	bl	8003bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000e42:	f7ff fe51 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	3720      	adds	r7, #32
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20001b7c 	.word	0x20001b7c
 8000e54:	40013400 	.word	0x40013400

08000e58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a23      	ldr	r2, [pc, #140]	; (8000ef4 <HAL_TIM_Base_MspInit+0x9c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d114      	bne.n	8000e94 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e6a:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <HAL_TIM_Base_MspInit+0xa0>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6e:	4a22      	ldr	r2, [pc, #136]	; (8000ef8 <HAL_TIM_Base_MspInit+0xa0>)
 8000e70:	f043 0310 	orr.w	r3, r3, #16
 8000e74:	6593      	str	r3, [r2, #88]	; 0x58
 8000e76:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <HAL_TIM_Base_MspInit+0xa0>)
 8000e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7a:	f003 0310 	and.w	r3, r3, #16
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2105      	movs	r1, #5
 8000e86:	2036      	movs	r0, #54	; 0x36
 8000e88:	f000 fa12 	bl	80012b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e8c:	2036      	movs	r0, #54	; 0x36
 8000e8e:	f000 fa29 	bl	80012e4 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000e92:	e02a      	b.n	8000eea <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a18      	ldr	r2, [pc, #96]	; (8000efc <HAL_TIM_Base_MspInit+0xa4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d114      	bne.n	8000ec8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e9e:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <HAL_TIM_Base_MspInit+0xa0>)
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea2:	4a15      	ldr	r2, [pc, #84]	; (8000ef8 <HAL_TIM_Base_MspInit+0xa0>)
 8000ea4:	f043 0320 	orr.w	r3, r3, #32
 8000ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <HAL_TIM_Base_MspInit+0xa0>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eae:	f003 0320 	and.w	r3, r3, #32
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2105      	movs	r1, #5
 8000eba:	2037      	movs	r0, #55	; 0x37
 8000ebc:	f000 f9f8 	bl	80012b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000ec0:	2037      	movs	r0, #55	; 0x37
 8000ec2:	f000 fa0f 	bl	80012e4 <HAL_NVIC_EnableIRQ>
}
 8000ec6:	e010      	b.n	8000eea <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0c      	ldr	r2, [pc, #48]	; (8000f00 <HAL_TIM_Base_MspInit+0xa8>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d10b      	bne.n	8000eea <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <HAL_TIM_Base_MspInit+0xa0>)
 8000ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed6:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <HAL_TIM_Base_MspInit+0xa0>)
 8000ed8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000edc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_TIM_Base_MspInit+0xa0>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
}
 8000eea:	bf00      	nop
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40001000 	.word	0x40001000
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40001400 	.word	0x40001400
 8000f00:	40013400 	.word	0x40013400

08000f04 <delay_us>:
  }
}

/* USER CODE BEGIN 1 */
void delay_us(uint16_t us)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim8, 0);
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <delay_us+0x30>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim8) < us);
 8000f16:	bf00      	nop
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <delay_us+0x30>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d3f9      	bcc.n	8000f18 <delay_us+0x14>
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20001b7c 	.word	0x20001b7c

08000f38 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <MX_USART2_UART_Init+0x90>)
 8000f3e:	4a23      	ldr	r2, [pc, #140]	; (8000fcc <MX_USART2_UART_Init+0x94>)
 8000f40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f42:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <MX_USART2_UART_Init+0x90>)
 8000f44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4a:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <MX_USART2_UART_Init+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f50:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <MX_USART2_UART_Init+0x90>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <MX_USART2_UART_Init+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <MX_USART2_UART_Init+0x90>)
 8000f5e:	220c      	movs	r2, #12
 8000f60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f62:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <MX_USART2_UART_Init+0x90>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f68:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <MX_USART2_UART_Init+0x90>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6e:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <MX_USART2_UART_Init+0x90>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_USART2_UART_Init+0x90>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <MX_USART2_UART_Init+0x90>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f80:	4811      	ldr	r0, [pc, #68]	; (8000fc8 <MX_USART2_UART_Init+0x90>)
 8000f82:	f002 fee9 	bl	8003d58 <HAL_UART_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f8c:	f7ff fdac 	bl	8000ae8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f90:	2100      	movs	r1, #0
 8000f92:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <MX_USART2_UART_Init+0x90>)
 8000f94:	f003 fc50 	bl	8004838 <HAL_UARTEx_SetTxFifoThreshold>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f9e:	f7ff fda3 	bl	8000ae8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4808      	ldr	r0, [pc, #32]	; (8000fc8 <MX_USART2_UART_Init+0x90>)
 8000fa6:	f003 fc85 	bl	80048b4 <HAL_UARTEx_SetRxFifoThreshold>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000fb0:	f7ff fd9a 	bl	8000ae8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <MX_USART2_UART_Init+0x90>)
 8000fb6:	f003 fc06 	bl	80047c6 <HAL_UARTEx_DisableFifoMode>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000fc0:	f7ff fd92 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20001c60 	.word	0x20001c60
 8000fcc:	40004400 	.word	0x40004400

08000fd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b09a      	sub	sp, #104	; 0x68
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	2244      	movs	r2, #68	; 0x44
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f006 fadf 	bl	80075b4 <memset>
  if(uartHandle->Instance==USART2)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a1f      	ldr	r2, [pc, #124]	; (8001078 <HAL_UART_MspInit+0xa8>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d136      	bne.n	800106e <HAL_UART_MspInit+0x9e>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001000:	2302      	movs	r3, #2
 8001002:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001004:	2300      	movs	r3, #0
 8001006:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	4618      	mov	r0, r3
 800100e:	f001 fef9 	bl	8002e04 <HAL_RCCEx_PeriphCLKConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001018:	f7ff fd66 	bl	8000ae8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_UART_MspInit+0xac>)
 800101e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001020:	4a16      	ldr	r2, [pc, #88]	; (800107c <HAL_UART_MspInit+0xac>)
 8001022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001026:	6593      	str	r3, [r2, #88]	; 0x58
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_UART_MspInit+0xac>)
 800102a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_UART_MspInit+0xac>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	4a10      	ldr	r2, [pc, #64]	; (800107c <HAL_UART_MspInit+0xac>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_UART_MspInit+0xac>)
 8001042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800104c:	230c      	movs	r3, #12
 800104e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800105c:	2307      	movs	r3, #7
 800105e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001064:	4619      	mov	r1, r3
 8001066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106a:	f000 feff 	bl	8001e6c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800106e:	bf00      	nop
 8001070:	3768      	adds	r7, #104	; 0x68
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40004400 	.word	0x40004400
 800107c:	40021000 	.word	0x40021000

08001080 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001082:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <LoopForever+0x6>)
  ldr r1, =_edata
 8001086:	490e      	ldr	r1, [pc, #56]	; (80010c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001088:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <LoopForever+0xe>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800109c:	4c0b      	ldr	r4, [pc, #44]	; (80010cc <LoopForever+0x16>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010aa:	f7ff fe03 	bl	8000cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ae:	f006 fa4d 	bl	800754c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010b2:	f7ff fc9f 	bl	80009f4 <main>

080010b6 <LoopForever>:

LoopForever:
    b LoopForever
 80010b6:	e7fe      	b.n	80010b6 <LoopForever>
  ldr   r0, =_estack
 80010b8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80010c4:	080078fc 	.word	0x080078fc
  ldr r2, =_sbss
 80010c8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80010cc:	20001d40 	.word	0x20001d40

080010d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC1_2_IRQHandler>

080010d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010dc:	2003      	movs	r0, #3
 80010de:	f000 f8dc 	bl	800129a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010e2:	2005      	movs	r0, #5
 80010e4:	f7ff fd30 	bl	8000b48 <HAL_InitTick>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	71fb      	strb	r3, [r7, #7]
 80010f2:	e001      	b.n	80010f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010f4:	f7ff fcfe 	bl	8000af4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f8:	79fb      	ldrb	r3, [r7, #7]

}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <HAL_IncTick+0x1c>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <HAL_IncTick+0x20>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4413      	add	r3, r2
 8001112:	4a03      	ldr	r2, [pc, #12]	; (8001120 <HAL_IncTick+0x1c>)
 8001114:	6013      	str	r3, [r2, #0]
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	20001cf0 	.word	0x20001cf0
 8001124:	20000008 	.word	0x20000008

08001128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return uwTick;
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <HAL_GetTick+0x14>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20001cf0 	.word	0x20001cf0

08001140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800115c:	4013      	ands	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800116c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001172:	4a04      	ldr	r2, [pc, #16]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	60d3      	str	r3, [r2, #12]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <__NVIC_GetPriorityGrouping+0x18>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	f003 0307 	and.w	r3, r3, #7
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	db0b      	blt.n	80011ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	f003 021f 	and.w	r2, r3, #31
 80011bc:	4907      	ldr	r1, [pc, #28]	; (80011dc <__NVIC_EnableIRQ+0x38>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	095b      	lsrs	r3, r3, #5
 80011c4:	2001      	movs	r0, #1
 80011c6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db0a      	blt.n	800120a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	490c      	ldr	r1, [pc, #48]	; (800122c <__NVIC_SetPriority+0x4c>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001208:	e00a      	b.n	8001220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4908      	ldr	r1, [pc, #32]	; (8001230 <__NVIC_SetPriority+0x50>)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	3b04      	subs	r3, #4
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	440b      	add	r3, r1
 800121e:	761a      	strb	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f1c3 0307 	rsb	r3, r3, #7
 800124e:	2b04      	cmp	r3, #4
 8001250:	bf28      	it	cs
 8001252:	2304      	movcs	r3, #4
 8001254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3304      	adds	r3, #4
 800125a:	2b06      	cmp	r3, #6
 800125c:	d902      	bls.n	8001264 <NVIC_EncodePriority+0x30>
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3b03      	subs	r3, #3
 8001262:	e000      	b.n	8001266 <NVIC_EncodePriority+0x32>
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	f04f 32ff 	mov.w	r2, #4294967295
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800127c:	f04f 31ff 	mov.w	r1, #4294967295
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa01 f303 	lsl.w	r3, r1, r3
 8001286:	43d9      	mvns	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	4313      	orrs	r3, r2
         );
}
 800128e:	4618      	mov	r0, r3
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ff4c 	bl	8001140 <__NVIC_SetPriorityGrouping>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012be:	f7ff ff63 	bl	8001188 <__NVIC_GetPriorityGrouping>
 80012c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	68b9      	ldr	r1, [r7, #8]
 80012c8:	6978      	ldr	r0, [r7, #20]
 80012ca:	f7ff ffb3 	bl	8001234 <NVIC_EncodePriority>
 80012ce:	4602      	mov	r2, r0
 80012d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d4:	4611      	mov	r1, r2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff82 	bl	80011e0 <__NVIC_SetPriority>
}
 80012dc:	bf00      	nop
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ff56 	bl	80011a4 <__NVIC_EnableIRQ>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e147      	b.n	80015a2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d106      	bne.n	800132c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff f9cc 	bl	80006c4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	699a      	ldr	r2, [r3, #24]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0210 	bic.w	r2, r2, #16
 800133a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800133c:	f7ff fef4 	bl	8001128 <HAL_GetTick>
 8001340:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001342:	e012      	b.n	800136a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001344:	f7ff fef0 	bl	8001128 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b0a      	cmp	r3, #10
 8001350:	d90b      	bls.n	800136a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001356:	f043 0201 	orr.w	r2, r3, #1
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2203      	movs	r2, #3
 8001362:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e11b      	b.n	80015a2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b08      	cmp	r3, #8
 8001376:	d0e5      	beq.n	8001344 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	699a      	ldr	r2, [r3, #24]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f042 0201 	orr.w	r2, r2, #1
 8001386:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001388:	f7ff fece 	bl	8001128 <HAL_GetTick>
 800138c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800138e:	e012      	b.n	80013b6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001390:	f7ff feca 	bl	8001128 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b0a      	cmp	r3, #10
 800139c:	d90b      	bls.n	80013b6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a2:	f043 0201 	orr.w	r2, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2203      	movs	r2, #3
 80013ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e0f5      	b.n	80015a2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0e5      	beq.n	8001390 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	699a      	ldr	r2, [r3, #24]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 0202 	orr.w	r2, r2, #2
 80013d2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a74      	ldr	r2, [pc, #464]	; (80015ac <HAL_FDCAN_Init+0x2ac>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d103      	bne.n	80013e6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80013de:	4a74      	ldr	r2, [pc, #464]	; (80015b0 <HAL_FDCAN_Init+0x2b0>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	7c1b      	ldrb	r3, [r3, #16]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d108      	bne.n	8001400 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	699a      	ldr	r2, [r3, #24]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013fc:	619a      	str	r2, [r3, #24]
 80013fe:	e007      	b.n	8001410 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	699a      	ldr	r2, [r3, #24]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800140e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	7c5b      	ldrb	r3, [r3, #17]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d108      	bne.n	800142a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	699a      	ldr	r2, [r3, #24]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001426:	619a      	str	r2, [r3, #24]
 8001428:	e007      	b.n	800143a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	699a      	ldr	r2, [r3, #24]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001438:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	7c9b      	ldrb	r3, [r3, #18]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d108      	bne.n	8001454 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	699a      	ldr	r2, [r3, #24]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001450:	619a      	str	r2, [r3, #24]
 8001452:	e007      	b.n	8001464 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	699a      	ldr	r2, [r3, #24]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001462:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	699a      	ldr	r2, [r3, #24]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001488:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	691a      	ldr	r2, [r3, #16]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 0210 	bic.w	r2, r2, #16
 8001498:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d108      	bne.n	80014b4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	699a      	ldr	r2, [r3, #24]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f042 0204 	orr.w	r2, r2, #4
 80014b0:	619a      	str	r2, [r3, #24]
 80014b2:	e02c      	b.n	800150e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d028      	beq.n	800150e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d01c      	beq.n	80014fe <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	699a      	ldr	r2, [r3, #24]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014d2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	691a      	ldr	r2, [r3, #16]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0210 	orr.w	r2, r2, #16
 80014e2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d110      	bne.n	800150e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	699a      	ldr	r2, [r3, #24]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0220 	orr.w	r2, r2, #32
 80014fa:	619a      	str	r2, [r3, #24]
 80014fc:	e007      	b.n	800150e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	699a      	ldr	r2, [r3, #24]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f042 0220 	orr.w	r2, r2, #32
 800150c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	3b01      	subs	r3, #1
 8001514:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	3b01      	subs	r3, #1
 800151c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800151e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001526:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	3b01      	subs	r3, #1
 8001530:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001536:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001538:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001542:	d115      	bne.n	8001570 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001548:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154e:	3b01      	subs	r3, #1
 8001550:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001552:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001558:	3b01      	subs	r3, #1
 800155a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800155c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	3b01      	subs	r3, #1
 8001566:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800156c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800156e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 fb9e 	bl	8001cc8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40006400 	.word	0x40006400
 80015b0:	40006500 	.word	0x40006500

080015b4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b087      	sub	sp, #28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80015c4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80015c6:	7dfb      	ldrb	r3, [r7, #23]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d002      	beq.n	80015d2 <HAL_FDCAN_ConfigFilter+0x1e>
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d13d      	bne.n	800164e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d119      	bne.n	800160e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80015e6:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80015ee:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e01d      	b.n	800164a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	075a      	lsls	r2, r3, #29
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	079a      	lsls	r2, r3, #30
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	4313      	orrs	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4413      	add	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	3304      	adds	r3, #4
 8001642:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	e006      	b.n	800165c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001652:	f043 0202 	orr.w	r2, r3, #2
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
  }
}
 800165c:	4618      	mov	r0, r3
 800165e:	371c      	adds	r7, #28
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
 8001674:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b01      	cmp	r3, #1
 8001680:	d116      	bne.n	80016b0 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800168a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	011a      	lsls	r2, r3, #4
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	431a      	orrs	r2, r3
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	431a      	orrs	r2, r3
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	431a      	orrs	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	e006      	b.n	80016be <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016b4:	f043 0204 	orr.w	r2, r3, #4
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
  }
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d110      	bne.n	8001700 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2202      	movs	r2, #2
 80016e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	699a      	ldr	r2, [r3, #24]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0201 	bic.w	r2, r2, #1
 80016f4:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	e006      	b.n	800170e <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001704:	f043 0204 	orr.w	r2, r3, #4
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
  }
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b086      	sub	sp, #24
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d12c      	bne.n	800178c <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800173a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d007      	beq.n	8001752 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001746:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e023      	b.n	800179a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800175a:	0c1b      	lsrs	r3, r3, #16
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	68b9      	ldr	r1, [r7, #8]
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f000 fb03 	bl	8001d74 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2101      	movs	r1, #1
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	fa01 f202 	lsl.w	r2, r1, r2
 800177a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800177e:	2201      	movs	r2, #1
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	409a      	lsls	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	e006      	b.n	800179a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001790:	f043 0208 	orr.w	r2, r3, #8
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
  }
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b087      	sub	sp, #28
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	60f8      	str	r0, [r7, #12]
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80017b4:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d003      	beq.n	80017c4 <HAL_FDCAN_ActivateNotification+0x22>
 80017bc:	7dfb      	ldrb	r3, [r7, #23]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	f040 80c8 	bne.w	8001954 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ca:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d004      	beq.n	80017e0 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d03b      	beq.n	8001858 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d004      	beq.n	80017f4 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d031      	beq.n	8001858 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d004      	beq.n	8001808 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	d027      	beq.n	8001858 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800180e:	2b00      	cmp	r3, #0
 8001810:	d004      	beq.n	800181c <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	2b00      	cmp	r3, #0
 800181a:	d01d      	beq.n	8001858 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001822:	2b00      	cmp	r3, #0
 8001824:	d004      	beq.n	8001830 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	f003 0310 	and.w	r3, r3, #16
 800182c:	2b00      	cmp	r3, #0
 800182e:	d013      	beq.n	8001858 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001836:	2b00      	cmp	r3, #0
 8001838:	d004      	beq.n	8001844 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	f003 0320 	and.w	r3, r3, #32
 8001840:	2b00      	cmp	r3, #0
 8001842:	d009      	beq.n	8001858 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00c      	beq.n	8001868 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001854:	2b00      	cmp	r3, #0
 8001856:	d107      	bne.n	8001868 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0201 	orr.w	r2, r2, #1
 8001866:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	2b00      	cmp	r3, #0
 8001870:	d004      	beq.n	800187c <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d13b      	bne.n	80018f4 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001882:	2b00      	cmp	r3, #0
 8001884:	d004      	beq.n	8001890 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d131      	bne.n	80018f4 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001896:	2b00      	cmp	r3, #0
 8001898:	d004      	beq.n	80018a4 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d127      	bne.n	80018f4 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d004      	beq.n	80018b8 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d11d      	bne.n	80018f4 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d004      	beq.n	80018cc <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	f003 0310 	and.w	r3, r3, #16
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d113      	bne.n	80018f4 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d004      	beq.n	80018e0 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	f003 0320 	and.w	r3, r3, #32
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d109      	bne.n	80018f4 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00c      	beq.n	8001904 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d007      	beq.n	8001904 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0202 	orr.w	r2, r2, #2
 8001902:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190a:	2b00      	cmp	r3, #0
 800190c:	d009      	beq.n	8001922 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	430a      	orrs	r2, r1
 800191e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001928:	2b00      	cmp	r3, #0
 800192a:	d009      	beq.n	8001940 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	430a      	orrs	r2, r1
 800193c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	430a      	orrs	r2, r1
 800194e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	e006      	b.n	8001962 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001958:	f043 0202 	orr.w	r2, r3, #2
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
  }
}
 8001962:	4618      	mov	r0, r3
 8001964:	371c      	adds	r7, #28
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b08a      	sub	sp, #40	; 0x28
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800197c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800198a:	4013      	ands	r3, r2
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a0:	6a3a      	ldr	r2, [r7, #32]
 80019a2:	4013      	ands	r3, r2
 80019a4:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019b0:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019c4:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80019c8:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019dc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80019e0:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	4013      	ands	r3, r2
 80019ec:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00d      	beq.n	8001a18 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d006      	beq.n	8001a18 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2240      	movs	r2, #64	; 0x40
 8001a10:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f939 	bl	8001c8a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d01b      	beq.n	8001a5e <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d014      	beq.n	8001a5e <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a3c:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a54:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001a56:	6939      	ldr	r1, [r7, #16]
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f8f7 	bl	8001c4c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d007      	beq.n	8001a74 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001a6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f8b6 	bl	8001be0 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6a3a      	ldr	r2, [r7, #32]
 8001a80:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001a82:	6a39      	ldr	r1, [r7, #32]
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f8b6 	bl	8001bf6 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d007      	beq.n	8001aa0 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	69fa      	ldr	r2, [r7, #28]
 8001a96:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001a98:	69f9      	ldr	r1, [r7, #28]
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f8b6 	bl	8001c0c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00e      	beq.n	8001acc <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d007      	beq.n	8001acc <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ac4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f8ab 	bl	8001c22 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d01a      	beq.n	8001b10 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d013      	beq.n	8001b10 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001af0:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4013      	ands	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2280      	movs	r2, #128	; 0x80
 8001b06:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001b08:	68f9      	ldr	r1, [r7, #12]
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f893 	bl	8001c36 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00e      	beq.n	8001b3c <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b34:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f893 	bl	8001c62 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00e      	beq.n	8001b68 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d007      	beq.n	8001b68 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b60:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f887 	bl	8001c76 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d011      	beq.n	8001b9a <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00a      	beq.n	8001b9a <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b8c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b92:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d007      	beq.n	8001bb0 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001ba8:	6979      	ldr	r1, [r7, #20]
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f881 	bl	8001cb2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d009      	beq.n	8001bca <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f863 	bl	8001c9e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001bd8:	bf00      	nop
 8001bda:	3728      	adds	r7, #40	; 0x28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001cd0:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001cd2:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ce2:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cea:	041a      	lsls	r2, r3, #16
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d08:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d10:	061a      	lsls	r2, r3, #24
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	e005      	b.n	8001d56 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	3304      	adds	r3, #4
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d3f3      	bcc.n	8001d4a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001d62:	bf00      	nop
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	4000a400 	.word	0x4000a400

08001d74 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b089      	sub	sp, #36	; 0x24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10a      	bne.n	8001da0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001d92:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61fb      	str	r3, [r7, #28]
 8001d9e:	e00a      	b.n	8001db6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001da8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001dae:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001db0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001db4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001dc0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001dc6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001dcc:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4413      	add	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	440b      	add	r3, r1
 8001de6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	69fa      	ldr	r2, [r7, #28]
 8001dec:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	3304      	adds	r3, #4
 8001df2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	e020      	b.n	8001e48 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3303      	adds	r3, #3
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	3302      	adds	r3, #2
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	440b      	add	r3, r1
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e1e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	3301      	adds	r3, #1
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	440b      	add	r3, r1
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001e2c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	440a      	add	r2, r1
 8001e34:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001e36:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	3304      	adds	r3, #4
 8001e40:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	3304      	adds	r3, #4
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	0c1b      	lsrs	r3, r3, #16
 8001e4e:	4a06      	ldr	r2, [pc, #24]	; (8001e68 <FDCAN_CopyMessageToRAM+0xf4>)
 8001e50:	5cd3      	ldrb	r3, [r2, r3]
 8001e52:	461a      	mov	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d3d5      	bcc.n	8001e06 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	bf00      	nop
 8001e5e:	3724      	adds	r7, #36	; 0x24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	08007854 	.word	0x08007854

08001e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e7a:	e15a      	b.n	8002132 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2101      	movs	r1, #1
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 814c 	beq.w	800212c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d005      	beq.n	8001eac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d130      	bne.n	8001f0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	091b      	lsrs	r3, r3, #4
 8001ef8:	f003 0201 	and.w	r2, r3, #1
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d017      	beq.n	8001f4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	2203      	movs	r2, #3
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d123      	bne.n	8001f9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	08da      	lsrs	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3208      	adds	r2, #8
 8001f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	691a      	ldr	r2, [r3, #16]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	08da      	lsrs	r2, r3, #3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3208      	adds	r2, #8
 8001f98:	6939      	ldr	r1, [r7, #16]
 8001f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	2203      	movs	r2, #3
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0203 	and.w	r2, r3, #3
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 80a6 	beq.w	800212c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe0:	4b5b      	ldr	r3, [pc, #364]	; (8002150 <HAL_GPIO_Init+0x2e4>)
 8001fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe4:	4a5a      	ldr	r2, [pc, #360]	; (8002150 <HAL_GPIO_Init+0x2e4>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6613      	str	r3, [r2, #96]	; 0x60
 8001fec:	4b58      	ldr	r3, [pc, #352]	; (8002150 <HAL_GPIO_Init+0x2e4>)
 8001fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ff8:	4a56      	ldr	r2, [pc, #344]	; (8002154 <HAL_GPIO_Init+0x2e8>)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	3302      	adds	r3, #2
 8002000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002004:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	220f      	movs	r2, #15
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002022:	d01f      	beq.n	8002064 <HAL_GPIO_Init+0x1f8>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a4c      	ldr	r2, [pc, #304]	; (8002158 <HAL_GPIO_Init+0x2ec>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d019      	beq.n	8002060 <HAL_GPIO_Init+0x1f4>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a4b      	ldr	r2, [pc, #300]	; (800215c <HAL_GPIO_Init+0x2f0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d013      	beq.n	800205c <HAL_GPIO_Init+0x1f0>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a4a      	ldr	r2, [pc, #296]	; (8002160 <HAL_GPIO_Init+0x2f4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d00d      	beq.n	8002058 <HAL_GPIO_Init+0x1ec>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a49      	ldr	r2, [pc, #292]	; (8002164 <HAL_GPIO_Init+0x2f8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d007      	beq.n	8002054 <HAL_GPIO_Init+0x1e8>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a48      	ldr	r2, [pc, #288]	; (8002168 <HAL_GPIO_Init+0x2fc>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d101      	bne.n	8002050 <HAL_GPIO_Init+0x1e4>
 800204c:	2305      	movs	r3, #5
 800204e:	e00a      	b.n	8002066 <HAL_GPIO_Init+0x1fa>
 8002050:	2306      	movs	r3, #6
 8002052:	e008      	b.n	8002066 <HAL_GPIO_Init+0x1fa>
 8002054:	2304      	movs	r3, #4
 8002056:	e006      	b.n	8002066 <HAL_GPIO_Init+0x1fa>
 8002058:	2303      	movs	r3, #3
 800205a:	e004      	b.n	8002066 <HAL_GPIO_Init+0x1fa>
 800205c:	2302      	movs	r3, #2
 800205e:	e002      	b.n	8002066 <HAL_GPIO_Init+0x1fa>
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <HAL_GPIO_Init+0x1fa>
 8002064:	2300      	movs	r3, #0
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	f002 0203 	and.w	r2, r2, #3
 800206c:	0092      	lsls	r2, r2, #2
 800206e:	4093      	lsls	r3, r2
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002076:	4937      	ldr	r1, [pc, #220]	; (8002154 <HAL_GPIO_Init+0x2e8>)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	3302      	adds	r3, #2
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002084:	4b39      	ldr	r3, [pc, #228]	; (800216c <HAL_GPIO_Init+0x300>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	43db      	mvns	r3, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020a8:	4a30      	ldr	r2, [pc, #192]	; (800216c <HAL_GPIO_Init+0x300>)
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020ae:	4b2f      	ldr	r3, [pc, #188]	; (800216c <HAL_GPIO_Init+0x300>)
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020d2:	4a26      	ldr	r2, [pc, #152]	; (800216c <HAL_GPIO_Init+0x300>)
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80020d8:	4b24      	ldr	r3, [pc, #144]	; (800216c <HAL_GPIO_Init+0x300>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020fc:	4a1b      	ldr	r2, [pc, #108]	; (800216c <HAL_GPIO_Init+0x300>)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002102:	4b1a      	ldr	r3, [pc, #104]	; (800216c <HAL_GPIO_Init+0x300>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	43db      	mvns	r3, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4013      	ands	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4313      	orrs	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002126:	4a11      	ldr	r2, [pc, #68]	; (800216c <HAL_GPIO_Init+0x300>)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	3301      	adds	r3, #1
 8002130:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	f47f ae9d 	bne.w	8001e7c <HAL_GPIO_Init+0x10>
  }
}
 8002142:	bf00      	nop
 8002144:	bf00      	nop
 8002146:	371c      	adds	r7, #28
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40021000 	.word	0x40021000
 8002154:	40010000 	.word	0x40010000
 8002158:	48000400 	.word	0x48000400
 800215c:	48000800 	.word	0x48000800
 8002160:	48000c00 	.word	0x48000c00
 8002164:	48001000 	.word	0x48001000
 8002168:	48001400 	.word	0x48001400
 800216c:	40010400 	.word	0x40010400

08002170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	807b      	strh	r3, [r7, #2]
 800217c:	4613      	mov	r3, r2
 800217e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002180:	787b      	ldrb	r3, [r7, #1]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002186:	887a      	ldrh	r2, [r7, #2]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800218c:	e002      	b.n	8002194 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021aa:	4b08      	ldr	r3, [pc, #32]	; (80021cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021ac:	695a      	ldr	r2, [r3, #20]
 80021ae:	88fb      	ldrh	r3, [r7, #6]
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d006      	beq.n	80021c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021b6:	4a05      	ldr	r2, [pc, #20]	; (80021cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021b8:	88fb      	ldrh	r3, [r7, #6]
 80021ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021bc:	88fb      	ldrh	r3, [r7, #6]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe fc06 	bl	80009d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40010400 	.word	0x40010400

080021d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d141      	bne.n	8002262 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021de:	4b4b      	ldr	r3, [pc, #300]	; (800230c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ea:	d131      	bne.n	8002250 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021ec:	4b47      	ldr	r3, [pc, #284]	; (800230c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021f2:	4a46      	ldr	r2, [pc, #280]	; (800230c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021fc:	4b43      	ldr	r3, [pc, #268]	; (800230c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002204:	4a41      	ldr	r2, [pc, #260]	; (800230c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002206:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800220a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800220c:	4b40      	ldr	r3, [pc, #256]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2232      	movs	r2, #50	; 0x32
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	4a3f      	ldr	r2, [pc, #252]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002218:	fba2 2303 	umull	r2, r3, r2, r3
 800221c:	0c9b      	lsrs	r3, r3, #18
 800221e:	3301      	adds	r3, #1
 8002220:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002222:	e002      	b.n	800222a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	3b01      	subs	r3, #1
 8002228:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800222a:	4b38      	ldr	r3, [pc, #224]	; (800230c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002236:	d102      	bne.n	800223e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f2      	bne.n	8002224 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800223e:	4b33      	ldr	r3, [pc, #204]	; (800230c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800224a:	d158      	bne.n	80022fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e057      	b.n	8002300 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002250:	4b2e      	ldr	r3, [pc, #184]	; (800230c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002256:	4a2d      	ldr	r2, [pc, #180]	; (800230c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800225c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002260:	e04d      	b.n	80022fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002268:	d141      	bne.n	80022ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800226a:	4b28      	ldr	r3, [pc, #160]	; (800230c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002276:	d131      	bne.n	80022dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002278:	4b24      	ldr	r3, [pc, #144]	; (800230c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800227a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800227e:	4a23      	ldr	r2, [pc, #140]	; (800230c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002284:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002288:	4b20      	ldr	r3, [pc, #128]	; (800230c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002290:	4a1e      	ldr	r2, [pc, #120]	; (800230c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002296:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002298:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2232      	movs	r2, #50	; 0x32
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	4a1c      	ldr	r2, [pc, #112]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022a4:	fba2 2303 	umull	r2, r3, r2, r3
 80022a8:	0c9b      	lsrs	r3, r3, #18
 80022aa:	3301      	adds	r3, #1
 80022ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ae:	e002      	b.n	80022b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022b6:	4b15      	ldr	r3, [pc, #84]	; (800230c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c2:	d102      	bne.n	80022ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f2      	bne.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d6:	d112      	bne.n	80022fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e011      	b.n	8002300 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022e2:	4a0a      	ldr	r2, [pc, #40]	; (800230c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022ec:	e007      	b.n	80022fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022ee:	4b07      	ldr	r3, [pc, #28]	; (800230c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022f6:	4a05      	ldr	r2, [pc, #20]	; (800230c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	40007000 	.word	0x40007000
 8002310:	20000000 	.word	0x20000000
 8002314:	431bde83 	.word	0x431bde83

08002318 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	4a04      	ldr	r2, [pc, #16]	; (8002334 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002322:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002326:	6093      	str	r3, [r2, #8]
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40007000 	.word	0x40007000

08002338 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e308      	b.n	800295c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d075      	beq.n	8002442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002356:	4ba3      	ldr	r3, [pc, #652]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002360:	4ba0      	ldr	r3, [pc, #640]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	2b0c      	cmp	r3, #12
 800236e:	d102      	bne.n	8002376 <HAL_RCC_OscConfig+0x3e>
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	2b03      	cmp	r3, #3
 8002374:	d002      	beq.n	800237c <HAL_RCC_OscConfig+0x44>
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	2b08      	cmp	r3, #8
 800237a:	d10b      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4b99      	ldr	r3, [pc, #612]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05b      	beq.n	8002440 <HAL_RCC_OscConfig+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d157      	bne.n	8002440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e2e3      	b.n	800295c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x74>
 800239e:	4b91      	ldr	r3, [pc, #580]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a90      	ldr	r2, [pc, #576]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01d      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x98>
 80023b6:	4b8b      	ldr	r3, [pc, #556]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8a      	ldr	r2, [pc, #552]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a87      	ldr	r2, [pc, #540]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023d0:	4b84      	ldr	r3, [pc, #528]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a83      	ldr	r2, [pc, #524]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a80      	ldr	r2, [pc, #512]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f0:	f7fe fe9a 	bl	8001128 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe fe96 	bl	8001128 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e2a8      	b.n	800295c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800240a:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xc0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7fe fe86 	bl	8001128 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe fe82 	bl	8001128 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e294      	b.n	800295c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002432:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0xe8>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d075      	beq.n	800253a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002458:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	2b0c      	cmp	r3, #12
 8002466:	d102      	bne.n	800246e <HAL_RCC_OscConfig+0x136>
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d002      	beq.n	8002474 <HAL_RCC_OscConfig+0x13c>
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	2b04      	cmp	r3, #4
 8002472:	d11f      	bne.n	80024b4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002474:	4b5b      	ldr	r3, [pc, #364]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_OscConfig+0x154>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e267      	b.n	800295c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248c:	4b55      	ldr	r3, [pc, #340]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	061b      	lsls	r3, r3, #24
 800249a:	4952      	ldr	r1, [pc, #328]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024a0:	4b51      	ldr	r3, [pc, #324]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fe fb4f 	bl	8000b48 <HAL_InitTick>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d043      	beq.n	8002538 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e253      	b.n	800295c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d023      	beq.n	8002504 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024bc:	4b49      	ldr	r3, [pc, #292]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a48      	ldr	r2, [pc, #288]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7fe fe2e 	bl	8001128 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d0:	f7fe fe2a 	bl	8001128 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e23c      	b.n	800295c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024e2:	4b40      	ldr	r3, [pc, #256]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ee:	4b3d      	ldr	r3, [pc, #244]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	061b      	lsls	r3, r3, #24
 80024fc:	4939      	ldr	r1, [pc, #228]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
 8002502:	e01a      	b.n	800253a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002504:	4b37      	ldr	r3, [pc, #220]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a36      	ldr	r2, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800250a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800250e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002510:	f7fe fe0a 	bl	8001128 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002518:	f7fe fe06 	bl	8001128 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e218      	b.n	800295c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800252a:	4b2e      	ldr	r3, [pc, #184]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x1e0>
 8002536:	e000      	b.n	800253a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002538:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d03c      	beq.n	80025c0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d01c      	beq.n	8002588 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800254e:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002554:	4a23      	ldr	r2, [pc, #140]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255e:	f7fe fde3 	bl	8001128 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe fddf 	bl	8001128 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e1f1      	b.n	800295c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0ef      	beq.n	8002566 <HAL_RCC_OscConfig+0x22e>
 8002586:	e01b      	b.n	80025c0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002588:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800258a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800258e:	4a15      	ldr	r2, [pc, #84]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002598:	f7fe fdc6 	bl	8001128 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a0:	f7fe fdc2 	bl	8001128 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e1d4      	b.n	800295c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1ef      	bne.n	80025a0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80ab 	beq.w	8002724 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ce:	2300      	movs	r3, #0
 80025d0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025d2:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_RCC_OscConfig+0x2b4>
 80025de:	2301      	movs	r3, #1
 80025e0:	e005      	b.n	80025ee <HAL_RCC_OscConfig+0x2b6>
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000
 80025e8:	20000004 	.word	0x20000004
 80025ec:	2300      	movs	r3, #0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00d      	beq.n	800260e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f2:	4baf      	ldr	r3, [pc, #700]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	4aae      	ldr	r2, [pc, #696]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 80025f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fc:	6593      	str	r3, [r2, #88]	; 0x58
 80025fe:	4bac      	ldr	r3, [pc, #688]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800260a:	2301      	movs	r3, #1
 800260c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800260e:	4ba9      	ldr	r3, [pc, #676]	; (80028b4 <HAL_RCC_OscConfig+0x57c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d118      	bne.n	800264c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800261a:	4ba6      	ldr	r3, [pc, #664]	; (80028b4 <HAL_RCC_OscConfig+0x57c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4aa5      	ldr	r2, [pc, #660]	; (80028b4 <HAL_RCC_OscConfig+0x57c>)
 8002620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002626:	f7fe fd7f 	bl	8001128 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262e:	f7fe fd7b 	bl	8001128 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e18d      	b.n	800295c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002640:	4b9c      	ldr	r3, [pc, #624]	; (80028b4 <HAL_RCC_OscConfig+0x57c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d108      	bne.n	8002666 <HAL_RCC_OscConfig+0x32e>
 8002654:	4b96      	ldr	r3, [pc, #600]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265a:	4a95      	ldr	r2, [pc, #596]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002664:	e024      	b.n	80026b0 <HAL_RCC_OscConfig+0x378>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b05      	cmp	r3, #5
 800266c:	d110      	bne.n	8002690 <HAL_RCC_OscConfig+0x358>
 800266e:	4b90      	ldr	r3, [pc, #576]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 8002670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002674:	4a8e      	ldr	r2, [pc, #568]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 8002676:	f043 0304 	orr.w	r3, r3, #4
 800267a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800267e:	4b8c      	ldr	r3, [pc, #560]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 8002680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002684:	4a8a      	ldr	r2, [pc, #552]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800268e:	e00f      	b.n	80026b0 <HAL_RCC_OscConfig+0x378>
 8002690:	4b87      	ldr	r3, [pc, #540]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002696:	4a86      	ldr	r2, [pc, #536]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 8002698:	f023 0301 	bic.w	r3, r3, #1
 800269c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026a0:	4b83      	ldr	r3, [pc, #524]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 80026a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a6:	4a82      	ldr	r2, [pc, #520]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 80026a8:	f023 0304 	bic.w	r3, r3, #4
 80026ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d016      	beq.n	80026e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b8:	f7fe fd36 	bl	8001128 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026be:	e00a      	b.n	80026d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c0:	f7fe fd32 	bl	8001128 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e142      	b.n	800295c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d6:	4b76      	ldr	r3, [pc, #472]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 80026d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0ed      	beq.n	80026c0 <HAL_RCC_OscConfig+0x388>
 80026e4:	e015      	b.n	8002712 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e6:	f7fe fd1f 	bl	8001128 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026ec:	e00a      	b.n	8002704 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ee:	f7fe fd1b 	bl	8001128 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e12b      	b.n	800295c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002704:	4b6a      	ldr	r3, [pc, #424]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1ed      	bne.n	80026ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002712:	7ffb      	ldrb	r3, [r7, #31]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d105      	bne.n	8002724 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002718:	4b65      	ldr	r3, [pc, #404]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 800271a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271c:	4a64      	ldr	r2, [pc, #400]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 800271e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002722:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0320 	and.w	r3, r3, #32
 800272c:	2b00      	cmp	r3, #0
 800272e:	d03c      	beq.n	80027aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d01c      	beq.n	8002772 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002738:	4b5d      	ldr	r3, [pc, #372]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 800273a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800273e:	4a5c      	ldr	r2, [pc, #368]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7fe fcee 	bl	8001128 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002750:	f7fe fcea 	bl	8001128 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e0fc      	b.n	800295c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002762:	4b53      	ldr	r3, [pc, #332]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 8002764:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0ef      	beq.n	8002750 <HAL_RCC_OscConfig+0x418>
 8002770:	e01b      	b.n	80027aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002772:	4b4f      	ldr	r3, [pc, #316]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 8002774:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002778:	4a4d      	ldr	r2, [pc, #308]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 800277a:	f023 0301 	bic.w	r3, r3, #1
 800277e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002782:	f7fe fcd1 	bl	8001128 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800278a:	f7fe fccd 	bl	8001128 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e0df      	b.n	800295c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800279c:	4b44      	ldr	r3, [pc, #272]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 800279e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1ef      	bne.n	800278a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 80d3 	beq.w	800295a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027b4:	4b3e      	ldr	r3, [pc, #248]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 030c 	and.w	r3, r3, #12
 80027bc:	2b0c      	cmp	r3, #12
 80027be:	f000 808d 	beq.w	80028dc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d15a      	bne.n	8002880 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ca:	4b39      	ldr	r3, [pc, #228]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a38      	ldr	r2, [pc, #224]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 80027d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fe fca7 	bl	8001128 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027de:	f7fe fca3 	bl	8001128 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e0b5      	b.n	800295c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f0:	4b2f      	ldr	r3, [pc, #188]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f0      	bne.n	80027de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027fc:	4b2c      	ldr	r3, [pc, #176]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <HAL_RCC_OscConfig+0x580>)
 8002802:	4013      	ands	r3, r2
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6a11      	ldr	r1, [r2, #32]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800280c:	3a01      	subs	r2, #1
 800280e:	0112      	lsls	r2, r2, #4
 8002810:	4311      	orrs	r1, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002816:	0212      	lsls	r2, r2, #8
 8002818:	4311      	orrs	r1, r2
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800281e:	0852      	lsrs	r2, r2, #1
 8002820:	3a01      	subs	r2, #1
 8002822:	0552      	lsls	r2, r2, #21
 8002824:	4311      	orrs	r1, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800282a:	0852      	lsrs	r2, r2, #1
 800282c:	3a01      	subs	r2, #1
 800282e:	0652      	lsls	r2, r2, #25
 8002830:	4311      	orrs	r1, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002836:	06d2      	lsls	r2, r2, #27
 8002838:	430a      	orrs	r2, r1
 800283a:	491d      	ldr	r1, [pc, #116]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 800283c:	4313      	orrs	r3, r2
 800283e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a1a      	ldr	r2, [pc, #104]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 8002846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800284a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800284c:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4a17      	ldr	r2, [pc, #92]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 8002852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002856:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fe fc66 	bl	8001128 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002860:	f7fe fc62 	bl	8001128 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e074      	b.n	800295c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002872:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0x528>
 800287e:	e06c      	b.n	800295a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a0a      	ldr	r2, [pc, #40]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 8002886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800288a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800288c:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4a07      	ldr	r2, [pc, #28]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 8002892:	f023 0303 	bic.w	r3, r3, #3
 8002896:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <HAL_RCC_OscConfig+0x578>)
 800289e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80028a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7fe fc3e 	bl	8001128 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ae:	e00e      	b.n	80028ce <HAL_RCC_OscConfig+0x596>
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40007000 	.word	0x40007000
 80028b8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028bc:	f7fe fc34 	bl	8001128 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e046      	b.n	800295c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ce:	4b25      	ldr	r3, [pc, #148]	; (8002964 <HAL_RCC_OscConfig+0x62c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x584>
 80028da:	e03e      	b.n	800295a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e039      	b.n	800295c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80028e8:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <HAL_RCC_OscConfig+0x62c>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f003 0203 	and.w	r2, r3, #3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d12c      	bne.n	8002956 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	3b01      	subs	r3, #1
 8002908:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	429a      	cmp	r2, r3
 800290c:	d123      	bne.n	8002956 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002918:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800291a:	429a      	cmp	r2, r3
 800291c:	d11b      	bne.n	8002956 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800292a:	429a      	cmp	r2, r3
 800292c:	d113      	bne.n	8002956 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	085b      	lsrs	r3, r3, #1
 800293a:	3b01      	subs	r3, #1
 800293c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800293e:	429a      	cmp	r2, r3
 8002940:	d109      	bne.n	8002956 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294c:	085b      	lsrs	r3, r3, #1
 800294e:	3b01      	subs	r3, #1
 8002950:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002952:	429a      	cmp	r2, r3
 8002954:	d001      	beq.n	800295a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3720      	adds	r7, #32
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40021000 	.word	0x40021000

08002968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e11e      	b.n	8002bbe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002980:	4b91      	ldr	r3, [pc, #580]	; (8002bc8 <HAL_RCC_ClockConfig+0x260>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d910      	bls.n	80029b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298e:	4b8e      	ldr	r3, [pc, #568]	; (8002bc8 <HAL_RCC_ClockConfig+0x260>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 020f 	bic.w	r2, r3, #15
 8002996:	498c      	ldr	r1, [pc, #560]	; (8002bc8 <HAL_RCC_ClockConfig+0x260>)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299e:	4b8a      	ldr	r3, [pc, #552]	; (8002bc8 <HAL_RCC_ClockConfig+0x260>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e106      	b.n	8002bbe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d073      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d129      	bne.n	8002a18 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c4:	4b81      	ldr	r3, [pc, #516]	; (8002bcc <HAL_RCC_ClockConfig+0x264>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0f4      	b.n	8002bbe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80029d4:	f000 f9d0 	bl	8002d78 <RCC_GetSysClockFreqFromPLLSource>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4a7c      	ldr	r2, [pc, #496]	; (8002bd0 <HAL_RCC_ClockConfig+0x268>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d93f      	bls.n	8002a62 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80029e2:	4b7a      	ldr	r3, [pc, #488]	; (8002bcc <HAL_RCC_ClockConfig+0x264>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d009      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d033      	beq.n	8002a62 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d12f      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a02:	4b72      	ldr	r3, [pc, #456]	; (8002bcc <HAL_RCC_ClockConfig+0x264>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a0a:	4a70      	ldr	r2, [pc, #448]	; (8002bcc <HAL_RCC_ClockConfig+0x264>)
 8002a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a10:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a12:	2380      	movs	r3, #128	; 0x80
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	e024      	b.n	8002a62 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d107      	bne.n	8002a30 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a20:	4b6a      	ldr	r3, [pc, #424]	; (8002bcc <HAL_RCC_ClockConfig+0x264>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d109      	bne.n	8002a40 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0c6      	b.n	8002bbe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a30:	4b66      	ldr	r3, [pc, #408]	; (8002bcc <HAL_RCC_ClockConfig+0x264>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0be      	b.n	8002bbe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002a40:	f000 f8ce 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	4a61      	ldr	r2, [pc, #388]	; (8002bd0 <HAL_RCC_ClockConfig+0x268>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d909      	bls.n	8002a62 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a4e:	4b5f      	ldr	r3, [pc, #380]	; (8002bcc <HAL_RCC_ClockConfig+0x264>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a56:	4a5d      	ldr	r2, [pc, #372]	; (8002bcc <HAL_RCC_ClockConfig+0x264>)
 8002a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a5c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002a5e:	2380      	movs	r3, #128	; 0x80
 8002a60:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a62:	4b5a      	ldr	r3, [pc, #360]	; (8002bcc <HAL_RCC_ClockConfig+0x264>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f023 0203 	bic.w	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4957      	ldr	r1, [pc, #348]	; (8002bcc <HAL_RCC_ClockConfig+0x264>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a74:	f7fe fb58 	bl	8001128 <HAL_GetTick>
 8002a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7c:	f7fe fb54 	bl	8001128 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e095      	b.n	8002bbe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	4b4e      	ldr	r3, [pc, #312]	; (8002bcc <HAL_RCC_ClockConfig+0x264>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 020c 	and.w	r2, r3, #12
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d1eb      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d023      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002abc:	4b43      	ldr	r3, [pc, #268]	; (8002bcc <HAL_RCC_ClockConfig+0x264>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	4a42      	ldr	r2, [pc, #264]	; (8002bcc <HAL_RCC_ClockConfig+0x264>)
 8002ac2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ac6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d007      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002ad4:	4b3d      	ldr	r3, [pc, #244]	; (8002bcc <HAL_RCC_ClockConfig+0x264>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002adc:	4a3b      	ldr	r2, [pc, #236]	; (8002bcc <HAL_RCC_ClockConfig+0x264>)
 8002ade:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ae2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae4:	4b39      	ldr	r3, [pc, #228]	; (8002bcc <HAL_RCC_ClockConfig+0x264>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	4936      	ldr	r1, [pc, #216]	; (8002bcc <HAL_RCC_ClockConfig+0x264>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2b80      	cmp	r3, #128	; 0x80
 8002afc:	d105      	bne.n	8002b0a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002afe:	4b33      	ldr	r3, [pc, #204]	; (8002bcc <HAL_RCC_ClockConfig+0x264>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	4a32      	ldr	r2, [pc, #200]	; (8002bcc <HAL_RCC_ClockConfig+0x264>)
 8002b04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b08:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b0a:	4b2f      	ldr	r3, [pc, #188]	; (8002bc8 <HAL_RCC_ClockConfig+0x260>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d21d      	bcs.n	8002b54 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b18:	4b2b      	ldr	r3, [pc, #172]	; (8002bc8 <HAL_RCC_ClockConfig+0x260>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f023 020f 	bic.w	r2, r3, #15
 8002b20:	4929      	ldr	r1, [pc, #164]	; (8002bc8 <HAL_RCC_ClockConfig+0x260>)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b28:	f7fe fafe 	bl	8001128 <HAL_GetTick>
 8002b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2e:	e00a      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b30:	f7fe fafa 	bl	8001128 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e03b      	b.n	8002bbe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <HAL_RCC_ClockConfig+0x260>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d1ed      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b60:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <HAL_RCC_ClockConfig+0x264>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	4917      	ldr	r1, [pc, #92]	; (8002bcc <HAL_RCC_ClockConfig+0x264>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b7e:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <HAL_RCC_ClockConfig+0x264>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	490f      	ldr	r1, [pc, #60]	; (8002bcc <HAL_RCC_ClockConfig+0x264>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b92:	f000 f825 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8002b96:	4602      	mov	r2, r0
 8002b98:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <HAL_RCC_ClockConfig+0x264>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	490c      	ldr	r1, [pc, #48]	; (8002bd4 <HAL_RCC_ClockConfig+0x26c>)
 8002ba4:	5ccb      	ldrb	r3, [r1, r3]
 8002ba6:	f003 031f 	and.w	r3, r3, #31
 8002baa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bae:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <HAL_RCC_ClockConfig+0x270>)
 8002bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <HAL_RCC_ClockConfig+0x274>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fd ffc6 	bl	8000b48 <HAL_InitTick>
 8002bbc:	4603      	mov	r3, r0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40022000 	.word	0x40022000
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	04c4b400 	.word	0x04c4b400
 8002bd4:	0800783c 	.word	0x0800783c
 8002bd8:	20000000 	.word	0x20000000
 8002bdc:	20000004 	.word	0x20000004

08002be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002be6:	4b2c      	ldr	r3, [pc, #176]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d102      	bne.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bf2:	4b2a      	ldr	r3, [pc, #168]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	e047      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002bf8:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 030c 	and.w	r3, r3, #12
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d102      	bne.n	8002c0a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c04:	4b26      	ldr	r3, [pc, #152]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	e03e      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c0a:	4b23      	ldr	r3, [pc, #140]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	d136      	bne.n	8002c84 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c16:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c20:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d10c      	bne.n	8002c4e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c34:	4a1a      	ldr	r2, [pc, #104]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3c:	4a16      	ldr	r2, [pc, #88]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c3e:	68d2      	ldr	r2, [r2, #12]
 8002c40:	0a12      	lsrs	r2, r2, #8
 8002c42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	617b      	str	r3, [r7, #20]
      break;
 8002c4c:	e00c      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c4e:	4a13      	ldr	r2, [pc, #76]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c56:	4a10      	ldr	r2, [pc, #64]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c58:	68d2      	ldr	r2, [r2, #12]
 8002c5a:	0a12      	lsrs	r2, r2, #8
 8002c5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c60:	fb02 f303 	mul.w	r3, r2, r3
 8002c64:	617b      	str	r3, [r7, #20]
      break;
 8002c66:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	0e5b      	lsrs	r3, r3, #25
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	3301      	adds	r3, #1
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	e001      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c88:	693b      	ldr	r3, [r7, #16]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	371c      	adds	r7, #28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	00f42400 	.word	0x00f42400
 8002ca0:	007a1200 	.word	0x007a1200

08002ca4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca8:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002caa:	681b      	ldr	r3, [r3, #0]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20000000 	.word	0x20000000

08002cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002cc0:	f7ff fff0 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	0a1b      	lsrs	r3, r3, #8
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	4904      	ldr	r1, [pc, #16]	; (8002ce4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cd2:	5ccb      	ldrb	r3, [r1, r3]
 8002cd4:	f003 031f 	and.w	r3, r3, #31
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	0800784c 	.word	0x0800784c

08002ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cec:	f7ff ffda 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	0adb      	lsrs	r3, r3, #11
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	4904      	ldr	r1, [pc, #16]	; (8002d10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cfe:	5ccb      	ldrb	r3, [r1, r3]
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	0800784c 	.word	0x0800784c

08002d14 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	220f      	movs	r2, #15
 8002d22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002d24:	4b12      	ldr	r3, [pc, #72]	; (8002d70 <HAL_RCC_GetClockConfig+0x5c>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 0203 	and.w	r2, r3, #3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002d30:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <HAL_RCC_GetClockConfig+0x5c>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <HAL_RCC_GetClockConfig+0x5c>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002d48:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <HAL_RCC_GetClockConfig+0x5c>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	08db      	lsrs	r3, r3, #3
 8002d4e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002d56:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <HAL_RCC_GetClockConfig+0x60>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 020f 	and.w	r2, r3, #15
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	601a      	str	r2, [r3, #0]
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40022000 	.word	0x40022000

08002d78 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d7e:	4b1e      	ldr	r3, [pc, #120]	; (8002df8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d88:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	091b      	lsrs	r3, r3, #4
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	3301      	adds	r3, #1
 8002d94:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d10c      	bne.n	8002db6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d9c:	4a17      	ldr	r2, [pc, #92]	; (8002dfc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da4:	4a14      	ldr	r2, [pc, #80]	; (8002df8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002da6:	68d2      	ldr	r2, [r2, #12]
 8002da8:	0a12      	lsrs	r2, r2, #8
 8002daa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002dae:	fb02 f303 	mul.w	r3, r2, r3
 8002db2:	617b      	str	r3, [r7, #20]
    break;
 8002db4:	e00c      	b.n	8002dd0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002db6:	4a12      	ldr	r2, [pc, #72]	; (8002e00 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbe:	4a0e      	ldr	r2, [pc, #56]	; (8002df8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002dc0:	68d2      	ldr	r2, [r2, #12]
 8002dc2:	0a12      	lsrs	r2, r2, #8
 8002dc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002dc8:	fb02 f303 	mul.w	r3, r2, r3
 8002dcc:	617b      	str	r3, [r7, #20]
    break;
 8002dce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dd0:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	0e5b      	lsrs	r3, r3, #25
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	3301      	adds	r3, #1
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002dea:	687b      	ldr	r3, [r7, #4]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	371c      	adds	r7, #28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	007a1200 	.word	0x007a1200
 8002e00:	00f42400 	.word	0x00f42400

08002e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e10:	2300      	movs	r3, #0
 8002e12:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8098 	beq.w	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e22:	2300      	movs	r3, #0
 8002e24:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e26:	4b43      	ldr	r3, [pc, #268]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10d      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e32:	4b40      	ldr	r3, [pc, #256]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e36:	4a3f      	ldr	r2, [pc, #252]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	6593      	str	r3, [r2, #88]	; 0x58
 8002e3e:	4b3d      	ldr	r3, [pc, #244]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e4e:	4b3a      	ldr	r3, [pc, #232]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a39      	ldr	r2, [pc, #228]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e5a:	f7fe f965 	bl	8001128 <HAL_GetTick>
 8002e5e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e60:	e009      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e62:	f7fe f961 	bl	8001128 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d902      	bls.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	74fb      	strb	r3, [r7, #19]
        break;
 8002e74:	e005      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e76:	4b30      	ldr	r3, [pc, #192]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0ef      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002e82:	7cfb      	ldrb	r3, [r7, #19]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d159      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e88:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e92:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d01e      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d019      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ea4:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002eb0:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	4a1f      	ldr	r2, [pc, #124]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ec0:	4b1c      	ldr	r3, [pc, #112]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	4a1b      	ldr	r2, [pc, #108]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ed0:	4a18      	ldr	r2, [pc, #96]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d016      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee2:	f7fe f921 	bl	8001128 <HAL_GetTick>
 8002ee6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee8:	e00b      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eea:	f7fe f91d 	bl	8001128 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d902      	bls.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	74fb      	strb	r3, [r7, #19]
            break;
 8002f00:	e006      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0ec      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002f10:	7cfb      	ldrb	r3, [r7, #19]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10b      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f16:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	4903      	ldr	r1, [pc, #12]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f2c:	e008      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f2e:	7cfb      	ldrb	r3, [r7, #19]
 8002f30:	74bb      	strb	r3, [r7, #18]
 8002f32:	e005      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f3c:	7cfb      	ldrb	r3, [r7, #19]
 8002f3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f40:	7c7b      	ldrb	r3, [r7, #17]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d105      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f46:	4ba6      	ldr	r3, [pc, #664]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4a:	4aa5      	ldr	r2, [pc, #660]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00a      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f5e:	4ba0      	ldr	r3, [pc, #640]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f64:	f023 0203 	bic.w	r2, r3, #3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	499c      	ldr	r1, [pc, #624]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00a      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f80:	4b97      	ldr	r3, [pc, #604]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f86:	f023 020c 	bic.w	r2, r3, #12
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	4994      	ldr	r1, [pc, #592]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fa2:	4b8f      	ldr	r3, [pc, #572]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	498b      	ldr	r1, [pc, #556]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fc4:	4b86      	ldr	r3, [pc, #536]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	4983      	ldr	r1, [pc, #524]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0320 	and.w	r3, r3, #32
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fe6:	4b7e      	ldr	r3, [pc, #504]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	497a      	ldr	r1, [pc, #488]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003008:	4b75      	ldr	r3, [pc, #468]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	4972      	ldr	r1, [pc, #456]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800302a:	4b6d      	ldr	r3, [pc, #436]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003030:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	4969      	ldr	r1, [pc, #420]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800304c:	4b64      	ldr	r3, [pc, #400]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003052:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	4961      	ldr	r1, [pc, #388]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800306e:	4b5c      	ldr	r3, [pc, #368]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003074:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	4958      	ldr	r1, [pc, #352]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308c:	2b00      	cmp	r3, #0
 800308e:	d015      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003090:	4b53      	ldr	r3, [pc, #332]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003096:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	4950      	ldr	r1, [pc, #320]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ae:	d105      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030b0:	4b4b      	ldr	r3, [pc, #300]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	4a4a      	ldr	r2, [pc, #296]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d015      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030c8:	4b45      	ldr	r3, [pc, #276]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	4942      	ldr	r1, [pc, #264]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030e6:	d105      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030e8:	4b3d      	ldr	r3, [pc, #244]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4a3c      	ldr	r2, [pc, #240]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030f2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d015      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003100:	4b37      	ldr	r3, [pc, #220]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003106:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	4934      	ldr	r1, [pc, #208]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800311e:	d105      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003120:	4b2f      	ldr	r3, [pc, #188]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4a2e      	ldr	r2, [pc, #184]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003126:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800312a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d015      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003138:	4b29      	ldr	r3, [pc, #164]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003146:	4926      	ldr	r1, [pc, #152]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003152:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003156:	d105      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003158:	4b21      	ldr	r3, [pc, #132]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	4a20      	ldr	r2, [pc, #128]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800315e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003162:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d015      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003170:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003176:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317e:	4918      	ldr	r1, [pc, #96]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800318e:	d105      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003190:	4b13      	ldr	r3, [pc, #76]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	4a12      	ldr	r2, [pc, #72]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800319a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d015      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80031a8:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b6:	490a      	ldr	r1, [pc, #40]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031c6:	d105      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4a04      	ldr	r2, [pc, #16]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80031d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40021000 	.word	0x40021000

080031e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e049      	b.n	800328a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fd fe24 	bl	8000e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3304      	adds	r3, #4
 8003220:	4619      	mov	r1, r3
 8003222:	4610      	mov	r0, r2
 8003224:	f000 fba4 	bl	8003970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d001      	beq.n	80032ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e042      	b.n	8003332 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a21      	ldr	r2, [pc, #132]	; (8003340 <HAL_TIM_Base_Start+0xac>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d018      	beq.n	80032f0 <HAL_TIM_Base_Start+0x5c>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c6:	d013      	beq.n	80032f0 <HAL_TIM_Base_Start+0x5c>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1d      	ldr	r2, [pc, #116]	; (8003344 <HAL_TIM_Base_Start+0xb0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00e      	beq.n	80032f0 <HAL_TIM_Base_Start+0x5c>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a1c      	ldr	r2, [pc, #112]	; (8003348 <HAL_TIM_Base_Start+0xb4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d009      	beq.n	80032f0 <HAL_TIM_Base_Start+0x5c>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a1a      	ldr	r2, [pc, #104]	; (800334c <HAL_TIM_Base_Start+0xb8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d004      	beq.n	80032f0 <HAL_TIM_Base_Start+0x5c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a19      	ldr	r2, [pc, #100]	; (8003350 <HAL_TIM_Base_Start+0xbc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d115      	bne.n	800331c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	4b17      	ldr	r3, [pc, #92]	; (8003354 <HAL_TIM_Base_Start+0xc0>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b06      	cmp	r3, #6
 8003300:	d015      	beq.n	800332e <HAL_TIM_Base_Start+0x9a>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003308:	d011      	beq.n	800332e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 0201 	orr.w	r2, r2, #1
 8003318:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800331a:	e008      	b.n	800332e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	e000      	b.n	8003330 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800332e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	40012c00 	.word	0x40012c00
 8003344:	40000400 	.word	0x40000400
 8003348:	40000800 	.word	0x40000800
 800334c:	40013400 	.word	0x40013400
 8003350:	40014000 	.word	0x40014000
 8003354:	00010007 	.word	0x00010007

08003358 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b01      	cmp	r3, #1
 800336a:	d001      	beq.n	8003370 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e04a      	b.n	8003406 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a21      	ldr	r2, [pc, #132]	; (8003414 <HAL_TIM_Base_Start_IT+0xbc>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d018      	beq.n	80033c4 <HAL_TIM_Base_Start_IT+0x6c>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339a:	d013      	beq.n	80033c4 <HAL_TIM_Base_Start_IT+0x6c>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1d      	ldr	r2, [pc, #116]	; (8003418 <HAL_TIM_Base_Start_IT+0xc0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d00e      	beq.n	80033c4 <HAL_TIM_Base_Start_IT+0x6c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1c      	ldr	r2, [pc, #112]	; (800341c <HAL_TIM_Base_Start_IT+0xc4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d009      	beq.n	80033c4 <HAL_TIM_Base_Start_IT+0x6c>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a1a      	ldr	r2, [pc, #104]	; (8003420 <HAL_TIM_Base_Start_IT+0xc8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d004      	beq.n	80033c4 <HAL_TIM_Base_Start_IT+0x6c>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a19      	ldr	r2, [pc, #100]	; (8003424 <HAL_TIM_Base_Start_IT+0xcc>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d115      	bne.n	80033f0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	4b17      	ldr	r3, [pc, #92]	; (8003428 <HAL_TIM_Base_Start_IT+0xd0>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2b06      	cmp	r3, #6
 80033d4:	d015      	beq.n	8003402 <HAL_TIM_Base_Start_IT+0xaa>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033dc:	d011      	beq.n	8003402 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f042 0201 	orr.w	r2, r2, #1
 80033ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ee:	e008      	b.n	8003402 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	e000      	b.n	8003404 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003402:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40012c00 	.word	0x40012c00
 8003418:	40000400 	.word	0x40000400
 800341c:	40000800 	.word	0x40000800
 8003420:	40013400 	.word	0x40013400
 8003424:	40014000 	.word	0x40014000
 8003428:	00010007 	.word	0x00010007

0800342c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b02      	cmp	r3, #2
 8003440:	d122      	bne.n	8003488 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b02      	cmp	r3, #2
 800344e:	d11b      	bne.n	8003488 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0202 	mvn.w	r2, #2
 8003458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 fa60 	bl	8003934 <HAL_TIM_IC_CaptureCallback>
 8003474:	e005      	b.n	8003482 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fa52 	bl	8003920 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 fa63 	bl	8003948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b04      	cmp	r3, #4
 8003494:	d122      	bne.n	80034dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d11b      	bne.n	80034dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0204 	mvn.w	r2, #4
 80034ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2202      	movs	r2, #2
 80034b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fa36 	bl	8003934 <HAL_TIM_IC_CaptureCallback>
 80034c8:	e005      	b.n	80034d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fa28 	bl	8003920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 fa39 	bl	8003948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d122      	bne.n	8003530 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d11b      	bne.n	8003530 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f06f 0208 	mvn.w	r2, #8
 8003500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2204      	movs	r2, #4
 8003506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fa0c 	bl	8003934 <HAL_TIM_IC_CaptureCallback>
 800351c:	e005      	b.n	800352a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f9fe 	bl	8003920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fa0f 	bl	8003948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f003 0310 	and.w	r3, r3, #16
 800353a:	2b10      	cmp	r3, #16
 800353c:	d122      	bne.n	8003584 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f003 0310 	and.w	r3, r3, #16
 8003548:	2b10      	cmp	r3, #16
 800354a:	d11b      	bne.n	8003584 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0210 	mvn.w	r2, #16
 8003554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2208      	movs	r2, #8
 800355a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f9e2 	bl	8003934 <HAL_TIM_IC_CaptureCallback>
 8003570:	e005      	b.n	800357e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f9d4 	bl	8003920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f9e5 	bl	8003948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b01      	cmp	r3, #1
 8003590:	d10e      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b01      	cmp	r3, #1
 800359e:	d107      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0201 	mvn.w	r2, #1
 80035a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fd fa8a 	bl	8000ac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ba:	2b80      	cmp	r3, #128	; 0x80
 80035bc:	d10e      	bne.n	80035dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c8:	2b80      	cmp	r3, #128	; 0x80
 80035ca:	d107      	bne.n	80035dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fb82 	bl	8003ce0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ea:	d10e      	bne.n	800360a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f6:	2b80      	cmp	r3, #128	; 0x80
 80035f8:	d107      	bne.n	800360a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 fb75 	bl	8003cf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003614:	2b40      	cmp	r3, #64	; 0x40
 8003616:	d10e      	bne.n	8003636 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003622:	2b40      	cmp	r3, #64	; 0x40
 8003624:	d107      	bne.n	8003636 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800362e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f993 	bl	800395c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f003 0320 	and.w	r3, r3, #32
 8003640:	2b20      	cmp	r3, #32
 8003642:	d10e      	bne.n	8003662 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b20      	cmp	r3, #32
 8003650:	d107      	bne.n	8003662 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f06f 0220 	mvn.w	r2, #32
 800365a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fb35 	bl	8003ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800366c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003670:	d10f      	bne.n	8003692 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800367c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003680:	d107      	bne.n	8003692 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800368a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 fb3b 	bl	8003d08 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800369c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036a0:	d10f      	bne.n	80036c2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036b0:	d107      	bne.n	80036c2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80036ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 fb2d 	bl	8003d1c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036d0:	d10f      	bne.n	80036f2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036e0:	d107      	bne.n	80036f2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80036ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 fb1f 	bl	8003d30 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003700:	d10f      	bne.n	8003722 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800370c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003710:	d107      	bne.n	8003722 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800371a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 fb11 	bl	8003d44 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_TIM_ConfigClockSource+0x1c>
 8003744:	2302      	movs	r3, #2
 8003746:	e0de      	b.n	8003906 <HAL_TIM_ConfigClockSource+0x1da>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003766:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800376a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003772:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a63      	ldr	r2, [pc, #396]	; (8003910 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	f000 80a9 	beq.w	80038da <HAL_TIM_ConfigClockSource+0x1ae>
 8003788:	4a61      	ldr	r2, [pc, #388]	; (8003910 <HAL_TIM_ConfigClockSource+0x1e4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	f200 80ae 	bhi.w	80038ec <HAL_TIM_ConfigClockSource+0x1c0>
 8003790:	4a60      	ldr	r2, [pc, #384]	; (8003914 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	f000 80a1 	beq.w	80038da <HAL_TIM_ConfigClockSource+0x1ae>
 8003798:	4a5e      	ldr	r2, [pc, #376]	; (8003914 <HAL_TIM_ConfigClockSource+0x1e8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	f200 80a6 	bhi.w	80038ec <HAL_TIM_ConfigClockSource+0x1c0>
 80037a0:	4a5d      	ldr	r2, [pc, #372]	; (8003918 <HAL_TIM_ConfigClockSource+0x1ec>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	f000 8099 	beq.w	80038da <HAL_TIM_ConfigClockSource+0x1ae>
 80037a8:	4a5b      	ldr	r2, [pc, #364]	; (8003918 <HAL_TIM_ConfigClockSource+0x1ec>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	f200 809e 	bhi.w	80038ec <HAL_TIM_ConfigClockSource+0x1c0>
 80037b0:	4a5a      	ldr	r2, [pc, #360]	; (800391c <HAL_TIM_ConfigClockSource+0x1f0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	f000 8091 	beq.w	80038da <HAL_TIM_ConfigClockSource+0x1ae>
 80037b8:	4a58      	ldr	r2, [pc, #352]	; (800391c <HAL_TIM_ConfigClockSource+0x1f0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	f200 8096 	bhi.w	80038ec <HAL_TIM_ConfigClockSource+0x1c0>
 80037c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80037c4:	f000 8089 	beq.w	80038da <HAL_TIM_ConfigClockSource+0x1ae>
 80037c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80037cc:	f200 808e 	bhi.w	80038ec <HAL_TIM_ConfigClockSource+0x1c0>
 80037d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037d4:	d03e      	beq.n	8003854 <HAL_TIM_ConfigClockSource+0x128>
 80037d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037da:	f200 8087 	bhi.w	80038ec <HAL_TIM_ConfigClockSource+0x1c0>
 80037de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e2:	f000 8086 	beq.w	80038f2 <HAL_TIM_ConfigClockSource+0x1c6>
 80037e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ea:	d87f      	bhi.n	80038ec <HAL_TIM_ConfigClockSource+0x1c0>
 80037ec:	2b70      	cmp	r3, #112	; 0x70
 80037ee:	d01a      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0xfa>
 80037f0:	2b70      	cmp	r3, #112	; 0x70
 80037f2:	d87b      	bhi.n	80038ec <HAL_TIM_ConfigClockSource+0x1c0>
 80037f4:	2b60      	cmp	r3, #96	; 0x60
 80037f6:	d050      	beq.n	800389a <HAL_TIM_ConfigClockSource+0x16e>
 80037f8:	2b60      	cmp	r3, #96	; 0x60
 80037fa:	d877      	bhi.n	80038ec <HAL_TIM_ConfigClockSource+0x1c0>
 80037fc:	2b50      	cmp	r3, #80	; 0x50
 80037fe:	d03c      	beq.n	800387a <HAL_TIM_ConfigClockSource+0x14e>
 8003800:	2b50      	cmp	r3, #80	; 0x50
 8003802:	d873      	bhi.n	80038ec <HAL_TIM_ConfigClockSource+0x1c0>
 8003804:	2b40      	cmp	r3, #64	; 0x40
 8003806:	d058      	beq.n	80038ba <HAL_TIM_ConfigClockSource+0x18e>
 8003808:	2b40      	cmp	r3, #64	; 0x40
 800380a:	d86f      	bhi.n	80038ec <HAL_TIM_ConfigClockSource+0x1c0>
 800380c:	2b30      	cmp	r3, #48	; 0x30
 800380e:	d064      	beq.n	80038da <HAL_TIM_ConfigClockSource+0x1ae>
 8003810:	2b30      	cmp	r3, #48	; 0x30
 8003812:	d86b      	bhi.n	80038ec <HAL_TIM_ConfigClockSource+0x1c0>
 8003814:	2b20      	cmp	r3, #32
 8003816:	d060      	beq.n	80038da <HAL_TIM_ConfigClockSource+0x1ae>
 8003818:	2b20      	cmp	r3, #32
 800381a:	d867      	bhi.n	80038ec <HAL_TIM_ConfigClockSource+0x1c0>
 800381c:	2b00      	cmp	r3, #0
 800381e:	d05c      	beq.n	80038da <HAL_TIM_ConfigClockSource+0x1ae>
 8003820:	2b10      	cmp	r3, #16
 8003822:	d05a      	beq.n	80038da <HAL_TIM_ConfigClockSource+0x1ae>
 8003824:	e062      	b.n	80038ec <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	6899      	ldr	r1, [r3, #8]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f000 f9a7 	bl	8003b88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003848:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	609a      	str	r2, [r3, #8]
      break;
 8003852:	e04f      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6818      	ldr	r0, [r3, #0]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	6899      	ldr	r1, [r3, #8]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f000 f990 	bl	8003b88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003876:	609a      	str	r2, [r3, #8]
      break;
 8003878:	e03c      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	6859      	ldr	r1, [r3, #4]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	461a      	mov	r2, r3
 8003888:	f000 f902 	bl	8003a90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2150      	movs	r1, #80	; 0x50
 8003892:	4618      	mov	r0, r3
 8003894:	f000 f95b 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 8003898:	e02c      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6818      	ldr	r0, [r3, #0]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	6859      	ldr	r1, [r3, #4]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	461a      	mov	r2, r3
 80038a8:	f000 f921 	bl	8003aee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2160      	movs	r1, #96	; 0x60
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 f94b 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 80038b8:	e01c      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	6859      	ldr	r1, [r3, #4]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	461a      	mov	r2, r3
 80038c8:	f000 f8e2 	bl	8003a90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2140      	movs	r1, #64	; 0x40
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 f93b 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 80038d8:	e00c      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4619      	mov	r1, r3
 80038e4:	4610      	mov	r0, r2
 80038e6:	f000 f932 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 80038ea:	e003      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
      break;
 80038f0:	e000      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80038f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003904:	7bfb      	ldrb	r3, [r7, #15]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	00100070 	.word	0x00100070
 8003914:	00100040 	.word	0x00100040
 8003918:	00100030 	.word	0x00100030
 800391c:	00100020 	.word	0x00100020

08003920 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a3c      	ldr	r2, [pc, #240]	; (8003a74 <TIM_Base_SetConfig+0x104>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00f      	beq.n	80039a8 <TIM_Base_SetConfig+0x38>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800398e:	d00b      	beq.n	80039a8 <TIM_Base_SetConfig+0x38>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a39      	ldr	r2, [pc, #228]	; (8003a78 <TIM_Base_SetConfig+0x108>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d007      	beq.n	80039a8 <TIM_Base_SetConfig+0x38>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a38      	ldr	r2, [pc, #224]	; (8003a7c <TIM_Base_SetConfig+0x10c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d003      	beq.n	80039a8 <TIM_Base_SetConfig+0x38>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a37      	ldr	r2, [pc, #220]	; (8003a80 <TIM_Base_SetConfig+0x110>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d108      	bne.n	80039ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a2d      	ldr	r2, [pc, #180]	; (8003a74 <TIM_Base_SetConfig+0x104>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d01b      	beq.n	80039fa <TIM_Base_SetConfig+0x8a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c8:	d017      	beq.n	80039fa <TIM_Base_SetConfig+0x8a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a2a      	ldr	r2, [pc, #168]	; (8003a78 <TIM_Base_SetConfig+0x108>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d013      	beq.n	80039fa <TIM_Base_SetConfig+0x8a>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a29      	ldr	r2, [pc, #164]	; (8003a7c <TIM_Base_SetConfig+0x10c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00f      	beq.n	80039fa <TIM_Base_SetConfig+0x8a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a28      	ldr	r2, [pc, #160]	; (8003a80 <TIM_Base_SetConfig+0x110>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d00b      	beq.n	80039fa <TIM_Base_SetConfig+0x8a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a27      	ldr	r2, [pc, #156]	; (8003a84 <TIM_Base_SetConfig+0x114>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d007      	beq.n	80039fa <TIM_Base_SetConfig+0x8a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a26      	ldr	r2, [pc, #152]	; (8003a88 <TIM_Base_SetConfig+0x118>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d003      	beq.n	80039fa <TIM_Base_SetConfig+0x8a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a25      	ldr	r2, [pc, #148]	; (8003a8c <TIM_Base_SetConfig+0x11c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d108      	bne.n	8003a0c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a10      	ldr	r2, [pc, #64]	; (8003a74 <TIM_Base_SetConfig+0x104>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00f      	beq.n	8003a58 <TIM_Base_SetConfig+0xe8>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a11      	ldr	r2, [pc, #68]	; (8003a80 <TIM_Base_SetConfig+0x110>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00b      	beq.n	8003a58 <TIM_Base_SetConfig+0xe8>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a10      	ldr	r2, [pc, #64]	; (8003a84 <TIM_Base_SetConfig+0x114>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d007      	beq.n	8003a58 <TIM_Base_SetConfig+0xe8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a0f      	ldr	r2, [pc, #60]	; (8003a88 <TIM_Base_SetConfig+0x118>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d003      	beq.n	8003a58 <TIM_Base_SetConfig+0xe8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a0e      	ldr	r2, [pc, #56]	; (8003a8c <TIM_Base_SetConfig+0x11c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d103      	bne.n	8003a60 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	615a      	str	r2, [r3, #20]
}
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40012c00 	.word	0x40012c00
 8003a78:	40000400 	.word	0x40000400
 8003a7c:	40000800 	.word	0x40000800
 8003a80:	40013400 	.word	0x40013400
 8003a84:	40014000 	.word	0x40014000
 8003a88:	40014400 	.word	0x40014400
 8003a8c:	40014800 	.word	0x40014800

08003a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	f023 0201 	bic.w	r2, r3, #1
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f023 030a 	bic.w	r3, r3, #10
 8003acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	621a      	str	r2, [r3, #32]
}
 8003ae2:	bf00      	nop
 8003ae4:	371c      	adds	r7, #28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b087      	sub	sp, #28
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f023 0210 	bic.w	r2, r3, #16
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	031b      	lsls	r3, r3, #12
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	621a      	str	r2, [r3, #32]
}
 8003b42:	bf00      	nop
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f043 0307 	orr.w	r3, r3, #7
 8003b74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	609a      	str	r2, [r3, #8]
}
 8003b7c:	bf00      	nop
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	021a      	lsls	r2, r3, #8
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	609a      	str	r2, [r3, #8]
}
 8003bbc:	bf00      	nop
 8003bbe:	371c      	adds	r7, #28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e065      	b.n	8003cac <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a2c      	ldr	r2, [pc, #176]	; (8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d004      	beq.n	8003c14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a2b      	ldr	r2, [pc, #172]	; (8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d108      	bne.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a1b      	ldr	r2, [pc, #108]	; (8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d018      	beq.n	8003c80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c56:	d013      	beq.n	8003c80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a18      	ldr	r2, [pc, #96]	; (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00e      	beq.n	8003c80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a17      	ldr	r2, [pc, #92]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d009      	beq.n	8003c80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a12      	ldr	r2, [pc, #72]	; (8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d004      	beq.n	8003c80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a13      	ldr	r2, [pc, #76]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d10c      	bne.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	40012c00 	.word	0x40012c00
 8003cbc:	40013400 	.word	0x40013400
 8003cc0:	40000400 	.word	0x40000400
 8003cc4:	40000800 	.word	0x40000800
 8003cc8:	40014000 	.word	0x40014000

08003ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e042      	b.n	8003df0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d106      	bne.n	8003d82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7fd f927 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2224      	movs	r2, #36	; 0x24
 8003d86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0201 	bic.w	r2, r2, #1
 8003d98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f8c2 	bl	8003f24 <UART_SetConfig>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e022      	b.n	8003df0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fb52 	bl	800445c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 fbd9 	bl	80045a0 <UART_CheckIdleState>
 8003dee:	4603      	mov	r3, r0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08a      	sub	sp, #40	; 0x28
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	603b      	str	r3, [r7, #0]
 8003e04:	4613      	mov	r3, r2
 8003e06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0e:	2b20      	cmp	r3, #32
 8003e10:	f040 8083 	bne.w	8003f1a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <HAL_UART_Transmit+0x28>
 8003e1a:	88fb      	ldrh	r3, [r7, #6]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e07b      	b.n	8003f1c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d101      	bne.n	8003e32 <HAL_UART_Transmit+0x3a>
 8003e2e:	2302      	movs	r3, #2
 8003e30:	e074      	b.n	8003f1c <HAL_UART_Transmit+0x124>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2221      	movs	r2, #33	; 0x21
 8003e46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e4a:	f7fd f96d 	bl	8001128 <HAL_GetTick>
 8003e4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	88fa      	ldrh	r2, [r7, #6]
 8003e54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	88fa      	ldrh	r2, [r7, #6]
 8003e5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e68:	d108      	bne.n	8003e7c <HAL_UART_Transmit+0x84>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d104      	bne.n	8003e7c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	61bb      	str	r3, [r7, #24]
 8003e7a:	e003      	b.n	8003e84 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e80:	2300      	movs	r3, #0
 8003e82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003e8c:	e02c      	b.n	8003ee8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2200      	movs	r2, #0
 8003e96:	2180      	movs	r1, #128	; 0x80
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 fbcc 	bl	8004636 <UART_WaitOnFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e039      	b.n	8003f1c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10b      	bne.n	8003ec6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ebc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	3302      	adds	r3, #2
 8003ec2:	61bb      	str	r3, [r7, #24]
 8003ec4:	e007      	b.n	8003ed6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	781a      	ldrb	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1cc      	bne.n	8003e8e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	2200      	movs	r2, #0
 8003efc:	2140      	movs	r1, #64	; 0x40
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 fb99 	bl	8004636 <UART_WaitOnFlagUntilTimeout>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e006      	b.n	8003f1c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	e000      	b.n	8003f1c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003f1a:	2302      	movs	r3, #2
  }
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3720      	adds	r7, #32
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f24:	b5b0      	push	{r4, r5, r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	4baf      	ldr	r3, [pc, #700]	; (800420c <UART_SetConfig+0x2e8>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6812      	ldr	r2, [r2, #0]
 8003f56:	69f9      	ldr	r1, [r7, #28]
 8003f58:	430b      	orrs	r3, r1
 8003f5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4aa4      	ldr	r2, [pc, #656]	; (8004210 <UART_SetConfig+0x2ec>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d004      	beq.n	8003f8c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	69fa      	ldr	r2, [r7, #28]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003f96:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	69f9      	ldr	r1, [r7, #28]
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	f023 010f 	bic.w	r1, r3, #15
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a95      	ldr	r2, [pc, #596]	; (8004214 <UART_SetConfig+0x2f0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d120      	bne.n	8004006 <UART_SetConfig+0xe2>
 8003fc4:	4b94      	ldr	r3, [pc, #592]	; (8004218 <UART_SetConfig+0x2f4>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	d816      	bhi.n	8004000 <UART_SetConfig+0xdc>
 8003fd2:	a201      	add	r2, pc, #4	; (adr r2, 8003fd8 <UART_SetConfig+0xb4>)
 8003fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd8:	08003fe9 	.word	0x08003fe9
 8003fdc:	08003ff5 	.word	0x08003ff5
 8003fe0:	08003fef 	.word	0x08003fef
 8003fe4:	08003ffb 	.word	0x08003ffb
 8003fe8:	2301      	movs	r3, #1
 8003fea:	76fb      	strb	r3, [r7, #27]
 8003fec:	e0bc      	b.n	8004168 <UART_SetConfig+0x244>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	76fb      	strb	r3, [r7, #27]
 8003ff2:	e0b9      	b.n	8004168 <UART_SetConfig+0x244>
 8003ff4:	2304      	movs	r3, #4
 8003ff6:	76fb      	strb	r3, [r7, #27]
 8003ff8:	e0b6      	b.n	8004168 <UART_SetConfig+0x244>
 8003ffa:	2308      	movs	r3, #8
 8003ffc:	76fb      	strb	r3, [r7, #27]
 8003ffe:	e0b3      	b.n	8004168 <UART_SetConfig+0x244>
 8004000:	2310      	movs	r3, #16
 8004002:	76fb      	strb	r3, [r7, #27]
 8004004:	e0b0      	b.n	8004168 <UART_SetConfig+0x244>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a84      	ldr	r2, [pc, #528]	; (800421c <UART_SetConfig+0x2f8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d132      	bne.n	8004076 <UART_SetConfig+0x152>
 8004010:	4b81      	ldr	r3, [pc, #516]	; (8004218 <UART_SetConfig+0x2f4>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b0c      	cmp	r3, #12
 800401c:	d828      	bhi.n	8004070 <UART_SetConfig+0x14c>
 800401e:	a201      	add	r2, pc, #4	; (adr r2, 8004024 <UART_SetConfig+0x100>)
 8004020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004024:	08004059 	.word	0x08004059
 8004028:	08004071 	.word	0x08004071
 800402c:	08004071 	.word	0x08004071
 8004030:	08004071 	.word	0x08004071
 8004034:	08004065 	.word	0x08004065
 8004038:	08004071 	.word	0x08004071
 800403c:	08004071 	.word	0x08004071
 8004040:	08004071 	.word	0x08004071
 8004044:	0800405f 	.word	0x0800405f
 8004048:	08004071 	.word	0x08004071
 800404c:	08004071 	.word	0x08004071
 8004050:	08004071 	.word	0x08004071
 8004054:	0800406b 	.word	0x0800406b
 8004058:	2300      	movs	r3, #0
 800405a:	76fb      	strb	r3, [r7, #27]
 800405c:	e084      	b.n	8004168 <UART_SetConfig+0x244>
 800405e:	2302      	movs	r3, #2
 8004060:	76fb      	strb	r3, [r7, #27]
 8004062:	e081      	b.n	8004168 <UART_SetConfig+0x244>
 8004064:	2304      	movs	r3, #4
 8004066:	76fb      	strb	r3, [r7, #27]
 8004068:	e07e      	b.n	8004168 <UART_SetConfig+0x244>
 800406a:	2308      	movs	r3, #8
 800406c:	76fb      	strb	r3, [r7, #27]
 800406e:	e07b      	b.n	8004168 <UART_SetConfig+0x244>
 8004070:	2310      	movs	r3, #16
 8004072:	76fb      	strb	r3, [r7, #27]
 8004074:	e078      	b.n	8004168 <UART_SetConfig+0x244>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a69      	ldr	r2, [pc, #420]	; (8004220 <UART_SetConfig+0x2fc>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d120      	bne.n	80040c2 <UART_SetConfig+0x19e>
 8004080:	4b65      	ldr	r3, [pc, #404]	; (8004218 <UART_SetConfig+0x2f4>)
 8004082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004086:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800408a:	2b30      	cmp	r3, #48	; 0x30
 800408c:	d013      	beq.n	80040b6 <UART_SetConfig+0x192>
 800408e:	2b30      	cmp	r3, #48	; 0x30
 8004090:	d814      	bhi.n	80040bc <UART_SetConfig+0x198>
 8004092:	2b20      	cmp	r3, #32
 8004094:	d009      	beq.n	80040aa <UART_SetConfig+0x186>
 8004096:	2b20      	cmp	r3, #32
 8004098:	d810      	bhi.n	80040bc <UART_SetConfig+0x198>
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <UART_SetConfig+0x180>
 800409e:	2b10      	cmp	r3, #16
 80040a0:	d006      	beq.n	80040b0 <UART_SetConfig+0x18c>
 80040a2:	e00b      	b.n	80040bc <UART_SetConfig+0x198>
 80040a4:	2300      	movs	r3, #0
 80040a6:	76fb      	strb	r3, [r7, #27]
 80040a8:	e05e      	b.n	8004168 <UART_SetConfig+0x244>
 80040aa:	2302      	movs	r3, #2
 80040ac:	76fb      	strb	r3, [r7, #27]
 80040ae:	e05b      	b.n	8004168 <UART_SetConfig+0x244>
 80040b0:	2304      	movs	r3, #4
 80040b2:	76fb      	strb	r3, [r7, #27]
 80040b4:	e058      	b.n	8004168 <UART_SetConfig+0x244>
 80040b6:	2308      	movs	r3, #8
 80040b8:	76fb      	strb	r3, [r7, #27]
 80040ba:	e055      	b.n	8004168 <UART_SetConfig+0x244>
 80040bc:	2310      	movs	r3, #16
 80040be:	76fb      	strb	r3, [r7, #27]
 80040c0:	e052      	b.n	8004168 <UART_SetConfig+0x244>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a57      	ldr	r2, [pc, #348]	; (8004224 <UART_SetConfig+0x300>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d120      	bne.n	800410e <UART_SetConfig+0x1ea>
 80040cc:	4b52      	ldr	r3, [pc, #328]	; (8004218 <UART_SetConfig+0x2f4>)
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040d6:	2bc0      	cmp	r3, #192	; 0xc0
 80040d8:	d013      	beq.n	8004102 <UART_SetConfig+0x1de>
 80040da:	2bc0      	cmp	r3, #192	; 0xc0
 80040dc:	d814      	bhi.n	8004108 <UART_SetConfig+0x1e4>
 80040de:	2b80      	cmp	r3, #128	; 0x80
 80040e0:	d009      	beq.n	80040f6 <UART_SetConfig+0x1d2>
 80040e2:	2b80      	cmp	r3, #128	; 0x80
 80040e4:	d810      	bhi.n	8004108 <UART_SetConfig+0x1e4>
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <UART_SetConfig+0x1cc>
 80040ea:	2b40      	cmp	r3, #64	; 0x40
 80040ec:	d006      	beq.n	80040fc <UART_SetConfig+0x1d8>
 80040ee:	e00b      	b.n	8004108 <UART_SetConfig+0x1e4>
 80040f0:	2300      	movs	r3, #0
 80040f2:	76fb      	strb	r3, [r7, #27]
 80040f4:	e038      	b.n	8004168 <UART_SetConfig+0x244>
 80040f6:	2302      	movs	r3, #2
 80040f8:	76fb      	strb	r3, [r7, #27]
 80040fa:	e035      	b.n	8004168 <UART_SetConfig+0x244>
 80040fc:	2304      	movs	r3, #4
 80040fe:	76fb      	strb	r3, [r7, #27]
 8004100:	e032      	b.n	8004168 <UART_SetConfig+0x244>
 8004102:	2308      	movs	r3, #8
 8004104:	76fb      	strb	r3, [r7, #27]
 8004106:	e02f      	b.n	8004168 <UART_SetConfig+0x244>
 8004108:	2310      	movs	r3, #16
 800410a:	76fb      	strb	r3, [r7, #27]
 800410c:	e02c      	b.n	8004168 <UART_SetConfig+0x244>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a3f      	ldr	r2, [pc, #252]	; (8004210 <UART_SetConfig+0x2ec>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d125      	bne.n	8004164 <UART_SetConfig+0x240>
 8004118:	4b3f      	ldr	r3, [pc, #252]	; (8004218 <UART_SetConfig+0x2f4>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004122:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004126:	d017      	beq.n	8004158 <UART_SetConfig+0x234>
 8004128:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800412c:	d817      	bhi.n	800415e <UART_SetConfig+0x23a>
 800412e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004132:	d00b      	beq.n	800414c <UART_SetConfig+0x228>
 8004134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004138:	d811      	bhi.n	800415e <UART_SetConfig+0x23a>
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <UART_SetConfig+0x222>
 800413e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004142:	d006      	beq.n	8004152 <UART_SetConfig+0x22e>
 8004144:	e00b      	b.n	800415e <UART_SetConfig+0x23a>
 8004146:	2300      	movs	r3, #0
 8004148:	76fb      	strb	r3, [r7, #27]
 800414a:	e00d      	b.n	8004168 <UART_SetConfig+0x244>
 800414c:	2302      	movs	r3, #2
 800414e:	76fb      	strb	r3, [r7, #27]
 8004150:	e00a      	b.n	8004168 <UART_SetConfig+0x244>
 8004152:	2304      	movs	r3, #4
 8004154:	76fb      	strb	r3, [r7, #27]
 8004156:	e007      	b.n	8004168 <UART_SetConfig+0x244>
 8004158:	2308      	movs	r3, #8
 800415a:	76fb      	strb	r3, [r7, #27]
 800415c:	e004      	b.n	8004168 <UART_SetConfig+0x244>
 800415e:	2310      	movs	r3, #16
 8004160:	76fb      	strb	r3, [r7, #27]
 8004162:	e001      	b.n	8004168 <UART_SetConfig+0x244>
 8004164:	2310      	movs	r3, #16
 8004166:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a28      	ldr	r2, [pc, #160]	; (8004210 <UART_SetConfig+0x2ec>)
 800416e:	4293      	cmp	r3, r2
 8004170:	f040 809e 	bne.w	80042b0 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004174:	7efb      	ldrb	r3, [r7, #27]
 8004176:	2b08      	cmp	r3, #8
 8004178:	d823      	bhi.n	80041c2 <UART_SetConfig+0x29e>
 800417a:	a201      	add	r2, pc, #4	; (adr r2, 8004180 <UART_SetConfig+0x25c>)
 800417c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004180:	080041a5 	.word	0x080041a5
 8004184:	080041c3 	.word	0x080041c3
 8004188:	080041ad 	.word	0x080041ad
 800418c:	080041c3 	.word	0x080041c3
 8004190:	080041b3 	.word	0x080041b3
 8004194:	080041c3 	.word	0x080041c3
 8004198:	080041c3 	.word	0x080041c3
 800419c:	080041c3 	.word	0x080041c3
 80041a0:	080041bb 	.word	0x080041bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041a4:	f7fe fd8a 	bl	8002cbc <HAL_RCC_GetPCLK1Freq>
 80041a8:	6178      	str	r0, [r7, #20]
        break;
 80041aa:	e00f      	b.n	80041cc <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041ac:	4b1e      	ldr	r3, [pc, #120]	; (8004228 <UART_SetConfig+0x304>)
 80041ae:	617b      	str	r3, [r7, #20]
        break;
 80041b0:	e00c      	b.n	80041cc <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041b2:	f7fe fd15 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 80041b6:	6178      	str	r0, [r7, #20]
        break;
 80041b8:	e008      	b.n	80041cc <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041be:	617b      	str	r3, [r7, #20]
        break;
 80041c0:	e004      	b.n	80041cc <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	76bb      	strb	r3, [r7, #26]
        break;
 80041ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 812c 	beq.w	800442c <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	4a14      	ldr	r2, [pc, #80]	; (800422c <UART_SetConfig+0x308>)
 80041da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041de:	461a      	mov	r2, r3
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80041e6:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	4613      	mov	r3, r2
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	4413      	add	r3, r2
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d305      	bcc.n	8004204 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	429a      	cmp	r2, r3
 8004202:	d915      	bls.n	8004230 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	76bb      	strb	r3, [r7, #26]
 8004208:	e110      	b.n	800442c <UART_SetConfig+0x508>
 800420a:	bf00      	nop
 800420c:	cfff69f3 	.word	0xcfff69f3
 8004210:	40008000 	.word	0x40008000
 8004214:	40013800 	.word	0x40013800
 8004218:	40021000 	.word	0x40021000
 800421c:	40004400 	.word	0x40004400
 8004220:	40004800 	.word	0x40004800
 8004224:	40004c00 	.word	0x40004c00
 8004228:	00f42400 	.word	0x00f42400
 800422c:	08007864 	.word	0x08007864
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	4618      	mov	r0, r3
 8004234:	f04f 0100 	mov.w	r1, #0
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	4a85      	ldr	r2, [pc, #532]	; (8004454 <UART_SetConfig+0x530>)
 800423e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004242:	b29a      	uxth	r2, r3
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	f7fb fff2 	bl	8000230 <__aeabi_uldivmod>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4610      	mov	r0, r2
 8004252:	4619      	mov	r1, r3
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	020b      	lsls	r3, r1, #8
 800425e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004262:	0202      	lsls	r2, r0, #8
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	6849      	ldr	r1, [r1, #4]
 8004268:	0849      	lsrs	r1, r1, #1
 800426a:	4608      	mov	r0, r1
 800426c:	f04f 0100 	mov.w	r1, #0
 8004270:	1814      	adds	r4, r2, r0
 8004272:	eb43 0501 	adc.w	r5, r3, r1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	461a      	mov	r2, r3
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	4620      	mov	r0, r4
 8004282:	4629      	mov	r1, r5
 8004284:	f7fb ffd4 	bl	8000230 <__aeabi_uldivmod>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4613      	mov	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004296:	d308      	bcc.n	80042aa <UART_SetConfig+0x386>
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800429e:	d204      	bcs.n	80042aa <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	60da      	str	r2, [r3, #12]
 80042a8:	e0c0      	b.n	800442c <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	76bb      	strb	r3, [r7, #26]
 80042ae:	e0bd      	b.n	800442c <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042b8:	d164      	bne.n	8004384 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80042ba:	7efb      	ldrb	r3, [r7, #27]
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d828      	bhi.n	8004312 <UART_SetConfig+0x3ee>
 80042c0:	a201      	add	r2, pc, #4	; (adr r2, 80042c8 <UART_SetConfig+0x3a4>)
 80042c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c6:	bf00      	nop
 80042c8:	080042ed 	.word	0x080042ed
 80042cc:	080042f5 	.word	0x080042f5
 80042d0:	080042fd 	.word	0x080042fd
 80042d4:	08004313 	.word	0x08004313
 80042d8:	08004303 	.word	0x08004303
 80042dc:	08004313 	.word	0x08004313
 80042e0:	08004313 	.word	0x08004313
 80042e4:	08004313 	.word	0x08004313
 80042e8:	0800430b 	.word	0x0800430b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042ec:	f7fe fce6 	bl	8002cbc <HAL_RCC_GetPCLK1Freq>
 80042f0:	6178      	str	r0, [r7, #20]
        break;
 80042f2:	e013      	b.n	800431c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042f4:	f7fe fcf8 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 80042f8:	6178      	str	r0, [r7, #20]
        break;
 80042fa:	e00f      	b.n	800431c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042fc:	4b56      	ldr	r3, [pc, #344]	; (8004458 <UART_SetConfig+0x534>)
 80042fe:	617b      	str	r3, [r7, #20]
        break;
 8004300:	e00c      	b.n	800431c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004302:	f7fe fc6d 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8004306:	6178      	str	r0, [r7, #20]
        break;
 8004308:	e008      	b.n	800431c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800430a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800430e:	617b      	str	r3, [r7, #20]
        break;
 8004310:	e004      	b.n	800431c <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	76bb      	strb	r3, [r7, #26]
        break;
 800431a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 8084 	beq.w	800442c <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	4a4a      	ldr	r2, [pc, #296]	; (8004454 <UART_SetConfig+0x530>)
 800432a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800432e:	461a      	mov	r2, r3
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	fbb3 f3f2 	udiv	r3, r3, r2
 8004336:	005a      	lsls	r2, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	085b      	lsrs	r3, r3, #1
 800433e:	441a      	add	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	fbb2 f3f3 	udiv	r3, r2, r3
 8004348:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2b0f      	cmp	r3, #15
 800434e:	d916      	bls.n	800437e <UART_SetConfig+0x45a>
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004356:	d212      	bcs.n	800437e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	b29b      	uxth	r3, r3
 800435c:	f023 030f 	bic.w	r3, r3, #15
 8004360:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	085b      	lsrs	r3, r3, #1
 8004366:	b29b      	uxth	r3, r3
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	b29a      	uxth	r2, r3
 800436e:	89fb      	ldrh	r3, [r7, #14]
 8004370:	4313      	orrs	r3, r2
 8004372:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	89fa      	ldrh	r2, [r7, #14]
 800437a:	60da      	str	r2, [r3, #12]
 800437c:	e056      	b.n	800442c <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	76bb      	strb	r3, [r7, #26]
 8004382:	e053      	b.n	800442c <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004384:	7efb      	ldrb	r3, [r7, #27]
 8004386:	2b08      	cmp	r3, #8
 8004388:	d827      	bhi.n	80043da <UART_SetConfig+0x4b6>
 800438a:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <UART_SetConfig+0x46c>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	080043b5 	.word	0x080043b5
 8004394:	080043bd 	.word	0x080043bd
 8004398:	080043c5 	.word	0x080043c5
 800439c:	080043db 	.word	0x080043db
 80043a0:	080043cb 	.word	0x080043cb
 80043a4:	080043db 	.word	0x080043db
 80043a8:	080043db 	.word	0x080043db
 80043ac:	080043db 	.word	0x080043db
 80043b0:	080043d3 	.word	0x080043d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b4:	f7fe fc82 	bl	8002cbc <HAL_RCC_GetPCLK1Freq>
 80043b8:	6178      	str	r0, [r7, #20]
        break;
 80043ba:	e013      	b.n	80043e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043bc:	f7fe fc94 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 80043c0:	6178      	str	r0, [r7, #20]
        break;
 80043c2:	e00f      	b.n	80043e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043c4:	4b24      	ldr	r3, [pc, #144]	; (8004458 <UART_SetConfig+0x534>)
 80043c6:	617b      	str	r3, [r7, #20]
        break;
 80043c8:	e00c      	b.n	80043e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ca:	f7fe fc09 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 80043ce:	6178      	str	r0, [r7, #20]
        break;
 80043d0:	e008      	b.n	80043e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043d6:	617b      	str	r3, [r7, #20]
        break;
 80043d8:	e004      	b.n	80043e4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	76bb      	strb	r3, [r7, #26]
        break;
 80043e2:	bf00      	nop
    }

    if (pclk != 0U)
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d020      	beq.n	800442c <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	4a19      	ldr	r2, [pc, #100]	; (8004454 <UART_SetConfig+0x530>)
 80043f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043f4:	461a      	mov	r2, r3
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	085b      	lsrs	r3, r3, #1
 8004402:	441a      	add	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	fbb2 f3f3 	udiv	r3, r2, r3
 800440c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	2b0f      	cmp	r3, #15
 8004412:	d909      	bls.n	8004428 <UART_SetConfig+0x504>
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441a:	d205      	bcs.n	8004428 <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	b29a      	uxth	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60da      	str	r2, [r3, #12]
 8004426:	e001      	b.n	800442c <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004448:	7ebb      	ldrb	r3, [r7, #26]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3720      	adds	r7, #32
 800444e:	46bd      	mov	sp, r7
 8004450:	bdb0      	pop	{r4, r5, r7, pc}
 8004452:	bf00      	nop
 8004454:	08007864 	.word	0x08007864
 8004458:	00f42400 	.word	0x00f42400

0800445c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	f003 0310 	and.w	r3, r3, #16
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b00      	cmp	r3, #0
 800453a:	d01a      	beq.n	8004572 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800455a:	d10a      	bne.n	8004572 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	605a      	str	r2, [r3, #4]
  }
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045b0:	f7fc fdba 	bl	8001128 <HAL_GetTick>
 80045b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d10e      	bne.n	80045e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f82f 	bl	8004636 <UART_WaitOnFlagUntilTimeout>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e025      	b.n	800462e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	d10e      	bne.n	800460e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f819 	bl	8004636 <UART_WaitOnFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e00f      	b.n	800462e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2220      	movs	r2, #32
 8004612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2220      	movs	r2, #32
 800461a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b09c      	sub	sp, #112	; 0x70
 800463a:	af00      	add	r7, sp, #0
 800463c:	60f8      	str	r0, [r7, #12]
 800463e:	60b9      	str	r1, [r7, #8]
 8004640:	603b      	str	r3, [r7, #0]
 8004642:	4613      	mov	r3, r2
 8004644:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004646:	e0a9      	b.n	800479c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800464a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464e:	f000 80a5 	beq.w	800479c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004652:	f7fc fd69 	bl	8001128 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800465e:	429a      	cmp	r2, r3
 8004660:	d302      	bcc.n	8004668 <UART_WaitOnFlagUntilTimeout+0x32>
 8004662:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004664:	2b00      	cmp	r3, #0
 8004666:	d140      	bne.n	80046ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004670:	e853 3f00 	ldrex	r3, [r3]
 8004674:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004678:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800467c:	667b      	str	r3, [r7, #100]	; 0x64
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004686:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004688:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800468c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800468e:	e841 2300 	strex	r3, r2, [r1]
 8004692:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1e6      	bne.n	8004668 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3308      	adds	r3, #8
 80046a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a4:	e853 3f00 	ldrex	r3, [r3]
 80046a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	663b      	str	r3, [r7, #96]	; 0x60
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3308      	adds	r3, #8
 80046b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80046bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80046c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046c2:	e841 2300 	strex	r3, r2, [r1]
 80046c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80046c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1e5      	bne.n	800469a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2220      	movs	r2, #32
 80046da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e069      	b.n	80047be <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d051      	beq.n	800479c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004706:	d149      	bne.n	800479c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004710:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471a:	e853 3f00 	ldrex	r3, [r3]
 800471e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004726:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	461a      	mov	r2, r3
 800472e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004730:	637b      	str	r3, [r7, #52]	; 0x34
 8004732:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004734:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004738:	e841 2300 	strex	r3, r2, [r1]
 800473c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800473e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1e6      	bne.n	8004712 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3308      	adds	r3, #8
 800474a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	e853 3f00 	ldrex	r3, [r3]
 8004752:	613b      	str	r3, [r7, #16]
   return(result);
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f023 0301 	bic.w	r3, r3, #1
 800475a:	66bb      	str	r3, [r7, #104]	; 0x68
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3308      	adds	r3, #8
 8004762:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004764:	623a      	str	r2, [r7, #32]
 8004766:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004768:	69f9      	ldr	r1, [r7, #28]
 800476a:	6a3a      	ldr	r2, [r7, #32]
 800476c:	e841 2300 	strex	r3, r2, [r1]
 8004770:	61bb      	str	r3, [r7, #24]
   return(result);
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1e5      	bne.n	8004744 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2220      	movs	r2, #32
 800477c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2220      	movs	r2, #32
 800478c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e010      	b.n	80047be <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	69da      	ldr	r2, [r3, #28]
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	4013      	ands	r3, r2
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	bf0c      	ite	eq
 80047ac:	2301      	moveq	r3, #1
 80047ae:	2300      	movne	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	461a      	mov	r2, r3
 80047b4:	79fb      	ldrb	r3, [r7, #7]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	f43f af46 	beq.w	8004648 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3770      	adds	r7, #112	; 0x70
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b085      	sub	sp, #20
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_UARTEx_DisableFifoMode+0x16>
 80047d8:	2302      	movs	r3, #2
 80047da:	e027      	b.n	800482c <HAL_UARTEx_DisableFifoMode+0x66>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2224      	movs	r2, #36	; 0x24
 80047e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800480a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2220      	movs	r2, #32
 800481e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800484c:	2302      	movs	r3, #2
 800484e:	e02d      	b.n	80048ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2224      	movs	r2, #36	; 0x24
 800485c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0201 	bic.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f84f 	bl	8004930 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2220      	movs	r2, #32
 800489e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e02d      	b.n	8004928 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2224      	movs	r2, #36	; 0x24
 80048d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0201 	bic.w	r2, r2, #1
 80048f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f811 	bl	8004930 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2220      	movs	r2, #32
 800491a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800493c:	2b00      	cmp	r3, #0
 800493e:	d108      	bne.n	8004952 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004950:	e031      	b.n	80049b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004952:	2308      	movs	r3, #8
 8004954:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004956:	2308      	movs	r3, #8
 8004958:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	0e5b      	lsrs	r3, r3, #25
 8004962:	b2db      	uxtb	r3, r3
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	0f5b      	lsrs	r3, r3, #29
 8004972:	b2db      	uxtb	r3, r3
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800497a:	7bbb      	ldrb	r3, [r7, #14]
 800497c:	7b3a      	ldrb	r2, [r7, #12]
 800497e:	4911      	ldr	r1, [pc, #68]	; (80049c4 <UARTEx_SetNbDataToProcess+0x94>)
 8004980:	5c8a      	ldrb	r2, [r1, r2]
 8004982:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004986:	7b3a      	ldrb	r2, [r7, #12]
 8004988:	490f      	ldr	r1, [pc, #60]	; (80049c8 <UARTEx_SetNbDataToProcess+0x98>)
 800498a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800498c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004990:	b29a      	uxth	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	7b7a      	ldrb	r2, [r7, #13]
 800499c:	4909      	ldr	r1, [pc, #36]	; (80049c4 <UARTEx_SetNbDataToProcess+0x94>)
 800499e:	5c8a      	ldrb	r2, [r1, r2]
 80049a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80049a4:	7b7a      	ldrb	r2, [r7, #13]
 80049a6:	4908      	ldr	r1, [pc, #32]	; (80049c8 <UARTEx_SetNbDataToProcess+0x98>)
 80049a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80049aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80049b6:	bf00      	nop
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	0800787c 	.word	0x0800787c
 80049c8:	08007884 	.word	0x08007884

080049cc <__NVIC_SetPriority>:
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	6039      	str	r1, [r7, #0]
 80049d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	db0a      	blt.n	80049f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	490c      	ldr	r1, [pc, #48]	; (8004a18 <__NVIC_SetPriority+0x4c>)
 80049e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ea:	0112      	lsls	r2, r2, #4
 80049ec:	b2d2      	uxtb	r2, r2
 80049ee:	440b      	add	r3, r1
 80049f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80049f4:	e00a      	b.n	8004a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	4908      	ldr	r1, [pc, #32]	; (8004a1c <__NVIC_SetPriority+0x50>)
 80049fc:	79fb      	ldrb	r3, [r7, #7]
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	3b04      	subs	r3, #4
 8004a04:	0112      	lsls	r2, r2, #4
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	440b      	add	r3, r1
 8004a0a:	761a      	strb	r2, [r3, #24]
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	e000e100 	.word	0xe000e100
 8004a1c:	e000ed00 	.word	0xe000ed00

08004a20 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004a24:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <SysTick_Handler+0x1c>)
 8004a26:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004a28:	f001 fd28 	bl	800647c <xTaskGetSchedulerState>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d001      	beq.n	8004a36 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004a32:	f002 fb11 	bl	8007058 <xPortSysTickHandler>
  }
}
 8004a36:	bf00      	nop
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	e000e010 	.word	0xe000e010

08004a40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004a44:	2100      	movs	r1, #0
 8004a46:	f06f 0004 	mvn.w	r0, #4
 8004a4a:	f7ff ffbf 	bl	80049cc <__NVIC_SetPriority>
#endif
}
 8004a4e:	bf00      	nop
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a5a:	f3ef 8305 	mrs	r3, IPSR
 8004a5e:	603b      	str	r3, [r7, #0]
  return(result);
 8004a60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004a66:	f06f 0305 	mvn.w	r3, #5
 8004a6a:	607b      	str	r3, [r7, #4]
 8004a6c:	e00c      	b.n	8004a88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004a6e:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <osKernelInitialize+0x44>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d105      	bne.n	8004a82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004a76:	4b08      	ldr	r3, [pc, #32]	; (8004a98 <osKernelInitialize+0x44>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	607b      	str	r3, [r7, #4]
 8004a80:	e002      	b.n	8004a88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004a82:	f04f 33ff 	mov.w	r3, #4294967295
 8004a86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004a88:	687b      	ldr	r3, [r7, #4]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	20000090 	.word	0x20000090

08004a9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aa2:	f3ef 8305 	mrs	r3, IPSR
 8004aa6:	603b      	str	r3, [r7, #0]
  return(result);
 8004aa8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004aae:	f06f 0305 	mvn.w	r3, #5
 8004ab2:	607b      	str	r3, [r7, #4]
 8004ab4:	e010      	b.n	8004ad8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004ab6:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <osKernelStart+0x48>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d109      	bne.n	8004ad2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004abe:	f7ff ffbf 	bl	8004a40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004ac2:	4b08      	ldr	r3, [pc, #32]	; (8004ae4 <osKernelStart+0x48>)
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004ac8:	f001 f87c 	bl	8005bc4 <vTaskStartScheduler>
      stat = osOK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	607b      	str	r3, [r7, #4]
 8004ad0:	e002      	b.n	8004ad8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ad8:	687b      	ldr	r3, [r7, #4]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000090 	.word	0x20000090

08004ae8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08e      	sub	sp, #56	; 0x38
 8004aec:	af04      	add	r7, sp, #16
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004af8:	f3ef 8305 	mrs	r3, IPSR
 8004afc:	617b      	str	r3, [r7, #20]
  return(result);
 8004afe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d17e      	bne.n	8004c02 <osThreadNew+0x11a>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d07b      	beq.n	8004c02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004b0a:	2380      	movs	r3, #128	; 0x80
 8004b0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004b0e:	2318      	movs	r3, #24
 8004b10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004b16:	f04f 33ff 	mov.w	r3, #4294967295
 8004b1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d045      	beq.n	8004bae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <osThreadNew+0x48>
        name = attr->name;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d008      	beq.n	8004b56 <osThreadNew+0x6e>
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	2b38      	cmp	r3, #56	; 0x38
 8004b48:	d805      	bhi.n	8004b56 <osThreadNew+0x6e>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <osThreadNew+0x72>
        return (NULL);
 8004b56:	2300      	movs	r3, #0
 8004b58:	e054      	b.n	8004c04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	089b      	lsrs	r3, r3, #2
 8004b68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00e      	beq.n	8004b90 <osThreadNew+0xa8>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	2bbb      	cmp	r3, #187	; 0xbb
 8004b78:	d90a      	bls.n	8004b90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d006      	beq.n	8004b90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <osThreadNew+0xa8>
        mem = 1;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	e010      	b.n	8004bb2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10c      	bne.n	8004bb2 <osThreadNew+0xca>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d108      	bne.n	8004bb2 <osThreadNew+0xca>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d104      	bne.n	8004bb2 <osThreadNew+0xca>
          mem = 0;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	61bb      	str	r3, [r7, #24]
 8004bac:	e001      	b.n	8004bb2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d110      	bne.n	8004bda <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bc0:	9202      	str	r2, [sp, #8]
 8004bc2:	9301      	str	r3, [sp, #4]
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	6a3a      	ldr	r2, [r7, #32]
 8004bcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 fe0c 	bl	80057ec <xTaskCreateStatic>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	613b      	str	r3, [r7, #16]
 8004bd8:	e013      	b.n	8004c02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d110      	bne.n	8004c02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	f107 0310 	add.w	r3, r7, #16
 8004be8:	9301      	str	r3, [sp, #4]
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 fe57 	bl	80058a6 <xTaskCreate>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d001      	beq.n	8004c02 <osThreadNew+0x11a>
            hTask = NULL;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c02:	693b      	ldr	r3, [r7, #16]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3728      	adds	r7, #40	; 0x28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c14:	f3ef 8305 	mrs	r3, IPSR
 8004c18:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c1a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <osDelay+0x1c>
    stat = osErrorISR;
 8004c20:	f06f 0305 	mvn.w	r3, #5
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	e007      	b.n	8004c38 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d002      	beq.n	8004c38 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 ff92 	bl	8005b5c <vTaskDelay>
    }
  }

  return (stat);
 8004c38:	68fb      	ldr	r3, [r7, #12]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
	...

08004c44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4a07      	ldr	r2, [pc, #28]	; (8004c70 <vApplicationGetIdleTaskMemory+0x2c>)
 8004c54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4a06      	ldr	r2, [pc, #24]	; (8004c74 <vApplicationGetIdleTaskMemory+0x30>)
 8004c5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2280      	movs	r2, #128	; 0x80
 8004c60:	601a      	str	r2, [r3, #0]
}
 8004c62:	bf00      	nop
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	20000094 	.word	0x20000094
 8004c74:	20000150 	.word	0x20000150

08004c78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4a07      	ldr	r2, [pc, #28]	; (8004ca4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004c88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	4a06      	ldr	r2, [pc, #24]	; (8004ca8 <vApplicationGetTimerTaskMemory+0x30>)
 8004c8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c96:	601a      	str	r2, [r3, #0]
}
 8004c98:	bf00      	nop
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	20000350 	.word	0x20000350
 8004ca8:	2000040c 	.word	0x2000040c

08004cac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f103 0208 	add.w	r2, r3, #8
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f103 0208 	add.w	r2, r3, #8
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f103 0208 	add.w	r2, r3, #8
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d06:	b480      	push	{r7}
 8004d08:	b085      	sub	sp, #20
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	601a      	str	r2, [r3, #0]
}
 8004d42:	bf00      	nop
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b085      	sub	sp, #20
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d64:	d103      	bne.n	8004d6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	e00c      	b.n	8004d88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3308      	adds	r3, #8
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	e002      	b.n	8004d7c <vListInsert+0x2e>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d2f6      	bcs.n	8004d76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	601a      	str	r2, [r3, #0]
}
 8004db4:	bf00      	nop
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6892      	ldr	r2, [r2, #8]
 8004dd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6852      	ldr	r2, [r2, #4]
 8004de0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d103      	bne.n	8004df4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	1e5a      	subs	r2, r3, #1
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10a      	bne.n	8004e3e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e3a:	bf00      	nop
 8004e3c:	e7fe      	b.n	8004e3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e3e:	f002 f879 	bl	8006f34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4a:	68f9      	ldr	r1, [r7, #12]
 8004e4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e4e:	fb01 f303 	mul.w	r3, r1, r3
 8004e52:	441a      	add	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	68f9      	ldr	r1, [r7, #12]
 8004e72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e74:	fb01 f303 	mul.w	r3, r1, r3
 8004e78:	441a      	add	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	22ff      	movs	r2, #255	; 0xff
 8004e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	22ff      	movs	r2, #255	; 0xff
 8004e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d114      	bne.n	8004ebe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01a      	beq.n	8004ed2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	3310      	adds	r3, #16
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f001 f929 	bl	80060f8 <xTaskRemoveFromEventList>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d012      	beq.n	8004ed2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004eac:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <xQueueGenericReset+0xcc>)
 8004eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	e009      	b.n	8004ed2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3310      	adds	r3, #16
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff fef2 	bl	8004cac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	3324      	adds	r3, #36	; 0x24
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7ff feed 	bl	8004cac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ed2:	f002 f85f 	bl	8006f94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ed6:	2301      	movs	r3, #1
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	e000ed04 	.word	0xe000ed04

08004ee4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08e      	sub	sp, #56	; 0x38
 8004ee8:	af02      	add	r7, sp, #8
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10a      	bne.n	8004f0e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f0a:	bf00      	nop
 8004f0c:	e7fe      	b.n	8004f0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10a      	bne.n	8004f2a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f26:	bf00      	nop
 8004f28:	e7fe      	b.n	8004f28 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <xQueueGenericCreateStatic+0x52>
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <xQueueGenericCreateStatic+0x56>
 8004f36:	2301      	movs	r3, #1
 8004f38:	e000      	b.n	8004f3c <xQueueGenericCreateStatic+0x58>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10a      	bne.n	8004f56 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	623b      	str	r3, [r7, #32]
}
 8004f52:	bf00      	nop
 8004f54:	e7fe      	b.n	8004f54 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d102      	bne.n	8004f62 <xQueueGenericCreateStatic+0x7e>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <xQueueGenericCreateStatic+0x82>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <xQueueGenericCreateStatic+0x84>
 8004f66:	2300      	movs	r3, #0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	61fb      	str	r3, [r7, #28]
}
 8004f7e:	bf00      	nop
 8004f80:	e7fe      	b.n	8004f80 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f82:	2350      	movs	r3, #80	; 0x50
 8004f84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2b50      	cmp	r3, #80	; 0x50
 8004f8a:	d00a      	beq.n	8004fa2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	61bb      	str	r3, [r7, #24]
}
 8004f9e:	bf00      	nop
 8004fa0:	e7fe      	b.n	8004fa0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004fa2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00d      	beq.n	8004fca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fb6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	68b9      	ldr	r1, [r7, #8]
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f805 	bl	8004fd4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3730      	adds	r7, #48	; 0x30
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d103      	bne.n	8004ff0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	e002      	b.n	8004ff6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005002:	2101      	movs	r1, #1
 8005004:	69b8      	ldr	r0, [r7, #24]
 8005006:	f7ff ff05 	bl	8004e14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	78fa      	ldrb	r2, [r7, #3]
 800500e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005012:	bf00      	nop
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08e      	sub	sp, #56	; 0x38
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
 8005028:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800502a:	2300      	movs	r3, #0
 800502c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10a      	bne.n	800504e <xQueueGenericSend+0x32>
	__asm volatile
 8005038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800504a:	bf00      	nop
 800504c:	e7fe      	b.n	800504c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d103      	bne.n	800505c <xQueueGenericSend+0x40>
 8005054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <xQueueGenericSend+0x44>
 800505c:	2301      	movs	r3, #1
 800505e:	e000      	b.n	8005062 <xQueueGenericSend+0x46>
 8005060:	2300      	movs	r3, #0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10a      	bne.n	800507c <xQueueGenericSend+0x60>
	__asm volatile
 8005066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005078:	bf00      	nop
 800507a:	e7fe      	b.n	800507a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	2b02      	cmp	r3, #2
 8005080:	d103      	bne.n	800508a <xQueueGenericSend+0x6e>
 8005082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <xQueueGenericSend+0x72>
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <xQueueGenericSend+0x74>
 800508e:	2300      	movs	r3, #0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10a      	bne.n	80050aa <xQueueGenericSend+0x8e>
	__asm volatile
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	623b      	str	r3, [r7, #32]
}
 80050a6:	bf00      	nop
 80050a8:	e7fe      	b.n	80050a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050aa:	f001 f9e7 	bl	800647c <xTaskGetSchedulerState>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d102      	bne.n	80050ba <xQueueGenericSend+0x9e>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <xQueueGenericSend+0xa2>
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <xQueueGenericSend+0xa4>
 80050be:	2300      	movs	r3, #0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10a      	bne.n	80050da <xQueueGenericSend+0xbe>
	__asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	61fb      	str	r3, [r7, #28]
}
 80050d6:	bf00      	nop
 80050d8:	e7fe      	b.n	80050d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050da:	f001 ff2b 	bl	8006f34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d302      	bcc.n	80050f0 <xQueueGenericSend+0xd4>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d129      	bne.n	8005144 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	68b9      	ldr	r1, [r7, #8]
 80050f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050f6:	f000 fa0b 	bl	8005510 <prvCopyDataToQueue>
 80050fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	2b00      	cmp	r3, #0
 8005102:	d010      	beq.n	8005126 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005106:	3324      	adds	r3, #36	; 0x24
 8005108:	4618      	mov	r0, r3
 800510a:	f000 fff5 	bl	80060f8 <xTaskRemoveFromEventList>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d013      	beq.n	800513c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005114:	4b3f      	ldr	r3, [pc, #252]	; (8005214 <xQueueGenericSend+0x1f8>)
 8005116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	e00a      	b.n	800513c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005128:	2b00      	cmp	r3, #0
 800512a:	d007      	beq.n	800513c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800512c:	4b39      	ldr	r3, [pc, #228]	; (8005214 <xQueueGenericSend+0x1f8>)
 800512e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005132:	601a      	str	r2, [r3, #0]
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800513c:	f001 ff2a 	bl	8006f94 <vPortExitCritical>
				return pdPASS;
 8005140:	2301      	movs	r3, #1
 8005142:	e063      	b.n	800520c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d103      	bne.n	8005152 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800514a:	f001 ff23 	bl	8006f94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800514e:	2300      	movs	r3, #0
 8005150:	e05c      	b.n	800520c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005154:	2b00      	cmp	r3, #0
 8005156:	d106      	bne.n	8005166 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005158:	f107 0314 	add.w	r3, r7, #20
 800515c:	4618      	mov	r0, r3
 800515e:	f001 f82f 	bl	80061c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005162:	2301      	movs	r3, #1
 8005164:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005166:	f001 ff15 	bl	8006f94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800516a:	f000 fd9b 	bl	8005ca4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800516e:	f001 fee1 	bl	8006f34 <vPortEnterCritical>
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005178:	b25b      	sxtb	r3, r3
 800517a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517e:	d103      	bne.n	8005188 <xQueueGenericSend+0x16c>
 8005180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800518e:	b25b      	sxtb	r3, r3
 8005190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005194:	d103      	bne.n	800519e <xQueueGenericSend+0x182>
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800519e:	f001 fef9 	bl	8006f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051a2:	1d3a      	adds	r2, r7, #4
 80051a4:	f107 0314 	add.w	r3, r7, #20
 80051a8:	4611      	mov	r1, r2
 80051aa:	4618      	mov	r0, r3
 80051ac:	f001 f81e 	bl	80061ec <xTaskCheckForTimeOut>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d124      	bne.n	8005200 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051b8:	f000 faa2 	bl	8005700 <prvIsQueueFull>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d018      	beq.n	80051f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	3310      	adds	r3, #16
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	4611      	mov	r1, r2
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 ff44 	bl	8006058 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80051d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051d2:	f000 fa2d 	bl	8005630 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80051d6:	f000 fd73 	bl	8005cc0 <xTaskResumeAll>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f47f af7c 	bne.w	80050da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80051e2:	4b0c      	ldr	r3, [pc, #48]	; (8005214 <xQueueGenericSend+0x1f8>)
 80051e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	e772      	b.n	80050da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80051f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051f6:	f000 fa1b 	bl	8005630 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051fa:	f000 fd61 	bl	8005cc0 <xTaskResumeAll>
 80051fe:	e76c      	b.n	80050da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005202:	f000 fa15 	bl	8005630 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005206:	f000 fd5b 	bl	8005cc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800520a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800520c:	4618      	mov	r0, r3
 800520e:	3738      	adds	r7, #56	; 0x38
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	e000ed04 	.word	0xe000ed04

08005218 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b090      	sub	sp, #64	; 0x40
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
 8005224:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800522a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10a      	bne.n	8005246 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005242:	bf00      	nop
 8005244:	e7fe      	b.n	8005244 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d103      	bne.n	8005254 <xQueueGenericSendFromISR+0x3c>
 800524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <xQueueGenericSendFromISR+0x40>
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <xQueueGenericSendFromISR+0x42>
 8005258:	2300      	movs	r3, #0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10a      	bne.n	8005274 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005270:	bf00      	nop
 8005272:	e7fe      	b.n	8005272 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2b02      	cmp	r3, #2
 8005278:	d103      	bne.n	8005282 <xQueueGenericSendFromISR+0x6a>
 800527a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527e:	2b01      	cmp	r3, #1
 8005280:	d101      	bne.n	8005286 <xQueueGenericSendFromISR+0x6e>
 8005282:	2301      	movs	r3, #1
 8005284:	e000      	b.n	8005288 <xQueueGenericSendFromISR+0x70>
 8005286:	2300      	movs	r3, #0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10a      	bne.n	80052a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	623b      	str	r3, [r7, #32]
}
 800529e:	bf00      	nop
 80052a0:	e7fe      	b.n	80052a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052a2:	f001 ff29 	bl	80070f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80052a6:	f3ef 8211 	mrs	r2, BASEPRI
 80052aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ae:	f383 8811 	msr	BASEPRI, r3
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	61fa      	str	r2, [r7, #28]
 80052bc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80052be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d302      	bcc.n	80052d4 <xQueueGenericSendFromISR+0xbc>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d12f      	bne.n	8005334 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80052d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	68b9      	ldr	r1, [r7, #8]
 80052e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80052ea:	f000 f911 	bl	8005510 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80052ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80052f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f6:	d112      	bne.n	800531e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d016      	beq.n	800532e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005302:	3324      	adds	r3, #36	; 0x24
 8005304:	4618      	mov	r0, r3
 8005306:	f000 fef7 	bl	80060f8 <xTaskRemoveFromEventList>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00e      	beq.n	800532e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00b      	beq.n	800532e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	e007      	b.n	800532e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800531e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005322:	3301      	adds	r3, #1
 8005324:	b2db      	uxtb	r3, r3
 8005326:	b25a      	sxtb	r2, r3
 8005328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800532e:	2301      	movs	r3, #1
 8005330:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005332:	e001      	b.n	8005338 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005334:	2300      	movs	r3, #0
 8005336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005342:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005346:	4618      	mov	r0, r3
 8005348:	3740      	adds	r7, #64	; 0x40
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
	...

08005350 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08c      	sub	sp, #48	; 0x30
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800535c:	2300      	movs	r3, #0
 800535e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10a      	bne.n	8005380 <xQueueReceive+0x30>
	__asm volatile
 800536a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	623b      	str	r3, [r7, #32]
}
 800537c:	bf00      	nop
 800537e:	e7fe      	b.n	800537e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d103      	bne.n	800538e <xQueueReceive+0x3e>
 8005386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <xQueueReceive+0x42>
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <xQueueReceive+0x44>
 8005392:	2300      	movs	r3, #0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10a      	bne.n	80053ae <xQueueReceive+0x5e>
	__asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	61fb      	str	r3, [r7, #28]
}
 80053aa:	bf00      	nop
 80053ac:	e7fe      	b.n	80053ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053ae:	f001 f865 	bl	800647c <xTaskGetSchedulerState>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d102      	bne.n	80053be <xQueueReceive+0x6e>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <xQueueReceive+0x72>
 80053be:	2301      	movs	r3, #1
 80053c0:	e000      	b.n	80053c4 <xQueueReceive+0x74>
 80053c2:	2300      	movs	r3, #0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10a      	bne.n	80053de <xQueueReceive+0x8e>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	61bb      	str	r3, [r7, #24]
}
 80053da:	bf00      	nop
 80053dc:	e7fe      	b.n	80053dc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053de:	f001 fda9 	bl	8006f34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d01f      	beq.n	800542e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053ee:	68b9      	ldr	r1, [r7, #8]
 80053f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053f2:	f000 f8f7 	bl	80055e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	1e5a      	subs	r2, r3, #1
 80053fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00f      	beq.n	8005426 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	3310      	adds	r3, #16
 800540a:	4618      	mov	r0, r3
 800540c:	f000 fe74 	bl	80060f8 <xTaskRemoveFromEventList>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d007      	beq.n	8005426 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005416:	4b3d      	ldr	r3, [pc, #244]	; (800550c <xQueueReceive+0x1bc>)
 8005418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005426:	f001 fdb5 	bl	8006f94 <vPortExitCritical>
				return pdPASS;
 800542a:	2301      	movs	r3, #1
 800542c:	e069      	b.n	8005502 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d103      	bne.n	800543c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005434:	f001 fdae 	bl	8006f94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005438:	2300      	movs	r3, #0
 800543a:	e062      	b.n	8005502 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543e:	2b00      	cmp	r3, #0
 8005440:	d106      	bne.n	8005450 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005442:	f107 0310 	add.w	r3, r7, #16
 8005446:	4618      	mov	r0, r3
 8005448:	f000 feba 	bl	80061c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800544c:	2301      	movs	r3, #1
 800544e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005450:	f001 fda0 	bl	8006f94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005454:	f000 fc26 	bl	8005ca4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005458:	f001 fd6c 	bl	8006f34 <vPortEnterCritical>
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005462:	b25b      	sxtb	r3, r3
 8005464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005468:	d103      	bne.n	8005472 <xQueueReceive+0x122>
 800546a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005474:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005478:	b25b      	sxtb	r3, r3
 800547a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547e:	d103      	bne.n	8005488 <xQueueReceive+0x138>
 8005480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005488:	f001 fd84 	bl	8006f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800548c:	1d3a      	adds	r2, r7, #4
 800548e:	f107 0310 	add.w	r3, r7, #16
 8005492:	4611      	mov	r1, r2
 8005494:	4618      	mov	r0, r3
 8005496:	f000 fea9 	bl	80061ec <xTaskCheckForTimeOut>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d123      	bne.n	80054e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054a2:	f000 f917 	bl	80056d4 <prvIsQueueEmpty>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d017      	beq.n	80054dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ae:	3324      	adds	r3, #36	; 0x24
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	4611      	mov	r1, r2
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 fdcf 	bl	8006058 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054bc:	f000 f8b8 	bl	8005630 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054c0:	f000 fbfe 	bl	8005cc0 <xTaskResumeAll>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d189      	bne.n	80053de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80054ca:	4b10      	ldr	r3, [pc, #64]	; (800550c <xQueueReceive+0x1bc>)
 80054cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	e780      	b.n	80053de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80054dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054de:	f000 f8a7 	bl	8005630 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054e2:	f000 fbed 	bl	8005cc0 <xTaskResumeAll>
 80054e6:	e77a      	b.n	80053de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80054e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ea:	f000 f8a1 	bl	8005630 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054ee:	f000 fbe7 	bl	8005cc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054f4:	f000 f8ee 	bl	80056d4 <prvIsQueueEmpty>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f43f af6f 	beq.w	80053de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005500:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005502:	4618      	mov	r0, r3
 8005504:	3730      	adds	r7, #48	; 0x30
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	e000ed04 	.word	0xe000ed04

08005510 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800551c:	2300      	movs	r3, #0
 800551e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005524:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10d      	bne.n	800554a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d14d      	bne.n	80055d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	4618      	mov	r0, r3
 800553c:	f000 ffbc 	bl	80064b8 <xTaskPriorityDisinherit>
 8005540:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	609a      	str	r2, [r3, #8]
 8005548:	e043      	b.n	80055d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d119      	bne.n	8005584 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6858      	ldr	r0, [r3, #4]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005558:	461a      	mov	r2, r3
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	f002 f81c 	bl	8007598 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005568:	441a      	add	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	429a      	cmp	r2, r3
 8005578:	d32b      	bcc.n	80055d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	605a      	str	r2, [r3, #4]
 8005582:	e026      	b.n	80055d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	68d8      	ldr	r0, [r3, #12]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	461a      	mov	r2, r3
 800558e:	68b9      	ldr	r1, [r7, #8]
 8005590:	f002 f802 	bl	8007598 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559c:	425b      	negs	r3, r3
 800559e:	441a      	add	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d207      	bcs.n	80055c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b8:	425b      	negs	r3, r3
 80055ba:	441a      	add	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d105      	bne.n	80055d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	3b01      	subs	r3, #1
 80055d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80055da:	697b      	ldr	r3, [r7, #20]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d018      	beq.n	8005628 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	441a      	add	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	429a      	cmp	r2, r3
 800560e:	d303      	bcc.n	8005618 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68d9      	ldr	r1, [r3, #12]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	461a      	mov	r2, r3
 8005622:	6838      	ldr	r0, [r7, #0]
 8005624:	f001 ffb8 	bl	8007598 <memcpy>
	}
}
 8005628:	bf00      	nop
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005638:	f001 fc7c 	bl	8006f34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005642:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005644:	e011      	b.n	800566a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	2b00      	cmp	r3, #0
 800564c:	d012      	beq.n	8005674 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3324      	adds	r3, #36	; 0x24
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fd50 	bl	80060f8 <xTaskRemoveFromEventList>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800565e:	f000 fe27 	bl	80062b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005662:	7bfb      	ldrb	r3, [r7, #15]
 8005664:	3b01      	subs	r3, #1
 8005666:	b2db      	uxtb	r3, r3
 8005668:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800566a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800566e:	2b00      	cmp	r3, #0
 8005670:	dce9      	bgt.n	8005646 <prvUnlockQueue+0x16>
 8005672:	e000      	b.n	8005676 <prvUnlockQueue+0x46>
					break;
 8005674:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	22ff      	movs	r2, #255	; 0xff
 800567a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800567e:	f001 fc89 	bl	8006f94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005682:	f001 fc57 	bl	8006f34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800568c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800568e:	e011      	b.n	80056b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d012      	beq.n	80056be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	3310      	adds	r3, #16
 800569c:	4618      	mov	r0, r3
 800569e:	f000 fd2b 	bl	80060f8 <xTaskRemoveFromEventList>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80056a8:	f000 fe02 	bl	80062b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80056ac:	7bbb      	ldrb	r3, [r7, #14]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	dce9      	bgt.n	8005690 <prvUnlockQueue+0x60>
 80056bc:	e000      	b.n	80056c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80056be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	22ff      	movs	r2, #255	; 0xff
 80056c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80056c8:	f001 fc64 	bl	8006f94 <vPortExitCritical>
}
 80056cc:	bf00      	nop
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056dc:	f001 fc2a 	bl	8006f34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d102      	bne.n	80056ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80056e8:	2301      	movs	r3, #1
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	e001      	b.n	80056f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056f2:	f001 fc4f 	bl	8006f94 <vPortExitCritical>

	return xReturn;
 80056f6:	68fb      	ldr	r3, [r7, #12]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005708:	f001 fc14 	bl	8006f34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005714:	429a      	cmp	r2, r3
 8005716:	d102      	bne.n	800571e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005718:	2301      	movs	r3, #1
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	e001      	b.n	8005722 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005722:	f001 fc37 	bl	8006f94 <vPortExitCritical>

	return xReturn;
 8005726:	68fb      	ldr	r3, [r7, #12]
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800573a:	2300      	movs	r3, #0
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	e014      	b.n	800576a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005740:	4a0f      	ldr	r2, [pc, #60]	; (8005780 <vQueueAddToRegistry+0x50>)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10b      	bne.n	8005764 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800574c:	490c      	ldr	r1, [pc, #48]	; (8005780 <vQueueAddToRegistry+0x50>)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005756:	4a0a      	ldr	r2, [pc, #40]	; (8005780 <vQueueAddToRegistry+0x50>)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	4413      	add	r3, r2
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005762:	e006      	b.n	8005772 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	3301      	adds	r3, #1
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b07      	cmp	r3, #7
 800576e:	d9e7      	bls.n	8005740 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005770:	bf00      	nop
 8005772:	bf00      	nop
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	20001cf4 	.word	0x20001cf4

08005784 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005794:	f001 fbce 	bl	8006f34 <vPortEnterCritical>
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800579e:	b25b      	sxtb	r3, r3
 80057a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a4:	d103      	bne.n	80057ae <vQueueWaitForMessageRestricted+0x2a>
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057b4:	b25b      	sxtb	r3, r3
 80057b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ba:	d103      	bne.n	80057c4 <vQueueWaitForMessageRestricted+0x40>
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057c4:	f001 fbe6 	bl	8006f94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d106      	bne.n	80057de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	3324      	adds	r3, #36	; 0x24
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	68b9      	ldr	r1, [r7, #8]
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 fc61 	bl	80060a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80057de:	6978      	ldr	r0, [r7, #20]
 80057e0:	f7ff ff26 	bl	8005630 <prvUnlockQueue>
	}
 80057e4:	bf00      	nop
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08e      	sub	sp, #56	; 0x38
 80057f0:	af04      	add	r7, sp, #16
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10a      	bne.n	8005816 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	623b      	str	r3, [r7, #32]
}
 8005812:	bf00      	nop
 8005814:	e7fe      	b.n	8005814 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10a      	bne.n	8005832 <xTaskCreateStatic+0x46>
	__asm volatile
 800581c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	61fb      	str	r3, [r7, #28]
}
 800582e:	bf00      	nop
 8005830:	e7fe      	b.n	8005830 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005832:	23bc      	movs	r3, #188	; 0xbc
 8005834:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	2bbc      	cmp	r3, #188	; 0xbc
 800583a:	d00a      	beq.n	8005852 <xTaskCreateStatic+0x66>
	__asm volatile
 800583c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	61bb      	str	r3, [r7, #24]
}
 800584e:	bf00      	nop
 8005850:	e7fe      	b.n	8005850 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005852:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005856:	2b00      	cmp	r3, #0
 8005858:	d01e      	beq.n	8005898 <xTaskCreateStatic+0xac>
 800585a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585c:	2b00      	cmp	r3, #0
 800585e:	d01b      	beq.n	8005898 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005868:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	2202      	movs	r2, #2
 800586e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005872:	2300      	movs	r3, #0
 8005874:	9303      	str	r3, [sp, #12]
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	9302      	str	r3, [sp, #8]
 800587a:	f107 0314 	add.w	r3, r7, #20
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	68b9      	ldr	r1, [r7, #8]
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 f850 	bl	8005930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005892:	f000 f8f3 	bl	8005a7c <prvAddNewTaskToReadyList>
 8005896:	e001      	b.n	800589c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005898:	2300      	movs	r3, #0
 800589a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800589c:	697b      	ldr	r3, [r7, #20]
	}
 800589e:	4618      	mov	r0, r3
 80058a0:	3728      	adds	r7, #40	; 0x28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b08c      	sub	sp, #48	; 0x30
 80058aa:	af04      	add	r7, sp, #16
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	603b      	str	r3, [r7, #0]
 80058b2:	4613      	mov	r3, r2
 80058b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058b6:	88fb      	ldrh	r3, [r7, #6]
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4618      	mov	r0, r3
 80058bc:	f001 fc5c 	bl	8007178 <pvPortMalloc>
 80058c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00e      	beq.n	80058e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80058c8:	20bc      	movs	r0, #188	; 0xbc
 80058ca:	f001 fc55 	bl	8007178 <pvPortMalloc>
 80058ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	631a      	str	r2, [r3, #48]	; 0x30
 80058dc:	e005      	b.n	80058ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058de:	6978      	ldr	r0, [r7, #20]
 80058e0:	f001 fd16 	bl	8007310 <vPortFree>
 80058e4:	e001      	b.n	80058ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058e6:	2300      	movs	r3, #0
 80058e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d017      	beq.n	8005920 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058f8:	88fa      	ldrh	r2, [r7, #6]
 80058fa:	2300      	movs	r3, #0
 80058fc:	9303      	str	r3, [sp, #12]
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	9302      	str	r3, [sp, #8]
 8005902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005904:	9301      	str	r3, [sp, #4]
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68b9      	ldr	r1, [r7, #8]
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 f80e 	bl	8005930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005914:	69f8      	ldr	r0, [r7, #28]
 8005916:	f000 f8b1 	bl	8005a7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800591a:	2301      	movs	r3, #1
 800591c:	61bb      	str	r3, [r7, #24]
 800591e:	e002      	b.n	8005926 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005920:	f04f 33ff 	mov.w	r3, #4294967295
 8005924:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005926:	69bb      	ldr	r3, [r7, #24]
	}
 8005928:	4618      	mov	r0, r3
 800592a:	3720      	adds	r7, #32
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
 800593c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	461a      	mov	r2, r3
 8005948:	21a5      	movs	r1, #165	; 0xa5
 800594a:	f001 fe33 	bl	80075b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005958:	3b01      	subs	r3, #1
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	f023 0307 	bic.w	r3, r3, #7
 8005966:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	617b      	str	r3, [r7, #20]
}
 8005984:	bf00      	nop
 8005986:	e7fe      	b.n	8005986 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d01f      	beq.n	80059ce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800598e:	2300      	movs	r3, #0
 8005990:	61fb      	str	r3, [r7, #28]
 8005992:	e012      	b.n	80059ba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	4413      	add	r3, r2
 800599a:	7819      	ldrb	r1, [r3, #0]
 800599c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	4413      	add	r3, r2
 80059a2:	3334      	adds	r3, #52	; 0x34
 80059a4:	460a      	mov	r2, r1
 80059a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	4413      	add	r3, r2
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d006      	beq.n	80059c2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	3301      	adds	r3, #1
 80059b8:	61fb      	str	r3, [r7, #28]
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	2b0f      	cmp	r3, #15
 80059be:	d9e9      	bls.n	8005994 <prvInitialiseNewTask+0x64>
 80059c0:	e000      	b.n	80059c4 <prvInitialiseNewTask+0x94>
			{
				break;
 80059c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059cc:	e003      	b.n	80059d6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80059ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	2b37      	cmp	r3, #55	; 0x37
 80059da:	d901      	bls.n	80059e0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059dc:	2337      	movs	r3, #55	; 0x37
 80059de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	2200      	movs	r2, #0
 80059f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	3304      	adds	r3, #4
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff f978 	bl	8004cec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fe:	3318      	adds	r3, #24
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff f973 	bl	8004cec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2e:	3354      	adds	r3, #84	; 0x54
 8005a30:	2260      	movs	r2, #96	; 0x60
 8005a32:	2100      	movs	r1, #0
 8005a34:	4618      	mov	r0, r3
 8005a36:	f001 fdbd 	bl	80075b4 <memset>
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3c:	4a0c      	ldr	r2, [pc, #48]	; (8005a70 <prvInitialiseNewTask+0x140>)
 8005a3e:	659a      	str	r2, [r3, #88]	; 0x58
 8005a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a42:	4a0c      	ldr	r2, [pc, #48]	; (8005a74 <prvInitialiseNewTask+0x144>)
 8005a44:	65da      	str	r2, [r3, #92]	; 0x5c
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	4a0b      	ldr	r2, [pc, #44]	; (8005a78 <prvInitialiseNewTask+0x148>)
 8005a4a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	68f9      	ldr	r1, [r7, #12]
 8005a50:	69b8      	ldr	r0, [r7, #24]
 8005a52:	f001 f941 	bl	8006cd8 <pxPortInitialiseStack>
 8005a56:	4602      	mov	r2, r0
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d002      	beq.n	8005a68 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a68:	bf00      	nop
 8005a6a:	3720      	adds	r7, #32
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	080078ac 	.word	0x080078ac
 8005a74:	080078cc 	.word	0x080078cc
 8005a78:	0800788c 	.word	0x0800788c

08005a7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a84:	f001 fa56 	bl	8006f34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a88:	4b2d      	ldr	r3, [pc, #180]	; (8005b40 <prvAddNewTaskToReadyList+0xc4>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	4a2c      	ldr	r2, [pc, #176]	; (8005b40 <prvAddNewTaskToReadyList+0xc4>)
 8005a90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a92:	4b2c      	ldr	r3, [pc, #176]	; (8005b44 <prvAddNewTaskToReadyList+0xc8>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d109      	bne.n	8005aae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a9a:	4a2a      	ldr	r2, [pc, #168]	; (8005b44 <prvAddNewTaskToReadyList+0xc8>)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005aa0:	4b27      	ldr	r3, [pc, #156]	; (8005b40 <prvAddNewTaskToReadyList+0xc4>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d110      	bne.n	8005aca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005aa8:	f000 fc26 	bl	80062f8 <prvInitialiseTaskLists>
 8005aac:	e00d      	b.n	8005aca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005aae:	4b26      	ldr	r3, [pc, #152]	; (8005b48 <prvAddNewTaskToReadyList+0xcc>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d109      	bne.n	8005aca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ab6:	4b23      	ldr	r3, [pc, #140]	; (8005b44 <prvAddNewTaskToReadyList+0xc8>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d802      	bhi.n	8005aca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ac4:	4a1f      	ldr	r2, [pc, #124]	; (8005b44 <prvAddNewTaskToReadyList+0xc8>)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005aca:	4b20      	ldr	r3, [pc, #128]	; (8005b4c <prvAddNewTaskToReadyList+0xd0>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	4a1e      	ldr	r2, [pc, #120]	; (8005b4c <prvAddNewTaskToReadyList+0xd0>)
 8005ad2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ad4:	4b1d      	ldr	r3, [pc, #116]	; (8005b4c <prvAddNewTaskToReadyList+0xd0>)
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae0:	4b1b      	ldr	r3, [pc, #108]	; (8005b50 <prvAddNewTaskToReadyList+0xd4>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d903      	bls.n	8005af0 <prvAddNewTaskToReadyList+0x74>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aec:	4a18      	ldr	r2, [pc, #96]	; (8005b50 <prvAddNewTaskToReadyList+0xd4>)
 8005aee:	6013      	str	r3, [r2, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af4:	4613      	mov	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4a15      	ldr	r2, [pc, #84]	; (8005b54 <prvAddNewTaskToReadyList+0xd8>)
 8005afe:	441a      	add	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3304      	adds	r3, #4
 8005b04:	4619      	mov	r1, r3
 8005b06:	4610      	mov	r0, r2
 8005b08:	f7ff f8fd 	bl	8004d06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b0c:	f001 fa42 	bl	8006f94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b10:	4b0d      	ldr	r3, [pc, #52]	; (8005b48 <prvAddNewTaskToReadyList+0xcc>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00e      	beq.n	8005b36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b18:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <prvAddNewTaskToReadyList+0xc8>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d207      	bcs.n	8005b36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b26:	4b0c      	ldr	r3, [pc, #48]	; (8005b58 <prvAddNewTaskToReadyList+0xdc>)
 8005b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b36:	bf00      	nop
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20000ce0 	.word	0x20000ce0
 8005b44:	2000080c 	.word	0x2000080c
 8005b48:	20000cec 	.word	0x20000cec
 8005b4c:	20000cfc 	.word	0x20000cfc
 8005b50:	20000ce8 	.word	0x20000ce8
 8005b54:	20000810 	.word	0x20000810
 8005b58:	e000ed04 	.word	0xe000ed04

08005b5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b64:	2300      	movs	r3, #0
 8005b66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d017      	beq.n	8005b9e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b6e:	4b13      	ldr	r3, [pc, #76]	; (8005bbc <vTaskDelay+0x60>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <vTaskDelay+0x30>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	60bb      	str	r3, [r7, #8]
}
 8005b88:	bf00      	nop
 8005b8a:	e7fe      	b.n	8005b8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b8c:	f000 f88a 	bl	8005ca4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b90:	2100      	movs	r1, #0
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fcfe 	bl	8006594 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b98:	f000 f892 	bl	8005cc0 <xTaskResumeAll>
 8005b9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d107      	bne.n	8005bb4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005ba4:	4b06      	ldr	r3, [pc, #24]	; (8005bc0 <vTaskDelay+0x64>)
 8005ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bb4:	bf00      	nop
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	20000d08 	.word	0x20000d08
 8005bc0:	e000ed04 	.word	0xe000ed04

08005bc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b08a      	sub	sp, #40	; 0x28
 8005bc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005bd2:	463a      	mov	r2, r7
 8005bd4:	1d39      	adds	r1, r7, #4
 8005bd6:	f107 0308 	add.w	r3, r7, #8
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff f832 	bl	8004c44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005be0:	6839      	ldr	r1, [r7, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	9202      	str	r2, [sp, #8]
 8005be8:	9301      	str	r3, [sp, #4]
 8005bea:	2300      	movs	r3, #0
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	460a      	mov	r2, r1
 8005bf2:	4924      	ldr	r1, [pc, #144]	; (8005c84 <vTaskStartScheduler+0xc0>)
 8005bf4:	4824      	ldr	r0, [pc, #144]	; (8005c88 <vTaskStartScheduler+0xc4>)
 8005bf6:	f7ff fdf9 	bl	80057ec <xTaskCreateStatic>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	4a23      	ldr	r2, [pc, #140]	; (8005c8c <vTaskStartScheduler+0xc8>)
 8005bfe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c00:	4b22      	ldr	r3, [pc, #136]	; (8005c8c <vTaskStartScheduler+0xc8>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	617b      	str	r3, [r7, #20]
 8005c0c:	e001      	b.n	8005c12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d102      	bne.n	8005c1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c18:	f000 fd10 	bl	800663c <xTimerCreateTimerTask>
 8005c1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d11b      	bne.n	8005c5c <vTaskStartScheduler+0x98>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	613b      	str	r3, [r7, #16]
}
 8005c36:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c38:	4b15      	ldr	r3, [pc, #84]	; (8005c90 <vTaskStartScheduler+0xcc>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3354      	adds	r3, #84	; 0x54
 8005c3e:	4a15      	ldr	r2, [pc, #84]	; (8005c94 <vTaskStartScheduler+0xd0>)
 8005c40:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c42:	4b15      	ldr	r3, [pc, #84]	; (8005c98 <vTaskStartScheduler+0xd4>)
 8005c44:	f04f 32ff 	mov.w	r2, #4294967295
 8005c48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c4a:	4b14      	ldr	r3, [pc, #80]	; (8005c9c <vTaskStartScheduler+0xd8>)
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c50:	4b13      	ldr	r3, [pc, #76]	; (8005ca0 <vTaskStartScheduler+0xdc>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c56:	f001 f8cb 	bl	8006df0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c5a:	e00e      	b.n	8005c7a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c62:	d10a      	bne.n	8005c7a <vTaskStartScheduler+0xb6>
	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	60fb      	str	r3, [r7, #12]
}
 8005c76:	bf00      	nop
 8005c78:	e7fe      	b.n	8005c78 <vTaskStartScheduler+0xb4>
}
 8005c7a:	bf00      	nop
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	080077b8 	.word	0x080077b8
 8005c88:	080062c9 	.word	0x080062c9
 8005c8c:	20000d04 	.word	0x20000d04
 8005c90:	2000080c 	.word	0x2000080c
 8005c94:	20000010 	.word	0x20000010
 8005c98:	20000d00 	.word	0x20000d00
 8005c9c:	20000cec 	.word	0x20000cec
 8005ca0:	20000ce4 	.word	0x20000ce4

08005ca4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ca8:	4b04      	ldr	r3, [pc, #16]	; (8005cbc <vTaskSuspendAll+0x18>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3301      	adds	r3, #1
 8005cae:	4a03      	ldr	r2, [pc, #12]	; (8005cbc <vTaskSuspendAll+0x18>)
 8005cb0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005cb2:	bf00      	nop
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	20000d08 	.word	0x20000d08

08005cc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005cce:	4b42      	ldr	r3, [pc, #264]	; (8005dd8 <xTaskResumeAll+0x118>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10a      	bne.n	8005cec <xTaskResumeAll+0x2c>
	__asm volatile
 8005cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	603b      	str	r3, [r7, #0]
}
 8005ce8:	bf00      	nop
 8005cea:	e7fe      	b.n	8005cea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005cec:	f001 f922 	bl	8006f34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005cf0:	4b39      	ldr	r3, [pc, #228]	; (8005dd8 <xTaskResumeAll+0x118>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	4a38      	ldr	r2, [pc, #224]	; (8005dd8 <xTaskResumeAll+0x118>)
 8005cf8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cfa:	4b37      	ldr	r3, [pc, #220]	; (8005dd8 <xTaskResumeAll+0x118>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d162      	bne.n	8005dc8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d02:	4b36      	ldr	r3, [pc, #216]	; (8005ddc <xTaskResumeAll+0x11c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d05e      	beq.n	8005dc8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d0a:	e02f      	b.n	8005d6c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d0c:	4b34      	ldr	r3, [pc, #208]	; (8005de0 <xTaskResumeAll+0x120>)
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3318      	adds	r3, #24
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff f851 	bl	8004dc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	3304      	adds	r3, #4
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff f84c 	bl	8004dc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d2c:	4b2d      	ldr	r3, [pc, #180]	; (8005de4 <xTaskResumeAll+0x124>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d903      	bls.n	8005d3c <xTaskResumeAll+0x7c>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	4a2a      	ldr	r2, [pc, #168]	; (8005de4 <xTaskResumeAll+0x124>)
 8005d3a:	6013      	str	r3, [r2, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d40:	4613      	mov	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4413      	add	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4a27      	ldr	r2, [pc, #156]	; (8005de8 <xTaskResumeAll+0x128>)
 8005d4a:	441a      	add	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3304      	adds	r3, #4
 8005d50:	4619      	mov	r1, r3
 8005d52:	4610      	mov	r0, r2
 8005d54:	f7fe ffd7 	bl	8004d06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d5c:	4b23      	ldr	r3, [pc, #140]	; (8005dec <xTaskResumeAll+0x12c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d302      	bcc.n	8005d6c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005d66:	4b22      	ldr	r3, [pc, #136]	; (8005df0 <xTaskResumeAll+0x130>)
 8005d68:	2201      	movs	r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d6c:	4b1c      	ldr	r3, [pc, #112]	; (8005de0 <xTaskResumeAll+0x120>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1cb      	bne.n	8005d0c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d7a:	f000 fb5f 	bl	800643c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d7e:	4b1d      	ldr	r3, [pc, #116]	; (8005df4 <xTaskResumeAll+0x134>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d010      	beq.n	8005dac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d8a:	f000 f847 	bl	8005e1c <xTaskIncrementTick>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005d94:	4b16      	ldr	r3, [pc, #88]	; (8005df0 <xTaskResumeAll+0x130>)
 8005d96:	2201      	movs	r2, #1
 8005d98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1f1      	bne.n	8005d8a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005da6:	4b13      	ldr	r3, [pc, #76]	; (8005df4 <xTaskResumeAll+0x134>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005dac:	4b10      	ldr	r3, [pc, #64]	; (8005df0 <xTaskResumeAll+0x130>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d009      	beq.n	8005dc8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005db4:	2301      	movs	r3, #1
 8005db6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005db8:	4b0f      	ldr	r3, [pc, #60]	; (8005df8 <xTaskResumeAll+0x138>)
 8005dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005dc8:	f001 f8e4 	bl	8006f94 <vPortExitCritical>

	return xAlreadyYielded;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20000d08 	.word	0x20000d08
 8005ddc:	20000ce0 	.word	0x20000ce0
 8005de0:	20000ca0 	.word	0x20000ca0
 8005de4:	20000ce8 	.word	0x20000ce8
 8005de8:	20000810 	.word	0x20000810
 8005dec:	2000080c 	.word	0x2000080c
 8005df0:	20000cf4 	.word	0x20000cf4
 8005df4:	20000cf0 	.word	0x20000cf0
 8005df8:	e000ed04 	.word	0xe000ed04

08005dfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e02:	4b05      	ldr	r3, [pc, #20]	; (8005e18 <xTaskGetTickCount+0x1c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e08:	687b      	ldr	r3, [r7, #4]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	20000ce4 	.word	0x20000ce4

08005e1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e22:	2300      	movs	r3, #0
 8005e24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e26:	4b4f      	ldr	r3, [pc, #316]	; (8005f64 <xTaskIncrementTick+0x148>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f040 808f 	bne.w	8005f4e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e30:	4b4d      	ldr	r3, [pc, #308]	; (8005f68 <xTaskIncrementTick+0x14c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3301      	adds	r3, #1
 8005e36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e38:	4a4b      	ldr	r2, [pc, #300]	; (8005f68 <xTaskIncrementTick+0x14c>)
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d120      	bne.n	8005e86 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e44:	4b49      	ldr	r3, [pc, #292]	; (8005f6c <xTaskIncrementTick+0x150>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <xTaskIncrementTick+0x48>
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	603b      	str	r3, [r7, #0]
}
 8005e60:	bf00      	nop
 8005e62:	e7fe      	b.n	8005e62 <xTaskIncrementTick+0x46>
 8005e64:	4b41      	ldr	r3, [pc, #260]	; (8005f6c <xTaskIncrementTick+0x150>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	4b41      	ldr	r3, [pc, #260]	; (8005f70 <xTaskIncrementTick+0x154>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a3f      	ldr	r2, [pc, #252]	; (8005f6c <xTaskIncrementTick+0x150>)
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	4a3f      	ldr	r2, [pc, #252]	; (8005f70 <xTaskIncrementTick+0x154>)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	4b3e      	ldr	r3, [pc, #248]	; (8005f74 <xTaskIncrementTick+0x158>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	4a3d      	ldr	r2, [pc, #244]	; (8005f74 <xTaskIncrementTick+0x158>)
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	f000 fadb 	bl	800643c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e86:	4b3c      	ldr	r3, [pc, #240]	; (8005f78 <xTaskIncrementTick+0x15c>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d349      	bcc.n	8005f24 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e90:	4b36      	ldr	r3, [pc, #216]	; (8005f6c <xTaskIncrementTick+0x150>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d104      	bne.n	8005ea4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e9a:	4b37      	ldr	r3, [pc, #220]	; (8005f78 <xTaskIncrementTick+0x15c>)
 8005e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea0:	601a      	str	r2, [r3, #0]
					break;
 8005ea2:	e03f      	b.n	8005f24 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ea4:	4b31      	ldr	r3, [pc, #196]	; (8005f6c <xTaskIncrementTick+0x150>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d203      	bcs.n	8005ec4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ebc:	4a2e      	ldr	r2, [pc, #184]	; (8005f78 <xTaskIncrementTick+0x15c>)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ec2:	e02f      	b.n	8005f24 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	3304      	adds	r3, #4
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fe ff79 	bl	8004dc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d004      	beq.n	8005ee0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	3318      	adds	r3, #24
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fe ff70 	bl	8004dc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee4:	4b25      	ldr	r3, [pc, #148]	; (8005f7c <xTaskIncrementTick+0x160>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d903      	bls.n	8005ef4 <xTaskIncrementTick+0xd8>
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef0:	4a22      	ldr	r2, [pc, #136]	; (8005f7c <xTaskIncrementTick+0x160>)
 8005ef2:	6013      	str	r3, [r2, #0]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef8:	4613      	mov	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4a1f      	ldr	r2, [pc, #124]	; (8005f80 <xTaskIncrementTick+0x164>)
 8005f02:	441a      	add	r2, r3
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	3304      	adds	r3, #4
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	f7fe fefb 	bl	8004d06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f14:	4b1b      	ldr	r3, [pc, #108]	; (8005f84 <xTaskIncrementTick+0x168>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d3b8      	bcc.n	8005e90 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f22:	e7b5      	b.n	8005e90 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f24:	4b17      	ldr	r3, [pc, #92]	; (8005f84 <xTaskIncrementTick+0x168>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f2a:	4915      	ldr	r1, [pc, #84]	; (8005f80 <xTaskIncrementTick+0x164>)
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	440b      	add	r3, r1
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d901      	bls.n	8005f40 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f40:	4b11      	ldr	r3, [pc, #68]	; (8005f88 <xTaskIncrementTick+0x16c>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d007      	beq.n	8005f58 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	617b      	str	r3, [r7, #20]
 8005f4c:	e004      	b.n	8005f58 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f4e:	4b0f      	ldr	r3, [pc, #60]	; (8005f8c <xTaskIncrementTick+0x170>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3301      	adds	r3, #1
 8005f54:	4a0d      	ldr	r2, [pc, #52]	; (8005f8c <xTaskIncrementTick+0x170>)
 8005f56:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f58:	697b      	ldr	r3, [r7, #20]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3718      	adds	r7, #24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	20000d08 	.word	0x20000d08
 8005f68:	20000ce4 	.word	0x20000ce4
 8005f6c:	20000c98 	.word	0x20000c98
 8005f70:	20000c9c 	.word	0x20000c9c
 8005f74:	20000cf8 	.word	0x20000cf8
 8005f78:	20000d00 	.word	0x20000d00
 8005f7c:	20000ce8 	.word	0x20000ce8
 8005f80:	20000810 	.word	0x20000810
 8005f84:	2000080c 	.word	0x2000080c
 8005f88:	20000cf4 	.word	0x20000cf4
 8005f8c:	20000cf0 	.word	0x20000cf0

08005f90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f96:	4b2a      	ldr	r3, [pc, #168]	; (8006040 <vTaskSwitchContext+0xb0>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f9e:	4b29      	ldr	r3, [pc, #164]	; (8006044 <vTaskSwitchContext+0xb4>)
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fa4:	e046      	b.n	8006034 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005fa6:	4b27      	ldr	r3, [pc, #156]	; (8006044 <vTaskSwitchContext+0xb4>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fac:	4b26      	ldr	r3, [pc, #152]	; (8006048 <vTaskSwitchContext+0xb8>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	60fb      	str	r3, [r7, #12]
 8005fb2:	e010      	b.n	8005fd6 <vTaskSwitchContext+0x46>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10a      	bne.n	8005fd0 <vTaskSwitchContext+0x40>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	607b      	str	r3, [r7, #4]
}
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <vTaskSwitchContext+0x3e>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	60fb      	str	r3, [r7, #12]
 8005fd6:	491d      	ldr	r1, [pc, #116]	; (800604c <vTaskSwitchContext+0xbc>)
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	440b      	add	r3, r1
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0e4      	beq.n	8005fb4 <vTaskSwitchContext+0x24>
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4613      	mov	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4a15      	ldr	r2, [pc, #84]	; (800604c <vTaskSwitchContext+0xbc>)
 8005ff6:	4413      	add	r3, r2
 8005ff8:	60bb      	str	r3, [r7, #8]
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	605a      	str	r2, [r3, #4]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	3308      	adds	r3, #8
 800600c:	429a      	cmp	r2, r3
 800600e:	d104      	bne.n	800601a <vTaskSwitchContext+0x8a>
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	605a      	str	r2, [r3, #4]
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	4a0b      	ldr	r2, [pc, #44]	; (8006050 <vTaskSwitchContext+0xc0>)
 8006022:	6013      	str	r3, [r2, #0]
 8006024:	4a08      	ldr	r2, [pc, #32]	; (8006048 <vTaskSwitchContext+0xb8>)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800602a:	4b09      	ldr	r3, [pc, #36]	; (8006050 <vTaskSwitchContext+0xc0>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3354      	adds	r3, #84	; 0x54
 8006030:	4a08      	ldr	r2, [pc, #32]	; (8006054 <vTaskSwitchContext+0xc4>)
 8006032:	6013      	str	r3, [r2, #0]
}
 8006034:	bf00      	nop
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	20000d08 	.word	0x20000d08
 8006044:	20000cf4 	.word	0x20000cf4
 8006048:	20000ce8 	.word	0x20000ce8
 800604c:	20000810 	.word	0x20000810
 8006050:	2000080c 	.word	0x2000080c
 8006054:	20000010 	.word	0x20000010

08006058 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10a      	bne.n	800607e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	60fb      	str	r3, [r7, #12]
}
 800607a:	bf00      	nop
 800607c:	e7fe      	b.n	800607c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800607e:	4b07      	ldr	r3, [pc, #28]	; (800609c <vTaskPlaceOnEventList+0x44>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3318      	adds	r3, #24
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7fe fe61 	bl	8004d4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800608c:	2101      	movs	r1, #1
 800608e:	6838      	ldr	r0, [r7, #0]
 8006090:	f000 fa80 	bl	8006594 <prvAddCurrentTaskToDelayedList>
}
 8006094:	bf00      	nop
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	2000080c 	.word	0x2000080c

080060a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10a      	bne.n	80060c8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80060b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b6:	f383 8811 	msr	BASEPRI, r3
 80060ba:	f3bf 8f6f 	isb	sy
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	617b      	str	r3, [r7, #20]
}
 80060c4:	bf00      	nop
 80060c6:	e7fe      	b.n	80060c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060c8:	4b0a      	ldr	r3, [pc, #40]	; (80060f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3318      	adds	r3, #24
 80060ce:	4619      	mov	r1, r3
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f7fe fe18 	bl	8004d06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80060dc:	f04f 33ff 	mov.w	r3, #4294967295
 80060e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	68b8      	ldr	r0, [r7, #8]
 80060e6:	f000 fa55 	bl	8006594 <prvAddCurrentTaskToDelayedList>
	}
 80060ea:	bf00      	nop
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	2000080c 	.word	0x2000080c

080060f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10a      	bne.n	8006124 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	60fb      	str	r3, [r7, #12]
}
 8006120:	bf00      	nop
 8006122:	e7fe      	b.n	8006122 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	3318      	adds	r3, #24
 8006128:	4618      	mov	r0, r3
 800612a:	f7fe fe49 	bl	8004dc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800612e:	4b1e      	ldr	r3, [pc, #120]	; (80061a8 <xTaskRemoveFromEventList+0xb0>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d11d      	bne.n	8006172 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	3304      	adds	r3, #4
 800613a:	4618      	mov	r0, r3
 800613c:	f7fe fe40 	bl	8004dc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006144:	4b19      	ldr	r3, [pc, #100]	; (80061ac <xTaskRemoveFromEventList+0xb4>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	429a      	cmp	r2, r3
 800614a:	d903      	bls.n	8006154 <xTaskRemoveFromEventList+0x5c>
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006150:	4a16      	ldr	r2, [pc, #88]	; (80061ac <xTaskRemoveFromEventList+0xb4>)
 8006152:	6013      	str	r3, [r2, #0]
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006158:	4613      	mov	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4a13      	ldr	r2, [pc, #76]	; (80061b0 <xTaskRemoveFromEventList+0xb8>)
 8006162:	441a      	add	r2, r3
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	3304      	adds	r3, #4
 8006168:	4619      	mov	r1, r3
 800616a:	4610      	mov	r0, r2
 800616c:	f7fe fdcb 	bl	8004d06 <vListInsertEnd>
 8006170:	e005      	b.n	800617e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	3318      	adds	r3, #24
 8006176:	4619      	mov	r1, r3
 8006178:	480e      	ldr	r0, [pc, #56]	; (80061b4 <xTaskRemoveFromEventList+0xbc>)
 800617a:	f7fe fdc4 	bl	8004d06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006182:	4b0d      	ldr	r3, [pc, #52]	; (80061b8 <xTaskRemoveFromEventList+0xc0>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	429a      	cmp	r2, r3
 800618a:	d905      	bls.n	8006198 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800618c:	2301      	movs	r3, #1
 800618e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006190:	4b0a      	ldr	r3, [pc, #40]	; (80061bc <xTaskRemoveFromEventList+0xc4>)
 8006192:	2201      	movs	r2, #1
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	e001      	b.n	800619c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006198:	2300      	movs	r3, #0
 800619a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800619c:	697b      	ldr	r3, [r7, #20]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20000d08 	.word	0x20000d08
 80061ac:	20000ce8 	.word	0x20000ce8
 80061b0:	20000810 	.word	0x20000810
 80061b4:	20000ca0 	.word	0x20000ca0
 80061b8:	2000080c 	.word	0x2000080c
 80061bc:	20000cf4 	.word	0x20000cf4

080061c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80061c8:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <vTaskInternalSetTimeOutState+0x24>)
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80061d0:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <vTaskInternalSetTimeOutState+0x28>)
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	605a      	str	r2, [r3, #4]
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr
 80061e4:	20000cf8 	.word	0x20000cf8
 80061e8:	20000ce4 	.word	0x20000ce4

080061ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b088      	sub	sp, #32
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10a      	bne.n	8006212 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	613b      	str	r3, [r7, #16]
}
 800620e:	bf00      	nop
 8006210:	e7fe      	b.n	8006210 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10a      	bne.n	800622e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621c:	f383 8811 	msr	BASEPRI, r3
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	60fb      	str	r3, [r7, #12]
}
 800622a:	bf00      	nop
 800622c:	e7fe      	b.n	800622c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800622e:	f000 fe81 	bl	8006f34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006232:	4b1d      	ldr	r3, [pc, #116]	; (80062a8 <xTaskCheckForTimeOut+0xbc>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624a:	d102      	bne.n	8006252 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800624c:	2300      	movs	r3, #0
 800624e:	61fb      	str	r3, [r7, #28]
 8006250:	e023      	b.n	800629a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	4b15      	ldr	r3, [pc, #84]	; (80062ac <xTaskCheckForTimeOut+0xc0>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	429a      	cmp	r2, r3
 800625c:	d007      	beq.n	800626e <xTaskCheckForTimeOut+0x82>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	429a      	cmp	r2, r3
 8006266:	d302      	bcc.n	800626e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006268:	2301      	movs	r3, #1
 800626a:	61fb      	str	r3, [r7, #28]
 800626c:	e015      	b.n	800629a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	429a      	cmp	r2, r3
 8006276:	d20b      	bcs.n	8006290 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	1ad2      	subs	r2, r2, r3
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7ff ff9b 	bl	80061c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800628a:	2300      	movs	r3, #0
 800628c:	61fb      	str	r3, [r7, #28]
 800628e:	e004      	b.n	800629a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006296:	2301      	movs	r3, #1
 8006298:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800629a:	f000 fe7b 	bl	8006f94 <vPortExitCritical>

	return xReturn;
 800629e:	69fb      	ldr	r3, [r7, #28]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3720      	adds	r7, #32
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	20000ce4 	.word	0x20000ce4
 80062ac:	20000cf8 	.word	0x20000cf8

080062b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80062b0:	b480      	push	{r7}
 80062b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80062b4:	4b03      	ldr	r3, [pc, #12]	; (80062c4 <vTaskMissedYield+0x14>)
 80062b6:	2201      	movs	r2, #1
 80062b8:	601a      	str	r2, [r3, #0]
}
 80062ba:	bf00      	nop
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr
 80062c4:	20000cf4 	.word	0x20000cf4

080062c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80062d0:	f000 f852 	bl	8006378 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062d4:	4b06      	ldr	r3, [pc, #24]	; (80062f0 <prvIdleTask+0x28>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d9f9      	bls.n	80062d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80062dc:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <prvIdleTask+0x2c>)
 80062de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80062ec:	e7f0      	b.n	80062d0 <prvIdleTask+0x8>
 80062ee:	bf00      	nop
 80062f0:	20000810 	.word	0x20000810
 80062f4:	e000ed04 	.word	0xe000ed04

080062f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062fe:	2300      	movs	r3, #0
 8006300:	607b      	str	r3, [r7, #4]
 8006302:	e00c      	b.n	800631e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	4613      	mov	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4a12      	ldr	r2, [pc, #72]	; (8006358 <prvInitialiseTaskLists+0x60>)
 8006310:	4413      	add	r3, r2
 8006312:	4618      	mov	r0, r3
 8006314:	f7fe fcca 	bl	8004cac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	3301      	adds	r3, #1
 800631c:	607b      	str	r3, [r7, #4]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b37      	cmp	r3, #55	; 0x37
 8006322:	d9ef      	bls.n	8006304 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006324:	480d      	ldr	r0, [pc, #52]	; (800635c <prvInitialiseTaskLists+0x64>)
 8006326:	f7fe fcc1 	bl	8004cac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800632a:	480d      	ldr	r0, [pc, #52]	; (8006360 <prvInitialiseTaskLists+0x68>)
 800632c:	f7fe fcbe 	bl	8004cac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006330:	480c      	ldr	r0, [pc, #48]	; (8006364 <prvInitialiseTaskLists+0x6c>)
 8006332:	f7fe fcbb 	bl	8004cac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006336:	480c      	ldr	r0, [pc, #48]	; (8006368 <prvInitialiseTaskLists+0x70>)
 8006338:	f7fe fcb8 	bl	8004cac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800633c:	480b      	ldr	r0, [pc, #44]	; (800636c <prvInitialiseTaskLists+0x74>)
 800633e:	f7fe fcb5 	bl	8004cac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006342:	4b0b      	ldr	r3, [pc, #44]	; (8006370 <prvInitialiseTaskLists+0x78>)
 8006344:	4a05      	ldr	r2, [pc, #20]	; (800635c <prvInitialiseTaskLists+0x64>)
 8006346:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006348:	4b0a      	ldr	r3, [pc, #40]	; (8006374 <prvInitialiseTaskLists+0x7c>)
 800634a:	4a05      	ldr	r2, [pc, #20]	; (8006360 <prvInitialiseTaskLists+0x68>)
 800634c:	601a      	str	r2, [r3, #0]
}
 800634e:	bf00      	nop
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	20000810 	.word	0x20000810
 800635c:	20000c70 	.word	0x20000c70
 8006360:	20000c84 	.word	0x20000c84
 8006364:	20000ca0 	.word	0x20000ca0
 8006368:	20000cb4 	.word	0x20000cb4
 800636c:	20000ccc 	.word	0x20000ccc
 8006370:	20000c98 	.word	0x20000c98
 8006374:	20000c9c 	.word	0x20000c9c

08006378 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800637e:	e019      	b.n	80063b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006380:	f000 fdd8 	bl	8006f34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006384:	4b10      	ldr	r3, [pc, #64]	; (80063c8 <prvCheckTasksWaitingTermination+0x50>)
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3304      	adds	r3, #4
 8006390:	4618      	mov	r0, r3
 8006392:	f7fe fd15 	bl	8004dc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006396:	4b0d      	ldr	r3, [pc, #52]	; (80063cc <prvCheckTasksWaitingTermination+0x54>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3b01      	subs	r3, #1
 800639c:	4a0b      	ldr	r2, [pc, #44]	; (80063cc <prvCheckTasksWaitingTermination+0x54>)
 800639e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80063a0:	4b0b      	ldr	r3, [pc, #44]	; (80063d0 <prvCheckTasksWaitingTermination+0x58>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	4a0a      	ldr	r2, [pc, #40]	; (80063d0 <prvCheckTasksWaitingTermination+0x58>)
 80063a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80063aa:	f000 fdf3 	bl	8006f94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f810 	bl	80063d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063b4:	4b06      	ldr	r3, [pc, #24]	; (80063d0 <prvCheckTasksWaitingTermination+0x58>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1e1      	bne.n	8006380 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80063bc:	bf00      	nop
 80063be:	bf00      	nop
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	20000cb4 	.word	0x20000cb4
 80063cc:	20000ce0 	.word	0x20000ce0
 80063d0:	20000cc8 	.word	0x20000cc8

080063d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	3354      	adds	r3, #84	; 0x54
 80063e0:	4618      	mov	r0, r3
 80063e2:	f001 f8fd 	bl	80075e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d108      	bne.n	8006402 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f4:	4618      	mov	r0, r3
 80063f6:	f000 ff8b 	bl	8007310 <vPortFree>
				vPortFree( pxTCB );
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 ff88 	bl	8007310 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006400:	e018      	b.n	8006434 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006408:	2b01      	cmp	r3, #1
 800640a:	d103      	bne.n	8006414 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 ff7f 	bl	8007310 <vPortFree>
	}
 8006412:	e00f      	b.n	8006434 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800641a:	2b02      	cmp	r3, #2
 800641c:	d00a      	beq.n	8006434 <prvDeleteTCB+0x60>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	60fb      	str	r3, [r7, #12]
}
 8006430:	bf00      	nop
 8006432:	e7fe      	b.n	8006432 <prvDeleteTCB+0x5e>
	}
 8006434:	bf00      	nop
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006442:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <prvResetNextTaskUnblockTime+0x38>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d104      	bne.n	8006456 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800644c:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <prvResetNextTaskUnblockTime+0x3c>)
 800644e:	f04f 32ff 	mov.w	r2, #4294967295
 8006452:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006454:	e008      	b.n	8006468 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006456:	4b07      	ldr	r3, [pc, #28]	; (8006474 <prvResetNextTaskUnblockTime+0x38>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	4a04      	ldr	r2, [pc, #16]	; (8006478 <prvResetNextTaskUnblockTime+0x3c>)
 8006466:	6013      	str	r3, [r2, #0]
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	20000c98 	.word	0x20000c98
 8006478:	20000d00 	.word	0x20000d00

0800647c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006482:	4b0b      	ldr	r3, [pc, #44]	; (80064b0 <xTaskGetSchedulerState+0x34>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d102      	bne.n	8006490 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800648a:	2301      	movs	r3, #1
 800648c:	607b      	str	r3, [r7, #4]
 800648e:	e008      	b.n	80064a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006490:	4b08      	ldr	r3, [pc, #32]	; (80064b4 <xTaskGetSchedulerState+0x38>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d102      	bne.n	800649e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006498:	2302      	movs	r3, #2
 800649a:	607b      	str	r3, [r7, #4]
 800649c:	e001      	b.n	80064a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800649e:	2300      	movs	r3, #0
 80064a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80064a2:	687b      	ldr	r3, [r7, #4]
	}
 80064a4:	4618      	mov	r0, r3
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	20000cec 	.word	0x20000cec
 80064b4:	20000d08 	.word	0x20000d08

080064b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80064c4:	2300      	movs	r3, #0
 80064c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d056      	beq.n	800657c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80064ce:	4b2e      	ldr	r3, [pc, #184]	; (8006588 <xTaskPriorityDisinherit+0xd0>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d00a      	beq.n	80064ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80064d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	60fb      	str	r3, [r7, #12]
}
 80064ea:	bf00      	nop
 80064ec:	e7fe      	b.n	80064ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10a      	bne.n	800650c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80064f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	60bb      	str	r3, [r7, #8]
}
 8006508:	bf00      	nop
 800650a:	e7fe      	b.n	800650a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006510:	1e5a      	subs	r2, r3, #1
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800651e:	429a      	cmp	r2, r3
 8006520:	d02c      	beq.n	800657c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006526:	2b00      	cmp	r3, #0
 8006528:	d128      	bne.n	800657c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	3304      	adds	r3, #4
 800652e:	4618      	mov	r0, r3
 8006530:	f7fe fc46 	bl	8004dc0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006540:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654c:	4b0f      	ldr	r3, [pc, #60]	; (800658c <xTaskPriorityDisinherit+0xd4>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	429a      	cmp	r2, r3
 8006552:	d903      	bls.n	800655c <xTaskPriorityDisinherit+0xa4>
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	4a0c      	ldr	r2, [pc, #48]	; (800658c <xTaskPriorityDisinherit+0xd4>)
 800655a:	6013      	str	r3, [r2, #0]
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4a09      	ldr	r2, [pc, #36]	; (8006590 <xTaskPriorityDisinherit+0xd8>)
 800656a:	441a      	add	r2, r3
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	3304      	adds	r3, #4
 8006570:	4619      	mov	r1, r3
 8006572:	4610      	mov	r0, r2
 8006574:	f7fe fbc7 	bl	8004d06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006578:	2301      	movs	r3, #1
 800657a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800657c:	697b      	ldr	r3, [r7, #20]
	}
 800657e:	4618      	mov	r0, r3
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	2000080c 	.word	0x2000080c
 800658c:	20000ce8 	.word	0x20000ce8
 8006590:	20000810 	.word	0x20000810

08006594 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800659e:	4b21      	ldr	r3, [pc, #132]	; (8006624 <prvAddCurrentTaskToDelayedList+0x90>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065a4:	4b20      	ldr	r3, [pc, #128]	; (8006628 <prvAddCurrentTaskToDelayedList+0x94>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3304      	adds	r3, #4
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fe fc08 	bl	8004dc0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b6:	d10a      	bne.n	80065ce <prvAddCurrentTaskToDelayedList+0x3a>
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d007      	beq.n	80065ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065be:	4b1a      	ldr	r3, [pc, #104]	; (8006628 <prvAddCurrentTaskToDelayedList+0x94>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3304      	adds	r3, #4
 80065c4:	4619      	mov	r1, r3
 80065c6:	4819      	ldr	r0, [pc, #100]	; (800662c <prvAddCurrentTaskToDelayedList+0x98>)
 80065c8:	f7fe fb9d 	bl	8004d06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80065cc:	e026      	b.n	800661c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4413      	add	r3, r2
 80065d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80065d6:	4b14      	ldr	r3, [pc, #80]	; (8006628 <prvAddCurrentTaskToDelayedList+0x94>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d209      	bcs.n	80065fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065e6:	4b12      	ldr	r3, [pc, #72]	; (8006630 <prvAddCurrentTaskToDelayedList+0x9c>)
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	4b0f      	ldr	r3, [pc, #60]	; (8006628 <prvAddCurrentTaskToDelayedList+0x94>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3304      	adds	r3, #4
 80065f0:	4619      	mov	r1, r3
 80065f2:	4610      	mov	r0, r2
 80065f4:	f7fe fbab 	bl	8004d4e <vListInsert>
}
 80065f8:	e010      	b.n	800661c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065fa:	4b0e      	ldr	r3, [pc, #56]	; (8006634 <prvAddCurrentTaskToDelayedList+0xa0>)
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	4b0a      	ldr	r3, [pc, #40]	; (8006628 <prvAddCurrentTaskToDelayedList+0x94>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3304      	adds	r3, #4
 8006604:	4619      	mov	r1, r3
 8006606:	4610      	mov	r0, r2
 8006608:	f7fe fba1 	bl	8004d4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800660c:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <prvAddCurrentTaskToDelayedList+0xa4>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	429a      	cmp	r2, r3
 8006614:	d202      	bcs.n	800661c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006616:	4a08      	ldr	r2, [pc, #32]	; (8006638 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	6013      	str	r3, [r2, #0]
}
 800661c:	bf00      	nop
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	20000ce4 	.word	0x20000ce4
 8006628:	2000080c 	.word	0x2000080c
 800662c:	20000ccc 	.word	0x20000ccc
 8006630:	20000c9c 	.word	0x20000c9c
 8006634:	20000c98 	.word	0x20000c98
 8006638:	20000d00 	.word	0x20000d00

0800663c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b08a      	sub	sp, #40	; 0x28
 8006640:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006642:	2300      	movs	r3, #0
 8006644:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006646:	f000 fb07 	bl	8006c58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800664a:	4b1c      	ldr	r3, [pc, #112]	; (80066bc <xTimerCreateTimerTask+0x80>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d021      	beq.n	8006696 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006652:	2300      	movs	r3, #0
 8006654:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006656:	2300      	movs	r3, #0
 8006658:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800665a:	1d3a      	adds	r2, r7, #4
 800665c:	f107 0108 	add.w	r1, r7, #8
 8006660:	f107 030c 	add.w	r3, r7, #12
 8006664:	4618      	mov	r0, r3
 8006666:	f7fe fb07 	bl	8004c78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800666a:	6879      	ldr	r1, [r7, #4]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	9202      	str	r2, [sp, #8]
 8006672:	9301      	str	r3, [sp, #4]
 8006674:	2302      	movs	r3, #2
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	2300      	movs	r3, #0
 800667a:	460a      	mov	r2, r1
 800667c:	4910      	ldr	r1, [pc, #64]	; (80066c0 <xTimerCreateTimerTask+0x84>)
 800667e:	4811      	ldr	r0, [pc, #68]	; (80066c4 <xTimerCreateTimerTask+0x88>)
 8006680:	f7ff f8b4 	bl	80057ec <xTaskCreateStatic>
 8006684:	4603      	mov	r3, r0
 8006686:	4a10      	ldr	r2, [pc, #64]	; (80066c8 <xTimerCreateTimerTask+0x8c>)
 8006688:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800668a:	4b0f      	ldr	r3, [pc, #60]	; (80066c8 <xTimerCreateTimerTask+0x8c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d001      	beq.n	8006696 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006692:	2301      	movs	r3, #1
 8006694:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10a      	bne.n	80066b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800669c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	613b      	str	r3, [r7, #16]
}
 80066ae:	bf00      	nop
 80066b0:	e7fe      	b.n	80066b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80066b2:	697b      	ldr	r3, [r7, #20]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3718      	adds	r7, #24
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	20000d3c 	.word	0x20000d3c
 80066c0:	080077c0 	.word	0x080077c0
 80066c4:	08006801 	.word	0x08006801
 80066c8:	20000d40 	.word	0x20000d40

080066cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b08a      	sub	sp, #40	; 0x28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
 80066d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80066da:	2300      	movs	r3, #0
 80066dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10a      	bne.n	80066fa <xTimerGenericCommand+0x2e>
	__asm volatile
 80066e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	623b      	str	r3, [r7, #32]
}
 80066f6:	bf00      	nop
 80066f8:	e7fe      	b.n	80066f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80066fa:	4b1a      	ldr	r3, [pc, #104]	; (8006764 <xTimerGenericCommand+0x98>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d02a      	beq.n	8006758 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2b05      	cmp	r3, #5
 8006712:	dc18      	bgt.n	8006746 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006714:	f7ff feb2 	bl	800647c <xTaskGetSchedulerState>
 8006718:	4603      	mov	r3, r0
 800671a:	2b02      	cmp	r3, #2
 800671c:	d109      	bne.n	8006732 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800671e:	4b11      	ldr	r3, [pc, #68]	; (8006764 <xTimerGenericCommand+0x98>)
 8006720:	6818      	ldr	r0, [r3, #0]
 8006722:	f107 0110 	add.w	r1, r7, #16
 8006726:	2300      	movs	r3, #0
 8006728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800672a:	f7fe fc77 	bl	800501c <xQueueGenericSend>
 800672e:	6278      	str	r0, [r7, #36]	; 0x24
 8006730:	e012      	b.n	8006758 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006732:	4b0c      	ldr	r3, [pc, #48]	; (8006764 <xTimerGenericCommand+0x98>)
 8006734:	6818      	ldr	r0, [r3, #0]
 8006736:	f107 0110 	add.w	r1, r7, #16
 800673a:	2300      	movs	r3, #0
 800673c:	2200      	movs	r2, #0
 800673e:	f7fe fc6d 	bl	800501c <xQueueGenericSend>
 8006742:	6278      	str	r0, [r7, #36]	; 0x24
 8006744:	e008      	b.n	8006758 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006746:	4b07      	ldr	r3, [pc, #28]	; (8006764 <xTimerGenericCommand+0x98>)
 8006748:	6818      	ldr	r0, [r3, #0]
 800674a:	f107 0110 	add.w	r1, r7, #16
 800674e:	2300      	movs	r3, #0
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	f7fe fd61 	bl	8005218 <xQueueGenericSendFromISR>
 8006756:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800675a:	4618      	mov	r0, r3
 800675c:	3728      	adds	r7, #40	; 0x28
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20000d3c 	.word	0x20000d3c

08006768 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b088      	sub	sp, #32
 800676c:	af02      	add	r7, sp, #8
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006772:	4b22      	ldr	r3, [pc, #136]	; (80067fc <prvProcessExpiredTimer+0x94>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	3304      	adds	r3, #4
 8006780:	4618      	mov	r0, r3
 8006782:	f7fe fb1d 	bl	8004dc0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800678c:	f003 0304 	and.w	r3, r3, #4
 8006790:	2b00      	cmp	r3, #0
 8006792:	d022      	beq.n	80067da <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	699a      	ldr	r2, [r3, #24]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	18d1      	adds	r1, r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	6978      	ldr	r0, [r7, #20]
 80067a2:	f000 f8d1 	bl	8006948 <prvInsertTimerInActiveList>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d01f      	beq.n	80067ec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067ac:	2300      	movs	r3, #0
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	2300      	movs	r3, #0
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	2100      	movs	r1, #0
 80067b6:	6978      	ldr	r0, [r7, #20]
 80067b8:	f7ff ff88 	bl	80066cc <xTimerGenericCommand>
 80067bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d113      	bne.n	80067ec <prvProcessExpiredTimer+0x84>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	60fb      	str	r3, [r7, #12]
}
 80067d6:	bf00      	nop
 80067d8:	e7fe      	b.n	80067d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067e0:	f023 0301 	bic.w	r3, r3, #1
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	6978      	ldr	r0, [r7, #20]
 80067f2:	4798      	blx	r3
}
 80067f4:	bf00      	nop
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	20000d34 	.word	0x20000d34

08006800 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006808:	f107 0308 	add.w	r3, r7, #8
 800680c:	4618      	mov	r0, r3
 800680e:	f000 f857 	bl	80068c0 <prvGetNextExpireTime>
 8006812:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	4619      	mov	r1, r3
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 f803 	bl	8006824 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800681e:	f000 f8d5 	bl	80069cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006822:	e7f1      	b.n	8006808 <prvTimerTask+0x8>

08006824 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800682e:	f7ff fa39 	bl	8005ca4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006832:	f107 0308 	add.w	r3, r7, #8
 8006836:	4618      	mov	r0, r3
 8006838:	f000 f866 	bl	8006908 <prvSampleTimeNow>
 800683c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d130      	bne.n	80068a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10a      	bne.n	8006860 <prvProcessTimerOrBlockTask+0x3c>
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	429a      	cmp	r2, r3
 8006850:	d806      	bhi.n	8006860 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006852:	f7ff fa35 	bl	8005cc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006856:	68f9      	ldr	r1, [r7, #12]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7ff ff85 	bl	8006768 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800685e:	e024      	b.n	80068aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d008      	beq.n	8006878 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006866:	4b13      	ldr	r3, [pc, #76]	; (80068b4 <prvProcessTimerOrBlockTask+0x90>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <prvProcessTimerOrBlockTask+0x50>
 8006870:	2301      	movs	r3, #1
 8006872:	e000      	b.n	8006876 <prvProcessTimerOrBlockTask+0x52>
 8006874:	2300      	movs	r3, #0
 8006876:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006878:	4b0f      	ldr	r3, [pc, #60]	; (80068b8 <prvProcessTimerOrBlockTask+0x94>)
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	4619      	mov	r1, r3
 8006886:	f7fe ff7d 	bl	8005784 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800688a:	f7ff fa19 	bl	8005cc0 <xTaskResumeAll>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10a      	bne.n	80068aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006894:	4b09      	ldr	r3, [pc, #36]	; (80068bc <prvProcessTimerOrBlockTask+0x98>)
 8006896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	f3bf 8f6f 	isb	sy
}
 80068a4:	e001      	b.n	80068aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80068a6:	f7ff fa0b 	bl	8005cc0 <xTaskResumeAll>
}
 80068aa:	bf00      	nop
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	20000d38 	.word	0x20000d38
 80068b8:	20000d3c 	.word	0x20000d3c
 80068bc:	e000ed04 	.word	0xe000ed04

080068c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80068c8:	4b0e      	ldr	r3, [pc, #56]	; (8006904 <prvGetNextExpireTime+0x44>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <prvGetNextExpireTime+0x16>
 80068d2:	2201      	movs	r2, #1
 80068d4:	e000      	b.n	80068d8 <prvGetNextExpireTime+0x18>
 80068d6:	2200      	movs	r2, #0
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d105      	bne.n	80068f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068e4:	4b07      	ldr	r3, [pc, #28]	; (8006904 <prvGetNextExpireTime+0x44>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	60fb      	str	r3, [r7, #12]
 80068ee:	e001      	b.n	80068f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80068f4:	68fb      	ldr	r3, [r7, #12]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	20000d34 	.word	0x20000d34

08006908 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006910:	f7ff fa74 	bl	8005dfc <xTaskGetTickCount>
 8006914:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006916:	4b0b      	ldr	r3, [pc, #44]	; (8006944 <prvSampleTimeNow+0x3c>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	429a      	cmp	r2, r3
 800691e:	d205      	bcs.n	800692c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006920:	f000 f936 	bl	8006b90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	e002      	b.n	8006932 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006932:	4a04      	ldr	r2, [pc, #16]	; (8006944 <prvSampleTimeNow+0x3c>)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006938:	68fb      	ldr	r3, [r7, #12]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20000d44 	.word	0x20000d44

08006948 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006956:	2300      	movs	r3, #0
 8006958:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	429a      	cmp	r2, r3
 800696c:	d812      	bhi.n	8006994 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	1ad2      	subs	r2, r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	429a      	cmp	r2, r3
 800697a:	d302      	bcc.n	8006982 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800697c:	2301      	movs	r3, #1
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	e01b      	b.n	80069ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006982:	4b10      	ldr	r3, [pc, #64]	; (80069c4 <prvInsertTimerInActiveList+0x7c>)
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3304      	adds	r3, #4
 800698a:	4619      	mov	r1, r3
 800698c:	4610      	mov	r0, r2
 800698e:	f7fe f9de 	bl	8004d4e <vListInsert>
 8006992:	e012      	b.n	80069ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	429a      	cmp	r2, r3
 800699a:	d206      	bcs.n	80069aa <prvInsertTimerInActiveList+0x62>
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d302      	bcc.n	80069aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80069a4:	2301      	movs	r3, #1
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	e007      	b.n	80069ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069aa:	4b07      	ldr	r3, [pc, #28]	; (80069c8 <prvInsertTimerInActiveList+0x80>)
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	3304      	adds	r3, #4
 80069b2:	4619      	mov	r1, r3
 80069b4:	4610      	mov	r0, r2
 80069b6:	f7fe f9ca 	bl	8004d4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80069ba:	697b      	ldr	r3, [r7, #20]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3718      	adds	r7, #24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	20000d38 	.word	0x20000d38
 80069c8:	20000d34 	.word	0x20000d34

080069cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08e      	sub	sp, #56	; 0x38
 80069d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069d2:	e0ca      	b.n	8006b6a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	da18      	bge.n	8006a0c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80069da:	1d3b      	adds	r3, r7, #4
 80069dc:	3304      	adds	r3, #4
 80069de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80069e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10a      	bne.n	80069fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80069e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	61fb      	str	r3, [r7, #28]
}
 80069f8:	bf00      	nop
 80069fa:	e7fe      	b.n	80069fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80069fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a02:	6850      	ldr	r0, [r2, #4]
 8006a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a06:	6892      	ldr	r2, [r2, #8]
 8006a08:	4611      	mov	r1, r2
 8006a0a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f2c0 80aa 	blt.w	8006b68 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d004      	beq.n	8006a2a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	3304      	adds	r3, #4
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7fe f9cb 	bl	8004dc0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a2a:	463b      	mov	r3, r7
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7ff ff6b 	bl	8006908 <prvSampleTimeNow>
 8006a32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b09      	cmp	r3, #9
 8006a38:	f200 8097 	bhi.w	8006b6a <prvProcessReceivedCommands+0x19e>
 8006a3c:	a201      	add	r2, pc, #4	; (adr r2, 8006a44 <prvProcessReceivedCommands+0x78>)
 8006a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a42:	bf00      	nop
 8006a44:	08006a6d 	.word	0x08006a6d
 8006a48:	08006a6d 	.word	0x08006a6d
 8006a4c:	08006a6d 	.word	0x08006a6d
 8006a50:	08006ae1 	.word	0x08006ae1
 8006a54:	08006af5 	.word	0x08006af5
 8006a58:	08006b3f 	.word	0x08006b3f
 8006a5c:	08006a6d 	.word	0x08006a6d
 8006a60:	08006a6d 	.word	0x08006a6d
 8006a64:	08006ae1 	.word	0x08006ae1
 8006a68:	08006af5 	.word	0x08006af5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a72:	f043 0301 	orr.w	r3, r3, #1
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	18d1      	adds	r1, r2, r3
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a8c:	f7ff ff5c 	bl	8006948 <prvInsertTimerInActiveList>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d069      	beq.n	8006b6a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006aa4:	f003 0304 	and.w	r3, r3, #4
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d05e      	beq.n	8006b6a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	441a      	add	r2, r3
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	2300      	movs	r3, #0
 8006aba:	2100      	movs	r1, #0
 8006abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006abe:	f7ff fe05 	bl	80066cc <xTimerGenericCommand>
 8006ac2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d14f      	bne.n	8006b6a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	61bb      	str	r3, [r7, #24]
}
 8006adc:	bf00      	nop
 8006ade:	e7fe      	b.n	8006ade <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ae6:	f023 0301 	bic.w	r3, r3, #1
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006af2:	e03a      	b.n	8006b6a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006afa:	f043 0301 	orr.w	r3, r3, #1
 8006afe:	b2da      	uxtb	r2, r3
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10a      	bne.n	8006b2a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	617b      	str	r3, [r7, #20]
}
 8006b26:	bf00      	nop
 8006b28:	e7fe      	b.n	8006b28 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2c:	699a      	ldr	r2, [r3, #24]
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	18d1      	adds	r1, r2, r3
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b38:	f7ff ff06 	bl	8006948 <prvInsertTimerInActiveList>
					break;
 8006b3c:	e015      	b.n	8006b6a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b44:	f003 0302 	and.w	r3, r3, #2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d103      	bne.n	8006b54 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b4e:	f000 fbdf 	bl	8007310 <vPortFree>
 8006b52:	e00a      	b.n	8006b6a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b5a:	f023 0301 	bic.w	r3, r3, #1
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b66:	e000      	b.n	8006b6a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006b68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b6a:	4b08      	ldr	r3, [pc, #32]	; (8006b8c <prvProcessReceivedCommands+0x1c0>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	1d39      	adds	r1, r7, #4
 8006b70:	2200      	movs	r2, #0
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fe fbec 	bl	8005350 <xQueueReceive>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f47f af2a 	bne.w	80069d4 <prvProcessReceivedCommands+0x8>
	}
}
 8006b80:	bf00      	nop
 8006b82:	bf00      	nop
 8006b84:	3730      	adds	r7, #48	; 0x30
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20000d3c 	.word	0x20000d3c

08006b90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b96:	e048      	b.n	8006c2a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b98:	4b2d      	ldr	r3, [pc, #180]	; (8006c50 <prvSwitchTimerLists+0xc0>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ba2:	4b2b      	ldr	r3, [pc, #172]	; (8006c50 <prvSwitchTimerLists+0xc0>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	3304      	adds	r3, #4
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7fe f905 	bl	8004dc0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bc4:	f003 0304 	and.w	r3, r3, #4
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d02e      	beq.n	8006c2a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d90e      	bls.n	8006bfc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bea:	4b19      	ldr	r3, [pc, #100]	; (8006c50 <prvSwitchTimerLists+0xc0>)
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	f7fe f8aa 	bl	8004d4e <vListInsert>
 8006bfa:	e016      	b.n	8006c2a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	2300      	movs	r3, #0
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	2100      	movs	r1, #0
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f7ff fd60 	bl	80066cc <xTimerGenericCommand>
 8006c0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10a      	bne.n	8006c2a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	603b      	str	r3, [r7, #0]
}
 8006c26:	bf00      	nop
 8006c28:	e7fe      	b.n	8006c28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c2a:	4b09      	ldr	r3, [pc, #36]	; (8006c50 <prvSwitchTimerLists+0xc0>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1b1      	bne.n	8006b98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006c34:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <prvSwitchTimerLists+0xc0>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c3a:	4b06      	ldr	r3, [pc, #24]	; (8006c54 <prvSwitchTimerLists+0xc4>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a04      	ldr	r2, [pc, #16]	; (8006c50 <prvSwitchTimerLists+0xc0>)
 8006c40:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006c42:	4a04      	ldr	r2, [pc, #16]	; (8006c54 <prvSwitchTimerLists+0xc4>)
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	6013      	str	r3, [r2, #0]
}
 8006c48:	bf00      	nop
 8006c4a:	3718      	adds	r7, #24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	20000d34 	.word	0x20000d34
 8006c54:	20000d38 	.word	0x20000d38

08006c58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006c5e:	f000 f969 	bl	8006f34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006c62:	4b15      	ldr	r3, [pc, #84]	; (8006cb8 <prvCheckForValidListAndQueue+0x60>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d120      	bne.n	8006cac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c6a:	4814      	ldr	r0, [pc, #80]	; (8006cbc <prvCheckForValidListAndQueue+0x64>)
 8006c6c:	f7fe f81e 	bl	8004cac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c70:	4813      	ldr	r0, [pc, #76]	; (8006cc0 <prvCheckForValidListAndQueue+0x68>)
 8006c72:	f7fe f81b 	bl	8004cac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c76:	4b13      	ldr	r3, [pc, #76]	; (8006cc4 <prvCheckForValidListAndQueue+0x6c>)
 8006c78:	4a10      	ldr	r2, [pc, #64]	; (8006cbc <prvCheckForValidListAndQueue+0x64>)
 8006c7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c7c:	4b12      	ldr	r3, [pc, #72]	; (8006cc8 <prvCheckForValidListAndQueue+0x70>)
 8006c7e:	4a10      	ldr	r2, [pc, #64]	; (8006cc0 <prvCheckForValidListAndQueue+0x68>)
 8006c80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c82:	2300      	movs	r3, #0
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	4b11      	ldr	r3, [pc, #68]	; (8006ccc <prvCheckForValidListAndQueue+0x74>)
 8006c88:	4a11      	ldr	r2, [pc, #68]	; (8006cd0 <prvCheckForValidListAndQueue+0x78>)
 8006c8a:	2110      	movs	r1, #16
 8006c8c:	200a      	movs	r0, #10
 8006c8e:	f7fe f929 	bl	8004ee4 <xQueueGenericCreateStatic>
 8006c92:	4603      	mov	r3, r0
 8006c94:	4a08      	ldr	r2, [pc, #32]	; (8006cb8 <prvCheckForValidListAndQueue+0x60>)
 8006c96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c98:	4b07      	ldr	r3, [pc, #28]	; (8006cb8 <prvCheckForValidListAndQueue+0x60>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d005      	beq.n	8006cac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ca0:	4b05      	ldr	r3, [pc, #20]	; (8006cb8 <prvCheckForValidListAndQueue+0x60>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	490b      	ldr	r1, [pc, #44]	; (8006cd4 <prvCheckForValidListAndQueue+0x7c>)
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fe fd42 	bl	8005730 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cac:	f000 f972 	bl	8006f94 <vPortExitCritical>
}
 8006cb0:	bf00      	nop
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20000d3c 	.word	0x20000d3c
 8006cbc:	20000d0c 	.word	0x20000d0c
 8006cc0:	20000d20 	.word	0x20000d20
 8006cc4:	20000d34 	.word	0x20000d34
 8006cc8:	20000d38 	.word	0x20000d38
 8006ccc:	20000de8 	.word	0x20000de8
 8006cd0:	20000d48 	.word	0x20000d48
 8006cd4:	080077c8 	.word	0x080077c8

08006cd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	3b04      	subs	r3, #4
 8006ce8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006cf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	3b04      	subs	r3, #4
 8006cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	f023 0201 	bic.w	r2, r3, #1
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3b04      	subs	r3, #4
 8006d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d08:	4a0c      	ldr	r2, [pc, #48]	; (8006d3c <pxPortInitialiseStack+0x64>)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3b14      	subs	r3, #20
 8006d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3b04      	subs	r3, #4
 8006d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f06f 0202 	mvn.w	r2, #2
 8006d26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	3b20      	subs	r3, #32
 8006d2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	08006d41 	.word	0x08006d41

08006d40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d46:	2300      	movs	r3, #0
 8006d48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d4a:	4b12      	ldr	r3, [pc, #72]	; (8006d94 <prvTaskExitError+0x54>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d52:	d00a      	beq.n	8006d6a <prvTaskExitError+0x2a>
	__asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	60fb      	str	r3, [r7, #12]
}
 8006d66:	bf00      	nop
 8006d68:	e7fe      	b.n	8006d68 <prvTaskExitError+0x28>
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	60bb      	str	r3, [r7, #8]
}
 8006d7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d7e:	bf00      	nop
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d0fc      	beq.n	8006d80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d86:	bf00      	nop
 8006d88:	bf00      	nop
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	2000000c 	.word	0x2000000c
	...

08006da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006da0:	4b07      	ldr	r3, [pc, #28]	; (8006dc0 <pxCurrentTCBConst2>)
 8006da2:	6819      	ldr	r1, [r3, #0]
 8006da4:	6808      	ldr	r0, [r1, #0]
 8006da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006daa:	f380 8809 	msr	PSP, r0
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f04f 0000 	mov.w	r0, #0
 8006db6:	f380 8811 	msr	BASEPRI, r0
 8006dba:	4770      	bx	lr
 8006dbc:	f3af 8000 	nop.w

08006dc0 <pxCurrentTCBConst2>:
 8006dc0:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006dc4:	bf00      	nop
 8006dc6:	bf00      	nop

08006dc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006dc8:	4808      	ldr	r0, [pc, #32]	; (8006dec <prvPortStartFirstTask+0x24>)
 8006dca:	6800      	ldr	r0, [r0, #0]
 8006dcc:	6800      	ldr	r0, [r0, #0]
 8006dce:	f380 8808 	msr	MSP, r0
 8006dd2:	f04f 0000 	mov.w	r0, #0
 8006dd6:	f380 8814 	msr	CONTROL, r0
 8006dda:	b662      	cpsie	i
 8006ddc:	b661      	cpsie	f
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	df00      	svc	0
 8006de8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006dea:	bf00      	nop
 8006dec:	e000ed08 	.word	0xe000ed08

08006df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006df6:	4b46      	ldr	r3, [pc, #280]	; (8006f10 <xPortStartScheduler+0x120>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a46      	ldr	r2, [pc, #280]	; (8006f14 <xPortStartScheduler+0x124>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d10a      	bne.n	8006e16 <xPortStartScheduler+0x26>
	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	613b      	str	r3, [r7, #16]
}
 8006e12:	bf00      	nop
 8006e14:	e7fe      	b.n	8006e14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e16:	4b3e      	ldr	r3, [pc, #248]	; (8006f10 <xPortStartScheduler+0x120>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a3f      	ldr	r2, [pc, #252]	; (8006f18 <xPortStartScheduler+0x128>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d10a      	bne.n	8006e36 <xPortStartScheduler+0x46>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	60fb      	str	r3, [r7, #12]
}
 8006e32:	bf00      	nop
 8006e34:	e7fe      	b.n	8006e34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e36:	4b39      	ldr	r3, [pc, #228]	; (8006f1c <xPortStartScheduler+0x12c>)
 8006e38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	22ff      	movs	r2, #255	; 0xff
 8006e46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e50:	78fb      	ldrb	r3, [r7, #3]
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e58:	b2da      	uxtb	r2, r3
 8006e5a:	4b31      	ldr	r3, [pc, #196]	; (8006f20 <xPortStartScheduler+0x130>)
 8006e5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e5e:	4b31      	ldr	r3, [pc, #196]	; (8006f24 <xPortStartScheduler+0x134>)
 8006e60:	2207      	movs	r2, #7
 8006e62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e64:	e009      	b.n	8006e7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006e66:	4b2f      	ldr	r3, [pc, #188]	; (8006f24 <xPortStartScheduler+0x134>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	4a2d      	ldr	r2, [pc, #180]	; (8006f24 <xPortStartScheduler+0x134>)
 8006e6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e70:	78fb      	ldrb	r3, [r7, #3]
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	005b      	lsls	r3, r3, #1
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e7a:	78fb      	ldrb	r3, [r7, #3]
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e82:	2b80      	cmp	r3, #128	; 0x80
 8006e84:	d0ef      	beq.n	8006e66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e86:	4b27      	ldr	r3, [pc, #156]	; (8006f24 <xPortStartScheduler+0x134>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f1c3 0307 	rsb	r3, r3, #7
 8006e8e:	2b04      	cmp	r3, #4
 8006e90:	d00a      	beq.n	8006ea8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	60bb      	str	r3, [r7, #8]
}
 8006ea4:	bf00      	nop
 8006ea6:	e7fe      	b.n	8006ea6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ea8:	4b1e      	ldr	r3, [pc, #120]	; (8006f24 <xPortStartScheduler+0x134>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	021b      	lsls	r3, r3, #8
 8006eae:	4a1d      	ldr	r2, [pc, #116]	; (8006f24 <xPortStartScheduler+0x134>)
 8006eb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006eb2:	4b1c      	ldr	r3, [pc, #112]	; (8006f24 <xPortStartScheduler+0x134>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006eba:	4a1a      	ldr	r2, [pc, #104]	; (8006f24 <xPortStartScheduler+0x134>)
 8006ebc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ec6:	4b18      	ldr	r3, [pc, #96]	; (8006f28 <xPortStartScheduler+0x138>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a17      	ldr	r2, [pc, #92]	; (8006f28 <xPortStartScheduler+0x138>)
 8006ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ed0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ed2:	4b15      	ldr	r3, [pc, #84]	; (8006f28 <xPortStartScheduler+0x138>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a14      	ldr	r2, [pc, #80]	; (8006f28 <xPortStartScheduler+0x138>)
 8006ed8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006edc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ede:	f000 f8dd 	bl	800709c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ee2:	4b12      	ldr	r3, [pc, #72]	; (8006f2c <xPortStartScheduler+0x13c>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ee8:	f000 f8fc 	bl	80070e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006eec:	4b10      	ldr	r3, [pc, #64]	; (8006f30 <xPortStartScheduler+0x140>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a0f      	ldr	r2, [pc, #60]	; (8006f30 <xPortStartScheduler+0x140>)
 8006ef2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006ef6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ef8:	f7ff ff66 	bl	8006dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006efc:	f7ff f848 	bl	8005f90 <vTaskSwitchContext>
	prvTaskExitError();
 8006f00:	f7ff ff1e 	bl	8006d40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	e000ed00 	.word	0xe000ed00
 8006f14:	410fc271 	.word	0x410fc271
 8006f18:	410fc270 	.word	0x410fc270
 8006f1c:	e000e400 	.word	0xe000e400
 8006f20:	20000e38 	.word	0x20000e38
 8006f24:	20000e3c 	.word	0x20000e3c
 8006f28:	e000ed20 	.word	0xe000ed20
 8006f2c:	2000000c 	.word	0x2000000c
 8006f30:	e000ef34 	.word	0xe000ef34

08006f34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	607b      	str	r3, [r7, #4]
}
 8006f4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f4e:	4b0f      	ldr	r3, [pc, #60]	; (8006f8c <vPortEnterCritical+0x58>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3301      	adds	r3, #1
 8006f54:	4a0d      	ldr	r2, [pc, #52]	; (8006f8c <vPortEnterCritical+0x58>)
 8006f56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f58:	4b0c      	ldr	r3, [pc, #48]	; (8006f8c <vPortEnterCritical+0x58>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d10f      	bne.n	8006f80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f60:	4b0b      	ldr	r3, [pc, #44]	; (8006f90 <vPortEnterCritical+0x5c>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00a      	beq.n	8006f80 <vPortEnterCritical+0x4c>
	__asm volatile
 8006f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6e:	f383 8811 	msr	BASEPRI, r3
 8006f72:	f3bf 8f6f 	isb	sy
 8006f76:	f3bf 8f4f 	dsb	sy
 8006f7a:	603b      	str	r3, [r7, #0]
}
 8006f7c:	bf00      	nop
 8006f7e:	e7fe      	b.n	8006f7e <vPortEnterCritical+0x4a>
	}
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr
 8006f8c:	2000000c 	.word	0x2000000c
 8006f90:	e000ed04 	.word	0xe000ed04

08006f94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f9a:	4b12      	ldr	r3, [pc, #72]	; (8006fe4 <vPortExitCritical+0x50>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10a      	bne.n	8006fb8 <vPortExitCritical+0x24>
	__asm volatile
 8006fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	607b      	str	r3, [r7, #4]
}
 8006fb4:	bf00      	nop
 8006fb6:	e7fe      	b.n	8006fb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006fb8:	4b0a      	ldr	r3, [pc, #40]	; (8006fe4 <vPortExitCritical+0x50>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	4a09      	ldr	r2, [pc, #36]	; (8006fe4 <vPortExitCritical+0x50>)
 8006fc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006fc2:	4b08      	ldr	r3, [pc, #32]	; (8006fe4 <vPortExitCritical+0x50>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d105      	bne.n	8006fd6 <vPortExitCritical+0x42>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	f383 8811 	msr	BASEPRI, r3
}
 8006fd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	2000000c 	.word	0x2000000c
	...

08006ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ff0:	f3ef 8009 	mrs	r0, PSP
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	4b15      	ldr	r3, [pc, #84]	; (8007050 <pxCurrentTCBConst>)
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	f01e 0f10 	tst.w	lr, #16
 8007000:	bf08      	it	eq
 8007002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800700a:	6010      	str	r0, [r2, #0]
 800700c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007010:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007014:	f380 8811 	msr	BASEPRI, r0
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f7fe ffb6 	bl	8005f90 <vTaskSwitchContext>
 8007024:	f04f 0000 	mov.w	r0, #0
 8007028:	f380 8811 	msr	BASEPRI, r0
 800702c:	bc09      	pop	{r0, r3}
 800702e:	6819      	ldr	r1, [r3, #0]
 8007030:	6808      	ldr	r0, [r1, #0]
 8007032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007036:	f01e 0f10 	tst.w	lr, #16
 800703a:	bf08      	it	eq
 800703c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007040:	f380 8809 	msr	PSP, r0
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	f3af 8000 	nop.w

08007050 <pxCurrentTCBConst>:
 8007050:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007054:	bf00      	nop
 8007056:	bf00      	nop

08007058 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	607b      	str	r3, [r7, #4]
}
 8007070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007072:	f7fe fed3 	bl	8005e1c <xTaskIncrementTick>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d003      	beq.n	8007084 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800707c:	4b06      	ldr	r3, [pc, #24]	; (8007098 <xPortSysTickHandler+0x40>)
 800707e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	2300      	movs	r3, #0
 8007086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	f383 8811 	msr	BASEPRI, r3
}
 800708e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007090:	bf00      	nop
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	e000ed04 	.word	0xe000ed04

0800709c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800709c:	b480      	push	{r7}
 800709e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070a0:	4b0b      	ldr	r3, [pc, #44]	; (80070d0 <vPortSetupTimerInterrupt+0x34>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80070a6:	4b0b      	ldr	r3, [pc, #44]	; (80070d4 <vPortSetupTimerInterrupt+0x38>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80070ac:	4b0a      	ldr	r3, [pc, #40]	; (80070d8 <vPortSetupTimerInterrupt+0x3c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a0a      	ldr	r2, [pc, #40]	; (80070dc <vPortSetupTimerInterrupt+0x40>)
 80070b2:	fba2 2303 	umull	r2, r3, r2, r3
 80070b6:	099b      	lsrs	r3, r3, #6
 80070b8:	4a09      	ldr	r2, [pc, #36]	; (80070e0 <vPortSetupTimerInterrupt+0x44>)
 80070ba:	3b01      	subs	r3, #1
 80070bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80070be:	4b04      	ldr	r3, [pc, #16]	; (80070d0 <vPortSetupTimerInterrupt+0x34>)
 80070c0:	2207      	movs	r2, #7
 80070c2:	601a      	str	r2, [r3, #0]
}
 80070c4:	bf00      	nop
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	e000e010 	.word	0xe000e010
 80070d4:	e000e018 	.word	0xe000e018
 80070d8:	20000000 	.word	0x20000000
 80070dc:	10624dd3 	.word	0x10624dd3
 80070e0:	e000e014 	.word	0xe000e014

080070e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80070e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80070f4 <vPortEnableVFP+0x10>
 80070e8:	6801      	ldr	r1, [r0, #0]
 80070ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80070ee:	6001      	str	r1, [r0, #0]
 80070f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80070f2:	bf00      	nop
 80070f4:	e000ed88 	.word	0xe000ed88

080070f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80070fe:	f3ef 8305 	mrs	r3, IPSR
 8007102:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2b0f      	cmp	r3, #15
 8007108:	d914      	bls.n	8007134 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800710a:	4a17      	ldr	r2, [pc, #92]	; (8007168 <vPortValidateInterruptPriority+0x70>)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4413      	add	r3, r2
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007114:	4b15      	ldr	r3, [pc, #84]	; (800716c <vPortValidateInterruptPriority+0x74>)
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	7afa      	ldrb	r2, [r7, #11]
 800711a:	429a      	cmp	r2, r3
 800711c:	d20a      	bcs.n	8007134 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	607b      	str	r3, [r7, #4]
}
 8007130:	bf00      	nop
 8007132:	e7fe      	b.n	8007132 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007134:	4b0e      	ldr	r3, [pc, #56]	; (8007170 <vPortValidateInterruptPriority+0x78>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800713c:	4b0d      	ldr	r3, [pc, #52]	; (8007174 <vPortValidateInterruptPriority+0x7c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	429a      	cmp	r2, r3
 8007142:	d90a      	bls.n	800715a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	603b      	str	r3, [r7, #0]
}
 8007156:	bf00      	nop
 8007158:	e7fe      	b.n	8007158 <vPortValidateInterruptPriority+0x60>
	}
 800715a:	bf00      	nop
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	e000e3f0 	.word	0xe000e3f0
 800716c:	20000e38 	.word	0x20000e38
 8007170:	e000ed0c 	.word	0xe000ed0c
 8007174:	20000e3c 	.word	0x20000e3c

08007178 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b08a      	sub	sp, #40	; 0x28
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007180:	2300      	movs	r3, #0
 8007182:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007184:	f7fe fd8e 	bl	8005ca4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007188:	4b5b      	ldr	r3, [pc, #364]	; (80072f8 <pvPortMalloc+0x180>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d101      	bne.n	8007194 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007190:	f000 f920 	bl	80073d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007194:	4b59      	ldr	r3, [pc, #356]	; (80072fc <pvPortMalloc+0x184>)
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4013      	ands	r3, r2
 800719c:	2b00      	cmp	r3, #0
 800719e:	f040 8093 	bne.w	80072c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d01d      	beq.n	80071e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80071a8:	2208      	movs	r2, #8
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4413      	add	r3, r2
 80071ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f003 0307 	and.w	r3, r3, #7
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d014      	beq.n	80071e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f023 0307 	bic.w	r3, r3, #7
 80071c0:	3308      	adds	r3, #8
 80071c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f003 0307 	and.w	r3, r3, #7
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00a      	beq.n	80071e4 <pvPortMalloc+0x6c>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	617b      	str	r3, [r7, #20]
}
 80071e0:	bf00      	nop
 80071e2:	e7fe      	b.n	80071e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d06e      	beq.n	80072c8 <pvPortMalloc+0x150>
 80071ea:	4b45      	ldr	r3, [pc, #276]	; (8007300 <pvPortMalloc+0x188>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d869      	bhi.n	80072c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80071f4:	4b43      	ldr	r3, [pc, #268]	; (8007304 <pvPortMalloc+0x18c>)
 80071f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80071f8:	4b42      	ldr	r3, [pc, #264]	; (8007304 <pvPortMalloc+0x18c>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071fe:	e004      	b.n	800720a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	429a      	cmp	r2, r3
 8007212:	d903      	bls.n	800721c <pvPortMalloc+0xa4>
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1f1      	bne.n	8007200 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800721c:	4b36      	ldr	r3, [pc, #216]	; (80072f8 <pvPortMalloc+0x180>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007222:	429a      	cmp	r2, r3
 8007224:	d050      	beq.n	80072c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2208      	movs	r2, #8
 800722c:	4413      	add	r3, r2
 800722e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	1ad2      	subs	r2, r2, r3
 8007240:	2308      	movs	r3, #8
 8007242:	005b      	lsls	r3, r3, #1
 8007244:	429a      	cmp	r2, r3
 8007246:	d91f      	bls.n	8007288 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4413      	add	r3, r2
 800724e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	f003 0307 	and.w	r3, r3, #7
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00a      	beq.n	8007270 <pvPortMalloc+0xf8>
	__asm volatile
 800725a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725e:	f383 8811 	msr	BASEPRI, r3
 8007262:	f3bf 8f6f 	isb	sy
 8007266:	f3bf 8f4f 	dsb	sy
 800726a:	613b      	str	r3, [r7, #16]
}
 800726c:	bf00      	nop
 800726e:	e7fe      	b.n	800726e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	1ad2      	subs	r2, r2, r3
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007282:	69b8      	ldr	r0, [r7, #24]
 8007284:	f000 f908 	bl	8007498 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007288:	4b1d      	ldr	r3, [pc, #116]	; (8007300 <pvPortMalloc+0x188>)
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	4a1b      	ldr	r2, [pc, #108]	; (8007300 <pvPortMalloc+0x188>)
 8007294:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007296:	4b1a      	ldr	r3, [pc, #104]	; (8007300 <pvPortMalloc+0x188>)
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	4b1b      	ldr	r3, [pc, #108]	; (8007308 <pvPortMalloc+0x190>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d203      	bcs.n	80072aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80072a2:	4b17      	ldr	r3, [pc, #92]	; (8007300 <pvPortMalloc+0x188>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a18      	ldr	r2, [pc, #96]	; (8007308 <pvPortMalloc+0x190>)
 80072a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	4b13      	ldr	r3, [pc, #76]	; (80072fc <pvPortMalloc+0x184>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	431a      	orrs	r2, r3
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	2200      	movs	r2, #0
 80072bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80072be:	4b13      	ldr	r3, [pc, #76]	; (800730c <pvPortMalloc+0x194>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3301      	adds	r3, #1
 80072c4:	4a11      	ldr	r2, [pc, #68]	; (800730c <pvPortMalloc+0x194>)
 80072c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80072c8:	f7fe fcfa 	bl	8005cc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	f003 0307 	and.w	r3, r3, #7
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00a      	beq.n	80072ec <pvPortMalloc+0x174>
	__asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	60fb      	str	r3, [r7, #12]
}
 80072e8:	bf00      	nop
 80072ea:	e7fe      	b.n	80072ea <pvPortMalloc+0x172>
	return pvReturn;
 80072ec:	69fb      	ldr	r3, [r7, #28]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3728      	adds	r7, #40	; 0x28
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20001a48 	.word	0x20001a48
 80072fc:	20001a5c 	.word	0x20001a5c
 8007300:	20001a4c 	.word	0x20001a4c
 8007304:	20001a40 	.word	0x20001a40
 8007308:	20001a50 	.word	0x20001a50
 800730c:	20001a54 	.word	0x20001a54

08007310 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d04d      	beq.n	80073be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007322:	2308      	movs	r3, #8
 8007324:	425b      	negs	r3, r3
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	4413      	add	r3, r2
 800732a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	4b24      	ldr	r3, [pc, #144]	; (80073c8 <vPortFree+0xb8>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4013      	ands	r3, r2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10a      	bne.n	8007354 <vPortFree+0x44>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	60fb      	str	r3, [r7, #12]
}
 8007350:	bf00      	nop
 8007352:	e7fe      	b.n	8007352 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00a      	beq.n	8007372 <vPortFree+0x62>
	__asm volatile
 800735c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	60bb      	str	r3, [r7, #8]
}
 800736e:	bf00      	nop
 8007370:	e7fe      	b.n	8007370 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	4b14      	ldr	r3, [pc, #80]	; (80073c8 <vPortFree+0xb8>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4013      	ands	r3, r2
 800737c:	2b00      	cmp	r3, #0
 800737e:	d01e      	beq.n	80073be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d11a      	bne.n	80073be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	685a      	ldr	r2, [r3, #4]
 800738c:	4b0e      	ldr	r3, [pc, #56]	; (80073c8 <vPortFree+0xb8>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	43db      	mvns	r3, r3
 8007392:	401a      	ands	r2, r3
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007398:	f7fe fc84 	bl	8005ca4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	4b0a      	ldr	r3, [pc, #40]	; (80073cc <vPortFree+0xbc>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4413      	add	r3, r2
 80073a6:	4a09      	ldr	r2, [pc, #36]	; (80073cc <vPortFree+0xbc>)
 80073a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073aa:	6938      	ldr	r0, [r7, #16]
 80073ac:	f000 f874 	bl	8007498 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80073b0:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <vPortFree+0xc0>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3301      	adds	r3, #1
 80073b6:	4a06      	ldr	r2, [pc, #24]	; (80073d0 <vPortFree+0xc0>)
 80073b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80073ba:	f7fe fc81 	bl	8005cc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80073be:	bf00      	nop
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	20001a5c 	.word	0x20001a5c
 80073cc:	20001a4c 	.word	0x20001a4c
 80073d0:	20001a58 	.word	0x20001a58

080073d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80073da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80073de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80073e0:	4b27      	ldr	r3, [pc, #156]	; (8007480 <prvHeapInit+0xac>)
 80073e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f003 0307 	and.w	r3, r3, #7
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00c      	beq.n	8007408 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	3307      	adds	r3, #7
 80073f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f023 0307 	bic.w	r3, r3, #7
 80073fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	4a1f      	ldr	r2, [pc, #124]	; (8007480 <prvHeapInit+0xac>)
 8007404:	4413      	add	r3, r2
 8007406:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800740c:	4a1d      	ldr	r2, [pc, #116]	; (8007484 <prvHeapInit+0xb0>)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007412:	4b1c      	ldr	r3, [pc, #112]	; (8007484 <prvHeapInit+0xb0>)
 8007414:	2200      	movs	r2, #0
 8007416:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	4413      	add	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007420:	2208      	movs	r2, #8
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	1a9b      	subs	r3, r3, r2
 8007426:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f023 0307 	bic.w	r3, r3, #7
 800742e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	4a15      	ldr	r2, [pc, #84]	; (8007488 <prvHeapInit+0xb4>)
 8007434:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007436:	4b14      	ldr	r3, [pc, #80]	; (8007488 <prvHeapInit+0xb4>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2200      	movs	r2, #0
 800743c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800743e:	4b12      	ldr	r3, [pc, #72]	; (8007488 <prvHeapInit+0xb4>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2200      	movs	r2, #0
 8007444:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	1ad2      	subs	r2, r2, r3
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007454:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <prvHeapInit+0xb4>)
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	4a0a      	ldr	r2, [pc, #40]	; (800748c <prvHeapInit+0xb8>)
 8007462:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	4a09      	ldr	r2, [pc, #36]	; (8007490 <prvHeapInit+0xbc>)
 800746a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800746c:	4b09      	ldr	r3, [pc, #36]	; (8007494 <prvHeapInit+0xc0>)
 800746e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007472:	601a      	str	r2, [r3, #0]
}
 8007474:	bf00      	nop
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	20000e40 	.word	0x20000e40
 8007484:	20001a40 	.word	0x20001a40
 8007488:	20001a48 	.word	0x20001a48
 800748c:	20001a50 	.word	0x20001a50
 8007490:	20001a4c 	.word	0x20001a4c
 8007494:	20001a5c 	.word	0x20001a5c

08007498 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80074a0:	4b28      	ldr	r3, [pc, #160]	; (8007544 <prvInsertBlockIntoFreeList+0xac>)
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	e002      	b.n	80074ac <prvInsertBlockIntoFreeList+0x14>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d8f7      	bhi.n	80074a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	4413      	add	r3, r2
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d108      	bne.n	80074da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	441a      	add	r2, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	441a      	add	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d118      	bne.n	8007520 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	4b15      	ldr	r3, [pc, #84]	; (8007548 <prvInsertBlockIntoFreeList+0xb0>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d00d      	beq.n	8007516 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	441a      	add	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	e008      	b.n	8007528 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007516:	4b0c      	ldr	r3, [pc, #48]	; (8007548 <prvInsertBlockIntoFreeList+0xb0>)
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	e003      	b.n	8007528 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	429a      	cmp	r2, r3
 800752e:	d002      	beq.n	8007536 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007536:	bf00      	nop
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	20001a40 	.word	0x20001a40
 8007548:	20001a48 	.word	0x20001a48

0800754c <__libc_init_array>:
 800754c:	b570      	push	{r4, r5, r6, lr}
 800754e:	4d0d      	ldr	r5, [pc, #52]	; (8007584 <__libc_init_array+0x38>)
 8007550:	4c0d      	ldr	r4, [pc, #52]	; (8007588 <__libc_init_array+0x3c>)
 8007552:	1b64      	subs	r4, r4, r5
 8007554:	10a4      	asrs	r4, r4, #2
 8007556:	2600      	movs	r6, #0
 8007558:	42a6      	cmp	r6, r4
 800755a:	d109      	bne.n	8007570 <__libc_init_array+0x24>
 800755c:	4d0b      	ldr	r5, [pc, #44]	; (800758c <__libc_init_array+0x40>)
 800755e:	4c0c      	ldr	r4, [pc, #48]	; (8007590 <__libc_init_array+0x44>)
 8007560:	f000 f8fe 	bl	8007760 <_init>
 8007564:	1b64      	subs	r4, r4, r5
 8007566:	10a4      	asrs	r4, r4, #2
 8007568:	2600      	movs	r6, #0
 800756a:	42a6      	cmp	r6, r4
 800756c:	d105      	bne.n	800757a <__libc_init_array+0x2e>
 800756e:	bd70      	pop	{r4, r5, r6, pc}
 8007570:	f855 3b04 	ldr.w	r3, [r5], #4
 8007574:	4798      	blx	r3
 8007576:	3601      	adds	r6, #1
 8007578:	e7ee      	b.n	8007558 <__libc_init_array+0xc>
 800757a:	f855 3b04 	ldr.w	r3, [r5], #4
 800757e:	4798      	blx	r3
 8007580:	3601      	adds	r6, #1
 8007582:	e7f2      	b.n	800756a <__libc_init_array+0x1e>
 8007584:	080078f4 	.word	0x080078f4
 8007588:	080078f4 	.word	0x080078f4
 800758c:	080078f4 	.word	0x080078f4
 8007590:	080078f8 	.word	0x080078f8

08007594 <__retarget_lock_acquire_recursive>:
 8007594:	4770      	bx	lr

08007596 <__retarget_lock_release_recursive>:
 8007596:	4770      	bx	lr

08007598 <memcpy>:
 8007598:	440a      	add	r2, r1
 800759a:	4291      	cmp	r1, r2
 800759c:	f100 33ff 	add.w	r3, r0, #4294967295
 80075a0:	d100      	bne.n	80075a4 <memcpy+0xc>
 80075a2:	4770      	bx	lr
 80075a4:	b510      	push	{r4, lr}
 80075a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075ae:	4291      	cmp	r1, r2
 80075b0:	d1f9      	bne.n	80075a6 <memcpy+0xe>
 80075b2:	bd10      	pop	{r4, pc}

080075b4 <memset>:
 80075b4:	4402      	add	r2, r0
 80075b6:	4603      	mov	r3, r0
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d100      	bne.n	80075be <memset+0xa>
 80075bc:	4770      	bx	lr
 80075be:	f803 1b01 	strb.w	r1, [r3], #1
 80075c2:	e7f9      	b.n	80075b8 <memset+0x4>

080075c4 <cleanup_glue>:
 80075c4:	b538      	push	{r3, r4, r5, lr}
 80075c6:	460c      	mov	r4, r1
 80075c8:	6809      	ldr	r1, [r1, #0]
 80075ca:	4605      	mov	r5, r0
 80075cc:	b109      	cbz	r1, 80075d2 <cleanup_glue+0xe>
 80075ce:	f7ff fff9 	bl	80075c4 <cleanup_glue>
 80075d2:	4621      	mov	r1, r4
 80075d4:	4628      	mov	r0, r5
 80075d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075da:	f000 b871 	b.w	80076c0 <_free_r>
	...

080075e0 <_reclaim_reent>:
 80075e0:	4b2c      	ldr	r3, [pc, #176]	; (8007694 <_reclaim_reent+0xb4>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4283      	cmp	r3, r0
 80075e6:	b570      	push	{r4, r5, r6, lr}
 80075e8:	4604      	mov	r4, r0
 80075ea:	d051      	beq.n	8007690 <_reclaim_reent+0xb0>
 80075ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80075ee:	b143      	cbz	r3, 8007602 <_reclaim_reent+0x22>
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d14a      	bne.n	800768c <_reclaim_reent+0xac>
 80075f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075f8:	6819      	ldr	r1, [r3, #0]
 80075fa:	b111      	cbz	r1, 8007602 <_reclaim_reent+0x22>
 80075fc:	4620      	mov	r0, r4
 80075fe:	f000 f85f 	bl	80076c0 <_free_r>
 8007602:	6961      	ldr	r1, [r4, #20]
 8007604:	b111      	cbz	r1, 800760c <_reclaim_reent+0x2c>
 8007606:	4620      	mov	r0, r4
 8007608:	f000 f85a 	bl	80076c0 <_free_r>
 800760c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800760e:	b111      	cbz	r1, 8007616 <_reclaim_reent+0x36>
 8007610:	4620      	mov	r0, r4
 8007612:	f000 f855 	bl	80076c0 <_free_r>
 8007616:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007618:	b111      	cbz	r1, 8007620 <_reclaim_reent+0x40>
 800761a:	4620      	mov	r0, r4
 800761c:	f000 f850 	bl	80076c0 <_free_r>
 8007620:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007622:	b111      	cbz	r1, 800762a <_reclaim_reent+0x4a>
 8007624:	4620      	mov	r0, r4
 8007626:	f000 f84b 	bl	80076c0 <_free_r>
 800762a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800762c:	b111      	cbz	r1, 8007634 <_reclaim_reent+0x54>
 800762e:	4620      	mov	r0, r4
 8007630:	f000 f846 	bl	80076c0 <_free_r>
 8007634:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007636:	b111      	cbz	r1, 800763e <_reclaim_reent+0x5e>
 8007638:	4620      	mov	r0, r4
 800763a:	f000 f841 	bl	80076c0 <_free_r>
 800763e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007640:	b111      	cbz	r1, 8007648 <_reclaim_reent+0x68>
 8007642:	4620      	mov	r0, r4
 8007644:	f000 f83c 	bl	80076c0 <_free_r>
 8007648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800764a:	b111      	cbz	r1, 8007652 <_reclaim_reent+0x72>
 800764c:	4620      	mov	r0, r4
 800764e:	f000 f837 	bl	80076c0 <_free_r>
 8007652:	69a3      	ldr	r3, [r4, #24]
 8007654:	b1e3      	cbz	r3, 8007690 <_reclaim_reent+0xb0>
 8007656:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007658:	4620      	mov	r0, r4
 800765a:	4798      	blx	r3
 800765c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800765e:	b1b9      	cbz	r1, 8007690 <_reclaim_reent+0xb0>
 8007660:	4620      	mov	r0, r4
 8007662:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007666:	f7ff bfad 	b.w	80075c4 <cleanup_glue>
 800766a:	5949      	ldr	r1, [r1, r5]
 800766c:	b941      	cbnz	r1, 8007680 <_reclaim_reent+0xa0>
 800766e:	3504      	adds	r5, #4
 8007670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007672:	2d80      	cmp	r5, #128	; 0x80
 8007674:	68d9      	ldr	r1, [r3, #12]
 8007676:	d1f8      	bne.n	800766a <_reclaim_reent+0x8a>
 8007678:	4620      	mov	r0, r4
 800767a:	f000 f821 	bl	80076c0 <_free_r>
 800767e:	e7ba      	b.n	80075f6 <_reclaim_reent+0x16>
 8007680:	680e      	ldr	r6, [r1, #0]
 8007682:	4620      	mov	r0, r4
 8007684:	f000 f81c 	bl	80076c0 <_free_r>
 8007688:	4631      	mov	r1, r6
 800768a:	e7ef      	b.n	800766c <_reclaim_reent+0x8c>
 800768c:	2500      	movs	r5, #0
 800768e:	e7ef      	b.n	8007670 <_reclaim_reent+0x90>
 8007690:	bd70      	pop	{r4, r5, r6, pc}
 8007692:	bf00      	nop
 8007694:	20000010 	.word	0x20000010

08007698 <strcpy>:
 8007698:	4603      	mov	r3, r0
 800769a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800769e:	f803 2b01 	strb.w	r2, [r3], #1
 80076a2:	2a00      	cmp	r2, #0
 80076a4:	d1f9      	bne.n	800769a <strcpy+0x2>
 80076a6:	4770      	bx	lr

080076a8 <__malloc_lock>:
 80076a8:	4801      	ldr	r0, [pc, #4]	; (80076b0 <__malloc_lock+0x8>)
 80076aa:	f7ff bf73 	b.w	8007594 <__retarget_lock_acquire_recursive>
 80076ae:	bf00      	nop
 80076b0:	20001d38 	.word	0x20001d38

080076b4 <__malloc_unlock>:
 80076b4:	4801      	ldr	r0, [pc, #4]	; (80076bc <__malloc_unlock+0x8>)
 80076b6:	f7ff bf6e 	b.w	8007596 <__retarget_lock_release_recursive>
 80076ba:	bf00      	nop
 80076bc:	20001d38 	.word	0x20001d38

080076c0 <_free_r>:
 80076c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076c2:	2900      	cmp	r1, #0
 80076c4:	d048      	beq.n	8007758 <_free_r+0x98>
 80076c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ca:	9001      	str	r0, [sp, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f1a1 0404 	sub.w	r4, r1, #4
 80076d2:	bfb8      	it	lt
 80076d4:	18e4      	addlt	r4, r4, r3
 80076d6:	f7ff ffe7 	bl	80076a8 <__malloc_lock>
 80076da:	4a20      	ldr	r2, [pc, #128]	; (800775c <_free_r+0x9c>)
 80076dc:	9801      	ldr	r0, [sp, #4]
 80076de:	6813      	ldr	r3, [r2, #0]
 80076e0:	4615      	mov	r5, r2
 80076e2:	b933      	cbnz	r3, 80076f2 <_free_r+0x32>
 80076e4:	6063      	str	r3, [r4, #4]
 80076e6:	6014      	str	r4, [r2, #0]
 80076e8:	b003      	add	sp, #12
 80076ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076ee:	f7ff bfe1 	b.w	80076b4 <__malloc_unlock>
 80076f2:	42a3      	cmp	r3, r4
 80076f4:	d90b      	bls.n	800770e <_free_r+0x4e>
 80076f6:	6821      	ldr	r1, [r4, #0]
 80076f8:	1862      	adds	r2, r4, r1
 80076fa:	4293      	cmp	r3, r2
 80076fc:	bf04      	itt	eq
 80076fe:	681a      	ldreq	r2, [r3, #0]
 8007700:	685b      	ldreq	r3, [r3, #4]
 8007702:	6063      	str	r3, [r4, #4]
 8007704:	bf04      	itt	eq
 8007706:	1852      	addeq	r2, r2, r1
 8007708:	6022      	streq	r2, [r4, #0]
 800770a:	602c      	str	r4, [r5, #0]
 800770c:	e7ec      	b.n	80076e8 <_free_r+0x28>
 800770e:	461a      	mov	r2, r3
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	b10b      	cbz	r3, 8007718 <_free_r+0x58>
 8007714:	42a3      	cmp	r3, r4
 8007716:	d9fa      	bls.n	800770e <_free_r+0x4e>
 8007718:	6811      	ldr	r1, [r2, #0]
 800771a:	1855      	adds	r5, r2, r1
 800771c:	42a5      	cmp	r5, r4
 800771e:	d10b      	bne.n	8007738 <_free_r+0x78>
 8007720:	6824      	ldr	r4, [r4, #0]
 8007722:	4421      	add	r1, r4
 8007724:	1854      	adds	r4, r2, r1
 8007726:	42a3      	cmp	r3, r4
 8007728:	6011      	str	r1, [r2, #0]
 800772a:	d1dd      	bne.n	80076e8 <_free_r+0x28>
 800772c:	681c      	ldr	r4, [r3, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	6053      	str	r3, [r2, #4]
 8007732:	4421      	add	r1, r4
 8007734:	6011      	str	r1, [r2, #0]
 8007736:	e7d7      	b.n	80076e8 <_free_r+0x28>
 8007738:	d902      	bls.n	8007740 <_free_r+0x80>
 800773a:	230c      	movs	r3, #12
 800773c:	6003      	str	r3, [r0, #0]
 800773e:	e7d3      	b.n	80076e8 <_free_r+0x28>
 8007740:	6825      	ldr	r5, [r4, #0]
 8007742:	1961      	adds	r1, r4, r5
 8007744:	428b      	cmp	r3, r1
 8007746:	bf04      	itt	eq
 8007748:	6819      	ldreq	r1, [r3, #0]
 800774a:	685b      	ldreq	r3, [r3, #4]
 800774c:	6063      	str	r3, [r4, #4]
 800774e:	bf04      	itt	eq
 8007750:	1949      	addeq	r1, r1, r5
 8007752:	6021      	streq	r1, [r4, #0]
 8007754:	6054      	str	r4, [r2, #4]
 8007756:	e7c7      	b.n	80076e8 <_free_r+0x28>
 8007758:	b003      	add	sp, #12
 800775a:	bd30      	pop	{r4, r5, pc}
 800775c:	20001a60 	.word	0x20001a60

08007760 <_init>:
 8007760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007762:	bf00      	nop
 8007764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007766:	bc08      	pop	{r3}
 8007768:	469e      	mov	lr, r3
 800776a:	4770      	bx	lr

0800776c <_fini>:
 800776c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776e:	bf00      	nop
 8007770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007772:	bc08      	pop	{r3}
 8007774:	469e      	mov	lr, r3
 8007776:	4770      	bx	lr
