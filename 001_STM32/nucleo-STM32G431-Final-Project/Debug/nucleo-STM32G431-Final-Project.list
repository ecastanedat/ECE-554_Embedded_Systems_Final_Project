
nucleo-STM32G431-Final-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084c0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  080086a0  080086a0  000186a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008888  08008888  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008888  08008888  00018888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008890  08008890  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008890  08008890  00018890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008894  08008894  00018894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002108  20000074  0800890c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000217c  0800890c  0002217c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c067  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000480a  00000000  00000000  0004c10b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae8  00000000  00000000  00050918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001940  00000000  00000000  00052400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e0c  00000000  00000000  00053d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ee17  00000000  00000000  00075b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d53c4  00000000  00000000  00094963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00169d27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007614  00000000  00000000  00169d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008688 	.word	0x08008688

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08008688 	.word	0x08008688

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2f>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009d4:	bf24      	itt	cs
 80009d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009de:	d90d      	bls.n	80009fc <__aeabi_d2f+0x30>
 80009e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a00:	d121      	bne.n	8000a46 <__aeabi_d2f+0x7a>
 8000a02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a06:	bfbc      	itt	lt
 8000a08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a0c:	4770      	bxlt	lr
 8000a0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a16:	f1c2 0218 	rsb	r2, r2, #24
 8000a1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a22:	fa20 f002 	lsr.w	r0, r0, r2
 8000a26:	bf18      	it	ne
 8000a28:	f040 0001 	orrne.w	r0, r0, #1
 8000a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a38:	ea40 000c 	orr.w	r0, r0, ip
 8000a3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a44:	e7cc      	b.n	80009e0 <__aeabi_d2f+0x14>
 8000a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a4a:	d107      	bne.n	8000a5c <__aeabi_d2f+0x90>
 8000a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a50:	bf1e      	ittt	ne
 8000a52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a5a:	4770      	bxne	lr
 8000a5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b96e 	b.w	8000d60 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468c      	mov	ip, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f040 8083 	bne.w	8000bb2 <__udivmoddi4+0x116>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4617      	mov	r7, r2
 8000ab0:	d947      	bls.n	8000b42 <__udivmoddi4+0xa6>
 8000ab2:	fab2 f282 	clz	r2, r2
 8000ab6:	b142      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab8:	f1c2 0020 	rsb	r0, r2, #32
 8000abc:	fa24 f000 	lsr.w	r0, r4, r0
 8000ac0:	4091      	lsls	r1, r2
 8000ac2:	4097      	lsls	r7, r2
 8000ac4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ad4:	fa1f fe87 	uxth.w	lr, r7
 8000ad8:	fb08 c116 	mls	r1, r8, r6, ip
 8000adc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aee:	f080 8119 	bcs.w	8000d24 <__udivmoddi4+0x288>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8116 	bls.w	8000d24 <__udivmoddi4+0x288>
 8000af8:	3e02      	subs	r6, #2
 8000afa:	443b      	add	r3, r7
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b04:	fb08 3310 	mls	r3, r8, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b10:	45a6      	cmp	lr, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	193c      	adds	r4, r7, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1a:	f080 8105 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000b1e:	45a6      	cmp	lr, r4
 8000b20:	f240 8102 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000b24:	3802      	subs	r0, #2
 8000b26:	443c      	add	r4, r7
 8000b28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b2c:	eba4 040e 	sub.w	r4, r4, lr
 8000b30:	2600      	movs	r6, #0
 8000b32:	b11d      	cbz	r5, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c5 4300 	strd	r4, r3, [r5]
 8000b3c:	4631      	mov	r1, r6
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	b902      	cbnz	r2, 8000b46 <__udivmoddi4+0xaa>
 8000b44:	deff      	udf	#255	; 0xff
 8000b46:	fab2 f282 	clz	r2, r2
 8000b4a:	2a00      	cmp	r2, #0
 8000b4c:	d150      	bne.n	8000bf0 <__udivmoddi4+0x154>
 8000b4e:	1bcb      	subs	r3, r1, r7
 8000b50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b54:	fa1f f887 	uxth.w	r8, r7
 8000b58:	2601      	movs	r6, #1
 8000b5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b5e:	0c21      	lsrs	r1, r4, #16
 8000b60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b68:	fb08 f30c 	mul.w	r3, r8, ip
 8000b6c:	428b      	cmp	r3, r1
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000b70:	1879      	adds	r1, r7, r1
 8000b72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0xe2>
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	f200 80e9 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000b7e:	4684      	mov	ip, r0
 8000b80:	1ac9      	subs	r1, r1, r3
 8000b82:	b2a3      	uxth	r3, r4
 8000b84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b90:	fb08 f800 	mul.w	r8, r8, r0
 8000b94:	45a0      	cmp	r8, r4
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x10c>
 8000b98:	193c      	adds	r4, r7, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x10a>
 8000ba0:	45a0      	cmp	r8, r4
 8000ba2:	f200 80d9 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	eba4 0408 	sub.w	r4, r4, r8
 8000bac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bb0:	e7bf      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d909      	bls.n	8000bca <__udivmoddi4+0x12e>
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	f000 80b1 	beq.w	8000d1e <__udivmoddi4+0x282>
 8000bbc:	2600      	movs	r6, #0
 8000bbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	4631      	mov	r1, r6
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	fab3 f683 	clz	r6, r3
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d14a      	bne.n	8000c68 <__udivmoddi4+0x1cc>
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0x140>
 8000bd6:	4282      	cmp	r2, r0
 8000bd8:	f200 80b8 	bhi.w	8000d4c <__udivmoddi4+0x2b0>
 8000bdc:	1a84      	subs	r4, r0, r2
 8000bde:	eb61 0103 	sbc.w	r1, r1, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	468c      	mov	ip, r1
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d0a8      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000bea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bee:	e7a5      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000bf0:	f1c2 0320 	rsb	r3, r2, #32
 8000bf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000bf8:	4097      	lsls	r7, r2
 8000bfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000bfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c02:	40d9      	lsrs	r1, r3
 8000c04:	4330      	orrs	r0, r6
 8000c06:	0c03      	lsrs	r3, r0, #16
 8000c08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c0c:	fa1f f887 	uxth.w	r8, r7
 8000c10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c18:	fb06 f108 	mul.w	r1, r6, r8
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x19c>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c2a:	f080 808d 	bcs.w	8000d48 <__udivmoddi4+0x2ac>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 808a 	bls.w	8000d48 <__udivmoddi4+0x2ac>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b281      	uxth	r1, r0
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c48:	fb00 f308 	mul.w	r3, r0, r8
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x1c4>
 8000c50:	1879      	adds	r1, r7, r1
 8000c52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c56:	d273      	bcs.n	8000d40 <__udivmoddi4+0x2a4>
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d971      	bls.n	8000d40 <__udivmoddi4+0x2a4>
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	4439      	add	r1, r7
 8000c60:	1acb      	subs	r3, r1, r3
 8000c62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c66:	e778      	b.n	8000b5a <__udivmoddi4+0xbe>
 8000c68:	f1c6 0c20 	rsb	ip, r6, #32
 8000c6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c74:	431c      	orrs	r4, r3
 8000c76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c86:	431f      	orrs	r7, r3
 8000c88:	0c3b      	lsrs	r3, r7, #16
 8000c8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c8e:	fa1f f884 	uxth.w	r8, r4
 8000c92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c9e:	458a      	cmp	sl, r1
 8000ca0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ca4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0x220>
 8000caa:	1861      	adds	r1, r4, r1
 8000cac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cb0:	d248      	bcs.n	8000d44 <__udivmoddi4+0x2a8>
 8000cb2:	458a      	cmp	sl, r1
 8000cb4:	d946      	bls.n	8000d44 <__udivmoddi4+0x2a8>
 8000cb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cba:	4421      	add	r1, r4
 8000cbc:	eba1 010a 	sub.w	r1, r1, sl
 8000cc0:	b2bf      	uxth	r7, r7
 8000cc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cce:	fb00 f808 	mul.w	r8, r0, r8
 8000cd2:	45b8      	cmp	r8, r7
 8000cd4:	d907      	bls.n	8000ce6 <__udivmoddi4+0x24a>
 8000cd6:	19e7      	adds	r7, r4, r7
 8000cd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cdc:	d22e      	bcs.n	8000d3c <__udivmoddi4+0x2a0>
 8000cde:	45b8      	cmp	r8, r7
 8000ce0:	d92c      	bls.n	8000d3c <__udivmoddi4+0x2a0>
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	4427      	add	r7, r4
 8000ce6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cea:	eba7 0708 	sub.w	r7, r7, r8
 8000cee:	fba0 8902 	umull	r8, r9, r0, r2
 8000cf2:	454f      	cmp	r7, r9
 8000cf4:	46c6      	mov	lr, r8
 8000cf6:	4649      	mov	r1, r9
 8000cf8:	d31a      	bcc.n	8000d30 <__udivmoddi4+0x294>
 8000cfa:	d017      	beq.n	8000d2c <__udivmoddi4+0x290>
 8000cfc:	b15d      	cbz	r5, 8000d16 <__udivmoddi4+0x27a>
 8000cfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000d02:	eb67 0701 	sbc.w	r7, r7, r1
 8000d06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d0a:	40f2      	lsrs	r2, r6
 8000d0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d10:	40f7      	lsrs	r7, r6
 8000d12:	e9c5 2700 	strd	r2, r7, [r5]
 8000d16:	2600      	movs	r6, #0
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e70b      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e9      	b.n	8000afc <__udivmoddi4+0x60>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6fd      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d2c:	4543      	cmp	r3, r8
 8000d2e:	d2e5      	bcs.n	8000cfc <__udivmoddi4+0x260>
 8000d30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d34:	eb69 0104 	sbc.w	r1, r9, r4
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7df      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e7d2      	b.n	8000ce6 <__udivmoddi4+0x24a>
 8000d40:	4660      	mov	r0, ip
 8000d42:	e78d      	b.n	8000c60 <__udivmoddi4+0x1c4>
 8000d44:	4681      	mov	r9, r0
 8000d46:	e7b9      	b.n	8000cbc <__udivmoddi4+0x220>
 8000d48:	4666      	mov	r6, ip
 8000d4a:	e775      	b.n	8000c38 <__udivmoddi4+0x19c>
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	e74a      	b.n	8000be6 <__udivmoddi4+0x14a>
 8000d50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d54:	4439      	add	r1, r7
 8000d56:	e713      	b.n	8000b80 <__udivmoddi4+0xe4>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	443c      	add	r4, r7
 8000d5c:	e724      	b.n	8000ba8 <__udivmoddi4+0x10c>
 8000d5e:	bf00      	nop

08000d60 <__aeabi_idiv0>:
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <print_to_console>:
#include "Globals.h"


/* Function prototypes -----------------------------------------------*/
void print_to_console(char *myString)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b09c      	sub	sp, #112	; 0x70
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[100];

	strcpy((char*)buffer, myString);
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f007 fbe2 	bl	800853c <strcpy>
	strcat((char*)buffer, "\n");
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fa4f 	bl	8000220 <strlen>
 8000d82:	4603      	mov	r3, r0
 8000d84:	461a      	mov	r2, r3
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4912      	ldr	r1, [pc, #72]	; (8000dd8 <print_to_console+0x74>)
 8000d8e:	461a      	mov	r2, r3
 8000d90:	460b      	mov	r3, r1
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	8013      	strh	r3, [r2, #0]
	strcat((char*)buffer, "\r");
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fa40 	bl	8000220 <strlen>
 8000da0:	4603      	mov	r3, r0
 8000da2:	461a      	mov	r2, r3
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	4413      	add	r3, r2
 8000daa:	490c      	ldr	r1, [pc, #48]	; (8000ddc <print_to_console+0x78>)
 8000dac:	461a      	mov	r2, r3
 8000dae:	460b      	mov	r3, r1
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fa31 	bl	8000220 <strlen>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	f107 010c 	add.w	r1, r7, #12
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <print_to_console+0x7c>)
 8000dcc:	f003 fd88 	bl	80048e0 <HAL_UART_Transmit>

}
 8000dd0:	bf00      	nop
 8000dd2:	3770      	adds	r7, #112	; 0x70
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	080086a0 	.word	0x080086a0
 8000ddc:	080086a4 	.word	0x080086a4
 8000de0:	2000209c 	.word	0x2000209c

08000de4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CAN_Comm */
  CAN_CommHandle = osThreadNew(StartCAN_Comm, NULL, &CAN_Comm_attributes);
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <MX_FREERTOS_Init+0x58>)
 8000dea:	2100      	movs	r1, #0
 8000dec:	4814      	ldr	r0, [pc, #80]	; (8000e40 <MX_FREERTOS_Init+0x5c>)
 8000dee:	f004 fbef 	bl	80055d0 <osThreadNew>
 8000df2:	4603      	mov	r3, r0
 8000df4:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <MX_FREERTOS_Init+0x60>)
 8000df6:	6013      	str	r3, [r2, #0]

  /* creation of led_green */
  led_greenHandle = osThreadNew(led_green_handler, NULL, &led_green_attributes);
 8000df8:	4a13      	ldr	r2, [pc, #76]	; (8000e48 <MX_FREERTOS_Init+0x64>)
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4813      	ldr	r0, [pc, #76]	; (8000e4c <MX_FREERTOS_Init+0x68>)
 8000dfe:	f004 fbe7 	bl	80055d0 <osThreadNew>
 8000e02:	4603      	mov	r3, r0
 8000e04:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <MX_FREERTOS_Init+0x6c>)
 8000e06:	6013      	str	r3, [r2, #0]

  /* creation of ultra_sensor_tr */
  ultra_sensor_trHandle = osThreadNew(Start_ultra_sensor_tr, NULL, &ultra_sensor_tr_attributes);
 8000e08:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <MX_FREERTOS_Init+0x70>)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4812      	ldr	r0, [pc, #72]	; (8000e58 <MX_FREERTOS_Init+0x74>)
 8000e0e:	f004 fbdf 	bl	80055d0 <osThreadNew>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4a11      	ldr	r2, [pc, #68]	; (8000e5c <MX_FREERTOS_Init+0x78>)
 8000e16:	6013      	str	r3, [r2, #0]

  /* creation of led_yellow */
  led_yellowHandle = osThreadNew(led_yellow_handler, NULL, &led_yellow_attributes);
 8000e18:	4a11      	ldr	r2, [pc, #68]	; (8000e60 <MX_FREERTOS_Init+0x7c>)
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4811      	ldr	r0, [pc, #68]	; (8000e64 <MX_FREERTOS_Init+0x80>)
 8000e1e:	f004 fbd7 	bl	80055d0 <osThreadNew>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4a10      	ldr	r2, [pc, #64]	; (8000e68 <MX_FREERTOS_Init+0x84>)
 8000e26:	6013      	str	r3, [r2, #0]

  /* creation of led_red */
  led_redHandle = osThreadNew(led_red_handler, NULL, &led_red_attributes);
 8000e28:	4a10      	ldr	r2, [pc, #64]	; (8000e6c <MX_FREERTOS_Init+0x88>)
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4810      	ldr	r0, [pc, #64]	; (8000e70 <MX_FREERTOS_Init+0x8c>)
 8000e2e:	f004 fbcf 	bl	80055d0 <osThreadNew>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <MX_FREERTOS_Init+0x90>)
 8000e36:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	080086fc 	.word	0x080086fc
 8000e40:	08000e79 	.word	0x08000e79
 8000e44:	20001e60 	.word	0x20001e60
 8000e48:	08008720 	.word	0x08008720
 8000e4c:	08000f85 	.word	0x08000f85
 8000e50:	20001e64 	.word	0x20001e64
 8000e54:	08008744 	.word	0x08008744
 8000e58:	08000fa1 	.word	0x08000fa1
 8000e5c:	20001e5c 	.word	0x20001e5c
 8000e60:	08008768 	.word	0x08008768
 8000e64:	08000fe9 	.word	0x08000fe9
 8000e68:	20001e68 	.word	0x20001e68
 8000e6c:	0800878c 	.word	0x0800878c
 8000e70:	08001005 	.word	0x08001005
 8000e74:	20001e6c 	.word	0x20001e6c

08000e78 <StartCAN_Comm>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCAN_Comm */
void StartCAN_Comm(void *argument)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCAN_Comm */
  uint32_t timer_ticks = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
  uint8_t reversed_array[8], reversed_array_size = 0, reversed_array_elem = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  char string_number[10];

  /* Infinite loop */
  for(;;)
  {
	  xTaskNotifyWait(0, 0, &timer_ticks, pdMS_TO_TICKS(10));
 8000e90:	f107 021c 	add.w	r2, r7, #28
 8000e94:	230a      	movs	r3, #10
 8000e96:	2100      	movs	r1, #0
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f006 f96d 	bl	8007178 <xTaskNotifyWait>
	  distance = (SPEED_OF_SOUND * TIMER_PERIOD * timer_ticks)/2;
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fb07 	bl	80004b4 <__aeabi_ui2d>
 8000ea6:	a335      	add	r3, pc, #212	; (adr r3, 8000f7c <StartCAN_Comm+0x104>)
 8000ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eac:	f7ff fb7c 	bl	80005a8 <__aeabi_dmul>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f04f 0200 	mov.w	r2, #0
 8000ebc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ec0:	f7ff fc9c 	bl	80007fc <__aeabi_ddiv>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4610      	mov	r0, r2
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f7ff fd7e 	bl	80009cc <__aeabi_d2f>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	623b      	str	r3, [r7, #32]

	  itoa(distance, string_number, 10);
 8000ed4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ed8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000edc:	f107 0308 	add.w	r3, r7, #8
 8000ee0:	220a      	movs	r2, #10
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	ee17 0a90 	vmov	r0, s15
 8000ee8:	f007 faa4 	bl	8008434 <itoa>
	  print_to_console(string_number);
 8000eec:	f107 0308 	add.w	r3, r7, #8
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff37 	bl	8000d64 <print_to_console>

	  reversed_array_size = number_to_byte_arr(reversed_array, distance);
 8000ef6:	edd7 7a08 	vldr	s15, [r7, #32]
 8000efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	ee17 1a90 	vmov	r1, s15
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f88a 	bl	8001020 <number_to_byte_arr>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	  reversed_array_elem = reversed_array_size;
 8000f12:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  /*Takes the values from the reversed array and populates the array that will be sent via CAN*/
	  for(uint8_t counter = 0; counter <= reversed_array_size; counter++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f20:	e014      	b.n	8000f4c <StartCAN_Comm+0xd4>
	  {
		  myTxData[counter] = reversed_array[reversed_array_elem];
 8000f22:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000f26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f2a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f2e:	440a      	add	r2, r1
 8000f30:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8000f34:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <StartCAN_Comm+0xf8>)
 8000f36:	54d1      	strb	r1, [r2, r3]
		  reversed_array_elem--;
 8000f38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  for(uint8_t counter = 0; counter <= reversed_array_size; counter++)
 8000f42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f46:	3301      	adds	r3, #1
 8000f48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f4c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000f50:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d9e4      	bls.n	8000f22 <StartCAN_Comm+0xaa>
	  }

	  reversed_array_size = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData); //Sends the distance to the CAN network.
 8000f5e:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <StartCAN_Comm+0xf8>)
 8000f60:	4904      	ldr	r1, [pc, #16]	; (8000f74 <StartCAN_Comm+0xfc>)
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <StartCAN_Comm+0x100>)
 8000f64:	f001 f91b 	bl	800219e <HAL_FDCAN_AddMessageToTxFifoQ>
	  xTaskNotifyWait(0, 0, &timer_ticks, pdMS_TO_TICKS(10));
 8000f68:	e792      	b.n	8000e90 <StartCAN_Comm+0x18>
 8000f6a:	bf00      	nop
 8000f6c:	f3af 8000 	nop.w
 8000f70:	20001e4c 	.word	0x20001e4c
 8000f74:	20001e70 	.word	0x20001e70
 8000f78:	20001ebc 	.word	0x20001ebc
 8000f7c:	3a68b19a 	.word	0x3a68b19a
 8000f80:	3f3c193b 	.word	0x3f3c193b

08000f84 <led_green_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_green_handler */
void led_green_handler(void *argument)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_green_handler */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f92:	f001 fe5f 	bl	8002c54 <HAL_GPIO_TogglePin>
      osDelay(1000);
 8000f96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f9a:	f004 fbab 	bl	80056f4 <osDelay>
	  HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8000f9e:	e7f5      	b.n	8000f8c <led_green_handler+0x8>

08000fa0 <Start_ultra_sensor_tr>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_ultra_sensor_tr */
void Start_ultra_sensor_tr(void *argument)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_ultra_sensor_tr */
  TickType_t xLastWakeTime;
  HAL_TIM_Base_Start(&htim8);
 8000fa8:	480e      	ldr	r0, [pc, #56]	; (8000fe4 <Start_ultra_sensor_tr+0x44>)
 8000faa:	f002 fee7 	bl	8003d7c <HAL_TIM_Base_Start>

  xLastWakeTime = xTaskGetTickCount();
 8000fae:	f005 fd17 	bl	80069e0 <xTaskGetTickCount>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	60fb      	str	r3, [r7, #12]


  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(ULTR_TRG_GPIO_Port, ULTR_TRG_Pin, GPIO_PIN_SET);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2110      	movs	r1, #16
 8000fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbe:	f001 fe31 	bl	8002c24 <HAL_GPIO_WritePin>
	  delay_us(100);
 8000fc2:	2064      	movs	r0, #100	; 0x64
 8000fc4:	f000 fce0 	bl	8001988 <delay_us>
	  HAL_GPIO_WritePin(ULTR_TRG_GPIO_Port, ULTR_TRG_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2110      	movs	r1, #16
 8000fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd0:	f001 fe28 	bl	8002c24 <HAL_GPIO_WritePin>

      vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(100));
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2164      	movs	r1, #100	; 0x64
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f005 fb32 	bl	8006644 <vTaskDelayUntil>
	  HAL_GPIO_WritePin(ULTR_TRG_GPIO_Port, ULTR_TRG_Pin, GPIO_PIN_SET);
 8000fe0:	e7e9      	b.n	8000fb6 <Start_ultra_sensor_tr+0x16>
 8000fe2:	bf00      	nop
 8000fe4:	20001f6c 	.word	0x20001f6c

08000fe8 <led_yellow_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_yellow_handler */
void led_yellow_handler(void *argument)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_yellow_handler */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin);
 8000ff0:	2120      	movs	r1, #32
 8000ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff6:	f001 fe2d 	bl	8002c54 <HAL_GPIO_TogglePin>
      osDelay(800);
 8000ffa:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000ffe:	f004 fb79 	bl	80056f4 <osDelay>
	  HAL_GPIO_TogglePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin);
 8001002:	e7f5      	b.n	8000ff0 <led_yellow_handler+0x8>

08001004 <led_red_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_red_handler */
void led_red_handler(void *argument)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_red_handler */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 800100c:	2140      	movs	r1, #64	; 0x40
 800100e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001012:	f001 fe1f 	bl	8002c54 <HAL_GPIO_TogglePin>
      osDelay(400);
 8001016:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800101a:	f004 fb6b 	bl	80056f4 <osDelay>
	  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 800101e:	e7f5      	b.n	800100c <led_red_handler+0x8>

08001020 <number_to_byte_arr>:
* @brief Function that converts a number to a byte array.
* @param argument: Array address, number to convert
* @retval Number or array elements
*/
uint8_t number_to_byte_arr(uint8_t *byte_array, uint32_t number_to_convert)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
	uint8_t arr_index = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]

	while(number_to_convert > 0)
 800102e:	e00b      	b.n	8001048 <number_to_byte_arr+0x28>
	{
		byte_array[arr_index] = number_to_convert & 0xFF;
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	701a      	strb	r2, [r3, #0]
	    number_to_convert >>= 8;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	0a1b      	lsrs	r3, r3, #8
 8001040:	603b      	str	r3, [r7, #0]
	    arr_index++;
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	3301      	adds	r3, #1
 8001046:	73fb      	strb	r3, [r7, #15]
	while(number_to_convert > 0)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1f0      	bne.n	8001030 <number_to_byte_arr+0x10>
	}

	return arr_index - 1;  //Decrease 1 unit due to zero indexing.
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	3b01      	subs	r3, #1
 8001052:	b2db      	uxtb	r3, r3
}
 8001054:	4618      	mov	r0, r3
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001064:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <MX_FDCAN1_Init+0x88>)
 8001066:	4a21      	ldr	r2, [pc, #132]	; (80010ec <MX_FDCAN1_Init+0x8c>)
 8001068:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800106a:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <MX_FDCAN1_Init+0x88>)
 800106c:	2200      	movs	r2, #0
 800106e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <MX_FDCAN1_Init+0x88>)
 8001072:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001076:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <MX_FDCAN1_Init+0x88>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_FDCAN1_Init+0x88>)
 8001080:	2201      	movs	r2, #1
 8001082:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <MX_FDCAN1_Init+0x88>)
 8001086:	2200      	movs	r2, #0
 8001088:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <MX_FDCAN1_Init+0x88>)
 800108c:	2200      	movs	r2, #0
 800108e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <MX_FDCAN1_Init+0x88>)
 8001092:	2201      	movs	r2, #1
 8001094:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <MX_FDCAN1_Init+0x88>)
 8001098:	2210      	movs	r2, #16
 800109a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 63;
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_FDCAN1_Init+0x88>)
 800109e:	223f      	movs	r2, #63	; 0x3f
 80010a0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_FDCAN1_Init+0x88>)
 80010a4:	2210      	movs	r2, #16
 80010a6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_FDCAN1_Init+0x88>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_FDCAN1_Init+0x88>)
 80010b0:	2204      	movs	r2, #4
 80010b2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_FDCAN1_Init+0x88>)
 80010b6:	2205      	movs	r2, #5
 80010b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <MX_FDCAN1_Init+0x88>)
 80010bc:	2204      	movs	r2, #4
 80010be:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_FDCAN1_Init+0x88>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <MX_FDCAN1_Init+0x88>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_FDCAN1_Init+0x88>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_FDCAN1_Init+0x88>)
 80010d4:	f000 fe56 	bl	8001d84 <HAL_FDCAN_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80010de:	f000 f9e5 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20001ebc 	.word	0x20001ebc
 80010ec:	40006400 	.word	0x40006400

080010f0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b09a      	sub	sp, #104	; 0x68
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	2244      	movs	r2, #68	; 0x44
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f007 f9a1 	bl	8008458 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a24      	ldr	r2, [pc, #144]	; (80011ac <HAL_FDCAN_MspInit+0xbc>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d141      	bne.n	80011a4 <HAL_FDCAN_MspInit+0xb4>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001124:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001126:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800112a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	4618      	mov	r0, r3
 8001132:	f002 fbdb 	bl	80038ec <HAL_RCCEx_PeriphCLKConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800113c:	f000 f9b6 	bl	80014ac <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <HAL_FDCAN_MspInit+0xc0>)
 8001142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001144:	4a1a      	ldr	r2, [pc, #104]	; (80011b0 <HAL_FDCAN_MspInit+0xc0>)
 8001146:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800114a:	6593      	str	r3, [r2, #88]	; 0x58
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_FDCAN_MspInit+0xc0>)
 800114e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_FDCAN_MspInit+0xc0>)
 800115a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115c:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <HAL_FDCAN_MspInit+0xc0>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_FDCAN_MspInit+0xc0>)
 8001166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001170:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001174:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001182:	2309      	movs	r3, #9
 8001184:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800118a:	4619      	mov	r1, r3
 800118c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001190:	f001 fbae 	bl	80028f0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2105      	movs	r1, #5
 8001198:	2015      	movs	r0, #21
 800119a:	f000 fdcb 	bl	8001d34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800119e:	2015      	movs	r0, #21
 80011a0:	f000 fde2 	bl	8001d68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80011a4:	bf00      	nop
 80011a6:	3768      	adds	r7, #104	; 0x68
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40006400 	.word	0x40006400
 80011b0:	40021000 	.word	0x40021000

080011b4 <FDCAN1_MSG_config>:
  }
}

/* USER CODE BEGIN 1 */
void FDCAN1_MSG_config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af02      	add	r7, sp, #8
	//myTxData[1] = 0x00;
	//myTxData[2] = 0x00;
	//myTxData[3] = 0x00;

	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80011ba:	2300      	movs	r3, #0
 80011bc:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80011c2:	2302      	movs	r3, #2
 80011c4:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80011c6:	2301      	movs	r3, #1
 80011c8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x321;
 80011ca:	f240 3321 	movw	r3, #801	; 0x321
 80011ce:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 80011d0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80011d4:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80011d6:	463b      	mov	r3, r7
 80011d8:	4619      	mov	r1, r3
 80011da:	4824      	ldr	r0, [pc, #144]	; (800126c <FDCAN1_MSG_config+0xb8>)
 80011dc:	f000 ff2c 	bl	8002038 <HAL_FDCAN_ConfigFilter>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <FDCAN1_MSG_config+0x36>
	{
	    Error_Handler();
 80011e6:	f000 f961 	bl	80014ac <Error_Handler>
	}

	/* Configure global filter to reject all non-matching frames */
	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80011ea:	2300      	movs	r3, #0
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2300      	movs	r3, #0
 80011f0:	2202      	movs	r2, #2
 80011f2:	2102      	movs	r1, #2
 80011f4:	481d      	ldr	r0, [pc, #116]	; (800126c <FDCAN1_MSG_config+0xb8>)
 80011f6:	f000 ff79 	bl	80020ec <HAL_FDCAN_ConfigGlobalFilter>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <FDCAN1_MSG_config+0x50>
	{
	    Error_Handler();
 8001200:	f000 f954 	bl	80014ac <Error_Handler>
	}

	/* Activate Rx FIFO 0 watermark notification */
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001204:	2200      	movs	r2, #0
 8001206:	2101      	movs	r1, #1
 8001208:	4818      	ldr	r0, [pc, #96]	; (800126c <FDCAN1_MSG_config+0xb8>)
 800120a:	f001 f80c 	bl	8002226 <HAL_FDCAN_ActivateNotification>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <FDCAN1_MSG_config+0x64>
	{
	    Error_Handler();
 8001214:	f000 f94a 	bl	80014ac <Error_Handler>
	}

	/* Prepare Tx Header */
	TxHeader.Identifier = 0x322;
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <FDCAN1_MSG_config+0xbc>)
 800121a:	f240 3222 	movw	r2, #802	; 0x322
 800121e:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001220:	4b13      	ldr	r3, [pc, #76]	; (8001270 <FDCAN1_MSG_config+0xbc>)
 8001222:	2200      	movs	r2, #0
 8001224:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <FDCAN1_MSG_config+0xbc>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800122c:	4b10      	ldr	r3, [pc, #64]	; (8001270 <FDCAN1_MSG_config+0xbc>)
 800122e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001232:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <FDCAN1_MSG_config+0xbc>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <FDCAN1_MSG_config+0xbc>)
 800123c:	2200      	movs	r2, #0
 800123e:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <FDCAN1_MSG_config+0xbc>)
 8001242:	2200      	movs	r2, #0
 8001244:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <FDCAN1_MSG_config+0xbc>)
 8001248:	2200      	movs	r2, #0
 800124a:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <FDCAN1_MSG_config+0xbc>)
 800124e:	2200      	movs	r2, #0
 8001250:	621a      	str	r2, [r3, #32]

	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <FDCAN1_MSG_config+0xb8>)
 8001254:	f000 ff7b 	bl	800214e <HAL_FDCAN_Start>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <FDCAN1_MSG_config+0xae>
	{
	    Error_Handler();
 800125e:	f000 f925 	bl	80014ac <Error_Handler>
	}
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20001ebc 	.word	0x20001ebc
 8001270:	20001e70 	.word	0x20001e70

08001274 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <MX_GPIO_Init+0xd0>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	4a2d      	ldr	r2, [pc, #180]	; (8001344 <MX_GPIO_Init+0xd0>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001296:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <MX_GPIO_Init+0xd0>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	4b28      	ldr	r3, [pc, #160]	; (8001344 <MX_GPIO_Init+0xd0>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	4a27      	ldr	r2, [pc, #156]	; (8001344 <MX_GPIO_Init+0xd0>)
 80012a8:	f043 0302 	orr.w	r3, r3, #2
 80012ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ae:	4b25      	ldr	r3, [pc, #148]	; (8001344 <MX_GPIO_Init+0xd0>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN_LED_Pin|ULTR_TRG_Pin|YELLOW_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2171      	movs	r1, #113	; 0x71
 80012be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c2:	f001 fcaf 	bl	8002c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012cc:	481e      	ldr	r0, [pc, #120]	; (8001348 <MX_GPIO_Init+0xd4>)
 80012ce:	f001 fca9 	bl	8002c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ULTR_TRG_Pin|YELLOW_LED_Pin|RED_LED_Pin;
 80012d2:	2371      	movs	r3, #113	; 0x71
 80012d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	4619      	mov	r1, r3
 80012e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ec:	f001 fb00 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULRT_ECHO_Pin;
 80012f0:	2302      	movs	r3, #2
 80012f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012f4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80012f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ULRT_ECHO_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001308:	f001 faf2 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800130c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001310:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001312:	2301      	movs	r3, #1
 8001314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	4619      	mov	r1, r3
 8001324:	4808      	ldr	r0, [pc, #32]	; (8001348 <MX_GPIO_Init+0xd4>)
 8001326:	f001 fae3 	bl	80028f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2105      	movs	r1, #5
 800132e:	2007      	movs	r0, #7
 8001330:	f000 fd00 	bl	8001d34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001334:	2007      	movs	r0, #7
 8001336:	f000 fd17 	bl	8001d68 <HAL_NVIC_EnableIRQ>

}
 800133a:	bf00      	nop
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000
 8001348:	48000400 	.word	0x48000400

0800134c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af02      	add	r7, sp, #8
 8001352:	4603      	mov	r3, r0
 8001354:	80fb      	strh	r3, [r7, #6]
	GPIO_PinState state;

	if(GPIO_Pin == ULRT_ECHO_Pin) /* Interrupt function for ECHO signal */
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	2b02      	cmp	r3, #2
 800135a:	d11c      	bne.n	8001396 <HAL_GPIO_EXTI_Callback+0x4a>
	{
		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

		state = HAL_GPIO_ReadPin(ULRT_ECHO_GPIO_Port, ULRT_ECHO_Pin);
 800135c:	2102      	movs	r1, #2
 800135e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001362:	f001 fc47 	bl	8002bf4 <HAL_GPIO_ReadPin>
 8001366:	4603      	mov	r3, r0
 8001368:	73fb      	strb	r3, [r7, #15]

		switch(state)
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d006      	beq.n	800137e <HAL_GPIO_EXTI_Callback+0x32>
 8001370:	2b01      	cmp	r3, #1
 8001372:	d112      	bne.n	800139a <HAL_GPIO_EXTI_Callback+0x4e>
		{
			case GPIO_PIN_SET:  /*Rising Edge*/
								__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <HAL_GPIO_EXTI_Callback+0x58>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2200      	movs	r2, #0
 800137a:	625a      	str	r2, [r3, #36]	; 0x24
								break;
 800137c:	e00e      	b.n	800139c <HAL_GPIO_EXTI_Callback+0x50>

			case GPIO_PIN_RESET: /*Falling Edge*/
								 xTaskNotifyFromISR((TaskHandle_t)CAN_CommHandle, __HAL_TIM_GET_COUNTER(&htim2), eSetValueWithOverwrite, NULL);
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001380:	6818      	ldr	r0, [r3, #0]
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_GPIO_EXTI_Callback+0x58>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001388:	2300      	movs	r3, #0
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2300      	movs	r3, #0
 800138e:	2203      	movs	r2, #3
 8001390:	f005 ff52 	bl	8007238 <xTaskGenericNotifyFromISR>
								 break;
 8001394:	e002      	b.n	800139c <HAL_GPIO_EXTI_Callback+0x50>

			default: break;
		}

	}
 8001396:	bf00      	nop
 8001398:	e000      	b.n	800139c <HAL_GPIO_EXTI_Callback+0x50>
			default: break;
 800139a:	bf00      	nop

}
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20002004 	.word	0x20002004
 80013a8:	20001e60 	.word	0x20001e60

080013ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b0:	f000 fbd1 	bl	8001b56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b4:	f000 f81c 	bl	80013f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b8:	f7ff ff5c 	bl	8001274 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013bc:	f000 fafe 	bl	80019bc <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 80013c0:	f7ff fe4e 	bl	8001060 <MX_FDCAN1_Init>
  MX_TIM6_Init();
 80013c4:	f000 f9b8 	bl	8001738 <MX_TIM6_Init>
  MX_TIM7_Init();
 80013c8:	f000 f9ec 	bl	80017a4 <MX_TIM7_Init>
  MX_TIM8_Init();
 80013cc:	f000 fa20 	bl	8001810 <MX_TIM8_Init>
  MX_TIM2_Init();
 80013d0:	f000 f964 	bl	800169c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  FDCAN1_MSG_config();
 80013d4:	f7ff feee 	bl	80011b4 <FDCAN1_MSG_config>
  HAL_TIM_Base_Start(&htim2);
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <main+0x40>)
 80013da:	f002 fccf 	bl	8003d7c <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80013de:	f004 f8ad 	bl	800553c <osKernelInitialize>
  MX_FREERTOS_Init();
 80013e2:	f7ff fcff 	bl	8000de4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80013e6:	f004 f8cd 	bl	8005584 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <main+0x3e>
 80013ec:	20002004 	.word	0x20002004

080013f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b094      	sub	sp, #80	; 0x50
 80013f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f6:	f107 0318 	add.w	r3, r7, #24
 80013fa:	2238      	movs	r2, #56	; 0x38
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f007 f82a 	bl	8008458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001412:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001416:	f001 fc4f 	bl	8002cb8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800141a:	2302      	movs	r3, #2
 800141c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800141e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001424:	2340      	movs	r3, #64	; 0x40
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001428:	2302      	movs	r3, #2
 800142a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800142c:	2302      	movs	r3, #2
 800142e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001430:	2301      	movs	r3, #1
 8001432:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001434:	230a      	movs	r3, #10
 8001436:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001438:	2302      	movs	r3, #2
 800143a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800143c:	2302      	movs	r3, #2
 800143e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001440:	2302      	movs	r3, #2
 8001442:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001444:	f107 0318 	add.w	r3, r7, #24
 8001448:	4618      	mov	r0, r3
 800144a:	f001 fce9 	bl	8002e20 <HAL_RCC_OscConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001454:	f000 f82a 	bl	80014ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001458:	230f      	movs	r3, #15
 800145a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145c:	2303      	movs	r3, #3
 800145e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2102      	movs	r1, #2
 8001470:	4618      	mov	r0, r3
 8001472:	f001 ffed 	bl	8003450 <HAL_RCC_ClockConfig>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800147c:	f000 f816 	bl	80014ac <Error_Handler>
  }
}
 8001480:	bf00      	nop
 8001482:	3750      	adds	r7, #80	; 0x50
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d101      	bne.n	800149e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800149a:	f000 fb75 	bl	8001b88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40012c00 	.word	0x40012c00

080014ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b0:	b672      	cpsid	i
}
 80014b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <Error_Handler+0x8>
	...

080014b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_MspInit+0x50>)
 80014c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c2:	4a11      	ldr	r2, [pc, #68]	; (8001508 <HAL_MspInit+0x50>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6613      	str	r3, [r2, #96]	; 0x60
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <HAL_MspInit+0x50>)
 80014cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <HAL_MspInit+0x50>)
 80014d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <HAL_MspInit+0x50>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e0:	6593      	str	r3, [r2, #88]	; 0x58
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_MspInit+0x50>)
 80014e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	210f      	movs	r1, #15
 80014f2:	f06f 0001 	mvn.w	r0, #1
 80014f6:	f000 fc1d 	bl	8001d34 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014fa:	f001 fc81 	bl	8002e00 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000

0800150c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08c      	sub	sp, #48	; 0x30
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800151c:	2300      	movs	r3, #0
 800151e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001522:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <HAL_InitTick+0xcc>)
 8001524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001526:	4a2c      	ldr	r2, [pc, #176]	; (80015d8 <HAL_InitTick+0xcc>)
 8001528:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800152c:	6613      	str	r3, [r2, #96]	; 0x60
 800152e:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <HAL_InitTick+0xcc>)
 8001530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800153a:	f107 020c 	add.w	r2, r7, #12
 800153e:	f107 0310 	add.w	r3, r7, #16
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f002 f959 	bl	80037fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800154a:	f002 f941 	bl	80037d0 <HAL_RCC_GetPCLK2Freq>
 800154e:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001552:	4a22      	ldr	r2, [pc, #136]	; (80015dc <HAL_InitTick+0xd0>)
 8001554:	fba2 2303 	umull	r2, r3, r2, r3
 8001558:	0c9b      	lsrs	r3, r3, #18
 800155a:	3b01      	subs	r3, #1
 800155c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800155e:	4b20      	ldr	r3, [pc, #128]	; (80015e0 <HAL_InitTick+0xd4>)
 8001560:	4a20      	ldr	r2, [pc, #128]	; (80015e4 <HAL_InitTick+0xd8>)
 8001562:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001564:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <HAL_InitTick+0xd4>)
 8001566:	f240 32e7 	movw	r2, #999	; 0x3e7
 800156a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800156c:	4a1c      	ldr	r2, [pc, #112]	; (80015e0 <HAL_InitTick+0xd4>)
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001572:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <HAL_InitTick+0xd4>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <HAL_InitTick+0xd4>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 800157e:	4818      	ldr	r0, [pc, #96]	; (80015e0 <HAL_InitTick+0xd4>)
 8001580:	f002 fba4 	bl	8003ccc <HAL_TIM_Base_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800158a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800158e:	2b00      	cmp	r3, #0
 8001590:	d11b      	bne.n	80015ca <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001592:	4813      	ldr	r0, [pc, #76]	; (80015e0 <HAL_InitTick+0xd4>)
 8001594:	f002 fc54 	bl	8003e40 <HAL_TIM_Base_Start_IT>
 8001598:	4603      	mov	r3, r0
 800159a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800159e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d111      	bne.n	80015ca <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80015a6:	2019      	movs	r0, #25
 80015a8:	f000 fbde 	bl	8001d68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b0f      	cmp	r3, #15
 80015b0:	d808      	bhi.n	80015c4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80015b2:	2200      	movs	r2, #0
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	2019      	movs	r0, #25
 80015b8:	f000 fbbc 	bl	8001d34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015bc:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <HAL_InitTick+0xdc>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	e002      	b.n	80015ca <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 80015ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3730      	adds	r7, #48	; 0x30
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000
 80015dc:	431bde83 	.word	0x431bde83
 80015e0:	20001f20 	.word	0x20001f20
 80015e4:	40012c00 	.word	0x40012c00
 80015e8:	20000004 	.word	0x20000004

080015ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <NMI_Handler+0x4>

080015f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <HardFault_Handler+0x4>

080015f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <MemManage_Handler+0x4>

080015fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <BusFault_Handler+0x4>

08001604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <UsageFault_Handler+0x4>

0800160a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ULRT_ECHO_Pin);
 800161c:	2002      	movs	r0, #2
 800161e:	f001 fb33 	bl	8002c88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <FDCAN1_IT0_IRQHandler+0x10>)
 800162e:	f000 fee0 	bl	80023f2 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20001ebc 	.word	0x20001ebc

0800163c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001642:	f002 fc67 	bl	8003f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20001f20 	.word	0x20001f20

08001650 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <TIM6_DAC_IRQHandler+0x10>)
 8001656:	f002 fc5d 	bl	8003f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20001fb8 	.word	0x20001fb8

08001664 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <TIM7_IRQHandler+0x10>)
 800166a:	f002 fc53 	bl	8003f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20002050 	.word	0x20002050

08001678 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <SystemInit+0x20>)
 800167e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <SystemInit+0x20>)
 8001684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a2:	f107 0310 	add.w	r3, r7, #16
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016ba:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <MX_TIM2_Init+0x98>)
 80016bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016c2:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <MX_TIM2_Init+0x98>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c8:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <MX_TIM2_Init+0x98>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80016ce:	4b19      	ldr	r3, [pc, #100]	; (8001734 <MX_TIM2_Init+0x98>)
 80016d0:	f04f 32ff 	mov.w	r2, #4294967295
 80016d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <MX_TIM2_Init+0x98>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <MX_TIM2_Init+0x98>)
 80016de:	2200      	movs	r2, #0
 80016e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016e2:	4814      	ldr	r0, [pc, #80]	; (8001734 <MX_TIM2_Init+0x98>)
 80016e4:	f002 faf2 	bl	8003ccc <HAL_TIM_Base_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016ee:	f7ff fedd 	bl	80014ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	4619      	mov	r1, r3
 80016fe:	480d      	ldr	r0, [pc, #52]	; (8001734 <MX_TIM2_Init+0x98>)
 8001700:	f002 fd88 	bl	8004214 <HAL_TIM_ConfigClockSource>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800170a:	f7ff fecf 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	4619      	mov	r1, r3
 800171a:	4806      	ldr	r0, [pc, #24]	; (8001734 <MX_TIM2_Init+0x98>)
 800171c:	f002 ffc8 	bl	80046b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001726:	f7ff fec1 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	3720      	adds	r7, #32
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20002004 	.word	0x20002004

08001738 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <MX_TIM6_Init+0x64>)
 800174a:	4a15      	ldr	r2, [pc, #84]	; (80017a0 <MX_TIM6_Init+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <MX_TIM6_Init+0x64>)
 8001750:	2200      	movs	r2, #0
 8001752:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_TIM6_Init+0x64>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <MX_TIM6_Init+0x64>)
 800175c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001760:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <MX_TIM6_Init+0x64>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001768:	480c      	ldr	r0, [pc, #48]	; (800179c <MX_TIM6_Init+0x64>)
 800176a:	f002 faaf 	bl	8003ccc <HAL_TIM_Base_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001774:	f7ff fe9a 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_TIM6_Init+0x64>)
 8001786:	f002 ff93 	bl	80046b0 <HAL_TIMEx_MasterConfigSynchronization>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001790:	f7ff fe8c 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20001fb8 	.word	0x20001fb8
 80017a0:	40001000 	.word	0x40001000

080017a4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <MX_TIM7_Init+0x64>)
 80017b6:	4a15      	ldr	r2, [pc, #84]	; (800180c <MX_TIM7_Init+0x68>)
 80017b8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <MX_TIM7_Init+0x64>)
 80017bc:	2200      	movs	r2, #0
 80017be:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_TIM7_Init+0x64>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <MX_TIM7_Init+0x64>)
 80017c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017cc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_TIM7_Init+0x64>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80017d4:	480c      	ldr	r0, [pc, #48]	; (8001808 <MX_TIM7_Init+0x64>)
 80017d6:	f002 fa79 	bl	8003ccc <HAL_TIM_Base_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80017e0:	f7ff fe64 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e4:	2300      	movs	r3, #0
 80017e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	4619      	mov	r1, r3
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_TIM7_Init+0x64>)
 80017f2:	f002 ff5d 	bl	80046b0 <HAL_TIMEx_MasterConfigSynchronization>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80017fc:	f7ff fe56 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20002050 	.word	0x20002050
 800180c:	40001400 	.word	0x40001400

08001810 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001816:	f107 0310 	add.w	r3, r7, #16
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <MX_TIM8_Init+0xa0>)
 8001830:	4a20      	ldr	r2, [pc, #128]	; (80018b4 <MX_TIM8_Init+0xa4>)
 8001832:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 80-1;
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <MX_TIM8_Init+0xa0>)
 8001836:	224f      	movs	r2, #79	; 0x4f
 8001838:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183a:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <MX_TIM8_Init+0xa0>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65534;
 8001840:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <MX_TIM8_Init+0xa0>)
 8001842:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001846:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <MX_TIM8_Init+0xa0>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <MX_TIM8_Init+0xa0>)
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001854:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <MX_TIM8_Init+0xa0>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800185a:	4815      	ldr	r0, [pc, #84]	; (80018b0 <MX_TIM8_Init+0xa0>)
 800185c:	f002 fa36 	bl	8003ccc <HAL_TIM_Base_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001866:	f7ff fe21 	bl	80014ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800186a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	4619      	mov	r1, r3
 8001876:	480e      	ldr	r0, [pc, #56]	; (80018b0 <MX_TIM8_Init+0xa0>)
 8001878:	f002 fccc 	bl	8004214 <HAL_TIM_ConfigClockSource>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001882:	f7ff fe13 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	4619      	mov	r1, r3
 8001896:	4806      	ldr	r0, [pc, #24]	; (80018b0 <MX_TIM8_Init+0xa0>)
 8001898:	f002 ff0a 	bl	80046b0 <HAL_TIMEx_MasterConfigSynchronization>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80018a2:	f7ff fe03 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	3720      	adds	r7, #32
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20001f6c 	.word	0x20001f6c
 80018b4:	40013400 	.word	0x40013400

080018b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c8:	d10c      	bne.n	80018e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ca:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <HAL_TIM_Base_MspInit+0xc0>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	4a2a      	ldr	r2, [pc, #168]	; (8001978 <HAL_TIM_Base_MspInit+0xc0>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6593      	str	r3, [r2, #88]	; 0x58
 80018d6:	4b28      	ldr	r3, [pc, #160]	; (8001978 <HAL_TIM_Base_MspInit+0xc0>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80018e2:	e044      	b.n	800196e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM6)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a24      	ldr	r2, [pc, #144]	; (800197c <HAL_TIM_Base_MspInit+0xc4>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d114      	bne.n	8001918 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80018ee:	4b22      	ldr	r3, [pc, #136]	; (8001978 <HAL_TIM_Base_MspInit+0xc0>)
 80018f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f2:	4a21      	ldr	r2, [pc, #132]	; (8001978 <HAL_TIM_Base_MspInit+0xc0>)
 80018f4:	f043 0310 	orr.w	r3, r3, #16
 80018f8:	6593      	str	r3, [r2, #88]	; 0x58
 80018fa:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <HAL_TIM_Base_MspInit+0xc0>)
 80018fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2105      	movs	r1, #5
 800190a:	2036      	movs	r0, #54	; 0x36
 800190c:	f000 fa12 	bl	8001d34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001910:	2036      	movs	r0, #54	; 0x36
 8001912:	f000 fa29 	bl	8001d68 <HAL_NVIC_EnableIRQ>
}
 8001916:	e02a      	b.n	800196e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM7)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a18      	ldr	r2, [pc, #96]	; (8001980 <HAL_TIM_Base_MspInit+0xc8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d114      	bne.n	800194c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_TIM_Base_MspInit+0xc0>)
 8001924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001926:	4a14      	ldr	r2, [pc, #80]	; (8001978 <HAL_TIM_Base_MspInit+0xc0>)
 8001928:	f043 0320 	orr.w	r3, r3, #32
 800192c:	6593      	str	r3, [r2, #88]	; 0x58
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_TIM_Base_MspInit+0xc0>)
 8001930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001932:	f003 0320 	and.w	r3, r3, #32
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2105      	movs	r1, #5
 800193e:	2037      	movs	r0, #55	; 0x37
 8001940:	f000 f9f8 	bl	8001d34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001944:	2037      	movs	r0, #55	; 0x37
 8001946:	f000 fa0f 	bl	8001d68 <HAL_NVIC_EnableIRQ>
}
 800194a:	e010      	b.n	800196e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0c      	ldr	r2, [pc, #48]	; (8001984 <HAL_TIM_Base_MspInit+0xcc>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d10b      	bne.n	800196e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <HAL_TIM_Base_MspInit+0xc0>)
 8001958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195a:	4a07      	ldr	r2, [pc, #28]	; (8001978 <HAL_TIM_Base_MspInit+0xc0>)
 800195c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001960:	6613      	str	r3, [r2, #96]	; 0x60
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_TIM_Base_MspInit+0xc0>)
 8001964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001966:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
}
 800196e:	bf00      	nop
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000
 800197c:	40001000 	.word	0x40001000
 8001980:	40001400 	.word	0x40001400
 8001984:	40013400 	.word	0x40013400

08001988 <delay_us>:
  }
}

/* USER CODE BEGIN 1 */
void delay_us(uint16_t us)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim8, 0);
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <delay_us+0x30>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2200      	movs	r2, #0
 8001998:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim8) < us);
 800199a:	bf00      	nop
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <delay_us+0x30>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d3f9      	bcc.n	800199c <delay_us+0x14>
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20001f6c 	.word	0x20001f6c

080019bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019c0:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <MX_USART2_UART_Init+0x90>)
 80019c2:	4a23      	ldr	r2, [pc, #140]	; (8001a50 <MX_USART2_UART_Init+0x94>)
 80019c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019c6:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <MX_USART2_UART_Init+0x90>)
 80019c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ce:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <MX_USART2_UART_Init+0x90>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <MX_USART2_UART_Init+0x90>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <MX_USART2_UART_Init+0x90>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <MX_USART2_UART_Init+0x90>)
 80019e2:	220c      	movs	r2, #12
 80019e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <MX_USART2_UART_Init+0x90>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ec:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <MX_USART2_UART_Init+0x90>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <MX_USART2_UART_Init+0x90>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <MX_USART2_UART_Init+0x90>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <MX_USART2_UART_Init+0x90>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a04:	4811      	ldr	r0, [pc, #68]	; (8001a4c <MX_USART2_UART_Init+0x90>)
 8001a06:	f002 ff1b 	bl	8004840 <HAL_UART_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001a10:	f7ff fd4c 	bl	80014ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a14:	2100      	movs	r1, #0
 8001a16:	480d      	ldr	r0, [pc, #52]	; (8001a4c <MX_USART2_UART_Init+0x90>)
 8001a18:	f003 fc82 	bl	8005320 <HAL_UARTEx_SetTxFifoThreshold>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001a22:	f7ff fd43 	bl	80014ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a26:	2100      	movs	r1, #0
 8001a28:	4808      	ldr	r0, [pc, #32]	; (8001a4c <MX_USART2_UART_Init+0x90>)
 8001a2a:	f003 fcb7 	bl	800539c <HAL_UARTEx_SetRxFifoThreshold>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001a34:	f7ff fd3a 	bl	80014ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a38:	4804      	ldr	r0, [pc, #16]	; (8001a4c <MX_USART2_UART_Init+0x90>)
 8001a3a:	f003 fc38 	bl	80052ae <HAL_UARTEx_DisableFifoMode>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001a44:	f7ff fd32 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	2000209c 	.word	0x2000209c
 8001a50:	40004400 	.word	0x40004400

08001a54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b09a      	sub	sp, #104	; 0x68
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a6c:	f107 0310 	add.w	r3, r7, #16
 8001a70:	2244      	movs	r2, #68	; 0x44
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f006 fcef 	bl	8008458 <memset>
  if(uartHandle->Instance==USART2)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a1f      	ldr	r2, [pc, #124]	; (8001afc <HAL_UART_MspInit+0xa8>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d136      	bne.n	8001af2 <HAL_UART_MspInit+0x9e>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a84:	2302      	movs	r3, #2
 8001a86:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	4618      	mov	r0, r3
 8001a92:	f001 ff2b 	bl	80038ec <HAL_RCCEx_PeriphCLKConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a9c:	f7ff fd06 	bl	80014ac <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aa0:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <HAL_UART_MspInit+0xac>)
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa4:	4a16      	ldr	r2, [pc, #88]	; (8001b00 <HAL_UART_MspInit+0xac>)
 8001aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <HAL_UART_MspInit+0xac>)
 8001aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <HAL_UART_MspInit+0xac>)
 8001aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abc:	4a10      	ldr	r2, [pc, #64]	; (8001b00 <HAL_UART_MspInit+0xac>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <HAL_UART_MspInit+0xac>)
 8001ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001ad0:	230c      	movs	r3, #12
 8001ad2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001adc:	2300      	movs	r3, #0
 8001ade:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ae0:	2307      	movs	r3, #7
 8001ae2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aee:	f000 feff 	bl	80028f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001af2:	bf00      	nop
 8001af4:	3768      	adds	r7, #104	; 0x68
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40004400 	.word	0x40004400
 8001b00:	40021000 	.word	0x40021000

08001b04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b04:	480d      	ldr	r0, [pc, #52]	; (8001b3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b06:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b08:	480d      	ldr	r0, [pc, #52]	; (8001b40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b0a:	490e      	ldr	r1, [pc, #56]	; (8001b44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b0c:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <LoopForever+0xe>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b10:	e002      	b.n	8001b18 <LoopCopyDataInit>

08001b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b16:	3304      	adds	r3, #4

08001b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b1c:	d3f9      	bcc.n	8001b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1e:	4a0b      	ldr	r2, [pc, #44]	; (8001b4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b20:	4c0b      	ldr	r4, [pc, #44]	; (8001b50 <LoopForever+0x16>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b24:	e001      	b.n	8001b2a <LoopFillZerobss>

08001b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b28:	3204      	adds	r2, #4

08001b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b2c:	d3fb      	bcc.n	8001b26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b2e:	f7ff fda3 	bl	8001678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b32:	f006 fc43 	bl	80083bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b36:	f7ff fc39 	bl	80013ac <main>

08001b3a <LoopForever>:

LoopForever:
    b LoopForever
 8001b3a:	e7fe      	b.n	8001b3a <LoopForever>
  ldr   r0, =_estack
 8001b3c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b44:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001b48:	08008898 	.word	0x08008898
  ldr r2, =_sbss
 8001b4c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001b50:	2000217c 	.word	0x2000217c

08001b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b54:	e7fe      	b.n	8001b54 <ADC1_2_IRQHandler>

08001b56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b60:	2003      	movs	r0, #3
 8001b62:	f000 f8dc 	bl	8001d1e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b66:	2005      	movs	r0, #5
 8001b68:	f7ff fcd0 	bl	800150c <HAL_InitTick>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d002      	beq.n	8001b78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	71fb      	strb	r3, [r7, #7]
 8001b76:	e001      	b.n	8001b7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b78:	f7ff fc9e 	bl	80014b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b7c:	79fb      	ldrb	r3, [r7, #7]

}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_IncTick+0x1c>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_IncTick+0x20>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4413      	add	r3, r2
 8001b96:	4a03      	ldr	r2, [pc, #12]	; (8001ba4 <HAL_IncTick+0x1c>)
 8001b98:	6013      	str	r3, [r2, #0]
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	2000212c 	.word	0x2000212c
 8001ba8:	20000008 	.word	0x20000008

08001bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <HAL_GetTick+0x14>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	2000212c 	.word	0x2000212c

08001bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be0:	4013      	ands	r3, r2
 8001be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf6:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	60d3      	str	r3, [r2, #12]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <__NVIC_GetPriorityGrouping+0x18>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	f003 0307 	and.w	r3, r3, #7
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	db0b      	blt.n	8001c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	f003 021f 	and.w	r2, r3, #31
 8001c40:	4907      	ldr	r1, [pc, #28]	; (8001c60 <__NVIC_EnableIRQ+0x38>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	2001      	movs	r0, #1
 8001c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000e100 	.word	0xe000e100

08001c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	db0a      	blt.n	8001c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	490c      	ldr	r1, [pc, #48]	; (8001cb0 <__NVIC_SetPriority+0x4c>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	0112      	lsls	r2, r2, #4
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	440b      	add	r3, r1
 8001c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c8c:	e00a      	b.n	8001ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4908      	ldr	r1, [pc, #32]	; (8001cb4 <__NVIC_SetPriority+0x50>)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	3b04      	subs	r3, #4
 8001c9c:	0112      	lsls	r2, r2, #4
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	761a      	strb	r2, [r3, #24]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000e100 	.word	0xe000e100
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f1c3 0307 	rsb	r3, r3, #7
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	bf28      	it	cs
 8001cd6:	2304      	movcs	r3, #4
 8001cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	2b06      	cmp	r3, #6
 8001ce0:	d902      	bls.n	8001ce8 <NVIC_EncodePriority+0x30>
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3b03      	subs	r3, #3
 8001ce6:	e000      	b.n	8001cea <NVIC_EncodePriority+0x32>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d00:	f04f 31ff 	mov.w	r1, #4294967295
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0a:	43d9      	mvns	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	4313      	orrs	r3, r2
         );
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3724      	adds	r7, #36	; 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ff4c 	bl	8001bc4 <__NVIC_SetPriorityGrouping>
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d42:	f7ff ff63 	bl	8001c0c <__NVIC_GetPriorityGrouping>
 8001d46:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	68b9      	ldr	r1, [r7, #8]
 8001d4c:	6978      	ldr	r0, [r7, #20]
 8001d4e:	f7ff ffb3 	bl	8001cb8 <NVIC_EncodePriority>
 8001d52:	4602      	mov	r2, r0
 8001d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d58:	4611      	mov	r1, r2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff ff82 	bl	8001c64 <__NVIC_SetPriority>
}
 8001d60:	bf00      	nop
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ff56 	bl	8001c28 <__NVIC_EnableIRQ>
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e147      	b.n	8002026 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d106      	bne.n	8001db0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff f9a0 	bl	80010f0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699a      	ldr	r2, [r3, #24]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0210 	bic.w	r2, r2, #16
 8001dbe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dc0:	f7ff fef4 	bl	8001bac <HAL_GetTick>
 8001dc4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001dc6:	e012      	b.n	8001dee <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001dc8:	f7ff fef0 	bl	8001bac <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b0a      	cmp	r3, #10
 8001dd4:	d90b      	bls.n	8001dee <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dda:	f043 0201 	orr.w	r2, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2203      	movs	r2, #3
 8001de6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e11b      	b.n	8002026 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d0e5      	beq.n	8001dc8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699a      	ldr	r2, [r3, #24]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e0c:	f7ff fece 	bl	8001bac <HAL_GetTick>
 8001e10:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001e12:	e012      	b.n	8001e3a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001e14:	f7ff feca 	bl	8001bac <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b0a      	cmp	r3, #10
 8001e20:	d90b      	bls.n	8001e3a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e26:	f043 0201 	orr.w	r2, r3, #1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2203      	movs	r2, #3
 8001e32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e0f5      	b.n	8002026 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0e5      	beq.n	8001e14 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699a      	ldr	r2, [r3, #24]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0202 	orr.w	r2, r2, #2
 8001e56:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a74      	ldr	r2, [pc, #464]	; (8002030 <HAL_FDCAN_Init+0x2ac>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d103      	bne.n	8001e6a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001e62:	4a74      	ldr	r2, [pc, #464]	; (8002034 <HAL_FDCAN_Init+0x2b0>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	7c1b      	ldrb	r3, [r3, #16]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d108      	bne.n	8001e84 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	699a      	ldr	r2, [r3, #24]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e80:	619a      	str	r2, [r3, #24]
 8001e82:	e007      	b.n	8001e94 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	699a      	ldr	r2, [r3, #24]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e92:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	7c5b      	ldrb	r3, [r3, #17]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d108      	bne.n	8001eae <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699a      	ldr	r2, [r3, #24]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eaa:	619a      	str	r2, [r3, #24]
 8001eac:	e007      	b.n	8001ebe <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	699a      	ldr	r2, [r3, #24]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ebc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7c9b      	ldrb	r3, [r3, #18]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d108      	bne.n	8001ed8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	699a      	ldr	r2, [r3, #24]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ed4:	619a      	str	r2, [r3, #24]
 8001ed6:	e007      	b.n	8001ee8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	699a      	ldr	r2, [r3, #24]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ee6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699a      	ldr	r2, [r3, #24]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001f0c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0210 	bic.w	r2, r2, #16
 8001f1c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d108      	bne.n	8001f38 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	699a      	ldr	r2, [r3, #24]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 0204 	orr.w	r2, r2, #4
 8001f34:	619a      	str	r2, [r3, #24]
 8001f36:	e02c      	b.n	8001f92 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d028      	beq.n	8001f92 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d01c      	beq.n	8001f82 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699a      	ldr	r2, [r3, #24]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f56:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691a      	ldr	r2, [r3, #16]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0210 	orr.w	r2, r2, #16
 8001f66:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d110      	bne.n	8001f92 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699a      	ldr	r2, [r3, #24]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0220 	orr.w	r2, r2, #32
 8001f7e:	619a      	str	r2, [r3, #24]
 8001f80:	e007      	b.n	8001f92 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	699a      	ldr	r2, [r3, #24]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 0220 	orr.w	r2, r2, #32
 8001f90:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001fa2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001faa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001fba:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001fbc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001fc6:	d115      	bne.n	8001ff4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001fd6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001fe0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001ff0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001ff2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 fb9e 	bl	800274c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40006400 	.word	0x40006400
 8002034:	40006500 	.word	0x40006500

08002038 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002048:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800204a:	7dfb      	ldrb	r3, [r7, #23]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d002      	beq.n	8002056 <HAL_FDCAN_ConfigFilter+0x1e>
 8002050:	7dfb      	ldrb	r3, [r7, #23]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d13d      	bne.n	80020d2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d119      	bne.n	8002092 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800206a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8002072:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	e01d      	b.n	80020ce <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	075a      	lsls	r2, r3, #29
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	079a      	lsls	r2, r3, #30
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	3304      	adds	r3, #4
 80020c6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	e006      	b.n	80020e0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d6:	f043 0202 	orr.w	r2, r3, #2
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
  }
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	371c      	adds	r7, #28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b01      	cmp	r3, #1
 8002104:	d116      	bne.n	8002134 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800210e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	011a      	lsls	r2, r3, #4
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	431a      	orrs	r2, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	431a      	orrs	r2, r3
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	431a      	orrs	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	e006      	b.n	8002142 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002138:	f043 0204 	orr.w	r2, r3, #4
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
  }
}
 8002142:	4618      	mov	r0, r3
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b01      	cmp	r3, #1
 8002160:	d110      	bne.n	8002184 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2202      	movs	r2, #2
 8002166:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	699a      	ldr	r2, [r3, #24]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0201 	bic.w	r2, r2, #1
 8002178:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	e006      	b.n	8002192 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002188:	f043 0204 	orr.w	r2, r3, #4
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
  }
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d12c      	bne.n	8002210 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80021be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d007      	beq.n	80021d6 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e023      	b.n	800221e <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80021de:	0c1b      	lsrs	r3, r3, #16
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	68b9      	ldr	r1, [r7, #8]
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 fb03 	bl	80027f8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2101      	movs	r1, #1
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	fa01 f202 	lsl.w	r2, r1, r2
 80021fe:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002202:	2201      	movs	r2, #1
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	409a      	lsls	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800220c:	2300      	movs	r3, #0
 800220e:	e006      	b.n	800221e <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002214:	f043 0208 	orr.w	r2, r3, #8
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
  }
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002226:	b480      	push	{r7}
 8002228:	b087      	sub	sp, #28
 800222a:	af00      	add	r7, sp, #0
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002238:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800223a:	7dfb      	ldrb	r3, [r7, #23]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d003      	beq.n	8002248 <HAL_FDCAN_ActivateNotification+0x22>
 8002240:	7dfb      	ldrb	r3, [r7, #23]
 8002242:	2b02      	cmp	r3, #2
 8002244:	f040 80c8 	bne.w	80023d8 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224e:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	2b00      	cmp	r3, #0
 8002258:	d004      	beq.n	8002264 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d03b      	beq.n	80022dc <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800226a:	2b00      	cmp	r3, #0
 800226c:	d004      	beq.n	8002278 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d031      	beq.n	80022dc <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800227e:	2b00      	cmp	r3, #0
 8002280:	d004      	beq.n	800228c <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d027      	beq.n	80022dc <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002292:	2b00      	cmp	r3, #0
 8002294:	d004      	beq.n	80022a0 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b00      	cmp	r3, #0
 800229e:	d01d      	beq.n	80022dc <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d004      	beq.n	80022b4 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d013      	beq.n	80022dc <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d004      	beq.n	80022c8 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	f003 0320 	and.w	r3, r3, #32
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d009      	beq.n	80022dc <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00c      	beq.n	80022ec <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d107      	bne.n	80022ec <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d004      	beq.n	8002300 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d13b      	bne.n	8002378 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002306:	2b00      	cmp	r3, #0
 8002308:	d004      	beq.n	8002314 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d131      	bne.n	8002378 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800231a:	2b00      	cmp	r3, #0
 800231c:	d004      	beq.n	8002328 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d127      	bne.n	8002378 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800232e:	2b00      	cmp	r3, #0
 8002330:	d004      	beq.n	800233c <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b00      	cmp	r3, #0
 800233a:	d11d      	bne.n	8002378 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002342:	2b00      	cmp	r3, #0
 8002344:	d004      	beq.n	8002350 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f003 0310 	and.w	r3, r3, #16
 800234c:	2b00      	cmp	r3, #0
 800234e:	d113      	bne.n	8002378 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002356:	2b00      	cmp	r3, #0
 8002358:	d004      	beq.n	8002364 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	2b00      	cmp	r3, #0
 8002362:	d109      	bne.n	8002378 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00c      	beq.n	8002388 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002374:	2b00      	cmp	r3, #0
 8002376:	d007      	beq.n	8002388 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0202 	orr.w	r2, r2, #2
 8002386:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238e:	2b00      	cmp	r3, #0
 8002390:	d009      	beq.n	80023a6 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d009      	beq.n	80023c4 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	430a      	orrs	r2, r1
 80023c0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	e006      	b.n	80023e6 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023dc:	f043 0202 	orr.w	r2, r3, #2
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
  }
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	371c      	adds	r7, #28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b08a      	sub	sp, #40	; 0x28
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002400:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240e:	4013      	ands	r3, r2
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002424:	6a3a      	ldr	r2, [r7, #32]
 8002426:	4013      	ands	r3, r2
 8002428:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002430:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002434:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	4013      	ands	r3, r2
 8002440:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002448:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800244c:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002460:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002464:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	4013      	ands	r3, r2
 8002470:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00d      	beq.n	800249c <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d006      	beq.n	800249c <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2240      	movs	r2, #64	; 0x40
 8002494:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f939 	bl	800270e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d01b      	beq.n	80024e2 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d014      	beq.n	80024e2 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80024c0:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024d8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80024da:	6939      	ldr	r1, [r7, #16]
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f8f7 	bl	80026d0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d007      	beq.n	80024f8 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ee:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80024f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f8b6 	bl	8002664 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d007      	beq.n	800250e <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6a3a      	ldr	r2, [r7, #32]
 8002504:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002506:	6a39      	ldr	r1, [r7, #32]
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f8b6 	bl	800267a <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d007      	beq.n	8002524 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	69fa      	ldr	r2, [r7, #28]
 800251a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800251c:	69f9      	ldr	r1, [r7, #28]
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f8b6 	bl	8002690 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00e      	beq.n	8002550 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800253c:	2b00      	cmp	r3, #0
 800253e:	d007      	beq.n	8002550 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002548:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f8ab 	bl	80026a6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255a:	2b00      	cmp	r3, #0
 800255c:	d01a      	beq.n	8002594 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002568:	2b00      	cmp	r3, #0
 800256a:	d013      	beq.n	8002594 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002574:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4013      	ands	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2280      	movs	r2, #128	; 0x80
 800258a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800258c:	68f9      	ldr	r1, [r7, #12]
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f893 	bl	80026ba <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00e      	beq.n	80025c0 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d007      	beq.n	80025c0 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025b8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f893 	bl	80026e6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00e      	beq.n	80025ec <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025e4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f887 	bl	80026fa <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d011      	beq.n	800261e <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002610:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002616:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d007      	beq.n	8002634 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800262c:	6979      	ldr	r1, [r7, #20]
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f881 	bl	8002736 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d009      	beq.n	800264e <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f863 	bl	8002722 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800265c:	bf00      	nop
 800265e:	3728      	adds	r7, #40	; 0x28
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002754:	4b27      	ldr	r3, [pc, #156]	; (80027f4 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002756:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002766:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276e:	041a      	lsls	r2, r3, #16
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800278c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002794:	061a      	lsls	r2, r3, #24
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	e005      	b.n	80027da <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	3304      	adds	r3, #4
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d3f3      	bcc.n	80027ce <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80027e6:	bf00      	nop
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	4000a400 	.word	0x4000a400

080027f8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b089      	sub	sp, #36	; 0x24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10a      	bne.n	8002824 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002816:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800281e:	4313      	orrs	r3, r2
 8002820:	61fb      	str	r3, [r7, #28]
 8002822:	e00a      	b.n	800283a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800282c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002832:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002834:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002838:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002844:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800284a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002850:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002856:	4313      	orrs	r3, r2
 8002858:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	440b      	add	r3, r1
 800286a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	3304      	adds	r3, #4
 8002876:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	3304      	adds	r3, #4
 8002882:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	e020      	b.n	80028cc <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	3303      	adds	r3, #3
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	3302      	adds	r3, #2
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	440b      	add	r3, r1
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80028a2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	3301      	adds	r3, #1
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	440b      	add	r3, r1
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80028b0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	440a      	add	r2, r1
 80028b8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80028ba:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	3304      	adds	r3, #4
 80028c4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	3304      	adds	r3, #4
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	0c1b      	lsrs	r3, r3, #16
 80028d2:	4a06      	ldr	r2, [pc, #24]	; (80028ec <FDCAN_CopyMessageToRAM+0xf4>)
 80028d4:	5cd3      	ldrb	r3, [r2, r3]
 80028d6:	461a      	mov	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	4293      	cmp	r3, r2
 80028dc:	d3d5      	bcc.n	800288a <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80028de:	bf00      	nop
 80028e0:	bf00      	nop
 80028e2:	3724      	adds	r7, #36	; 0x24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	080087c8 	.word	0x080087c8

080028f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028fe:	e15a      	b.n	8002bb6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	2101      	movs	r1, #1
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	fa01 f303 	lsl.w	r3, r1, r3
 800290c:	4013      	ands	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 814c 	beq.w	8002bb0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d005      	beq.n	8002930 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800292c:	2b02      	cmp	r3, #2
 800292e:	d130      	bne.n	8002992 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	2203      	movs	r2, #3
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4013      	ands	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002966:	2201      	movs	r2, #1
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	f003 0201 	and.w	r2, r3, #1
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	2b03      	cmp	r3, #3
 800299c:	d017      	beq.n	80029ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	2203      	movs	r2, #3
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4013      	ands	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d123      	bne.n	8002a22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	08da      	lsrs	r2, r3, #3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3208      	adds	r2, #8
 80029e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	220f      	movs	r2, #15
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4013      	ands	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	08da      	lsrs	r2, r3, #3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3208      	adds	r2, #8
 8002a1c:	6939      	ldr	r1, [r7, #16]
 8002a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	4013      	ands	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 0203 	and.w	r2, r3, #3
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 80a6 	beq.w	8002bb0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a64:	4b5b      	ldr	r3, [pc, #364]	; (8002bd4 <HAL_GPIO_Init+0x2e4>)
 8002a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a68:	4a5a      	ldr	r2, [pc, #360]	; (8002bd4 <HAL_GPIO_Init+0x2e4>)
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	6613      	str	r3, [r2, #96]	; 0x60
 8002a70:	4b58      	ldr	r3, [pc, #352]	; (8002bd4 <HAL_GPIO_Init+0x2e4>)
 8002a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a7c:	4a56      	ldr	r2, [pc, #344]	; (8002bd8 <HAL_GPIO_Init+0x2e8>)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	089b      	lsrs	r3, r3, #2
 8002a82:	3302      	adds	r3, #2
 8002a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	220f      	movs	r2, #15
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002aa6:	d01f      	beq.n	8002ae8 <HAL_GPIO_Init+0x1f8>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a4c      	ldr	r2, [pc, #304]	; (8002bdc <HAL_GPIO_Init+0x2ec>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d019      	beq.n	8002ae4 <HAL_GPIO_Init+0x1f4>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a4b      	ldr	r2, [pc, #300]	; (8002be0 <HAL_GPIO_Init+0x2f0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d013      	beq.n	8002ae0 <HAL_GPIO_Init+0x1f0>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a4a      	ldr	r2, [pc, #296]	; (8002be4 <HAL_GPIO_Init+0x2f4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d00d      	beq.n	8002adc <HAL_GPIO_Init+0x1ec>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a49      	ldr	r2, [pc, #292]	; (8002be8 <HAL_GPIO_Init+0x2f8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d007      	beq.n	8002ad8 <HAL_GPIO_Init+0x1e8>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a48      	ldr	r2, [pc, #288]	; (8002bec <HAL_GPIO_Init+0x2fc>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d101      	bne.n	8002ad4 <HAL_GPIO_Init+0x1e4>
 8002ad0:	2305      	movs	r3, #5
 8002ad2:	e00a      	b.n	8002aea <HAL_GPIO_Init+0x1fa>
 8002ad4:	2306      	movs	r3, #6
 8002ad6:	e008      	b.n	8002aea <HAL_GPIO_Init+0x1fa>
 8002ad8:	2304      	movs	r3, #4
 8002ada:	e006      	b.n	8002aea <HAL_GPIO_Init+0x1fa>
 8002adc:	2303      	movs	r3, #3
 8002ade:	e004      	b.n	8002aea <HAL_GPIO_Init+0x1fa>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e002      	b.n	8002aea <HAL_GPIO_Init+0x1fa>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <HAL_GPIO_Init+0x1fa>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	f002 0203 	and.w	r2, r2, #3
 8002af0:	0092      	lsls	r2, r2, #2
 8002af2:	4093      	lsls	r3, r2
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002afa:	4937      	ldr	r1, [pc, #220]	; (8002bd8 <HAL_GPIO_Init+0x2e8>)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	089b      	lsrs	r3, r3, #2
 8002b00:	3302      	adds	r3, #2
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b08:	4b39      	ldr	r3, [pc, #228]	; (8002bf0 <HAL_GPIO_Init+0x300>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b2c:	4a30      	ldr	r2, [pc, #192]	; (8002bf0 <HAL_GPIO_Init+0x300>)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b32:	4b2f      	ldr	r3, [pc, #188]	; (8002bf0 <HAL_GPIO_Init+0x300>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b56:	4a26      	ldr	r2, [pc, #152]	; (8002bf0 <HAL_GPIO_Init+0x300>)
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b5c:	4b24      	ldr	r3, [pc, #144]	; (8002bf0 <HAL_GPIO_Init+0x300>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b80:	4a1b      	ldr	r2, [pc, #108]	; (8002bf0 <HAL_GPIO_Init+0x300>)
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b86:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <HAL_GPIO_Init+0x300>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4013      	ands	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002baa:	4a11      	ldr	r2, [pc, #68]	; (8002bf0 <HAL_GPIO_Init+0x300>)
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f47f ae9d 	bne.w	8002900 <HAL_GPIO_Init+0x10>
  }
}
 8002bc6:	bf00      	nop
 8002bc8:	bf00      	nop
 8002bca:	371c      	adds	r7, #28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	40010000 	.word	0x40010000
 8002bdc:	48000400 	.word	0x48000400
 8002be0:	48000800 	.word	0x48000800
 8002be4:	48000c00 	.word	0x48000c00
 8002be8:	48001000 	.word	0x48001000
 8002bec:	48001400 	.word	0x48001400
 8002bf0:	40010400 	.word	0x40010400

08002bf4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	887b      	ldrh	r3, [r7, #2]
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	73fb      	strb	r3, [r7, #15]
 8002c10:	e001      	b.n	8002c16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c12:	2300      	movs	r3, #0
 8002c14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	807b      	strh	r3, [r7, #2]
 8002c30:	4613      	mov	r3, r2
 8002c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c34:	787b      	ldrb	r3, [r7, #1]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c3a:	887a      	ldrh	r2, [r7, #2]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c40:	e002      	b.n	8002c48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c42:	887a      	ldrh	r2, [r7, #2]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c66:	887a      	ldrh	r2, [r7, #2]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	041a      	lsls	r2, r3, #16
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	43d9      	mvns	r1, r3
 8002c72:	887b      	ldrh	r3, [r7, #2]
 8002c74:	400b      	ands	r3, r1
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	619a      	str	r2, [r3, #24]
}
 8002c7c:	bf00      	nop
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c92:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	88fb      	ldrh	r3, [r7, #6]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d006      	beq.n	8002cac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c9e:	4a05      	ldr	r2, [pc, #20]	; (8002cb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe fb50 	bl	800134c <HAL_GPIO_EXTI_Callback>
  }
}
 8002cac:	bf00      	nop
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40010400 	.word	0x40010400

08002cb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d141      	bne.n	8002d4a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cc6:	4b4b      	ldr	r3, [pc, #300]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd2:	d131      	bne.n	8002d38 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cd4:	4b47      	ldr	r3, [pc, #284]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cda:	4a46      	ldr	r2, [pc, #280]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ce0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ce4:	4b43      	ldr	r3, [pc, #268]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cec:	4a41      	ldr	r2, [pc, #260]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cf2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cf4:	4b40      	ldr	r3, [pc, #256]	; (8002df8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2232      	movs	r2, #50	; 0x32
 8002cfa:	fb02 f303 	mul.w	r3, r2, r3
 8002cfe:	4a3f      	ldr	r2, [pc, #252]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	0c9b      	lsrs	r3, r3, #18
 8002d06:	3301      	adds	r3, #1
 8002d08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d0a:	e002      	b.n	8002d12 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d12:	4b38      	ldr	r3, [pc, #224]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d1e:	d102      	bne.n	8002d26 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f2      	bne.n	8002d0c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d26:	4b33      	ldr	r3, [pc, #204]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d32:	d158      	bne.n	8002de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e057      	b.n	8002de8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d38:	4b2e      	ldr	r3, [pc, #184]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d3e:	4a2d      	ldr	r2, [pc, #180]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d48:	e04d      	b.n	8002de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d50:	d141      	bne.n	8002dd6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d52:	4b28      	ldr	r3, [pc, #160]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5e:	d131      	bne.n	8002dc4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d60:	4b24      	ldr	r3, [pc, #144]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d66:	4a23      	ldr	r2, [pc, #140]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d70:	4b20      	ldr	r3, [pc, #128]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d78:	4a1e      	ldr	r2, [pc, #120]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d80:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2232      	movs	r2, #50	; 0x32
 8002d86:	fb02 f303 	mul.w	r3, r2, r3
 8002d8a:	4a1c      	ldr	r2, [pc, #112]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d90:	0c9b      	lsrs	r3, r3, #18
 8002d92:	3301      	adds	r3, #1
 8002d94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d96:	e002      	b.n	8002d9e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002daa:	d102      	bne.n	8002db2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f2      	bne.n	8002d98 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002db2:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dbe:	d112      	bne.n	8002de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e011      	b.n	8002de8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dca:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002dd4:	e007      	b.n	8002de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dd6:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dde:	4a05      	ldr	r2, [pc, #20]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002de4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	40007000 	.word	0x40007000
 8002df8:	20000000 	.word	0x20000000
 8002dfc:	431bde83 	.word	0x431bde83

08002e00 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	4a04      	ldr	r2, [pc, #16]	; (8002e1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e0e:	6093      	str	r3, [r2, #8]
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40007000 	.word	0x40007000

08002e20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e308      	b.n	8003444 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d075      	beq.n	8002f2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e3e:	4ba3      	ldr	r3, [pc, #652]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e48:	4ba0      	ldr	r3, [pc, #640]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	2b0c      	cmp	r3, #12
 8002e56:	d102      	bne.n	8002e5e <HAL_RCC_OscConfig+0x3e>
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d002      	beq.n	8002e64 <HAL_RCC_OscConfig+0x44>
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d10b      	bne.n	8002e7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e64:	4b99      	ldr	r3, [pc, #612]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d05b      	beq.n	8002f28 <HAL_RCC_OscConfig+0x108>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d157      	bne.n	8002f28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e2e3      	b.n	8003444 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e84:	d106      	bne.n	8002e94 <HAL_RCC_OscConfig+0x74>
 8002e86:	4b91      	ldr	r3, [pc, #580]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a90      	ldr	r2, [pc, #576]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	e01d      	b.n	8002ed0 <HAL_RCC_OscConfig+0xb0>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x98>
 8002e9e:	4b8b      	ldr	r3, [pc, #556]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a8a      	ldr	r2, [pc, #552]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	4b88      	ldr	r3, [pc, #544]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a87      	ldr	r2, [pc, #540]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	e00b      	b.n	8002ed0 <HAL_RCC_OscConfig+0xb0>
 8002eb8:	4b84      	ldr	r3, [pc, #528]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a83      	ldr	r2, [pc, #524]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	4b81      	ldr	r3, [pc, #516]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a80      	ldr	r2, [pc, #512]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d013      	beq.n	8002f00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed8:	f7fe fe68 	bl	8001bac <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee0:	f7fe fe64 	bl	8001bac <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b64      	cmp	r3, #100	; 0x64
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e2a8      	b.n	8003444 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ef2:	4b76      	ldr	r3, [pc, #472]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0xc0>
 8002efe:	e014      	b.n	8002f2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7fe fe54 	bl	8001bac <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f08:	f7fe fe50 	bl	8001bac <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	; 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e294      	b.n	8003444 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f1a:	4b6c      	ldr	r3, [pc, #432]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0xe8>
 8002f26:	e000      	b.n	8002f2a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d075      	beq.n	8003022 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f36:	4b65      	ldr	r3, [pc, #404]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f40:	4b62      	ldr	r3, [pc, #392]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f003 0303 	and.w	r3, r3, #3
 8002f48:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	2b0c      	cmp	r3, #12
 8002f4e:	d102      	bne.n	8002f56 <HAL_RCC_OscConfig+0x136>
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d002      	beq.n	8002f5c <HAL_RCC_OscConfig+0x13c>
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d11f      	bne.n	8002f9c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f5c:	4b5b      	ldr	r3, [pc, #364]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_OscConfig+0x154>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e267      	b.n	8003444 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f74:	4b55      	ldr	r3, [pc, #340]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	061b      	lsls	r3, r3, #24
 8002f82:	4952      	ldr	r1, [pc, #328]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f88:	4b51      	ldr	r3, [pc, #324]	; (80030d0 <HAL_RCC_OscConfig+0x2b0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fe fabd 	bl	800150c <HAL_InitTick>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d043      	beq.n	8003020 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e253      	b.n	8003444 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d023      	beq.n	8002fec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fa4:	4b49      	ldr	r3, [pc, #292]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a48      	ldr	r2, [pc, #288]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fdfc 	bl	8001bac <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb8:	f7fe fdf8 	bl	8001bac <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e23c      	b.n	8003444 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fca:	4b40      	ldr	r3, [pc, #256]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd6:	4b3d      	ldr	r3, [pc, #244]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	061b      	lsls	r3, r3, #24
 8002fe4:	4939      	ldr	r1, [pc, #228]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	604b      	str	r3, [r1, #4]
 8002fea:	e01a      	b.n	8003022 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fec:	4b37      	ldr	r3, [pc, #220]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a36      	ldr	r2, [pc, #216]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8002ff2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fdd8 	bl	8001bac <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003000:	f7fe fdd4 	bl	8001bac <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e218      	b.n	8003444 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003012:	4b2e      	ldr	r3, [pc, #184]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x1e0>
 800301e:	e000      	b.n	8003022 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003020:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d03c      	beq.n	80030a8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d01c      	beq.n	8003070 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003036:	4b25      	ldr	r3, [pc, #148]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8003038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800303c:	4a23      	ldr	r2, [pc, #140]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003046:	f7fe fdb1 	bl	8001bac <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800304e:	f7fe fdad 	bl	8001bac <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e1f1      	b.n	8003444 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003060:	4b1a      	ldr	r3, [pc, #104]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8003062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0ef      	beq.n	800304e <HAL_RCC_OscConfig+0x22e>
 800306e:	e01b      	b.n	80030a8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003070:	4b16      	ldr	r3, [pc, #88]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8003072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003076:	4a15      	ldr	r2, [pc, #84]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 8003078:	f023 0301 	bic.w	r3, r3, #1
 800307c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003080:	f7fe fd94 	bl	8001bac <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003088:	f7fe fd90 	bl	8001bac <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e1d4      	b.n	8003444 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800309a:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 800309c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1ef      	bne.n	8003088 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80ab 	beq.w	800320c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030b6:	2300      	movs	r3, #0
 80030b8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030ba:	4b04      	ldr	r3, [pc, #16]	; (80030cc <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d106      	bne.n	80030d4 <HAL_RCC_OscConfig+0x2b4>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e005      	b.n	80030d6 <HAL_RCC_OscConfig+0x2b6>
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000
 80030d0:	20000004 	.word	0x20000004
 80030d4:	2300      	movs	r3, #0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00d      	beq.n	80030f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030da:	4baf      	ldr	r3, [pc, #700]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 80030dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030de:	4aae      	ldr	r2, [pc, #696]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 80030e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e4:	6593      	str	r3, [r2, #88]	; 0x58
 80030e6:	4bac      	ldr	r3, [pc, #688]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 80030e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80030f2:	2301      	movs	r3, #1
 80030f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030f6:	4ba9      	ldr	r3, [pc, #676]	; (800339c <HAL_RCC_OscConfig+0x57c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d118      	bne.n	8003134 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003102:	4ba6      	ldr	r3, [pc, #664]	; (800339c <HAL_RCC_OscConfig+0x57c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4aa5      	ldr	r2, [pc, #660]	; (800339c <HAL_RCC_OscConfig+0x57c>)
 8003108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310e:	f7fe fd4d 	bl	8001bac <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003116:	f7fe fd49 	bl	8001bac <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e18d      	b.n	8003444 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003128:	4b9c      	ldr	r3, [pc, #624]	; (800339c <HAL_RCC_OscConfig+0x57c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f0      	beq.n	8003116 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d108      	bne.n	800314e <HAL_RCC_OscConfig+0x32e>
 800313c:	4b96      	ldr	r3, [pc, #600]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003142:	4a95      	ldr	r2, [pc, #596]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800314c:	e024      	b.n	8003198 <HAL_RCC_OscConfig+0x378>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b05      	cmp	r3, #5
 8003154:	d110      	bne.n	8003178 <HAL_RCC_OscConfig+0x358>
 8003156:	4b90      	ldr	r3, [pc, #576]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315c:	4a8e      	ldr	r2, [pc, #568]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 800315e:	f043 0304 	orr.w	r3, r3, #4
 8003162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003166:	4b8c      	ldr	r3, [pc, #560]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316c:	4a8a      	ldr	r2, [pc, #552]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003176:	e00f      	b.n	8003198 <HAL_RCC_OscConfig+0x378>
 8003178:	4b87      	ldr	r3, [pc, #540]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 800317a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317e:	4a86      	ldr	r2, [pc, #536]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003188:	4b83      	ldr	r3, [pc, #524]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 800318a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318e:	4a82      	ldr	r2, [pc, #520]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 8003190:	f023 0304 	bic.w	r3, r3, #4
 8003194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d016      	beq.n	80031ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a0:	f7fe fd04 	bl	8001bac <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031a6:	e00a      	b.n	80031be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a8:	f7fe fd00 	bl	8001bac <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e142      	b.n	8003444 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031be:	4b76      	ldr	r3, [pc, #472]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 80031c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0ed      	beq.n	80031a8 <HAL_RCC_OscConfig+0x388>
 80031cc:	e015      	b.n	80031fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ce:	f7fe fced 	bl	8001bac <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031d4:	e00a      	b.n	80031ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d6:	f7fe fce9 	bl	8001bac <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e12b      	b.n	8003444 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031ec:	4b6a      	ldr	r3, [pc, #424]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1ed      	bne.n	80031d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031fa:	7ffb      	ldrb	r3, [r7, #31]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d105      	bne.n	800320c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003200:	4b65      	ldr	r3, [pc, #404]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 8003202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003204:	4a64      	ldr	r2, [pc, #400]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 8003206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800320a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b00      	cmp	r3, #0
 8003216:	d03c      	beq.n	8003292 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d01c      	beq.n	800325a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003220:	4b5d      	ldr	r3, [pc, #372]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 8003222:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003226:	4a5c      	ldr	r2, [pc, #368]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003230:	f7fe fcbc 	bl	8001bac <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003238:	f7fe fcb8 	bl	8001bac <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e0fc      	b.n	8003444 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800324a:	4b53      	ldr	r3, [pc, #332]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 800324c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0ef      	beq.n	8003238 <HAL_RCC_OscConfig+0x418>
 8003258:	e01b      	b.n	8003292 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800325a:	4b4f      	ldr	r3, [pc, #316]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 800325c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003260:	4a4d      	ldr	r2, [pc, #308]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 8003262:	f023 0301 	bic.w	r3, r3, #1
 8003266:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326a:	f7fe fc9f 	bl	8001bac <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003272:	f7fe fc9b 	bl	8001bac <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e0df      	b.n	8003444 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003284:	4b44      	ldr	r3, [pc, #272]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 8003286:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1ef      	bne.n	8003272 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 80d3 	beq.w	8003442 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800329c:	4b3e      	ldr	r3, [pc, #248]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 030c 	and.w	r3, r3, #12
 80032a4:	2b0c      	cmp	r3, #12
 80032a6:	f000 808d 	beq.w	80033c4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d15a      	bne.n	8003368 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b2:	4b39      	ldr	r3, [pc, #228]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a38      	ldr	r2, [pc, #224]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 80032b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032be:	f7fe fc75 	bl	8001bac <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c6:	f7fe fc71 	bl	8001bac <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e0b5      	b.n	8003444 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032d8:	4b2f      	ldr	r3, [pc, #188]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f0      	bne.n	80032c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032e4:	4b2c      	ldr	r3, [pc, #176]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	4b2d      	ldr	r3, [pc, #180]	; (80033a0 <HAL_RCC_OscConfig+0x580>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6a11      	ldr	r1, [r2, #32]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032f4:	3a01      	subs	r2, #1
 80032f6:	0112      	lsls	r2, r2, #4
 80032f8:	4311      	orrs	r1, r2
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80032fe:	0212      	lsls	r2, r2, #8
 8003300:	4311      	orrs	r1, r2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003306:	0852      	lsrs	r2, r2, #1
 8003308:	3a01      	subs	r2, #1
 800330a:	0552      	lsls	r2, r2, #21
 800330c:	4311      	orrs	r1, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003312:	0852      	lsrs	r2, r2, #1
 8003314:	3a01      	subs	r2, #1
 8003316:	0652      	lsls	r2, r2, #25
 8003318:	4311      	orrs	r1, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800331e:	06d2      	lsls	r2, r2, #27
 8003320:	430a      	orrs	r2, r1
 8003322:	491d      	ldr	r1, [pc, #116]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 8003324:	4313      	orrs	r3, r2
 8003326:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003328:	4b1b      	ldr	r3, [pc, #108]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1a      	ldr	r2, [pc, #104]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 800332e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003332:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003334:	4b18      	ldr	r3, [pc, #96]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4a17      	ldr	r2, [pc, #92]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 800333a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800333e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003340:	f7fe fc34 	bl	8001bac <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003348:	f7fe fc30 	bl	8001bac <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e074      	b.n	8003444 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800335a:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCC_OscConfig+0x528>
 8003366:	e06c      	b.n	8003442 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 800336e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003372:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003374:	4b08      	ldr	r3, [pc, #32]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4a07      	ldr	r2, [pc, #28]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 800337a:	f023 0303 	bic.w	r3, r3, #3
 800337e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003380:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	4a04      	ldr	r2, [pc, #16]	; (8003398 <HAL_RCC_OscConfig+0x578>)
 8003386:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800338a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003390:	f7fe fc0c 	bl	8001bac <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003396:	e00e      	b.n	80033b6 <HAL_RCC_OscConfig+0x596>
 8003398:	40021000 	.word	0x40021000
 800339c:	40007000 	.word	0x40007000
 80033a0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a4:	f7fe fc02 	bl	8001bac <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e046      	b.n	8003444 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033b6:	4b25      	ldr	r3, [pc, #148]	; (800344c <HAL_RCC_OscConfig+0x62c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0x584>
 80033c2:	e03e      	b.n	8003442 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e039      	b.n	8003444 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80033d0:	4b1e      	ldr	r3, [pc, #120]	; (800344c <HAL_RCC_OscConfig+0x62c>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f003 0203 	and.w	r2, r3, #3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d12c      	bne.n	800343e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	3b01      	subs	r3, #1
 80033f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d123      	bne.n	800343e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003402:	429a      	cmp	r2, r3
 8003404:	d11b      	bne.n	800343e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003412:	429a      	cmp	r2, r3
 8003414:	d113      	bne.n	800343e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	085b      	lsrs	r3, r3, #1
 8003422:	3b01      	subs	r3, #1
 8003424:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003426:	429a      	cmp	r2, r3
 8003428:	d109      	bne.n	800343e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003434:	085b      	lsrs	r3, r3, #1
 8003436:	3b01      	subs	r3, #1
 8003438:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800343a:	429a      	cmp	r2, r3
 800343c:	d001      	beq.n	8003442 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3720      	adds	r7, #32
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40021000 	.word	0x40021000

08003450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e11e      	b.n	80036a6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003468:	4b91      	ldr	r3, [pc, #580]	; (80036b0 <HAL_RCC_ClockConfig+0x260>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d910      	bls.n	8003498 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003476:	4b8e      	ldr	r3, [pc, #568]	; (80036b0 <HAL_RCC_ClockConfig+0x260>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 020f 	bic.w	r2, r3, #15
 800347e:	498c      	ldr	r1, [pc, #560]	; (80036b0 <HAL_RCC_ClockConfig+0x260>)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	4313      	orrs	r3, r2
 8003484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003486:	4b8a      	ldr	r3, [pc, #552]	; (80036b0 <HAL_RCC_ClockConfig+0x260>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d001      	beq.n	8003498 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e106      	b.n	80036a6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d073      	beq.n	800358c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d129      	bne.n	8003500 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ac:	4b81      	ldr	r3, [pc, #516]	; (80036b4 <HAL_RCC_ClockConfig+0x264>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e0f4      	b.n	80036a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80034bc:	f000 f9d0 	bl	8003860 <RCC_GetSysClockFreqFromPLLSource>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	4a7c      	ldr	r2, [pc, #496]	; (80036b8 <HAL_RCC_ClockConfig+0x268>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d93f      	bls.n	800354a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80034ca:	4b7a      	ldr	r3, [pc, #488]	; (80036b4 <HAL_RCC_ClockConfig+0x264>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d009      	beq.n	80034ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d033      	beq.n	800354a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d12f      	bne.n	800354a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034ea:	4b72      	ldr	r3, [pc, #456]	; (80036b4 <HAL_RCC_ClockConfig+0x264>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034f2:	4a70      	ldr	r2, [pc, #448]	; (80036b4 <HAL_RCC_ClockConfig+0x264>)
 80034f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80034fa:	2380      	movs	r3, #128	; 0x80
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	e024      	b.n	800354a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d107      	bne.n	8003518 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003508:	4b6a      	ldr	r3, [pc, #424]	; (80036b4 <HAL_RCC_ClockConfig+0x264>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d109      	bne.n	8003528 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0c6      	b.n	80036a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003518:	4b66      	ldr	r3, [pc, #408]	; (80036b4 <HAL_RCC_ClockConfig+0x264>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0be      	b.n	80036a6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003528:	f000 f8ce 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 800352c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4a61      	ldr	r2, [pc, #388]	; (80036b8 <HAL_RCC_ClockConfig+0x268>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d909      	bls.n	800354a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003536:	4b5f      	ldr	r3, [pc, #380]	; (80036b4 <HAL_RCC_ClockConfig+0x264>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800353e:	4a5d      	ldr	r2, [pc, #372]	; (80036b4 <HAL_RCC_ClockConfig+0x264>)
 8003540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003544:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003546:	2380      	movs	r3, #128	; 0x80
 8003548:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800354a:	4b5a      	ldr	r3, [pc, #360]	; (80036b4 <HAL_RCC_ClockConfig+0x264>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f023 0203 	bic.w	r2, r3, #3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4957      	ldr	r1, [pc, #348]	; (80036b4 <HAL_RCC_ClockConfig+0x264>)
 8003558:	4313      	orrs	r3, r2
 800355a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800355c:	f7fe fb26 	bl	8001bac <HAL_GetTick>
 8003560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003562:	e00a      	b.n	800357a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003564:	f7fe fb22 	bl	8001bac <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e095      	b.n	80036a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357a:	4b4e      	ldr	r3, [pc, #312]	; (80036b4 <HAL_RCC_ClockConfig+0x264>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 020c 	and.w	r2, r3, #12
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	429a      	cmp	r2, r3
 800358a:	d1eb      	bne.n	8003564 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d023      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035a4:	4b43      	ldr	r3, [pc, #268]	; (80036b4 <HAL_RCC_ClockConfig+0x264>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	4a42      	ldr	r2, [pc, #264]	; (80036b4 <HAL_RCC_ClockConfig+0x264>)
 80035aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80035bc:	4b3d      	ldr	r3, [pc, #244]	; (80036b4 <HAL_RCC_ClockConfig+0x264>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80035c4:	4a3b      	ldr	r2, [pc, #236]	; (80036b4 <HAL_RCC_ClockConfig+0x264>)
 80035c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035cc:	4b39      	ldr	r3, [pc, #228]	; (80036b4 <HAL_RCC_ClockConfig+0x264>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4936      	ldr	r1, [pc, #216]	; (80036b4 <HAL_RCC_ClockConfig+0x264>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	608b      	str	r3, [r1, #8]
 80035de:	e008      	b.n	80035f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2b80      	cmp	r3, #128	; 0x80
 80035e4:	d105      	bne.n	80035f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80035e6:	4b33      	ldr	r3, [pc, #204]	; (80036b4 <HAL_RCC_ClockConfig+0x264>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	4a32      	ldr	r2, [pc, #200]	; (80036b4 <HAL_RCC_ClockConfig+0x264>)
 80035ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035f2:	4b2f      	ldr	r3, [pc, #188]	; (80036b0 <HAL_RCC_ClockConfig+0x260>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d21d      	bcs.n	800363c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003600:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <HAL_RCC_ClockConfig+0x260>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f023 020f 	bic.w	r2, r3, #15
 8003608:	4929      	ldr	r1, [pc, #164]	; (80036b0 <HAL_RCC_ClockConfig+0x260>)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	4313      	orrs	r3, r2
 800360e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003610:	f7fe facc 	bl	8001bac <HAL_GetTick>
 8003614:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003616:	e00a      	b.n	800362e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003618:	f7fe fac8 	bl	8001bac <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f241 3288 	movw	r2, #5000	; 0x1388
 8003626:	4293      	cmp	r3, r2
 8003628:	d901      	bls.n	800362e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e03b      	b.n	80036a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800362e:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <HAL_RCC_ClockConfig+0x260>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d1ed      	bne.n	8003618 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003648:	4b1a      	ldr	r3, [pc, #104]	; (80036b4 <HAL_RCC_ClockConfig+0x264>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4917      	ldr	r1, [pc, #92]	; (80036b4 <HAL_RCC_ClockConfig+0x264>)
 8003656:	4313      	orrs	r3, r2
 8003658:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d009      	beq.n	800367a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003666:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <HAL_RCC_ClockConfig+0x264>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	490f      	ldr	r1, [pc, #60]	; (80036b4 <HAL_RCC_ClockConfig+0x264>)
 8003676:	4313      	orrs	r3, r2
 8003678:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800367a:	f000 f825 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 800367e:	4602      	mov	r2, r0
 8003680:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <HAL_RCC_ClockConfig+0x264>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	091b      	lsrs	r3, r3, #4
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	490c      	ldr	r1, [pc, #48]	; (80036bc <HAL_RCC_ClockConfig+0x26c>)
 800368c:	5ccb      	ldrb	r3, [r1, r3]
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	fa22 f303 	lsr.w	r3, r2, r3
 8003696:	4a0a      	ldr	r2, [pc, #40]	; (80036c0 <HAL_RCC_ClockConfig+0x270>)
 8003698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800369a:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <HAL_RCC_ClockConfig+0x274>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fd ff34 	bl	800150c <HAL_InitTick>
 80036a4:	4603      	mov	r3, r0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40022000 	.word	0x40022000
 80036b4:	40021000 	.word	0x40021000
 80036b8:	04c4b400 	.word	0x04c4b400
 80036bc:	080087b0 	.word	0x080087b0
 80036c0:	20000000 	.word	0x20000000
 80036c4:	20000004 	.word	0x20000004

080036c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80036ce:	4b2c      	ldr	r3, [pc, #176]	; (8003780 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d102      	bne.n	80036e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036da:	4b2a      	ldr	r3, [pc, #168]	; (8003784 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	e047      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80036e0:	4b27      	ldr	r3, [pc, #156]	; (8003780 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 030c 	and.w	r3, r3, #12
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d102      	bne.n	80036f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036ec:	4b26      	ldr	r3, [pc, #152]	; (8003788 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	e03e      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80036f2:	4b23      	ldr	r3, [pc, #140]	; (8003780 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
 80036fa:	2b0c      	cmp	r3, #12
 80036fc:	d136      	bne.n	800376c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036fe:	4b20      	ldr	r3, [pc, #128]	; (8003780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003708:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <HAL_RCC_GetSysClockFreq+0xb8>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	091b      	lsrs	r3, r3, #4
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	3301      	adds	r3, #1
 8003714:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b03      	cmp	r3, #3
 800371a:	d10c      	bne.n	8003736 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800371c:	4a1a      	ldr	r2, [pc, #104]	; (8003788 <HAL_RCC_GetSysClockFreq+0xc0>)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	fbb2 f3f3 	udiv	r3, r2, r3
 8003724:	4a16      	ldr	r2, [pc, #88]	; (8003780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003726:	68d2      	ldr	r2, [r2, #12]
 8003728:	0a12      	lsrs	r2, r2, #8
 800372a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800372e:	fb02 f303 	mul.w	r3, r2, r3
 8003732:	617b      	str	r3, [r7, #20]
      break;
 8003734:	e00c      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003736:	4a13      	ldr	r2, [pc, #76]	; (8003784 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	fbb2 f3f3 	udiv	r3, r2, r3
 800373e:	4a10      	ldr	r2, [pc, #64]	; (8003780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003740:	68d2      	ldr	r2, [r2, #12]
 8003742:	0a12      	lsrs	r2, r2, #8
 8003744:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003748:	fb02 f303 	mul.w	r3, r2, r3
 800374c:	617b      	str	r3, [r7, #20]
      break;
 800374e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003750:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	0e5b      	lsrs	r3, r3, #25
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	3301      	adds	r3, #1
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	fbb2 f3f3 	udiv	r3, r2, r3
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	e001      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003770:	693b      	ldr	r3, [r7, #16]
}
 8003772:	4618      	mov	r0, r3
 8003774:	371c      	adds	r7, #28
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000
 8003784:	00f42400 	.word	0x00f42400
 8003788:	007a1200 	.word	0x007a1200

0800378c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003792:	681b      	ldr	r3, [r3, #0]
}
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20000000 	.word	0x20000000

080037a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037a8:	f7ff fff0 	bl	800378c <HAL_RCC_GetHCLKFreq>
 80037ac:	4602      	mov	r2, r0
 80037ae:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	0a1b      	lsrs	r3, r3, #8
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	4904      	ldr	r1, [pc, #16]	; (80037cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80037ba:	5ccb      	ldrb	r3, [r1, r3]
 80037bc:	f003 031f 	and.w	r3, r3, #31
 80037c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40021000 	.word	0x40021000
 80037cc:	080087c0 	.word	0x080087c0

080037d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037d4:	f7ff ffda 	bl	800378c <HAL_RCC_GetHCLKFreq>
 80037d8:	4602      	mov	r2, r0
 80037da:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	0adb      	lsrs	r3, r3, #11
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	4904      	ldr	r1, [pc, #16]	; (80037f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037e6:	5ccb      	ldrb	r3, [r1, r3]
 80037e8:	f003 031f 	and.w	r3, r3, #31
 80037ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40021000 	.word	0x40021000
 80037f8:	080087c0 	.word	0x080087c0

080037fc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	220f      	movs	r2, #15
 800380a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800380c:	4b12      	ldr	r3, [pc, #72]	; (8003858 <HAL_RCC_GetClockConfig+0x5c>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 0203 	and.w	r2, r3, #3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003818:	4b0f      	ldr	r3, [pc, #60]	; (8003858 <HAL_RCC_GetClockConfig+0x5c>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003824:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <HAL_RCC_GetClockConfig+0x5c>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003830:	4b09      	ldr	r3, [pc, #36]	; (8003858 <HAL_RCC_GetClockConfig+0x5c>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	08db      	lsrs	r3, r3, #3
 8003836:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800383e:	4b07      	ldr	r3, [pc, #28]	; (800385c <HAL_RCC_GetClockConfig+0x60>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 020f 	and.w	r2, r3, #15
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	601a      	str	r2, [r3, #0]
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40021000 	.word	0x40021000
 800385c:	40022000 	.word	0x40022000

08003860 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003866:	4b1e      	ldr	r3, [pc, #120]	; (80038e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003870:	4b1b      	ldr	r3, [pc, #108]	; (80038e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	3301      	adds	r3, #1
 800387c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	2b03      	cmp	r3, #3
 8003882:	d10c      	bne.n	800389e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003884:	4a17      	ldr	r2, [pc, #92]	; (80038e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	fbb2 f3f3 	udiv	r3, r2, r3
 800388c:	4a14      	ldr	r2, [pc, #80]	; (80038e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800388e:	68d2      	ldr	r2, [r2, #12]
 8003890:	0a12      	lsrs	r2, r2, #8
 8003892:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	617b      	str	r3, [r7, #20]
    break;
 800389c:	e00c      	b.n	80038b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800389e:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a6:	4a0e      	ldr	r2, [pc, #56]	; (80038e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038a8:	68d2      	ldr	r2, [r2, #12]
 80038aa:	0a12      	lsrs	r2, r2, #8
 80038ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038b0:	fb02 f303 	mul.w	r3, r2, r3
 80038b4:	617b      	str	r3, [r7, #20]
    break;
 80038b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038b8:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	0e5b      	lsrs	r3, r3, #25
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	3301      	adds	r3, #1
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80038d2:	687b      	ldr	r3, [r7, #4]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	371c      	adds	r7, #28
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	40021000 	.word	0x40021000
 80038e4:	007a1200 	.word	0x007a1200
 80038e8:	00f42400 	.word	0x00f42400

080038ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038f4:	2300      	movs	r3, #0
 80038f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038f8:	2300      	movs	r3, #0
 80038fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 8098 	beq.w	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800390a:	2300      	movs	r3, #0
 800390c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800390e:	4b43      	ldr	r3, [pc, #268]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10d      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800391a:	4b40      	ldr	r3, [pc, #256]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800391c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391e:	4a3f      	ldr	r2, [pc, #252]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003924:	6593      	str	r3, [r2, #88]	; 0x58
 8003926:	4b3d      	ldr	r3, [pc, #244]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392e:	60bb      	str	r3, [r7, #8]
 8003930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003932:	2301      	movs	r3, #1
 8003934:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003936:	4b3a      	ldr	r3, [pc, #232]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a39      	ldr	r2, [pc, #228]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800393c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003940:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003942:	f7fe f933 	bl	8001bac <HAL_GetTick>
 8003946:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003948:	e009      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800394a:	f7fe f92f 	bl	8001bac <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d902      	bls.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	74fb      	strb	r3, [r7, #19]
        break;
 800395c:	e005      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800395e:	4b30      	ldr	r3, [pc, #192]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0ef      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800396a:	7cfb      	ldrb	r3, [r7, #19]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d159      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003970:	4b2a      	ldr	r3, [pc, #168]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800397a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d01e      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	429a      	cmp	r2, r3
 800398a:	d019      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800398c:	4b23      	ldr	r3, [pc, #140]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800398e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003996:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003998:	4b20      	ldr	r3, [pc, #128]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399e:	4a1f      	ldr	r2, [pc, #124]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039a8:	4b1c      	ldr	r3, [pc, #112]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ae:	4a1b      	ldr	r2, [pc, #108]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039b8:	4a18      	ldr	r2, [pc, #96]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d016      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ca:	f7fe f8ef 	bl	8001bac <HAL_GetTick>
 80039ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039d0:	e00b      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d2:	f7fe f8eb 	bl	8001bac <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d902      	bls.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	74fb      	strb	r3, [r7, #19]
            break;
 80039e8:	e006      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ea:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0ec      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80039f8:	7cfb      	ldrb	r3, [r7, #19]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10b      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039fe:	4b07      	ldr	r3, [pc, #28]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	4903      	ldr	r1, [pc, #12]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a14:	e008      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a16:	7cfb      	ldrb	r3, [r7, #19]
 8003a18:	74bb      	strb	r3, [r7, #18]
 8003a1a:	e005      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a24:	7cfb      	ldrb	r3, [r7, #19]
 8003a26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a28:	7c7b      	ldrb	r3, [r7, #17]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d105      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a2e:	4ba6      	ldr	r3, [pc, #664]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a32:	4aa5      	ldr	r2, [pc, #660]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a38:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a46:	4ba0      	ldr	r3, [pc, #640]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4c:	f023 0203 	bic.w	r2, r3, #3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	499c      	ldr	r1, [pc, #624]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00a      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a68:	4b97      	ldr	r3, [pc, #604]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6e:	f023 020c 	bic.w	r2, r3, #12
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	4994      	ldr	r1, [pc, #592]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0304 	and.w	r3, r3, #4
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00a      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a8a:	4b8f      	ldr	r3, [pc, #572]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	498b      	ldr	r1, [pc, #556]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00a      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003aac:	4b86      	ldr	r3, [pc, #536]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	4983      	ldr	r1, [pc, #524]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0320 	and.w	r3, r3, #32
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ace:	4b7e      	ldr	r3, [pc, #504]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	497a      	ldr	r1, [pc, #488]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003af0:	4b75      	ldr	r3, [pc, #468]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	4972      	ldr	r1, [pc, #456]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b12:	4b6d      	ldr	r3, [pc, #436]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	4969      	ldr	r1, [pc, #420]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b34:	4b64      	ldr	r3, [pc, #400]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	4961      	ldr	r1, [pc, #388]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b56:	4b5c      	ldr	r3, [pc, #368]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	4958      	ldr	r1, [pc, #352]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d015      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b78:	4b53      	ldr	r3, [pc, #332]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b86:	4950      	ldr	r1, [pc, #320]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b96:	d105      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b98:	4b4b      	ldr	r3, [pc, #300]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4a4a      	ldr	r2, [pc, #296]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ba2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d015      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bb0:	4b45      	ldr	r3, [pc, #276]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	4942      	ldr	r1, [pc, #264]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bce:	d105      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bd0:	4b3d      	ldr	r3, [pc, #244]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4a3c      	ldr	r2, [pc, #240]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bda:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d015      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003be8:	4b37      	ldr	r3, [pc, #220]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	4934      	ldr	r1, [pc, #208]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c06:	d105      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c08:	4b2f      	ldr	r3, [pc, #188]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	4a2e      	ldr	r2, [pc, #184]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c12:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d015      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c20:	4b29      	ldr	r3, [pc, #164]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2e:	4926      	ldr	r1, [pc, #152]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c3e:	d105      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c40:	4b21      	ldr	r3, [pc, #132]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	4a20      	ldr	r2, [pc, #128]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c4a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d015      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c58:	4b1b      	ldr	r3, [pc, #108]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	4918      	ldr	r1, [pc, #96]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c76:	d105      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c78:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4a12      	ldr	r2, [pc, #72]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c82:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d015      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c90:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9e:	490a      	ldr	r1, [pc, #40]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003caa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cae:	d105      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4a04      	ldr	r2, [pc, #16]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003cbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40021000 	.word	0x40021000

08003ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e049      	b.n	8003d72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d106      	bne.n	8003cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7fd fde0 	bl	80018b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3304      	adds	r3, #4
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	f000 fba4 	bl	8004458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
	...

08003d7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d001      	beq.n	8003d94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e042      	b.n	8003e1a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a21      	ldr	r2, [pc, #132]	; (8003e28 <HAL_TIM_Base_Start+0xac>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d018      	beq.n	8003dd8 <HAL_TIM_Base_Start+0x5c>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dae:	d013      	beq.n	8003dd8 <HAL_TIM_Base_Start+0x5c>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a1d      	ldr	r2, [pc, #116]	; (8003e2c <HAL_TIM_Base_Start+0xb0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00e      	beq.n	8003dd8 <HAL_TIM_Base_Start+0x5c>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a1c      	ldr	r2, [pc, #112]	; (8003e30 <HAL_TIM_Base_Start+0xb4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d009      	beq.n	8003dd8 <HAL_TIM_Base_Start+0x5c>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a1a      	ldr	r2, [pc, #104]	; (8003e34 <HAL_TIM_Base_Start+0xb8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d004      	beq.n	8003dd8 <HAL_TIM_Base_Start+0x5c>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a19      	ldr	r2, [pc, #100]	; (8003e38 <HAL_TIM_Base_Start+0xbc>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d115      	bne.n	8003e04 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	4b17      	ldr	r3, [pc, #92]	; (8003e3c <HAL_TIM_Base_Start+0xc0>)
 8003de0:	4013      	ands	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b06      	cmp	r3, #6
 8003de8:	d015      	beq.n	8003e16 <HAL_TIM_Base_Start+0x9a>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df0:	d011      	beq.n	8003e16 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f042 0201 	orr.w	r2, r2, #1
 8003e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e02:	e008      	b.n	8003e16 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	e000      	b.n	8003e18 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40012c00 	.word	0x40012c00
 8003e2c:	40000400 	.word	0x40000400
 8003e30:	40000800 	.word	0x40000800
 8003e34:	40013400 	.word	0x40013400
 8003e38:	40014000 	.word	0x40014000
 8003e3c:	00010007 	.word	0x00010007

08003e40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d001      	beq.n	8003e58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e04a      	b.n	8003eee <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0201 	orr.w	r2, r2, #1
 8003e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a21      	ldr	r2, [pc, #132]	; (8003efc <HAL_TIM_Base_Start_IT+0xbc>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d018      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0x6c>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e82:	d013      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0x6c>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a1d      	ldr	r2, [pc, #116]	; (8003f00 <HAL_TIM_Base_Start_IT+0xc0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00e      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0x6c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a1c      	ldr	r2, [pc, #112]	; (8003f04 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d009      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0x6c>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1a      	ldr	r2, [pc, #104]	; (8003f08 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d004      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0x6c>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a19      	ldr	r2, [pc, #100]	; (8003f0c <HAL_TIM_Base_Start_IT+0xcc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d115      	bne.n	8003ed8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	4b17      	ldr	r3, [pc, #92]	; (8003f10 <HAL_TIM_Base_Start_IT+0xd0>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b06      	cmp	r3, #6
 8003ebc:	d015      	beq.n	8003eea <HAL_TIM_Base_Start_IT+0xaa>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec4:	d011      	beq.n	8003eea <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f042 0201 	orr.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed6:	e008      	b.n	8003eea <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	e000      	b.n	8003eec <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40012c00 	.word	0x40012c00
 8003f00:	40000400 	.word	0x40000400
 8003f04:	40000800 	.word	0x40000800
 8003f08:	40013400 	.word	0x40013400
 8003f0c:	40014000 	.word	0x40014000
 8003f10:	00010007 	.word	0x00010007

08003f14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d122      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d11b      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f06f 0202 	mvn.w	r2, #2
 8003f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fa60 	bl	800441c <HAL_TIM_IC_CaptureCallback>
 8003f5c:	e005      	b.n	8003f6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fa52 	bl	8004408 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fa63 	bl	8004430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d122      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d11b      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0204 	mvn.w	r2, #4
 8003f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2202      	movs	r2, #2
 8003f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fa36 	bl	800441c <HAL_TIM_IC_CaptureCallback>
 8003fb0:	e005      	b.n	8003fbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fa28 	bl	8004408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fa39 	bl	8004430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d122      	bne.n	8004018 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d11b      	bne.n	8004018 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f06f 0208 	mvn.w	r2, #8
 8003fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2204      	movs	r2, #4
 8003fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fa0c 	bl	800441c <HAL_TIM_IC_CaptureCallback>
 8004004:	e005      	b.n	8004012 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f9fe 	bl	8004408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 fa0f 	bl	8004430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f003 0310 	and.w	r3, r3, #16
 8004022:	2b10      	cmp	r3, #16
 8004024:	d122      	bne.n	800406c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f003 0310 	and.w	r3, r3, #16
 8004030:	2b10      	cmp	r3, #16
 8004032:	d11b      	bne.n	800406c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f06f 0210 	mvn.w	r2, #16
 800403c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2208      	movs	r2, #8
 8004042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f9e2 	bl	800441c <HAL_TIM_IC_CaptureCallback>
 8004058:	e005      	b.n	8004066 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f9d4 	bl	8004408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f9e5 	bl	8004430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b01      	cmp	r3, #1
 8004078:	d10e      	bne.n	8004098 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b01      	cmp	r3, #1
 8004086:	d107      	bne.n	8004098 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f06f 0201 	mvn.w	r2, #1
 8004090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fd f9f8 	bl	8001488 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a2:	2b80      	cmp	r3, #128	; 0x80
 80040a4:	d10e      	bne.n	80040c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b0:	2b80      	cmp	r3, #128	; 0x80
 80040b2:	d107      	bne.n	80040c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fb82 	bl	80047c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040d2:	d10e      	bne.n	80040f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040de:	2b80      	cmp	r3, #128	; 0x80
 80040e0:	d107      	bne.n	80040f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80040ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 fb75 	bl	80047dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fc:	2b40      	cmp	r3, #64	; 0x40
 80040fe:	d10e      	bne.n	800411e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410a:	2b40      	cmp	r3, #64	; 0x40
 800410c:	d107      	bne.n	800411e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f993 	bl	8004444 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	f003 0320 	and.w	r3, r3, #32
 8004128:	2b20      	cmp	r3, #32
 800412a:	d10e      	bne.n	800414a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f003 0320 	and.w	r3, r3, #32
 8004136:	2b20      	cmp	r3, #32
 8004138:	d107      	bne.n	800414a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f06f 0220 	mvn.w	r2, #32
 8004142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fb35 	bl	80047b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004154:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004158:	d10f      	bne.n	800417a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004168:	d107      	bne.n	800417a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 fb3b 	bl	80047f0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004184:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004188:	d10f      	bne.n	80041aa <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004194:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004198:	d107      	bne.n	80041aa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80041a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fb2d 	bl	8004804 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041b8:	d10f      	bne.n	80041da <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041c8:	d107      	bne.n	80041da <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80041d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fb1f 	bl	8004818 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041e8:	d10f      	bne.n	800420a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041f8:	d107      	bne.n	800420a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 fb11 	bl	800482c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800420a:	bf00      	nop
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
	...

08004214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_TIM_ConfigClockSource+0x1c>
 800422c:	2302      	movs	r3, #2
 800422e:	e0de      	b.n	80043ee <HAL_TIM_ConfigClockSource+0x1da>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800424e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800425a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a63      	ldr	r2, [pc, #396]	; (80043f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	f000 80a9 	beq.w	80043c2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004270:	4a61      	ldr	r2, [pc, #388]	; (80043f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	f200 80ae 	bhi.w	80043d4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004278:	4a60      	ldr	r2, [pc, #384]	; (80043fc <HAL_TIM_ConfigClockSource+0x1e8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	f000 80a1 	beq.w	80043c2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004280:	4a5e      	ldr	r2, [pc, #376]	; (80043fc <HAL_TIM_ConfigClockSource+0x1e8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	f200 80a6 	bhi.w	80043d4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004288:	4a5d      	ldr	r2, [pc, #372]	; (8004400 <HAL_TIM_ConfigClockSource+0x1ec>)
 800428a:	4293      	cmp	r3, r2
 800428c:	f000 8099 	beq.w	80043c2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004290:	4a5b      	ldr	r2, [pc, #364]	; (8004400 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004292:	4293      	cmp	r3, r2
 8004294:	f200 809e 	bhi.w	80043d4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004298:	4a5a      	ldr	r2, [pc, #360]	; (8004404 <HAL_TIM_ConfigClockSource+0x1f0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	f000 8091 	beq.w	80043c2 <HAL_TIM_ConfigClockSource+0x1ae>
 80042a0:	4a58      	ldr	r2, [pc, #352]	; (8004404 <HAL_TIM_ConfigClockSource+0x1f0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	f200 8096 	bhi.w	80043d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80042a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80042ac:	f000 8089 	beq.w	80043c2 <HAL_TIM_ConfigClockSource+0x1ae>
 80042b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80042b4:	f200 808e 	bhi.w	80043d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80042b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042bc:	d03e      	beq.n	800433c <HAL_TIM_ConfigClockSource+0x128>
 80042be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042c2:	f200 8087 	bhi.w	80043d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80042c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ca:	f000 8086 	beq.w	80043da <HAL_TIM_ConfigClockSource+0x1c6>
 80042ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d2:	d87f      	bhi.n	80043d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80042d4:	2b70      	cmp	r3, #112	; 0x70
 80042d6:	d01a      	beq.n	800430e <HAL_TIM_ConfigClockSource+0xfa>
 80042d8:	2b70      	cmp	r3, #112	; 0x70
 80042da:	d87b      	bhi.n	80043d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80042dc:	2b60      	cmp	r3, #96	; 0x60
 80042de:	d050      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x16e>
 80042e0:	2b60      	cmp	r3, #96	; 0x60
 80042e2:	d877      	bhi.n	80043d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80042e4:	2b50      	cmp	r3, #80	; 0x50
 80042e6:	d03c      	beq.n	8004362 <HAL_TIM_ConfigClockSource+0x14e>
 80042e8:	2b50      	cmp	r3, #80	; 0x50
 80042ea:	d873      	bhi.n	80043d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80042ec:	2b40      	cmp	r3, #64	; 0x40
 80042ee:	d058      	beq.n	80043a2 <HAL_TIM_ConfigClockSource+0x18e>
 80042f0:	2b40      	cmp	r3, #64	; 0x40
 80042f2:	d86f      	bhi.n	80043d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80042f4:	2b30      	cmp	r3, #48	; 0x30
 80042f6:	d064      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0x1ae>
 80042f8:	2b30      	cmp	r3, #48	; 0x30
 80042fa:	d86b      	bhi.n	80043d4 <HAL_TIM_ConfigClockSource+0x1c0>
 80042fc:	2b20      	cmp	r3, #32
 80042fe:	d060      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004300:	2b20      	cmp	r3, #32
 8004302:	d867      	bhi.n	80043d4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004304:	2b00      	cmp	r3, #0
 8004306:	d05c      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004308:	2b10      	cmp	r3, #16
 800430a:	d05a      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0x1ae>
 800430c:	e062      	b.n	80043d4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6899      	ldr	r1, [r3, #8]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f000 f9a7 	bl	8004670 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004330:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	609a      	str	r2, [r3, #8]
      break;
 800433a:	e04f      	b.n	80043dc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	6899      	ldr	r1, [r3, #8]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f000 f990 	bl	8004670 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800435e:	609a      	str	r2, [r3, #8]
      break;
 8004360:	e03c      	b.n	80043dc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6859      	ldr	r1, [r3, #4]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	461a      	mov	r2, r3
 8004370:	f000 f902 	bl	8004578 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2150      	movs	r1, #80	; 0x50
 800437a:	4618      	mov	r0, r3
 800437c:	f000 f95b 	bl	8004636 <TIM_ITRx_SetConfig>
      break;
 8004380:	e02c      	b.n	80043dc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	6859      	ldr	r1, [r3, #4]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	461a      	mov	r2, r3
 8004390:	f000 f921 	bl	80045d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2160      	movs	r1, #96	; 0x60
 800439a:	4618      	mov	r0, r3
 800439c:	f000 f94b 	bl	8004636 <TIM_ITRx_SetConfig>
      break;
 80043a0:	e01c      	b.n	80043dc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	6859      	ldr	r1, [r3, #4]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	461a      	mov	r2, r3
 80043b0:	f000 f8e2 	bl	8004578 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2140      	movs	r1, #64	; 0x40
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 f93b 	bl	8004636 <TIM_ITRx_SetConfig>
      break;
 80043c0:	e00c      	b.n	80043dc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4619      	mov	r1, r3
 80043cc:	4610      	mov	r0, r2
 80043ce:	f000 f932 	bl	8004636 <TIM_ITRx_SetConfig>
      break;
 80043d2:	e003      	b.n	80043dc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	73fb      	strb	r3, [r7, #15]
      break;
 80043d8:	e000      	b.n	80043dc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80043da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	00100070 	.word	0x00100070
 80043fc:	00100040 	.word	0x00100040
 8004400:	00100030 	.word	0x00100030
 8004404:	00100020 	.word	0x00100020

08004408 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a3c      	ldr	r2, [pc, #240]	; (800455c <TIM_Base_SetConfig+0x104>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00f      	beq.n	8004490 <TIM_Base_SetConfig+0x38>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004476:	d00b      	beq.n	8004490 <TIM_Base_SetConfig+0x38>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a39      	ldr	r2, [pc, #228]	; (8004560 <TIM_Base_SetConfig+0x108>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d007      	beq.n	8004490 <TIM_Base_SetConfig+0x38>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a38      	ldr	r2, [pc, #224]	; (8004564 <TIM_Base_SetConfig+0x10c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d003      	beq.n	8004490 <TIM_Base_SetConfig+0x38>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a37      	ldr	r2, [pc, #220]	; (8004568 <TIM_Base_SetConfig+0x110>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d108      	bne.n	80044a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a2d      	ldr	r2, [pc, #180]	; (800455c <TIM_Base_SetConfig+0x104>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d01b      	beq.n	80044e2 <TIM_Base_SetConfig+0x8a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b0:	d017      	beq.n	80044e2 <TIM_Base_SetConfig+0x8a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a2a      	ldr	r2, [pc, #168]	; (8004560 <TIM_Base_SetConfig+0x108>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d013      	beq.n	80044e2 <TIM_Base_SetConfig+0x8a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a29      	ldr	r2, [pc, #164]	; (8004564 <TIM_Base_SetConfig+0x10c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00f      	beq.n	80044e2 <TIM_Base_SetConfig+0x8a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a28      	ldr	r2, [pc, #160]	; (8004568 <TIM_Base_SetConfig+0x110>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00b      	beq.n	80044e2 <TIM_Base_SetConfig+0x8a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a27      	ldr	r2, [pc, #156]	; (800456c <TIM_Base_SetConfig+0x114>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d007      	beq.n	80044e2 <TIM_Base_SetConfig+0x8a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a26      	ldr	r2, [pc, #152]	; (8004570 <TIM_Base_SetConfig+0x118>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d003      	beq.n	80044e2 <TIM_Base_SetConfig+0x8a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a25      	ldr	r2, [pc, #148]	; (8004574 <TIM_Base_SetConfig+0x11c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d108      	bne.n	80044f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a10      	ldr	r2, [pc, #64]	; (800455c <TIM_Base_SetConfig+0x104>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d00f      	beq.n	8004540 <TIM_Base_SetConfig+0xe8>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a11      	ldr	r2, [pc, #68]	; (8004568 <TIM_Base_SetConfig+0x110>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00b      	beq.n	8004540 <TIM_Base_SetConfig+0xe8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a10      	ldr	r2, [pc, #64]	; (800456c <TIM_Base_SetConfig+0x114>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d007      	beq.n	8004540 <TIM_Base_SetConfig+0xe8>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a0f      	ldr	r2, [pc, #60]	; (8004570 <TIM_Base_SetConfig+0x118>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d003      	beq.n	8004540 <TIM_Base_SetConfig+0xe8>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a0e      	ldr	r2, [pc, #56]	; (8004574 <TIM_Base_SetConfig+0x11c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d103      	bne.n	8004548 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	615a      	str	r2, [r3, #20]
}
 800454e:	bf00      	nop
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40012c00 	.word	0x40012c00
 8004560:	40000400 	.word	0x40000400
 8004564:	40000800 	.word	0x40000800
 8004568:	40013400 	.word	0x40013400
 800456c:	40014000 	.word	0x40014000
 8004570:	40014400 	.word	0x40014400
 8004574:	40014800 	.word	0x40014800

08004578 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	f023 0201 	bic.w	r2, r3, #1
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f023 030a 	bic.w	r3, r3, #10
 80045b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	621a      	str	r2, [r3, #32]
}
 80045ca:	bf00      	nop
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b087      	sub	sp, #28
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	f023 0210 	bic.w	r2, r3, #16
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004600:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	031b      	lsls	r3, r3, #12
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4313      	orrs	r3, r2
 800460a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004612:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	621a      	str	r2, [r3, #32]
}
 800462a:	bf00      	nop
 800462c:	371c      	adds	r7, #28
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004636:	b480      	push	{r7}
 8004638:	b085      	sub	sp, #20
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800464c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004650:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	f043 0307 	orr.w	r3, r3, #7
 800465c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	609a      	str	r2, [r3, #8]
}
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800468a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	021a      	lsls	r2, r3, #8
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	431a      	orrs	r2, r3
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	4313      	orrs	r3, r2
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	609a      	str	r2, [r3, #8]
}
 80046a4:	bf00      	nop
 80046a6:	371c      	adds	r7, #28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d101      	bne.n	80046c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046c4:	2302      	movs	r3, #2
 80046c6:	e065      	b.n	8004794 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a2c      	ldr	r2, [pc, #176]	; (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d004      	beq.n	80046fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a2b      	ldr	r2, [pc, #172]	; (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d108      	bne.n	800470e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004702:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4313      	orrs	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004718:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	4313      	orrs	r3, r2
 8004722:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a1b      	ldr	r2, [pc, #108]	; (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d018      	beq.n	8004768 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800473e:	d013      	beq.n	8004768 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a18      	ldr	r2, [pc, #96]	; (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d00e      	beq.n	8004768 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a17      	ldr	r2, [pc, #92]	; (80047ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d009      	beq.n	8004768 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a12      	ldr	r2, [pc, #72]	; (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d004      	beq.n	8004768 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a13      	ldr	r2, [pc, #76]	; (80047b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d10c      	bne.n	8004782 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800476e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	4313      	orrs	r3, r2
 8004778:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	40012c00 	.word	0x40012c00
 80047a4:	40013400 	.word	0x40013400
 80047a8:	40000400 	.word	0x40000400
 80047ac:	40000800 	.word	0x40000800
 80047b0:	40014000 	.word	0x40014000

080047b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e042      	b.n	80048d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004858:	2b00      	cmp	r3, #0
 800485a:	d106      	bne.n	800486a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7fd f8f5 	bl	8001a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2224      	movs	r2, #36	; 0x24
 800486e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0201 	bic.w	r2, r2, #1
 8004880:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f8c2 	bl	8004a0c <UART_SetConfig>
 8004888:	4603      	mov	r3, r0
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e022      	b.n	80048d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fb52 	bl	8004f44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fbd9 	bl	8005088 <UART_CheckIdleState>
 80048d6:	4603      	mov	r3, r0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08a      	sub	sp, #40	; 0x28
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	4613      	mov	r3, r2
 80048ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	f040 8083 	bne.w	8004a02 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <HAL_UART_Transmit+0x28>
 8004902:	88fb      	ldrh	r3, [r7, #6]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e07b      	b.n	8004a04 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <HAL_UART_Transmit+0x3a>
 8004916:	2302      	movs	r3, #2
 8004918:	e074      	b.n	8004a04 <HAL_UART_Transmit+0x124>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2221      	movs	r2, #33	; 0x21
 800492e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004932:	f7fd f93b 	bl	8001bac <HAL_GetTick>
 8004936:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	88fa      	ldrh	r2, [r7, #6]
 800493c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	88fa      	ldrh	r2, [r7, #6]
 8004944:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004950:	d108      	bne.n	8004964 <HAL_UART_Transmit+0x84>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d104      	bne.n	8004964 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800495a:	2300      	movs	r3, #0
 800495c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	61bb      	str	r3, [r7, #24]
 8004962:	e003      	b.n	800496c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004968:	2300      	movs	r3, #0
 800496a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004974:	e02c      	b.n	80049d0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2200      	movs	r2, #0
 800497e:	2180      	movs	r1, #128	; 0x80
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 fbcc 	bl	800511e <UART_WaitOnFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e039      	b.n	8004a04 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10b      	bne.n	80049ae <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	461a      	mov	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	3302      	adds	r3, #2
 80049aa:	61bb      	str	r3, [r7, #24]
 80049ac:	e007      	b.n	80049be <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	781a      	ldrb	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	3301      	adds	r3, #1
 80049bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1cc      	bne.n	8004976 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2200      	movs	r2, #0
 80049e4:	2140      	movs	r1, #64	; 0x40
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 fb99 	bl	800511e <UART_WaitOnFlagUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e006      	b.n	8004a04 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2220      	movs	r2, #32
 80049fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	e000      	b.n	8004a04 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004a02:	2302      	movs	r3, #2
  }
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3720      	adds	r7, #32
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a0c:	b5b0      	push	{r4, r5, r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	4baf      	ldr	r3, [pc, #700]	; (8004cf4 <UART_SetConfig+0x2e8>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6812      	ldr	r2, [r2, #0]
 8004a3e:	69f9      	ldr	r1, [r7, #28]
 8004a40:	430b      	orrs	r3, r1
 8004a42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4aa4      	ldr	r2, [pc, #656]	; (8004cf8 <UART_SetConfig+0x2ec>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d004      	beq.n	8004a74 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004a7e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6812      	ldr	r2, [r2, #0]
 8004a86:	69f9      	ldr	r1, [r7, #28]
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a92:	f023 010f 	bic.w	r1, r3, #15
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a95      	ldr	r2, [pc, #596]	; (8004cfc <UART_SetConfig+0x2f0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d120      	bne.n	8004aee <UART_SetConfig+0xe2>
 8004aac:	4b94      	ldr	r3, [pc, #592]	; (8004d00 <UART_SetConfig+0x2f4>)
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	2b03      	cmp	r3, #3
 8004ab8:	d816      	bhi.n	8004ae8 <UART_SetConfig+0xdc>
 8004aba:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <UART_SetConfig+0xb4>)
 8004abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac0:	08004ad1 	.word	0x08004ad1
 8004ac4:	08004add 	.word	0x08004add
 8004ac8:	08004ad7 	.word	0x08004ad7
 8004acc:	08004ae3 	.word	0x08004ae3
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	76fb      	strb	r3, [r7, #27]
 8004ad4:	e0bc      	b.n	8004c50 <UART_SetConfig+0x244>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	76fb      	strb	r3, [r7, #27]
 8004ada:	e0b9      	b.n	8004c50 <UART_SetConfig+0x244>
 8004adc:	2304      	movs	r3, #4
 8004ade:	76fb      	strb	r3, [r7, #27]
 8004ae0:	e0b6      	b.n	8004c50 <UART_SetConfig+0x244>
 8004ae2:	2308      	movs	r3, #8
 8004ae4:	76fb      	strb	r3, [r7, #27]
 8004ae6:	e0b3      	b.n	8004c50 <UART_SetConfig+0x244>
 8004ae8:	2310      	movs	r3, #16
 8004aea:	76fb      	strb	r3, [r7, #27]
 8004aec:	e0b0      	b.n	8004c50 <UART_SetConfig+0x244>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a84      	ldr	r2, [pc, #528]	; (8004d04 <UART_SetConfig+0x2f8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d132      	bne.n	8004b5e <UART_SetConfig+0x152>
 8004af8:	4b81      	ldr	r3, [pc, #516]	; (8004d00 <UART_SetConfig+0x2f4>)
 8004afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afe:	f003 030c 	and.w	r3, r3, #12
 8004b02:	2b0c      	cmp	r3, #12
 8004b04:	d828      	bhi.n	8004b58 <UART_SetConfig+0x14c>
 8004b06:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <UART_SetConfig+0x100>)
 8004b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0c:	08004b41 	.word	0x08004b41
 8004b10:	08004b59 	.word	0x08004b59
 8004b14:	08004b59 	.word	0x08004b59
 8004b18:	08004b59 	.word	0x08004b59
 8004b1c:	08004b4d 	.word	0x08004b4d
 8004b20:	08004b59 	.word	0x08004b59
 8004b24:	08004b59 	.word	0x08004b59
 8004b28:	08004b59 	.word	0x08004b59
 8004b2c:	08004b47 	.word	0x08004b47
 8004b30:	08004b59 	.word	0x08004b59
 8004b34:	08004b59 	.word	0x08004b59
 8004b38:	08004b59 	.word	0x08004b59
 8004b3c:	08004b53 	.word	0x08004b53
 8004b40:	2300      	movs	r3, #0
 8004b42:	76fb      	strb	r3, [r7, #27]
 8004b44:	e084      	b.n	8004c50 <UART_SetConfig+0x244>
 8004b46:	2302      	movs	r3, #2
 8004b48:	76fb      	strb	r3, [r7, #27]
 8004b4a:	e081      	b.n	8004c50 <UART_SetConfig+0x244>
 8004b4c:	2304      	movs	r3, #4
 8004b4e:	76fb      	strb	r3, [r7, #27]
 8004b50:	e07e      	b.n	8004c50 <UART_SetConfig+0x244>
 8004b52:	2308      	movs	r3, #8
 8004b54:	76fb      	strb	r3, [r7, #27]
 8004b56:	e07b      	b.n	8004c50 <UART_SetConfig+0x244>
 8004b58:	2310      	movs	r3, #16
 8004b5a:	76fb      	strb	r3, [r7, #27]
 8004b5c:	e078      	b.n	8004c50 <UART_SetConfig+0x244>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a69      	ldr	r2, [pc, #420]	; (8004d08 <UART_SetConfig+0x2fc>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d120      	bne.n	8004baa <UART_SetConfig+0x19e>
 8004b68:	4b65      	ldr	r3, [pc, #404]	; (8004d00 <UART_SetConfig+0x2f4>)
 8004b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b72:	2b30      	cmp	r3, #48	; 0x30
 8004b74:	d013      	beq.n	8004b9e <UART_SetConfig+0x192>
 8004b76:	2b30      	cmp	r3, #48	; 0x30
 8004b78:	d814      	bhi.n	8004ba4 <UART_SetConfig+0x198>
 8004b7a:	2b20      	cmp	r3, #32
 8004b7c:	d009      	beq.n	8004b92 <UART_SetConfig+0x186>
 8004b7e:	2b20      	cmp	r3, #32
 8004b80:	d810      	bhi.n	8004ba4 <UART_SetConfig+0x198>
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <UART_SetConfig+0x180>
 8004b86:	2b10      	cmp	r3, #16
 8004b88:	d006      	beq.n	8004b98 <UART_SetConfig+0x18c>
 8004b8a:	e00b      	b.n	8004ba4 <UART_SetConfig+0x198>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	76fb      	strb	r3, [r7, #27]
 8004b90:	e05e      	b.n	8004c50 <UART_SetConfig+0x244>
 8004b92:	2302      	movs	r3, #2
 8004b94:	76fb      	strb	r3, [r7, #27]
 8004b96:	e05b      	b.n	8004c50 <UART_SetConfig+0x244>
 8004b98:	2304      	movs	r3, #4
 8004b9a:	76fb      	strb	r3, [r7, #27]
 8004b9c:	e058      	b.n	8004c50 <UART_SetConfig+0x244>
 8004b9e:	2308      	movs	r3, #8
 8004ba0:	76fb      	strb	r3, [r7, #27]
 8004ba2:	e055      	b.n	8004c50 <UART_SetConfig+0x244>
 8004ba4:	2310      	movs	r3, #16
 8004ba6:	76fb      	strb	r3, [r7, #27]
 8004ba8:	e052      	b.n	8004c50 <UART_SetConfig+0x244>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a57      	ldr	r2, [pc, #348]	; (8004d0c <UART_SetConfig+0x300>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d120      	bne.n	8004bf6 <UART_SetConfig+0x1ea>
 8004bb4:	4b52      	ldr	r3, [pc, #328]	; (8004d00 <UART_SetConfig+0x2f4>)
 8004bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bbe:	2bc0      	cmp	r3, #192	; 0xc0
 8004bc0:	d013      	beq.n	8004bea <UART_SetConfig+0x1de>
 8004bc2:	2bc0      	cmp	r3, #192	; 0xc0
 8004bc4:	d814      	bhi.n	8004bf0 <UART_SetConfig+0x1e4>
 8004bc6:	2b80      	cmp	r3, #128	; 0x80
 8004bc8:	d009      	beq.n	8004bde <UART_SetConfig+0x1d2>
 8004bca:	2b80      	cmp	r3, #128	; 0x80
 8004bcc:	d810      	bhi.n	8004bf0 <UART_SetConfig+0x1e4>
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <UART_SetConfig+0x1cc>
 8004bd2:	2b40      	cmp	r3, #64	; 0x40
 8004bd4:	d006      	beq.n	8004be4 <UART_SetConfig+0x1d8>
 8004bd6:	e00b      	b.n	8004bf0 <UART_SetConfig+0x1e4>
 8004bd8:	2300      	movs	r3, #0
 8004bda:	76fb      	strb	r3, [r7, #27]
 8004bdc:	e038      	b.n	8004c50 <UART_SetConfig+0x244>
 8004bde:	2302      	movs	r3, #2
 8004be0:	76fb      	strb	r3, [r7, #27]
 8004be2:	e035      	b.n	8004c50 <UART_SetConfig+0x244>
 8004be4:	2304      	movs	r3, #4
 8004be6:	76fb      	strb	r3, [r7, #27]
 8004be8:	e032      	b.n	8004c50 <UART_SetConfig+0x244>
 8004bea:	2308      	movs	r3, #8
 8004bec:	76fb      	strb	r3, [r7, #27]
 8004bee:	e02f      	b.n	8004c50 <UART_SetConfig+0x244>
 8004bf0:	2310      	movs	r3, #16
 8004bf2:	76fb      	strb	r3, [r7, #27]
 8004bf4:	e02c      	b.n	8004c50 <UART_SetConfig+0x244>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a3f      	ldr	r2, [pc, #252]	; (8004cf8 <UART_SetConfig+0x2ec>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d125      	bne.n	8004c4c <UART_SetConfig+0x240>
 8004c00:	4b3f      	ldr	r3, [pc, #252]	; (8004d00 <UART_SetConfig+0x2f4>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c06:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c0e:	d017      	beq.n	8004c40 <UART_SetConfig+0x234>
 8004c10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c14:	d817      	bhi.n	8004c46 <UART_SetConfig+0x23a>
 8004c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c1a:	d00b      	beq.n	8004c34 <UART_SetConfig+0x228>
 8004c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c20:	d811      	bhi.n	8004c46 <UART_SetConfig+0x23a>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <UART_SetConfig+0x222>
 8004c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c2a:	d006      	beq.n	8004c3a <UART_SetConfig+0x22e>
 8004c2c:	e00b      	b.n	8004c46 <UART_SetConfig+0x23a>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	76fb      	strb	r3, [r7, #27]
 8004c32:	e00d      	b.n	8004c50 <UART_SetConfig+0x244>
 8004c34:	2302      	movs	r3, #2
 8004c36:	76fb      	strb	r3, [r7, #27]
 8004c38:	e00a      	b.n	8004c50 <UART_SetConfig+0x244>
 8004c3a:	2304      	movs	r3, #4
 8004c3c:	76fb      	strb	r3, [r7, #27]
 8004c3e:	e007      	b.n	8004c50 <UART_SetConfig+0x244>
 8004c40:	2308      	movs	r3, #8
 8004c42:	76fb      	strb	r3, [r7, #27]
 8004c44:	e004      	b.n	8004c50 <UART_SetConfig+0x244>
 8004c46:	2310      	movs	r3, #16
 8004c48:	76fb      	strb	r3, [r7, #27]
 8004c4a:	e001      	b.n	8004c50 <UART_SetConfig+0x244>
 8004c4c:	2310      	movs	r3, #16
 8004c4e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a28      	ldr	r2, [pc, #160]	; (8004cf8 <UART_SetConfig+0x2ec>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	f040 809e 	bne.w	8004d98 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c5c:	7efb      	ldrb	r3, [r7, #27]
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d823      	bhi.n	8004caa <UART_SetConfig+0x29e>
 8004c62:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <UART_SetConfig+0x25c>)
 8004c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c68:	08004c8d 	.word	0x08004c8d
 8004c6c:	08004cab 	.word	0x08004cab
 8004c70:	08004c95 	.word	0x08004c95
 8004c74:	08004cab 	.word	0x08004cab
 8004c78:	08004c9b 	.word	0x08004c9b
 8004c7c:	08004cab 	.word	0x08004cab
 8004c80:	08004cab 	.word	0x08004cab
 8004c84:	08004cab 	.word	0x08004cab
 8004c88:	08004ca3 	.word	0x08004ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c8c:	f7fe fd8a 	bl	80037a4 <HAL_RCC_GetPCLK1Freq>
 8004c90:	6178      	str	r0, [r7, #20]
        break;
 8004c92:	e00f      	b.n	8004cb4 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c94:	4b1e      	ldr	r3, [pc, #120]	; (8004d10 <UART_SetConfig+0x304>)
 8004c96:	617b      	str	r3, [r7, #20]
        break;
 8004c98:	e00c      	b.n	8004cb4 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c9a:	f7fe fd15 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 8004c9e:	6178      	str	r0, [r7, #20]
        break;
 8004ca0:	e008      	b.n	8004cb4 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ca6:	617b      	str	r3, [r7, #20]
        break;
 8004ca8:	e004      	b.n	8004cb4 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	76bb      	strb	r3, [r7, #26]
        break;
 8004cb2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 812c 	beq.w	8004f14 <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	4a14      	ldr	r2, [pc, #80]	; (8004d14 <UART_SetConfig+0x308>)
 8004cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cce:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	4413      	add	r3, r2
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d305      	bcc.n	8004cec <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d915      	bls.n	8004d18 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	76bb      	strb	r3, [r7, #26]
 8004cf0:	e110      	b.n	8004f14 <UART_SetConfig+0x508>
 8004cf2:	bf00      	nop
 8004cf4:	cfff69f3 	.word	0xcfff69f3
 8004cf8:	40008000 	.word	0x40008000
 8004cfc:	40013800 	.word	0x40013800
 8004d00:	40021000 	.word	0x40021000
 8004d04:	40004400 	.word	0x40004400
 8004d08:	40004800 	.word	0x40004800
 8004d0c:	40004c00 	.word	0x40004c00
 8004d10:	00f42400 	.word	0x00f42400
 8004d14:	080087d8 	.word	0x080087d8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f04f 0100 	mov.w	r1, #0
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	4a85      	ldr	r2, [pc, #532]	; (8004f3c <UART_SetConfig+0x530>)
 8004d26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	f7fb fe9c 	bl	8000a6c <__aeabi_uldivmod>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4610      	mov	r0, r2
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	f04f 0300 	mov.w	r3, #0
 8004d44:	020b      	lsls	r3, r1, #8
 8004d46:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d4a:	0202      	lsls	r2, r0, #8
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	6849      	ldr	r1, [r1, #4]
 8004d50:	0849      	lsrs	r1, r1, #1
 8004d52:	4608      	mov	r0, r1
 8004d54:	f04f 0100 	mov.w	r1, #0
 8004d58:	1814      	adds	r4, r2, r0
 8004d5a:	eb43 0501 	adc.w	r5, r3, r1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	461a      	mov	r2, r3
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	4620      	mov	r0, r4
 8004d6a:	4629      	mov	r1, r5
 8004d6c:	f7fb fe7e 	bl	8000a6c <__aeabi_uldivmod>
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	4613      	mov	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d7e:	d308      	bcc.n	8004d92 <UART_SetConfig+0x386>
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d86:	d204      	bcs.n	8004d92 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	60da      	str	r2, [r3, #12]
 8004d90:	e0c0      	b.n	8004f14 <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	76bb      	strb	r3, [r7, #26]
 8004d96:	e0bd      	b.n	8004f14 <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da0:	d164      	bne.n	8004e6c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004da2:	7efb      	ldrb	r3, [r7, #27]
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d828      	bhi.n	8004dfa <UART_SetConfig+0x3ee>
 8004da8:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <UART_SetConfig+0x3a4>)
 8004daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dae:	bf00      	nop
 8004db0:	08004dd5 	.word	0x08004dd5
 8004db4:	08004ddd 	.word	0x08004ddd
 8004db8:	08004de5 	.word	0x08004de5
 8004dbc:	08004dfb 	.word	0x08004dfb
 8004dc0:	08004deb 	.word	0x08004deb
 8004dc4:	08004dfb 	.word	0x08004dfb
 8004dc8:	08004dfb 	.word	0x08004dfb
 8004dcc:	08004dfb 	.word	0x08004dfb
 8004dd0:	08004df3 	.word	0x08004df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dd4:	f7fe fce6 	bl	80037a4 <HAL_RCC_GetPCLK1Freq>
 8004dd8:	6178      	str	r0, [r7, #20]
        break;
 8004dda:	e013      	b.n	8004e04 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ddc:	f7fe fcf8 	bl	80037d0 <HAL_RCC_GetPCLK2Freq>
 8004de0:	6178      	str	r0, [r7, #20]
        break;
 8004de2:	e00f      	b.n	8004e04 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004de4:	4b56      	ldr	r3, [pc, #344]	; (8004f40 <UART_SetConfig+0x534>)
 8004de6:	617b      	str	r3, [r7, #20]
        break;
 8004de8:	e00c      	b.n	8004e04 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dea:	f7fe fc6d 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 8004dee:	6178      	str	r0, [r7, #20]
        break;
 8004df0:	e008      	b.n	8004e04 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004df6:	617b      	str	r3, [r7, #20]
        break;
 8004df8:	e004      	b.n	8004e04 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	76bb      	strb	r3, [r7, #26]
        break;
 8004e02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 8084 	beq.w	8004f14 <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	4a4a      	ldr	r2, [pc, #296]	; (8004f3c <UART_SetConfig+0x530>)
 8004e12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e16:	461a      	mov	r2, r3
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e1e:	005a      	lsls	r2, r3, #1
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	085b      	lsrs	r3, r3, #1
 8004e26:	441a      	add	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	2b0f      	cmp	r3, #15
 8004e36:	d916      	bls.n	8004e66 <UART_SetConfig+0x45a>
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e3e:	d212      	bcs.n	8004e66 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	f023 030f 	bic.w	r3, r3, #15
 8004e48:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	085b      	lsrs	r3, r3, #1
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	89fb      	ldrh	r3, [r7, #14]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	89fa      	ldrh	r2, [r7, #14]
 8004e62:	60da      	str	r2, [r3, #12]
 8004e64:	e056      	b.n	8004f14 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	76bb      	strb	r3, [r7, #26]
 8004e6a:	e053      	b.n	8004f14 <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e6c:	7efb      	ldrb	r3, [r7, #27]
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d827      	bhi.n	8004ec2 <UART_SetConfig+0x4b6>
 8004e72:	a201      	add	r2, pc, #4	; (adr r2, 8004e78 <UART_SetConfig+0x46c>)
 8004e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e78:	08004e9d 	.word	0x08004e9d
 8004e7c:	08004ea5 	.word	0x08004ea5
 8004e80:	08004ead 	.word	0x08004ead
 8004e84:	08004ec3 	.word	0x08004ec3
 8004e88:	08004eb3 	.word	0x08004eb3
 8004e8c:	08004ec3 	.word	0x08004ec3
 8004e90:	08004ec3 	.word	0x08004ec3
 8004e94:	08004ec3 	.word	0x08004ec3
 8004e98:	08004ebb 	.word	0x08004ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e9c:	f7fe fc82 	bl	80037a4 <HAL_RCC_GetPCLK1Freq>
 8004ea0:	6178      	str	r0, [r7, #20]
        break;
 8004ea2:	e013      	b.n	8004ecc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ea4:	f7fe fc94 	bl	80037d0 <HAL_RCC_GetPCLK2Freq>
 8004ea8:	6178      	str	r0, [r7, #20]
        break;
 8004eaa:	e00f      	b.n	8004ecc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eac:	4b24      	ldr	r3, [pc, #144]	; (8004f40 <UART_SetConfig+0x534>)
 8004eae:	617b      	str	r3, [r7, #20]
        break;
 8004eb0:	e00c      	b.n	8004ecc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eb2:	f7fe fc09 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 8004eb6:	6178      	str	r0, [r7, #20]
        break;
 8004eb8:	e008      	b.n	8004ecc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ebe:	617b      	str	r3, [r7, #20]
        break;
 8004ec0:	e004      	b.n	8004ecc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	76bb      	strb	r3, [r7, #26]
        break;
 8004eca:	bf00      	nop
    }

    if (pclk != 0U)
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d020      	beq.n	8004f14 <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	4a19      	ldr	r2, [pc, #100]	; (8004f3c <UART_SetConfig+0x530>)
 8004ed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004edc:	461a      	mov	r2, r3
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	085b      	lsrs	r3, r3, #1
 8004eea:	441a      	add	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b0f      	cmp	r3, #15
 8004efa:	d909      	bls.n	8004f10 <UART_SetConfig+0x504>
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f02:	d205      	bcs.n	8004f10 <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	60da      	str	r2, [r3, #12]
 8004f0e:	e001      	b.n	8004f14 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004f30:	7ebb      	ldrb	r3, [r7, #26]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3720      	adds	r7, #32
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bdb0      	pop	{r4, r5, r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	080087d8 	.word	0x080087d8
 8004f40:	00f42400 	.word	0x00f42400

08004f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb6:	f003 0308 	and.w	r3, r3, #8
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	f003 0310 	and.w	r3, r3, #16
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffa:	f003 0320 	and.w	r3, r3, #32
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005020:	2b00      	cmp	r3, #0
 8005022:	d01a      	beq.n	800505a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005042:	d10a      	bne.n	800505a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	605a      	str	r2, [r3, #4]
  }
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af02      	add	r7, sp, #8
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005098:	f7fc fd88 	bl	8001bac <HAL_GetTick>
 800509c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d10e      	bne.n	80050ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f82f 	bl	800511e <UART_WaitOnFlagUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e025      	b.n	8005116 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	2b04      	cmp	r3, #4
 80050d6:	d10e      	bne.n	80050f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f819 	bl	800511e <UART_WaitOnFlagUntilTimeout>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e00f      	b.n	8005116 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2220      	movs	r2, #32
 8005102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b09c      	sub	sp, #112	; 0x70
 8005122:	af00      	add	r7, sp, #0
 8005124:	60f8      	str	r0, [r7, #12]
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	603b      	str	r3, [r7, #0]
 800512a:	4613      	mov	r3, r2
 800512c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800512e:	e0a9      	b.n	8005284 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005136:	f000 80a5 	beq.w	8005284 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800513a:	f7fc fd37 	bl	8001bac <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005146:	429a      	cmp	r2, r3
 8005148:	d302      	bcc.n	8005150 <UART_WaitOnFlagUntilTimeout+0x32>
 800514a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800514c:	2b00      	cmp	r3, #0
 800514e:	d140      	bne.n	80051d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800515e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005160:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005164:	667b      	str	r3, [r7, #100]	; 0x64
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800516e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005170:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005172:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005174:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005176:	e841 2300 	strex	r3, r2, [r1]
 800517a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800517c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1e6      	bne.n	8005150 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3308      	adds	r3, #8
 8005188:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005194:	f023 0301 	bic.w	r3, r3, #1
 8005198:	663b      	str	r3, [r7, #96]	; 0x60
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3308      	adds	r3, #8
 80051a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80051a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80051b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e5      	bne.n	8005182 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2220      	movs	r2, #32
 80051ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e069      	b.n	80052a6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d051      	beq.n	8005284 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051ee:	d149      	bne.n	8005284 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005202:	e853 3f00 	ldrex	r3, [r3]
 8005206:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800520e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	461a      	mov	r2, r3
 8005216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005218:	637b      	str	r3, [r7, #52]	; 0x34
 800521a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800521e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005220:	e841 2300 	strex	r3, r2, [r1]
 8005224:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1e6      	bne.n	80051fa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3308      	adds	r3, #8
 8005232:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	e853 3f00 	ldrex	r3, [r3]
 800523a:	613b      	str	r3, [r7, #16]
   return(result);
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f023 0301 	bic.w	r3, r3, #1
 8005242:	66bb      	str	r3, [r7, #104]	; 0x68
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	3308      	adds	r3, #8
 800524a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800524c:	623a      	str	r2, [r7, #32]
 800524e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005250:	69f9      	ldr	r1, [r7, #28]
 8005252:	6a3a      	ldr	r2, [r7, #32]
 8005254:	e841 2300 	strex	r3, r2, [r1]
 8005258:	61bb      	str	r3, [r7, #24]
   return(result);
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1e5      	bne.n	800522c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2220      	movs	r2, #32
 8005264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2220      	movs	r2, #32
 800526c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2220      	movs	r2, #32
 8005274:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e010      	b.n	80052a6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	69da      	ldr	r2, [r3, #28]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	4013      	ands	r3, r2
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	429a      	cmp	r2, r3
 8005292:	bf0c      	ite	eq
 8005294:	2301      	moveq	r3, #1
 8005296:	2300      	movne	r3, #0
 8005298:	b2db      	uxtb	r3, r3
 800529a:	461a      	mov	r2, r3
 800529c:	79fb      	ldrb	r3, [r7, #7]
 800529e:	429a      	cmp	r2, r3
 80052a0:	f43f af46 	beq.w	8005130 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3770      	adds	r7, #112	; 0x70
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b085      	sub	sp, #20
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_UARTEx_DisableFifoMode+0x16>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e027      	b.n	8005314 <HAL_UARTEx_DisableFifoMode+0x66>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2224      	movs	r2, #36	; 0x24
 80052d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0201 	bic.w	r2, r2, #1
 80052ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80052f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2220      	movs	r2, #32
 8005306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005334:	2302      	movs	r3, #2
 8005336:	e02d      	b.n	8005394 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2224      	movs	r2, #36	; 0x24
 8005344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0201 	bic.w	r2, r2, #1
 800535e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f84f 	bl	8005418 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2220      	movs	r2, #32
 8005386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e02d      	b.n	8005410 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2224      	movs	r2, #36	; 0x24
 80053c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0201 	bic.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f811 	bl	8005418 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2220      	movs	r2, #32
 8005402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005424:	2b00      	cmp	r3, #0
 8005426:	d108      	bne.n	800543a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005438:	e031      	b.n	800549e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800543a:	2308      	movs	r3, #8
 800543c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800543e:	2308      	movs	r3, #8
 8005440:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	0e5b      	lsrs	r3, r3, #25
 800544a:	b2db      	uxtb	r3, r3
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	0f5b      	lsrs	r3, r3, #29
 800545a:	b2db      	uxtb	r3, r3
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005462:	7bbb      	ldrb	r3, [r7, #14]
 8005464:	7b3a      	ldrb	r2, [r7, #12]
 8005466:	4911      	ldr	r1, [pc, #68]	; (80054ac <UARTEx_SetNbDataToProcess+0x94>)
 8005468:	5c8a      	ldrb	r2, [r1, r2]
 800546a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800546e:	7b3a      	ldrb	r2, [r7, #12]
 8005470:	490f      	ldr	r1, [pc, #60]	; (80054b0 <UARTEx_SetNbDataToProcess+0x98>)
 8005472:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005474:	fb93 f3f2 	sdiv	r3, r3, r2
 8005478:	b29a      	uxth	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005480:	7bfb      	ldrb	r3, [r7, #15]
 8005482:	7b7a      	ldrb	r2, [r7, #13]
 8005484:	4909      	ldr	r1, [pc, #36]	; (80054ac <UARTEx_SetNbDataToProcess+0x94>)
 8005486:	5c8a      	ldrb	r2, [r1, r2]
 8005488:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800548c:	7b7a      	ldrb	r2, [r7, #13]
 800548e:	4908      	ldr	r1, [pc, #32]	; (80054b0 <UARTEx_SetNbDataToProcess+0x98>)
 8005490:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005492:	fb93 f3f2 	sdiv	r3, r3, r2
 8005496:	b29a      	uxth	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800549e:	bf00      	nop
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	080087f0 	.word	0x080087f0
 80054b0:	080087f8 	.word	0x080087f8

080054b4 <__NVIC_SetPriority>:
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	4603      	mov	r3, r0
 80054bc:	6039      	str	r1, [r7, #0]
 80054be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	db0a      	blt.n	80054de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	490c      	ldr	r1, [pc, #48]	; (8005500 <__NVIC_SetPriority+0x4c>)
 80054ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054d2:	0112      	lsls	r2, r2, #4
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	440b      	add	r3, r1
 80054d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80054dc:	e00a      	b.n	80054f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	4908      	ldr	r1, [pc, #32]	; (8005504 <__NVIC_SetPriority+0x50>)
 80054e4:	79fb      	ldrb	r3, [r7, #7]
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	3b04      	subs	r3, #4
 80054ec:	0112      	lsls	r2, r2, #4
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	440b      	add	r3, r1
 80054f2:	761a      	strb	r2, [r3, #24]
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	e000e100 	.word	0xe000e100
 8005504:	e000ed00 	.word	0xe000ed00

08005508 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800550c:	4b05      	ldr	r3, [pc, #20]	; (8005524 <SysTick_Handler+0x1c>)
 800550e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005510:	f001 fda6 	bl	8007060 <xTaskGetSchedulerState>
 8005514:	4603      	mov	r3, r0
 8005516:	2b01      	cmp	r3, #1
 8005518:	d001      	beq.n	800551e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800551a:	f002 fcd5 	bl	8007ec8 <xPortSysTickHandler>
  }
}
 800551e:	bf00      	nop
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	e000e010 	.word	0xe000e010

08005528 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005528:	b580      	push	{r7, lr}
 800552a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800552c:	2100      	movs	r1, #0
 800552e:	f06f 0004 	mvn.w	r0, #4
 8005532:	f7ff ffbf 	bl	80054b4 <__NVIC_SetPriority>
#endif
}
 8005536:	bf00      	nop
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005542:	f3ef 8305 	mrs	r3, IPSR
 8005546:	603b      	str	r3, [r7, #0]
  return(result);
 8005548:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800554e:	f06f 0305 	mvn.w	r3, #5
 8005552:	607b      	str	r3, [r7, #4]
 8005554:	e00c      	b.n	8005570 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005556:	4b0a      	ldr	r3, [pc, #40]	; (8005580 <osKernelInitialize+0x44>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d105      	bne.n	800556a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800555e:	4b08      	ldr	r3, [pc, #32]	; (8005580 <osKernelInitialize+0x44>)
 8005560:	2201      	movs	r2, #1
 8005562:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005564:	2300      	movs	r3, #0
 8005566:	607b      	str	r3, [r7, #4]
 8005568:	e002      	b.n	8005570 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800556a:	f04f 33ff 	mov.w	r3, #4294967295
 800556e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005570:	687b      	ldr	r3, [r7, #4]
}
 8005572:	4618      	mov	r0, r3
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	20000090 	.word	0x20000090

08005584 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800558a:	f3ef 8305 	mrs	r3, IPSR
 800558e:	603b      	str	r3, [r7, #0]
  return(result);
 8005590:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005596:	f06f 0305 	mvn.w	r3, #5
 800559a:	607b      	str	r3, [r7, #4]
 800559c:	e010      	b.n	80055c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800559e:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <osKernelStart+0x48>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d109      	bne.n	80055ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80055a6:	f7ff ffbf 	bl	8005528 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80055aa:	4b08      	ldr	r3, [pc, #32]	; (80055cc <osKernelStart+0x48>)
 80055ac:	2202      	movs	r2, #2
 80055ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80055b0:	f001 f8fa 	bl	80067a8 <vTaskStartScheduler>
      stat = osOK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	607b      	str	r3, [r7, #4]
 80055b8:	e002      	b.n	80055c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80055ba:	f04f 33ff 	mov.w	r3, #4294967295
 80055be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80055c0:	687b      	ldr	r3, [r7, #4]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20000090 	.word	0x20000090

080055d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08e      	sub	sp, #56	; 0x38
 80055d4:	af04      	add	r7, sp, #16
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80055dc:	2300      	movs	r3, #0
 80055de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055e0:	f3ef 8305 	mrs	r3, IPSR
 80055e4:	617b      	str	r3, [r7, #20]
  return(result);
 80055e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d17e      	bne.n	80056ea <osThreadNew+0x11a>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d07b      	beq.n	80056ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80055f2:	2380      	movs	r3, #128	; 0x80
 80055f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80055f6:	2318      	movs	r3, #24
 80055f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80055fa:	2300      	movs	r3, #0
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80055fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005602:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d045      	beq.n	8005696 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <osThreadNew+0x48>
        name = attr->name;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d008      	beq.n	800563e <osThreadNew+0x6e>
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	2b38      	cmp	r3, #56	; 0x38
 8005630:	d805      	bhi.n	800563e <osThreadNew+0x6e>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <osThreadNew+0x72>
        return (NULL);
 800563e:	2300      	movs	r3, #0
 8005640:	e054      	b.n	80056ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	089b      	lsrs	r3, r3, #2
 8005650:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00e      	beq.n	8005678 <osThreadNew+0xa8>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	2bbb      	cmp	r3, #187	; 0xbb
 8005660:	d90a      	bls.n	8005678 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005666:	2b00      	cmp	r3, #0
 8005668:	d006      	beq.n	8005678 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <osThreadNew+0xa8>
        mem = 1;
 8005672:	2301      	movs	r3, #1
 8005674:	61bb      	str	r3, [r7, #24]
 8005676:	e010      	b.n	800569a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10c      	bne.n	800569a <osThreadNew+0xca>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d108      	bne.n	800569a <osThreadNew+0xca>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d104      	bne.n	800569a <osThreadNew+0xca>
          mem = 0;
 8005690:	2300      	movs	r3, #0
 8005692:	61bb      	str	r3, [r7, #24]
 8005694:	e001      	b.n	800569a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005696:	2300      	movs	r3, #0
 8005698:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d110      	bne.n	80056c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056a8:	9202      	str	r2, [sp, #8]
 80056aa:	9301      	str	r3, [sp, #4]
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	6a3a      	ldr	r2, [r7, #32]
 80056b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 fe0c 	bl	80062d4 <xTaskCreateStatic>
 80056bc:	4603      	mov	r3, r0
 80056be:	613b      	str	r3, [r7, #16]
 80056c0:	e013      	b.n	80056ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d110      	bne.n	80056ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	f107 0310 	add.w	r3, r7, #16
 80056d0:	9301      	str	r3, [sp, #4]
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 fe57 	bl	800638e <xTaskCreate>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d001      	beq.n	80056ea <osThreadNew+0x11a>
            hTask = NULL;
 80056e6:	2300      	movs	r3, #0
 80056e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80056ea:	693b      	ldr	r3, [r7, #16]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3728      	adds	r7, #40	; 0x28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056fc:	f3ef 8305 	mrs	r3, IPSR
 8005700:	60bb      	str	r3, [r7, #8]
  return(result);
 8005702:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <osDelay+0x1c>
    stat = osErrorISR;
 8005708:	f06f 0305 	mvn.w	r3, #5
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	e007      	b.n	8005720 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005710:	2300      	movs	r3, #0
 8005712:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d002      	beq.n	8005720 <osDelay+0x2c>
      vTaskDelay(ticks);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f001 f810 	bl	8006740 <vTaskDelay>
    }
  }

  return (stat);
 8005720:	68fb      	ldr	r3, [r7, #12]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4a07      	ldr	r2, [pc, #28]	; (8005758 <vApplicationGetIdleTaskMemory+0x2c>)
 800573c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	4a06      	ldr	r2, [pc, #24]	; (800575c <vApplicationGetIdleTaskMemory+0x30>)
 8005742:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2280      	movs	r2, #128	; 0x80
 8005748:	601a      	str	r2, [r3, #0]
}
 800574a:	bf00      	nop
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	20000094 	.word	0x20000094
 800575c:	20000150 	.word	0x20000150

08005760 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4a07      	ldr	r2, [pc, #28]	; (800578c <vApplicationGetTimerTaskMemory+0x2c>)
 8005770:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	4a06      	ldr	r2, [pc, #24]	; (8005790 <vApplicationGetTimerTaskMemory+0x30>)
 8005776:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800577e:	601a      	str	r2, [r3, #0]
}
 8005780:	bf00      	nop
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	20000350 	.word	0x20000350
 8005790:	2000040c 	.word	0x2000040c

08005794 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f103 0208 	add.w	r2, r3, #8
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f04f 32ff 	mov.w	r2, #4294967295
 80057ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f103 0208 	add.w	r2, r3, #8
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f103 0208 	add.w	r2, r3, #8
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057ee:	b480      	push	{r7}
 80057f0:	b085      	sub	sp, #20
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	601a      	str	r2, [r3, #0]
}
 800582a:	bf00      	nop
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005836:	b480      	push	{r7}
 8005838:	b085      	sub	sp, #20
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
 800583e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584c:	d103      	bne.n	8005856 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	e00c      	b.n	8005870 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	3308      	adds	r3, #8
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	e002      	b.n	8005864 <vListInsert+0x2e>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	429a      	cmp	r2, r3
 800586e:	d2f6      	bcs.n	800585e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	601a      	str	r2, [r3, #0]
}
 800589c:	bf00      	nop
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6892      	ldr	r2, [r2, #8]
 80058be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6852      	ldr	r2, [r2, #4]
 80058c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d103      	bne.n	80058dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	1e5a      	subs	r2, r3, #1
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10a      	bne.n	8005926 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005926:	f002 fa3d 	bl	8007da4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005932:	68f9      	ldr	r1, [r7, #12]
 8005934:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005936:	fb01 f303 	mul.w	r3, r1, r3
 800593a:	441a      	add	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005956:	3b01      	subs	r3, #1
 8005958:	68f9      	ldr	r1, [r7, #12]
 800595a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800595c:	fb01 f303 	mul.w	r3, r1, r3
 8005960:	441a      	add	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	22ff      	movs	r2, #255	; 0xff
 800596a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	22ff      	movs	r2, #255	; 0xff
 8005972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d114      	bne.n	80059a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d01a      	beq.n	80059ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	3310      	adds	r3, #16
 8005988:	4618      	mov	r0, r3
 800598a:	f001 f9a7 	bl	8006cdc <xTaskRemoveFromEventList>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d012      	beq.n	80059ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005994:	4b0c      	ldr	r3, [pc, #48]	; (80059c8 <xQueueGenericReset+0xcc>)
 8005996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	e009      	b.n	80059ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	3310      	adds	r3, #16
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff fef2 	bl	8005794 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3324      	adds	r3, #36	; 0x24
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7ff feed 	bl	8005794 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059ba:	f002 fa23 	bl	8007e04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059be:	2301      	movs	r3, #1
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	e000ed04 	.word	0xe000ed04

080059cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08e      	sub	sp, #56	; 0x38
 80059d0:	af02      	add	r7, sp, #8
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10a      	bne.n	80059f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059f2:	bf00      	nop
 80059f4:	e7fe      	b.n	80059f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10a      	bne.n	8005a12 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80059fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a0e:	bf00      	nop
 8005a10:	e7fe      	b.n	8005a10 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <xQueueGenericCreateStatic+0x52>
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <xQueueGenericCreateStatic+0x56>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <xQueueGenericCreateStatic+0x58>
 8005a22:	2300      	movs	r3, #0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10a      	bne.n	8005a3e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2c:	f383 8811 	msr	BASEPRI, r3
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	623b      	str	r3, [r7, #32]
}
 8005a3a:	bf00      	nop
 8005a3c:	e7fe      	b.n	8005a3c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d102      	bne.n	8005a4a <xQueueGenericCreateStatic+0x7e>
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <xQueueGenericCreateStatic+0x82>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e000      	b.n	8005a50 <xQueueGenericCreateStatic+0x84>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10a      	bne.n	8005a6a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	61fb      	str	r3, [r7, #28]
}
 8005a66:	bf00      	nop
 8005a68:	e7fe      	b.n	8005a68 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a6a:	2350      	movs	r3, #80	; 0x50
 8005a6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2b50      	cmp	r3, #80	; 0x50
 8005a72:	d00a      	beq.n	8005a8a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	61bb      	str	r3, [r7, #24]
}
 8005a86:	bf00      	nop
 8005a88:	e7fe      	b.n	8005a88 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a8a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00d      	beq.n	8005ab2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a9e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	68b9      	ldr	r1, [r7, #8]
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 f805 	bl	8005abc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3730      	adds	r7, #48	; 0x30
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
 8005ac8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d103      	bne.n	8005ad8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	e002      	b.n	8005ade <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005aea:	2101      	movs	r1, #1
 8005aec:	69b8      	ldr	r0, [r7, #24]
 8005aee:	f7ff ff05 	bl	80058fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	78fa      	ldrb	r2, [r7, #3]
 8005af6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005afa:	bf00      	nop
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
	...

08005b04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b08e      	sub	sp, #56	; 0x38
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
 8005b10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b12:	2300      	movs	r3, #0
 8005b14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10a      	bne.n	8005b36 <xQueueGenericSend+0x32>
	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b32:	bf00      	nop
 8005b34:	e7fe      	b.n	8005b34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d103      	bne.n	8005b44 <xQueueGenericSend+0x40>
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <xQueueGenericSend+0x44>
 8005b44:	2301      	movs	r3, #1
 8005b46:	e000      	b.n	8005b4a <xQueueGenericSend+0x46>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10a      	bne.n	8005b64 <xQueueGenericSend+0x60>
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b60:	bf00      	nop
 8005b62:	e7fe      	b.n	8005b62 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d103      	bne.n	8005b72 <xQueueGenericSend+0x6e>
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d101      	bne.n	8005b76 <xQueueGenericSend+0x72>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <xQueueGenericSend+0x74>
 8005b76:	2300      	movs	r3, #0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10a      	bne.n	8005b92 <xQueueGenericSend+0x8e>
	__asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	623b      	str	r3, [r7, #32]
}
 8005b8e:	bf00      	nop
 8005b90:	e7fe      	b.n	8005b90 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b92:	f001 fa65 	bl	8007060 <xTaskGetSchedulerState>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d102      	bne.n	8005ba2 <xQueueGenericSend+0x9e>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <xQueueGenericSend+0xa2>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e000      	b.n	8005ba8 <xQueueGenericSend+0xa4>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10a      	bne.n	8005bc2 <xQueueGenericSend+0xbe>
	__asm volatile
 8005bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	61fb      	str	r3, [r7, #28]
}
 8005bbe:	bf00      	nop
 8005bc0:	e7fe      	b.n	8005bc0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bc2:	f002 f8ef 	bl	8007da4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d302      	bcc.n	8005bd8 <xQueueGenericSend+0xd4>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d129      	bne.n	8005c2c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	68b9      	ldr	r1, [r7, #8]
 8005bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bde:	f000 fa0b 	bl	8005ff8 <prvCopyDataToQueue>
 8005be2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d010      	beq.n	8005c0e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bee:	3324      	adds	r3, #36	; 0x24
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f001 f873 	bl	8006cdc <xTaskRemoveFromEventList>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d013      	beq.n	8005c24 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005bfc:	4b3f      	ldr	r3, [pc, #252]	; (8005cfc <xQueueGenericSend+0x1f8>)
 8005bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	e00a      	b.n	8005c24 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d007      	beq.n	8005c24 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c14:	4b39      	ldr	r3, [pc, #228]	; (8005cfc <xQueueGenericSend+0x1f8>)
 8005c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c24:	f002 f8ee 	bl	8007e04 <vPortExitCritical>
				return pdPASS;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e063      	b.n	8005cf4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d103      	bne.n	8005c3a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c32:	f002 f8e7 	bl	8007e04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	e05c      	b.n	8005cf4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d106      	bne.n	8005c4e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c40:	f107 0314 	add.w	r3, r7, #20
 8005c44:	4618      	mov	r0, r3
 8005c46:	f001 f8ad 	bl	8006da4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c4e:	f002 f8d9 	bl	8007e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c52:	f000 fe19 	bl	8006888 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c56:	f002 f8a5 	bl	8007da4 <vPortEnterCritical>
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c60:	b25b      	sxtb	r3, r3
 8005c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c66:	d103      	bne.n	8005c70 <xQueueGenericSend+0x16c>
 8005c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c76:	b25b      	sxtb	r3, r3
 8005c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7c:	d103      	bne.n	8005c86 <xQueueGenericSend+0x182>
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c86:	f002 f8bd 	bl	8007e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c8a:	1d3a      	adds	r2, r7, #4
 8005c8c:	f107 0314 	add.w	r3, r7, #20
 8005c90:	4611      	mov	r1, r2
 8005c92:	4618      	mov	r0, r3
 8005c94:	f001 f89c 	bl	8006dd0 <xTaskCheckForTimeOut>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d124      	bne.n	8005ce8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ca0:	f000 faa2 	bl	80061e8 <prvIsQueueFull>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d018      	beq.n	8005cdc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	3310      	adds	r3, #16
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 ffc2 	bl	8006c3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cba:	f000 fa2d 	bl	8006118 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005cbe:	f000 fdf1 	bl	80068a4 <xTaskResumeAll>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f47f af7c 	bne.w	8005bc2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005cca:	4b0c      	ldr	r3, [pc, #48]	; (8005cfc <xQueueGenericSend+0x1f8>)
 8005ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	e772      	b.n	8005bc2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cde:	f000 fa1b 	bl	8006118 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ce2:	f000 fddf 	bl	80068a4 <xTaskResumeAll>
 8005ce6:	e76c      	b.n	8005bc2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cea:	f000 fa15 	bl	8006118 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cee:	f000 fdd9 	bl	80068a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005cf2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3738      	adds	r7, #56	; 0x38
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	e000ed04 	.word	0xe000ed04

08005d00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b090      	sub	sp, #64	; 0x40
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10a      	bne.n	8005d2e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d2a:	bf00      	nop
 8005d2c:	e7fe      	b.n	8005d2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d103      	bne.n	8005d3c <xQueueGenericSendFromISR+0x3c>
 8005d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <xQueueGenericSendFromISR+0x40>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e000      	b.n	8005d42 <xQueueGenericSendFromISR+0x42>
 8005d40:	2300      	movs	r3, #0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10a      	bne.n	8005d5c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d58:	bf00      	nop
 8005d5a:	e7fe      	b.n	8005d5a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d103      	bne.n	8005d6a <xQueueGenericSendFromISR+0x6a>
 8005d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d101      	bne.n	8005d6e <xQueueGenericSendFromISR+0x6e>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e000      	b.n	8005d70 <xQueueGenericSendFromISR+0x70>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10a      	bne.n	8005d8a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	623b      	str	r3, [r7, #32]
}
 8005d86:	bf00      	nop
 8005d88:	e7fe      	b.n	8005d88 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d8a:	f002 f8ed 	bl	8007f68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d8e:	f3ef 8211 	mrs	r2, BASEPRI
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	61fa      	str	r2, [r7, #28]
 8005da4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005da6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005da8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d302      	bcc.n	8005dbc <xQueueGenericSendFromISR+0xbc>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d12f      	bne.n	8005e1c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	68b9      	ldr	r1, [r7, #8]
 8005dd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005dd2:	f000 f911 	bl	8005ff8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005dd6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dde:	d112      	bne.n	8005e06 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d016      	beq.n	8005e16 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dea:	3324      	adds	r3, #36	; 0x24
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 ff75 	bl	8006cdc <xTaskRemoveFromEventList>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00e      	beq.n	8005e16 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00b      	beq.n	8005e16 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	e007      	b.n	8005e16 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	b25a      	sxtb	r2, r3
 8005e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e16:	2301      	movs	r3, #1
 8005e18:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005e1a:	e001      	b.n	8005e20 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e22:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e2a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3740      	adds	r7, #64	; 0x40
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
	...

08005e38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b08c      	sub	sp, #48	; 0x30
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e44:	2300      	movs	r3, #0
 8005e46:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10a      	bne.n	8005e68 <xQueueReceive+0x30>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	623b      	str	r3, [r7, #32]
}
 8005e64:	bf00      	nop
 8005e66:	e7fe      	b.n	8005e66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d103      	bne.n	8005e76 <xQueueReceive+0x3e>
 8005e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <xQueueReceive+0x42>
 8005e76:	2301      	movs	r3, #1
 8005e78:	e000      	b.n	8005e7c <xQueueReceive+0x44>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10a      	bne.n	8005e96 <xQueueReceive+0x5e>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	61fb      	str	r3, [r7, #28]
}
 8005e92:	bf00      	nop
 8005e94:	e7fe      	b.n	8005e94 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e96:	f001 f8e3 	bl	8007060 <xTaskGetSchedulerState>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d102      	bne.n	8005ea6 <xQueueReceive+0x6e>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <xQueueReceive+0x72>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e000      	b.n	8005eac <xQueueReceive+0x74>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10a      	bne.n	8005ec6 <xQueueReceive+0x8e>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	61bb      	str	r3, [r7, #24]
}
 8005ec2:	bf00      	nop
 8005ec4:	e7fe      	b.n	8005ec4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ec6:	f001 ff6d 	bl	8007da4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d01f      	beq.n	8005f16 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ed6:	68b9      	ldr	r1, [r7, #8]
 8005ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eda:	f000 f8f7 	bl	80060cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	1e5a      	subs	r2, r3, #1
 8005ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00f      	beq.n	8005f0e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef0:	3310      	adds	r3, #16
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 fef2 	bl	8006cdc <xTaskRemoveFromEventList>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d007      	beq.n	8005f0e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005efe:	4b3d      	ldr	r3, [pc, #244]	; (8005ff4 <xQueueReceive+0x1bc>)
 8005f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f0e:	f001 ff79 	bl	8007e04 <vPortExitCritical>
				return pdPASS;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e069      	b.n	8005fea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d103      	bne.n	8005f24 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f1c:	f001 ff72 	bl	8007e04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f20:	2300      	movs	r3, #0
 8005f22:	e062      	b.n	8005fea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d106      	bne.n	8005f38 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f2a:	f107 0310 	add.w	r3, r7, #16
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 ff38 	bl	8006da4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f34:	2301      	movs	r3, #1
 8005f36:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f38:	f001 ff64 	bl	8007e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f3c:	f000 fca4 	bl	8006888 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f40:	f001 ff30 	bl	8007da4 <vPortEnterCritical>
 8005f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f4a:	b25b      	sxtb	r3, r3
 8005f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f50:	d103      	bne.n	8005f5a <xQueueReceive+0x122>
 8005f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f60:	b25b      	sxtb	r3, r3
 8005f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f66:	d103      	bne.n	8005f70 <xQueueReceive+0x138>
 8005f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f70:	f001 ff48 	bl	8007e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f74:	1d3a      	adds	r2, r7, #4
 8005f76:	f107 0310 	add.w	r3, r7, #16
 8005f7a:	4611      	mov	r1, r2
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 ff27 	bl	8006dd0 <xTaskCheckForTimeOut>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d123      	bne.n	8005fd0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f8a:	f000 f917 	bl	80061bc <prvIsQueueEmpty>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d017      	beq.n	8005fc4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f96:	3324      	adds	r3, #36	; 0x24
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	4611      	mov	r1, r2
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 fe4d 	bl	8006c3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fa4:	f000 f8b8 	bl	8006118 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fa8:	f000 fc7c 	bl	80068a4 <xTaskResumeAll>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d189      	bne.n	8005ec6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005fb2:	4b10      	ldr	r3, [pc, #64]	; (8005ff4 <xQueueReceive+0x1bc>)
 8005fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	e780      	b.n	8005ec6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fc6:	f000 f8a7 	bl	8006118 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fca:	f000 fc6b 	bl	80068a4 <xTaskResumeAll>
 8005fce:	e77a      	b.n	8005ec6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005fd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fd2:	f000 f8a1 	bl	8006118 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fd6:	f000 fc65 	bl	80068a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fdc:	f000 f8ee 	bl	80061bc <prvIsQueueEmpty>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f43f af6f 	beq.w	8005ec6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005fe8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3730      	adds	r7, #48	; 0x30
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	e000ed04 	.word	0xe000ed04

08005ff8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006004:	2300      	movs	r3, #0
 8006006:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10d      	bne.n	8006032 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d14d      	bne.n	80060ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	4618      	mov	r0, r3
 8006024:	f001 f83a 	bl	800709c <xTaskPriorityDisinherit>
 8006028:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	609a      	str	r2, [r3, #8]
 8006030:	e043      	b.n	80060ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d119      	bne.n	800606c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6858      	ldr	r0, [r3, #4]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006040:	461a      	mov	r2, r3
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	f002 f9fa 	bl	800843c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006050:	441a      	add	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	429a      	cmp	r2, r3
 8006060:	d32b      	bcc.n	80060ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	605a      	str	r2, [r3, #4]
 800606a:	e026      	b.n	80060ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	68d8      	ldr	r0, [r3, #12]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006074:	461a      	mov	r2, r3
 8006076:	68b9      	ldr	r1, [r7, #8]
 8006078:	f002 f9e0 	bl	800843c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	68da      	ldr	r2, [r3, #12]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006084:	425b      	negs	r3, r3
 8006086:	441a      	add	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	68da      	ldr	r2, [r3, #12]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	429a      	cmp	r2, r3
 8006096:	d207      	bcs.n	80060a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	689a      	ldr	r2, [r3, #8]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a0:	425b      	negs	r3, r3
 80060a2:	441a      	add	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d105      	bne.n	80060ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	3b01      	subs	r3, #1
 80060b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80060c2:	697b      	ldr	r3, [r7, #20]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d018      	beq.n	8006110 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e6:	441a      	add	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68da      	ldr	r2, [r3, #12]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d303      	bcc.n	8006100 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68d9      	ldr	r1, [r3, #12]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006108:	461a      	mov	r2, r3
 800610a:	6838      	ldr	r0, [r7, #0]
 800610c:	f002 f996 	bl	800843c <memcpy>
	}
}
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006120:	f001 fe40 	bl	8007da4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800612a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800612c:	e011      	b.n	8006152 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006132:	2b00      	cmp	r3, #0
 8006134:	d012      	beq.n	800615c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	3324      	adds	r3, #36	; 0x24
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fdce 	bl	8006cdc <xTaskRemoveFromEventList>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006146:	f000 fea5 	bl	8006e94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800614a:	7bfb      	ldrb	r3, [r7, #15]
 800614c:	3b01      	subs	r3, #1
 800614e:	b2db      	uxtb	r3, r3
 8006150:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006156:	2b00      	cmp	r3, #0
 8006158:	dce9      	bgt.n	800612e <prvUnlockQueue+0x16>
 800615a:	e000      	b.n	800615e <prvUnlockQueue+0x46>
					break;
 800615c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	22ff      	movs	r2, #255	; 0xff
 8006162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006166:	f001 fe4d 	bl	8007e04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800616a:	f001 fe1b 	bl	8007da4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006174:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006176:	e011      	b.n	800619c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d012      	beq.n	80061a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3310      	adds	r3, #16
 8006184:	4618      	mov	r0, r3
 8006186:	f000 fda9 	bl	8006cdc <xTaskRemoveFromEventList>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006190:	f000 fe80 	bl	8006e94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006194:	7bbb      	ldrb	r3, [r7, #14]
 8006196:	3b01      	subs	r3, #1
 8006198:	b2db      	uxtb	r3, r3
 800619a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800619c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	dce9      	bgt.n	8006178 <prvUnlockQueue+0x60>
 80061a4:	e000      	b.n	80061a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80061a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	22ff      	movs	r2, #255	; 0xff
 80061ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80061b0:	f001 fe28 	bl	8007e04 <vPortExitCritical>
}
 80061b4:	bf00      	nop
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061c4:	f001 fdee 	bl	8007da4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d102      	bne.n	80061d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80061d0:	2301      	movs	r3, #1
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	e001      	b.n	80061da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061da:	f001 fe13 	bl	8007e04 <vPortExitCritical>

	return xReturn;
 80061de:	68fb      	ldr	r3, [r7, #12]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061f0:	f001 fdd8 	bl	8007da4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d102      	bne.n	8006206 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006200:	2301      	movs	r3, #1
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	e001      	b.n	800620a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006206:	2300      	movs	r3, #0
 8006208:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800620a:	f001 fdfb 	bl	8007e04 <vPortExitCritical>

	return xReturn;
 800620e:	68fb      	ldr	r3, [r7, #12]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	e014      	b.n	8006252 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006228:	4a0f      	ldr	r2, [pc, #60]	; (8006268 <vQueueAddToRegistry+0x50>)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10b      	bne.n	800624c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006234:	490c      	ldr	r1, [pc, #48]	; (8006268 <vQueueAddToRegistry+0x50>)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800623e:	4a0a      	ldr	r2, [pc, #40]	; (8006268 <vQueueAddToRegistry+0x50>)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	4413      	add	r3, r2
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800624a:	e006      	b.n	800625a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	3301      	adds	r3, #1
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2b07      	cmp	r3, #7
 8006256:	d9e7      	bls.n	8006228 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006258:	bf00      	nop
 800625a:	bf00      	nop
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	20002130 	.word	0x20002130

0800626c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800627c:	f001 fd92 	bl	8007da4 <vPortEnterCritical>
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006286:	b25b      	sxtb	r3, r3
 8006288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628c:	d103      	bne.n	8006296 <vQueueWaitForMessageRestricted+0x2a>
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800629c:	b25b      	sxtb	r3, r3
 800629e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a2:	d103      	bne.n	80062ac <vQueueWaitForMessageRestricted+0x40>
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062ac:	f001 fdaa 	bl	8007e04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d106      	bne.n	80062c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	3324      	adds	r3, #36	; 0x24
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	68b9      	ldr	r1, [r7, #8]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f000 fcdf 	bl	8006c84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80062c6:	6978      	ldr	r0, [r7, #20]
 80062c8:	f7ff ff26 	bl	8006118 <prvUnlockQueue>
	}
 80062cc:	bf00      	nop
 80062ce:	3718      	adds	r7, #24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b08e      	sub	sp, #56	; 0x38
 80062d8:	af04      	add	r7, sp, #16
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
 80062e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80062e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10a      	bne.n	80062fe <xTaskCreateStatic+0x2a>
	__asm volatile
 80062e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ec:	f383 8811 	msr	BASEPRI, r3
 80062f0:	f3bf 8f6f 	isb	sy
 80062f4:	f3bf 8f4f 	dsb	sy
 80062f8:	623b      	str	r3, [r7, #32]
}
 80062fa:	bf00      	nop
 80062fc:	e7fe      	b.n	80062fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80062fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10a      	bne.n	800631a <xTaskCreateStatic+0x46>
	__asm volatile
 8006304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	61fb      	str	r3, [r7, #28]
}
 8006316:	bf00      	nop
 8006318:	e7fe      	b.n	8006318 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800631a:	23bc      	movs	r3, #188	; 0xbc
 800631c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	2bbc      	cmp	r3, #188	; 0xbc
 8006322:	d00a      	beq.n	800633a <xTaskCreateStatic+0x66>
	__asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	61bb      	str	r3, [r7, #24]
}
 8006336:	bf00      	nop
 8006338:	e7fe      	b.n	8006338 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800633a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800633c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633e:	2b00      	cmp	r3, #0
 8006340:	d01e      	beq.n	8006380 <xTaskCreateStatic+0xac>
 8006342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006344:	2b00      	cmp	r3, #0
 8006346:	d01b      	beq.n	8006380 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006350:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	2202      	movs	r2, #2
 8006356:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800635a:	2300      	movs	r3, #0
 800635c:	9303      	str	r3, [sp, #12]
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	9302      	str	r3, [sp, #8]
 8006362:	f107 0314 	add.w	r3, r7, #20
 8006366:	9301      	str	r3, [sp, #4]
 8006368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	68b9      	ldr	r1, [r7, #8]
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 f850 	bl	8006418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006378:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800637a:	f000 f8f3 	bl	8006564 <prvAddNewTaskToReadyList>
 800637e:	e001      	b.n	8006384 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006380:	2300      	movs	r3, #0
 8006382:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006384:	697b      	ldr	r3, [r7, #20]
	}
 8006386:	4618      	mov	r0, r3
 8006388:	3728      	adds	r7, #40	; 0x28
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800638e:	b580      	push	{r7, lr}
 8006390:	b08c      	sub	sp, #48	; 0x30
 8006392:	af04      	add	r7, sp, #16
 8006394:	60f8      	str	r0, [r7, #12]
 8006396:	60b9      	str	r1, [r7, #8]
 8006398:	603b      	str	r3, [r7, #0]
 800639a:	4613      	mov	r3, r2
 800639c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800639e:	88fb      	ldrh	r3, [r7, #6]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4618      	mov	r0, r3
 80063a4:	f001 fe20 	bl	8007fe8 <pvPortMalloc>
 80063a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00e      	beq.n	80063ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80063b0:	20bc      	movs	r0, #188	; 0xbc
 80063b2:	f001 fe19 	bl	8007fe8 <pvPortMalloc>
 80063b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	631a      	str	r2, [r3, #48]	; 0x30
 80063c4:	e005      	b.n	80063d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80063c6:	6978      	ldr	r0, [r7, #20]
 80063c8:	f001 feda 	bl	8008180 <vPortFree>
 80063cc:	e001      	b.n	80063d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80063ce:	2300      	movs	r3, #0
 80063d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d017      	beq.n	8006408 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80063e0:	88fa      	ldrh	r2, [r7, #6]
 80063e2:	2300      	movs	r3, #0
 80063e4:	9303      	str	r3, [sp, #12]
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	9302      	str	r3, [sp, #8]
 80063ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ec:	9301      	str	r3, [sp, #4]
 80063ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68b9      	ldr	r1, [r7, #8]
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f000 f80e 	bl	8006418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063fc:	69f8      	ldr	r0, [r7, #28]
 80063fe:	f000 f8b1 	bl	8006564 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006402:	2301      	movs	r3, #1
 8006404:	61bb      	str	r3, [r7, #24]
 8006406:	e002      	b.n	800640e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006408:	f04f 33ff 	mov.w	r3, #4294967295
 800640c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800640e:	69bb      	ldr	r3, [r7, #24]
	}
 8006410:	4618      	mov	r0, r3
 8006412:	3720      	adds	r7, #32
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b088      	sub	sp, #32
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
 8006424:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006428:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	461a      	mov	r2, r3
 8006430:	21a5      	movs	r1, #165	; 0xa5
 8006432:	f002 f811 	bl	8008458 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006440:	3b01      	subs	r3, #1
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	f023 0307 	bic.w	r3, r3, #7
 800644e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	f003 0307 	and.w	r3, r3, #7
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <prvInitialiseNewTask+0x58>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	617b      	str	r3, [r7, #20]
}
 800646c:	bf00      	nop
 800646e:	e7fe      	b.n	800646e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d01f      	beq.n	80064b6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006476:	2300      	movs	r3, #0
 8006478:	61fb      	str	r3, [r7, #28]
 800647a:	e012      	b.n	80064a2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	4413      	add	r3, r2
 8006482:	7819      	ldrb	r1, [r3, #0]
 8006484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	4413      	add	r3, r2
 800648a:	3334      	adds	r3, #52	; 0x34
 800648c:	460a      	mov	r2, r1
 800648e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	4413      	add	r3, r2
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d006      	beq.n	80064aa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	3301      	adds	r3, #1
 80064a0:	61fb      	str	r3, [r7, #28]
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	2b0f      	cmp	r3, #15
 80064a6:	d9e9      	bls.n	800647c <prvInitialiseNewTask+0x64>
 80064a8:	e000      	b.n	80064ac <prvInitialiseNewTask+0x94>
			{
				break;
 80064aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064b4:	e003      	b.n	80064be <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80064b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80064be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c0:	2b37      	cmp	r3, #55	; 0x37
 80064c2:	d901      	bls.n	80064c8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80064c4:	2337      	movs	r3, #55	; 0x37
 80064c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80064ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80064d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d6:	2200      	movs	r2, #0
 80064d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	3304      	adds	r3, #4
 80064de:	4618      	mov	r0, r3
 80064e0:	f7ff f978 	bl	80057d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80064e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e6:	3318      	adds	r3, #24
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7ff f973 	bl	80057d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80064ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006502:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006506:	2200      	movs	r2, #0
 8006508:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	2200      	movs	r2, #0
 8006510:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	3354      	adds	r3, #84	; 0x54
 8006518:	2260      	movs	r2, #96	; 0x60
 800651a:	2100      	movs	r1, #0
 800651c:	4618      	mov	r0, r3
 800651e:	f001 ff9b 	bl	8008458 <memset>
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	4a0c      	ldr	r2, [pc, #48]	; (8006558 <prvInitialiseNewTask+0x140>)
 8006526:	659a      	str	r2, [r3, #88]	; 0x58
 8006528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652a:	4a0c      	ldr	r2, [pc, #48]	; (800655c <prvInitialiseNewTask+0x144>)
 800652c:	65da      	str	r2, [r3, #92]	; 0x5c
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	4a0b      	ldr	r2, [pc, #44]	; (8006560 <prvInitialiseNewTask+0x148>)
 8006532:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	68f9      	ldr	r1, [r7, #12]
 8006538:	69b8      	ldr	r0, [r7, #24]
 800653a:	f001 fb03 	bl	8007b44 <pxPortInitialiseStack>
 800653e:	4602      	mov	r2, r0
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800654e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006550:	bf00      	nop
 8006552:	3720      	adds	r7, #32
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	08008820 	.word	0x08008820
 800655c:	08008840 	.word	0x08008840
 8006560:	08008800 	.word	0x08008800

08006564 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800656c:	f001 fc1a 	bl	8007da4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006570:	4b2d      	ldr	r3, [pc, #180]	; (8006628 <prvAddNewTaskToReadyList+0xc4>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3301      	adds	r3, #1
 8006576:	4a2c      	ldr	r2, [pc, #176]	; (8006628 <prvAddNewTaskToReadyList+0xc4>)
 8006578:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800657a:	4b2c      	ldr	r3, [pc, #176]	; (800662c <prvAddNewTaskToReadyList+0xc8>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d109      	bne.n	8006596 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006582:	4a2a      	ldr	r2, [pc, #168]	; (800662c <prvAddNewTaskToReadyList+0xc8>)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006588:	4b27      	ldr	r3, [pc, #156]	; (8006628 <prvAddNewTaskToReadyList+0xc4>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d110      	bne.n	80065b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006590:	f000 fca4 	bl	8006edc <prvInitialiseTaskLists>
 8006594:	e00d      	b.n	80065b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006596:	4b26      	ldr	r3, [pc, #152]	; (8006630 <prvAddNewTaskToReadyList+0xcc>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d109      	bne.n	80065b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800659e:	4b23      	ldr	r3, [pc, #140]	; (800662c <prvAddNewTaskToReadyList+0xc8>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d802      	bhi.n	80065b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80065ac:	4a1f      	ldr	r2, [pc, #124]	; (800662c <prvAddNewTaskToReadyList+0xc8>)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80065b2:	4b20      	ldr	r3, [pc, #128]	; (8006634 <prvAddNewTaskToReadyList+0xd0>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3301      	adds	r3, #1
 80065b8:	4a1e      	ldr	r2, [pc, #120]	; (8006634 <prvAddNewTaskToReadyList+0xd0>)
 80065ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80065bc:	4b1d      	ldr	r3, [pc, #116]	; (8006634 <prvAddNewTaskToReadyList+0xd0>)
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c8:	4b1b      	ldr	r3, [pc, #108]	; (8006638 <prvAddNewTaskToReadyList+0xd4>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d903      	bls.n	80065d8 <prvAddNewTaskToReadyList+0x74>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d4:	4a18      	ldr	r2, [pc, #96]	; (8006638 <prvAddNewTaskToReadyList+0xd4>)
 80065d6:	6013      	str	r3, [r2, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065dc:	4613      	mov	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4a15      	ldr	r2, [pc, #84]	; (800663c <prvAddNewTaskToReadyList+0xd8>)
 80065e6:	441a      	add	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3304      	adds	r3, #4
 80065ec:	4619      	mov	r1, r3
 80065ee:	4610      	mov	r0, r2
 80065f0:	f7ff f8fd 	bl	80057ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80065f4:	f001 fc06 	bl	8007e04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80065f8:	4b0d      	ldr	r3, [pc, #52]	; (8006630 <prvAddNewTaskToReadyList+0xcc>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00e      	beq.n	800661e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006600:	4b0a      	ldr	r3, [pc, #40]	; (800662c <prvAddNewTaskToReadyList+0xc8>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660a:	429a      	cmp	r2, r3
 800660c:	d207      	bcs.n	800661e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800660e:	4b0c      	ldr	r3, [pc, #48]	; (8006640 <prvAddNewTaskToReadyList+0xdc>)
 8006610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800661e:	bf00      	nop
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	20000ce0 	.word	0x20000ce0
 800662c:	2000080c 	.word	0x2000080c
 8006630:	20000cec 	.word	0x20000cec
 8006634:	20000cfc 	.word	0x20000cfc
 8006638:	20000ce8 	.word	0x20000ce8
 800663c:	20000810 	.word	0x20000810
 8006640:	e000ed04 	.word	0xe000ed04

08006644 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006644:	b580      	push	{r7, lr}
 8006646:	b08a      	sub	sp, #40	; 0x28
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800664e:	2300      	movs	r3, #0
 8006650:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10a      	bne.n	800666e <vTaskDelayUntil+0x2a>
	__asm volatile
 8006658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	617b      	str	r3, [r7, #20]
}
 800666a:	bf00      	nop
 800666c:	e7fe      	b.n	800666c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10a      	bne.n	800668a <vTaskDelayUntil+0x46>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	613b      	str	r3, [r7, #16]
}
 8006686:	bf00      	nop
 8006688:	e7fe      	b.n	8006688 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800668a:	4b2a      	ldr	r3, [pc, #168]	; (8006734 <vTaskDelayUntil+0xf0>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00a      	beq.n	80066a8 <vTaskDelayUntil+0x64>
	__asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	60fb      	str	r3, [r7, #12]
}
 80066a4:	bf00      	nop
 80066a6:	e7fe      	b.n	80066a6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80066a8:	f000 f8ee 	bl	8006888 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80066ac:	4b22      	ldr	r3, [pc, #136]	; (8006738 <vTaskDelayUntil+0xf4>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	4413      	add	r3, r2
 80066ba:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6a3a      	ldr	r2, [r7, #32]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d20b      	bcs.n	80066de <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d211      	bcs.n	80066f4 <vTaskDelayUntil+0xb0>
 80066d0:	69fa      	ldr	r2, [r7, #28]
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d90d      	bls.n	80066f4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80066d8:	2301      	movs	r3, #1
 80066da:	627b      	str	r3, [r7, #36]	; 0x24
 80066dc:	e00a      	b.n	80066f4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	69fa      	ldr	r2, [r7, #28]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d303      	bcc.n	80066f0 <vTaskDelayUntil+0xac>
 80066e8:	69fa      	ldr	r2, [r7, #28]
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d901      	bls.n	80066f4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80066f0:	2301      	movs	r3, #1
 80066f2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	69fa      	ldr	r2, [r7, #28]
 80066f8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d006      	beq.n	800670e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006700:	69fa      	ldr	r2, [r7, #28]
 8006702:	6a3b      	ldr	r3, [r7, #32]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	2100      	movs	r1, #0
 8006708:	4618      	mov	r0, r3
 800670a:	f000 fe79 	bl	8007400 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800670e:	f000 f8c9 	bl	80068a4 <xTaskResumeAll>
 8006712:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d107      	bne.n	800672a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800671a:	4b08      	ldr	r3, [pc, #32]	; (800673c <vTaskDelayUntil+0xf8>)
 800671c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800672a:	bf00      	nop
 800672c:	3728      	adds	r7, #40	; 0x28
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	20000d08 	.word	0x20000d08
 8006738:	20000ce4 	.word	0x20000ce4
 800673c:	e000ed04 	.word	0xe000ed04

08006740 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006748:	2300      	movs	r3, #0
 800674a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d017      	beq.n	8006782 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006752:	4b13      	ldr	r3, [pc, #76]	; (80067a0 <vTaskDelay+0x60>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00a      	beq.n	8006770 <vTaskDelay+0x30>
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	60bb      	str	r3, [r7, #8]
}
 800676c:	bf00      	nop
 800676e:	e7fe      	b.n	800676e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006770:	f000 f88a 	bl	8006888 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006774:	2100      	movs	r1, #0
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fe42 	bl	8007400 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800677c:	f000 f892 	bl	80068a4 <xTaskResumeAll>
 8006780:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d107      	bne.n	8006798 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006788:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <vTaskDelay+0x64>)
 800678a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800678e:	601a      	str	r2, [r3, #0]
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006798:	bf00      	nop
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	20000d08 	.word	0x20000d08
 80067a4:	e000ed04 	.word	0xe000ed04

080067a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08a      	sub	sp, #40	; 0x28
 80067ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067b6:	463a      	mov	r2, r7
 80067b8:	1d39      	adds	r1, r7, #4
 80067ba:	f107 0308 	add.w	r3, r7, #8
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fe ffb4 	bl	800572c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067c4:	6839      	ldr	r1, [r7, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	9202      	str	r2, [sp, #8]
 80067cc:	9301      	str	r3, [sp, #4]
 80067ce:	2300      	movs	r3, #0
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	2300      	movs	r3, #0
 80067d4:	460a      	mov	r2, r1
 80067d6:	4924      	ldr	r1, [pc, #144]	; (8006868 <vTaskStartScheduler+0xc0>)
 80067d8:	4824      	ldr	r0, [pc, #144]	; (800686c <vTaskStartScheduler+0xc4>)
 80067da:	f7ff fd7b 	bl	80062d4 <xTaskCreateStatic>
 80067de:	4603      	mov	r3, r0
 80067e0:	4a23      	ldr	r2, [pc, #140]	; (8006870 <vTaskStartScheduler+0xc8>)
 80067e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80067e4:	4b22      	ldr	r3, [pc, #136]	; (8006870 <vTaskStartScheduler+0xc8>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80067ec:	2301      	movs	r3, #1
 80067ee:	617b      	str	r3, [r7, #20]
 80067f0:	e001      	b.n	80067f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80067f2:	2300      	movs	r3, #0
 80067f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d102      	bne.n	8006802 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80067fc:	f000 fe54 	bl	80074a8 <xTimerCreateTimerTask>
 8006800:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d11b      	bne.n	8006840 <vTaskStartScheduler+0x98>
	__asm volatile
 8006808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	613b      	str	r3, [r7, #16]
}
 800681a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800681c:	4b15      	ldr	r3, [pc, #84]	; (8006874 <vTaskStartScheduler+0xcc>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3354      	adds	r3, #84	; 0x54
 8006822:	4a15      	ldr	r2, [pc, #84]	; (8006878 <vTaskStartScheduler+0xd0>)
 8006824:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006826:	4b15      	ldr	r3, [pc, #84]	; (800687c <vTaskStartScheduler+0xd4>)
 8006828:	f04f 32ff 	mov.w	r2, #4294967295
 800682c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800682e:	4b14      	ldr	r3, [pc, #80]	; (8006880 <vTaskStartScheduler+0xd8>)
 8006830:	2201      	movs	r2, #1
 8006832:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006834:	4b13      	ldr	r3, [pc, #76]	; (8006884 <vTaskStartScheduler+0xdc>)
 8006836:	2200      	movs	r2, #0
 8006838:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800683a:	f001 fa11 	bl	8007c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800683e:	e00e      	b.n	800685e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006846:	d10a      	bne.n	800685e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	60fb      	str	r3, [r7, #12]
}
 800685a:	bf00      	nop
 800685c:	e7fe      	b.n	800685c <vTaskStartScheduler+0xb4>
}
 800685e:	bf00      	nop
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	080086e4 	.word	0x080086e4
 800686c:	08006ead 	.word	0x08006ead
 8006870:	20000d04 	.word	0x20000d04
 8006874:	2000080c 	.word	0x2000080c
 8006878:	20000010 	.word	0x20000010
 800687c:	20000d00 	.word	0x20000d00
 8006880:	20000cec 	.word	0x20000cec
 8006884:	20000ce4 	.word	0x20000ce4

08006888 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006888:	b480      	push	{r7}
 800688a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800688c:	4b04      	ldr	r3, [pc, #16]	; (80068a0 <vTaskSuspendAll+0x18>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3301      	adds	r3, #1
 8006892:	4a03      	ldr	r2, [pc, #12]	; (80068a0 <vTaskSuspendAll+0x18>)
 8006894:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006896:	bf00      	nop
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	20000d08 	.word	0x20000d08

080068a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80068aa:	2300      	movs	r3, #0
 80068ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80068ae:	2300      	movs	r3, #0
 80068b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80068b2:	4b42      	ldr	r3, [pc, #264]	; (80069bc <xTaskResumeAll+0x118>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10a      	bne.n	80068d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80068ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	603b      	str	r3, [r7, #0]
}
 80068cc:	bf00      	nop
 80068ce:	e7fe      	b.n	80068ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80068d0:	f001 fa68 	bl	8007da4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80068d4:	4b39      	ldr	r3, [pc, #228]	; (80069bc <xTaskResumeAll+0x118>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3b01      	subs	r3, #1
 80068da:	4a38      	ldr	r2, [pc, #224]	; (80069bc <xTaskResumeAll+0x118>)
 80068dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068de:	4b37      	ldr	r3, [pc, #220]	; (80069bc <xTaskResumeAll+0x118>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d162      	bne.n	80069ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80068e6:	4b36      	ldr	r3, [pc, #216]	; (80069c0 <xTaskResumeAll+0x11c>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d05e      	beq.n	80069ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068ee:	e02f      	b.n	8006950 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068f0:	4b34      	ldr	r3, [pc, #208]	; (80069c4 <xTaskResumeAll+0x120>)
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	3318      	adds	r3, #24
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fe ffd3 	bl	80058a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	3304      	adds	r3, #4
 8006906:	4618      	mov	r0, r3
 8006908:	f7fe ffce 	bl	80058a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006910:	4b2d      	ldr	r3, [pc, #180]	; (80069c8 <xTaskResumeAll+0x124>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	429a      	cmp	r2, r3
 8006916:	d903      	bls.n	8006920 <xTaskResumeAll+0x7c>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691c:	4a2a      	ldr	r2, [pc, #168]	; (80069c8 <xTaskResumeAll+0x124>)
 800691e:	6013      	str	r3, [r2, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006924:	4613      	mov	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4a27      	ldr	r2, [pc, #156]	; (80069cc <xTaskResumeAll+0x128>)
 800692e:	441a      	add	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	3304      	adds	r3, #4
 8006934:	4619      	mov	r1, r3
 8006936:	4610      	mov	r0, r2
 8006938:	f7fe ff59 	bl	80057ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006940:	4b23      	ldr	r3, [pc, #140]	; (80069d0 <xTaskResumeAll+0x12c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006946:	429a      	cmp	r2, r3
 8006948:	d302      	bcc.n	8006950 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800694a:	4b22      	ldr	r3, [pc, #136]	; (80069d4 <xTaskResumeAll+0x130>)
 800694c:	2201      	movs	r2, #1
 800694e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006950:	4b1c      	ldr	r3, [pc, #112]	; (80069c4 <xTaskResumeAll+0x120>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1cb      	bne.n	80068f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800695e:	f000 fb5f 	bl	8007020 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006962:	4b1d      	ldr	r3, [pc, #116]	; (80069d8 <xTaskResumeAll+0x134>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d010      	beq.n	8006990 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800696e:	f000 f847 	bl	8006a00 <xTaskIncrementTick>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d002      	beq.n	800697e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006978:	4b16      	ldr	r3, [pc, #88]	; (80069d4 <xTaskResumeAll+0x130>)
 800697a:	2201      	movs	r2, #1
 800697c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	3b01      	subs	r3, #1
 8006982:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1f1      	bne.n	800696e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800698a:	4b13      	ldr	r3, [pc, #76]	; (80069d8 <xTaskResumeAll+0x134>)
 800698c:	2200      	movs	r2, #0
 800698e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006990:	4b10      	ldr	r3, [pc, #64]	; (80069d4 <xTaskResumeAll+0x130>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d009      	beq.n	80069ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006998:	2301      	movs	r3, #1
 800699a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800699c:	4b0f      	ldr	r3, [pc, #60]	; (80069dc <xTaskResumeAll+0x138>)
 800699e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069ac:	f001 fa2a 	bl	8007e04 <vPortExitCritical>

	return xAlreadyYielded;
 80069b0:	68bb      	ldr	r3, [r7, #8]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	20000d08 	.word	0x20000d08
 80069c0:	20000ce0 	.word	0x20000ce0
 80069c4:	20000ca0 	.word	0x20000ca0
 80069c8:	20000ce8 	.word	0x20000ce8
 80069cc:	20000810 	.word	0x20000810
 80069d0:	2000080c 	.word	0x2000080c
 80069d4:	20000cf4 	.word	0x20000cf4
 80069d8:	20000cf0 	.word	0x20000cf0
 80069dc:	e000ed04 	.word	0xe000ed04

080069e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80069e6:	4b05      	ldr	r3, [pc, #20]	; (80069fc <xTaskGetTickCount+0x1c>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80069ec:	687b      	ldr	r3, [r7, #4]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	20000ce4 	.word	0x20000ce4

08006a00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a06:	2300      	movs	r3, #0
 8006a08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a0a:	4b4f      	ldr	r3, [pc, #316]	; (8006b48 <xTaskIncrementTick+0x148>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f040 808f 	bne.w	8006b32 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a14:	4b4d      	ldr	r3, [pc, #308]	; (8006b4c <xTaskIncrementTick+0x14c>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a1c:	4a4b      	ldr	r2, [pc, #300]	; (8006b4c <xTaskIncrementTick+0x14c>)
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d120      	bne.n	8006a6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a28:	4b49      	ldr	r3, [pc, #292]	; (8006b50 <xTaskIncrementTick+0x150>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00a      	beq.n	8006a48 <xTaskIncrementTick+0x48>
	__asm volatile
 8006a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	603b      	str	r3, [r7, #0]
}
 8006a44:	bf00      	nop
 8006a46:	e7fe      	b.n	8006a46 <xTaskIncrementTick+0x46>
 8006a48:	4b41      	ldr	r3, [pc, #260]	; (8006b50 <xTaskIncrementTick+0x150>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	60fb      	str	r3, [r7, #12]
 8006a4e:	4b41      	ldr	r3, [pc, #260]	; (8006b54 <xTaskIncrementTick+0x154>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a3f      	ldr	r2, [pc, #252]	; (8006b50 <xTaskIncrementTick+0x150>)
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	4a3f      	ldr	r2, [pc, #252]	; (8006b54 <xTaskIncrementTick+0x154>)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6013      	str	r3, [r2, #0]
 8006a5c:	4b3e      	ldr	r3, [pc, #248]	; (8006b58 <xTaskIncrementTick+0x158>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3301      	adds	r3, #1
 8006a62:	4a3d      	ldr	r2, [pc, #244]	; (8006b58 <xTaskIncrementTick+0x158>)
 8006a64:	6013      	str	r3, [r2, #0]
 8006a66:	f000 fadb 	bl	8007020 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a6a:	4b3c      	ldr	r3, [pc, #240]	; (8006b5c <xTaskIncrementTick+0x15c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d349      	bcc.n	8006b08 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a74:	4b36      	ldr	r3, [pc, #216]	; (8006b50 <xTaskIncrementTick+0x150>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d104      	bne.n	8006a88 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a7e:	4b37      	ldr	r3, [pc, #220]	; (8006b5c <xTaskIncrementTick+0x15c>)
 8006a80:	f04f 32ff 	mov.w	r2, #4294967295
 8006a84:	601a      	str	r2, [r3, #0]
					break;
 8006a86:	e03f      	b.n	8006b08 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a88:	4b31      	ldr	r3, [pc, #196]	; (8006b50 <xTaskIncrementTick+0x150>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d203      	bcs.n	8006aa8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006aa0:	4a2e      	ldr	r2, [pc, #184]	; (8006b5c <xTaskIncrementTick+0x15c>)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006aa6:	e02f      	b.n	8006b08 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fe fefb 	bl	80058a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d004      	beq.n	8006ac4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	3318      	adds	r3, #24
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fe fef2 	bl	80058a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac8:	4b25      	ldr	r3, [pc, #148]	; (8006b60 <xTaskIncrementTick+0x160>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d903      	bls.n	8006ad8 <xTaskIncrementTick+0xd8>
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	4a22      	ldr	r2, [pc, #136]	; (8006b60 <xTaskIncrementTick+0x160>)
 8006ad6:	6013      	str	r3, [r2, #0]
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006adc:	4613      	mov	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4a1f      	ldr	r2, [pc, #124]	; (8006b64 <xTaskIncrementTick+0x164>)
 8006ae6:	441a      	add	r2, r3
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	3304      	adds	r3, #4
 8006aec:	4619      	mov	r1, r3
 8006aee:	4610      	mov	r0, r2
 8006af0:	f7fe fe7d 	bl	80057ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af8:	4b1b      	ldr	r3, [pc, #108]	; (8006b68 <xTaskIncrementTick+0x168>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d3b8      	bcc.n	8006a74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006b02:	2301      	movs	r3, #1
 8006b04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b06:	e7b5      	b.n	8006a74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b08:	4b17      	ldr	r3, [pc, #92]	; (8006b68 <xTaskIncrementTick+0x168>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0e:	4915      	ldr	r1, [pc, #84]	; (8006b64 <xTaskIncrementTick+0x164>)
 8006b10:	4613      	mov	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	440b      	add	r3, r1
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d901      	bls.n	8006b24 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006b20:	2301      	movs	r3, #1
 8006b22:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b24:	4b11      	ldr	r3, [pc, #68]	; (8006b6c <xTaskIncrementTick+0x16c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d007      	beq.n	8006b3c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	e004      	b.n	8006b3c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b32:	4b0f      	ldr	r3, [pc, #60]	; (8006b70 <xTaskIncrementTick+0x170>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3301      	adds	r3, #1
 8006b38:	4a0d      	ldr	r2, [pc, #52]	; (8006b70 <xTaskIncrementTick+0x170>)
 8006b3a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b3c:	697b      	ldr	r3, [r7, #20]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	20000d08 	.word	0x20000d08
 8006b4c:	20000ce4 	.word	0x20000ce4
 8006b50:	20000c98 	.word	0x20000c98
 8006b54:	20000c9c 	.word	0x20000c9c
 8006b58:	20000cf8 	.word	0x20000cf8
 8006b5c:	20000d00 	.word	0x20000d00
 8006b60:	20000ce8 	.word	0x20000ce8
 8006b64:	20000810 	.word	0x20000810
 8006b68:	2000080c 	.word	0x2000080c
 8006b6c:	20000cf4 	.word	0x20000cf4
 8006b70:	20000cf0 	.word	0x20000cf0

08006b74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b7a:	4b2a      	ldr	r3, [pc, #168]	; (8006c24 <vTaskSwitchContext+0xb0>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b82:	4b29      	ldr	r3, [pc, #164]	; (8006c28 <vTaskSwitchContext+0xb4>)
 8006b84:	2201      	movs	r2, #1
 8006b86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b88:	e046      	b.n	8006c18 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006b8a:	4b27      	ldr	r3, [pc, #156]	; (8006c28 <vTaskSwitchContext+0xb4>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b90:	4b26      	ldr	r3, [pc, #152]	; (8006c2c <vTaskSwitchContext+0xb8>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	60fb      	str	r3, [r7, #12]
 8006b96:	e010      	b.n	8006bba <vTaskSwitchContext+0x46>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10a      	bne.n	8006bb4 <vTaskSwitchContext+0x40>
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	607b      	str	r3, [r7, #4]
}
 8006bb0:	bf00      	nop
 8006bb2:	e7fe      	b.n	8006bb2 <vTaskSwitchContext+0x3e>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	60fb      	str	r3, [r7, #12]
 8006bba:	491d      	ldr	r1, [pc, #116]	; (8006c30 <vTaskSwitchContext+0xbc>)
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	440b      	add	r3, r1
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0e4      	beq.n	8006b98 <vTaskSwitchContext+0x24>
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4a15      	ldr	r2, [pc, #84]	; (8006c30 <vTaskSwitchContext+0xbc>)
 8006bda:	4413      	add	r3, r2
 8006bdc:	60bb      	str	r3, [r7, #8]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	685a      	ldr	r2, [r3, #4]
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	605a      	str	r2, [r3, #4]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	3308      	adds	r3, #8
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d104      	bne.n	8006bfe <vTaskSwitchContext+0x8a>
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	605a      	str	r2, [r3, #4]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	4a0b      	ldr	r2, [pc, #44]	; (8006c34 <vTaskSwitchContext+0xc0>)
 8006c06:	6013      	str	r3, [r2, #0]
 8006c08:	4a08      	ldr	r2, [pc, #32]	; (8006c2c <vTaskSwitchContext+0xb8>)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c0e:	4b09      	ldr	r3, [pc, #36]	; (8006c34 <vTaskSwitchContext+0xc0>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	3354      	adds	r3, #84	; 0x54
 8006c14:	4a08      	ldr	r2, [pc, #32]	; (8006c38 <vTaskSwitchContext+0xc4>)
 8006c16:	6013      	str	r3, [r2, #0]
}
 8006c18:	bf00      	nop
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	20000d08 	.word	0x20000d08
 8006c28:	20000cf4 	.word	0x20000cf4
 8006c2c:	20000ce8 	.word	0x20000ce8
 8006c30:	20000810 	.word	0x20000810
 8006c34:	2000080c 	.word	0x2000080c
 8006c38:	20000010 	.word	0x20000010

08006c3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10a      	bne.n	8006c62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	60fb      	str	r3, [r7, #12]
}
 8006c5e:	bf00      	nop
 8006c60:	e7fe      	b.n	8006c60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c62:	4b07      	ldr	r3, [pc, #28]	; (8006c80 <vTaskPlaceOnEventList+0x44>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3318      	adds	r3, #24
 8006c68:	4619      	mov	r1, r3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7fe fde3 	bl	8005836 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c70:	2101      	movs	r1, #1
 8006c72:	6838      	ldr	r0, [r7, #0]
 8006c74:	f000 fbc4 	bl	8007400 <prvAddCurrentTaskToDelayedList>
}
 8006c78:	bf00      	nop
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	2000080c 	.word	0x2000080c

08006c84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10a      	bne.n	8006cac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	617b      	str	r3, [r7, #20]
}
 8006ca8:	bf00      	nop
 8006caa:	e7fe      	b.n	8006caa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cac:	4b0a      	ldr	r3, [pc, #40]	; (8006cd8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3318      	adds	r3, #24
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f7fe fd9a 	bl	80057ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cc4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006cc6:	6879      	ldr	r1, [r7, #4]
 8006cc8:	68b8      	ldr	r0, [r7, #8]
 8006cca:	f000 fb99 	bl	8007400 <prvAddCurrentTaskToDelayedList>
	}
 8006cce:	bf00      	nop
 8006cd0:	3718      	adds	r7, #24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	2000080c 	.word	0x2000080c

08006cdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10a      	bne.n	8006d08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	60fb      	str	r3, [r7, #12]
}
 8006d04:	bf00      	nop
 8006d06:	e7fe      	b.n	8006d06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	3318      	adds	r3, #24
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7fe fdcb 	bl	80058a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d12:	4b1e      	ldr	r3, [pc, #120]	; (8006d8c <xTaskRemoveFromEventList+0xb0>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d11d      	bne.n	8006d56 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fe fdc2 	bl	80058a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d28:	4b19      	ldr	r3, [pc, #100]	; (8006d90 <xTaskRemoveFromEventList+0xb4>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d903      	bls.n	8006d38 <xTaskRemoveFromEventList+0x5c>
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d34:	4a16      	ldr	r2, [pc, #88]	; (8006d90 <xTaskRemoveFromEventList+0xb4>)
 8006d36:	6013      	str	r3, [r2, #0]
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4a13      	ldr	r2, [pc, #76]	; (8006d94 <xTaskRemoveFromEventList+0xb8>)
 8006d46:	441a      	add	r2, r3
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	4610      	mov	r0, r2
 8006d50:	f7fe fd4d 	bl	80057ee <vListInsertEnd>
 8006d54:	e005      	b.n	8006d62 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	3318      	adds	r3, #24
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	480e      	ldr	r0, [pc, #56]	; (8006d98 <xTaskRemoveFromEventList+0xbc>)
 8006d5e:	f7fe fd46 	bl	80057ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d66:	4b0d      	ldr	r3, [pc, #52]	; (8006d9c <xTaskRemoveFromEventList+0xc0>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d905      	bls.n	8006d7c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d70:	2301      	movs	r3, #1
 8006d72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d74:	4b0a      	ldr	r3, [pc, #40]	; (8006da0 <xTaskRemoveFromEventList+0xc4>)
 8006d76:	2201      	movs	r2, #1
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	e001      	b.n	8006d80 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006d80:	697b      	ldr	r3, [r7, #20]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3718      	adds	r7, #24
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	20000d08 	.word	0x20000d08
 8006d90:	20000ce8 	.word	0x20000ce8
 8006d94:	20000810 	.word	0x20000810
 8006d98:	20000ca0 	.word	0x20000ca0
 8006d9c:	2000080c 	.word	0x2000080c
 8006da0:	20000cf4 	.word	0x20000cf4

08006da4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006dac:	4b06      	ldr	r3, [pc, #24]	; (8006dc8 <vTaskInternalSetTimeOutState+0x24>)
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006db4:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <vTaskInternalSetTimeOutState+0x28>)
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	605a      	str	r2, [r3, #4]
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	20000cf8 	.word	0x20000cf8
 8006dcc:	20000ce4 	.word	0x20000ce4

08006dd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b088      	sub	sp, #32
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10a      	bne.n	8006df6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	613b      	str	r3, [r7, #16]
}
 8006df2:	bf00      	nop
 8006df4:	e7fe      	b.n	8006df4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10a      	bne.n	8006e12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	60fb      	str	r3, [r7, #12]
}
 8006e0e:	bf00      	nop
 8006e10:	e7fe      	b.n	8006e10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006e12:	f000 ffc7 	bl	8007da4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e16:	4b1d      	ldr	r3, [pc, #116]	; (8006e8c <xTaskCheckForTimeOut+0xbc>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	69ba      	ldr	r2, [r7, #24]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2e:	d102      	bne.n	8006e36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e30:	2300      	movs	r3, #0
 8006e32:	61fb      	str	r3, [r7, #28]
 8006e34:	e023      	b.n	8006e7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	4b15      	ldr	r3, [pc, #84]	; (8006e90 <xTaskCheckForTimeOut+0xc0>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d007      	beq.n	8006e52 <xTaskCheckForTimeOut+0x82>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d302      	bcc.n	8006e52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	61fb      	str	r3, [r7, #28]
 8006e50:	e015      	b.n	8006e7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d20b      	bcs.n	8006e74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	1ad2      	subs	r2, r2, r3
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f7ff ff9b 	bl	8006da4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	61fb      	str	r3, [r7, #28]
 8006e72:	e004      	b.n	8006e7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	2200      	movs	r2, #0
 8006e78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e7e:	f000 ffc1 	bl	8007e04 <vPortExitCritical>

	return xReturn;
 8006e82:	69fb      	ldr	r3, [r7, #28]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3720      	adds	r7, #32
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	20000ce4 	.word	0x20000ce4
 8006e90:	20000cf8 	.word	0x20000cf8

08006e94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e94:	b480      	push	{r7}
 8006e96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e98:	4b03      	ldr	r3, [pc, #12]	; (8006ea8 <vTaskMissedYield+0x14>)
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	601a      	str	r2, [r3, #0]
}
 8006e9e:	bf00      	nop
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	20000cf4 	.word	0x20000cf4

08006eac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006eb4:	f000 f852 	bl	8006f5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006eb8:	4b06      	ldr	r3, [pc, #24]	; (8006ed4 <prvIdleTask+0x28>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d9f9      	bls.n	8006eb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ec0:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <prvIdleTask+0x2c>)
 8006ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ed0:	e7f0      	b.n	8006eb4 <prvIdleTask+0x8>
 8006ed2:	bf00      	nop
 8006ed4:	20000810 	.word	0x20000810
 8006ed8:	e000ed04 	.word	0xe000ed04

08006edc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	607b      	str	r3, [r7, #4]
 8006ee6:	e00c      	b.n	8006f02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	4613      	mov	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4a12      	ldr	r2, [pc, #72]	; (8006f3c <prvInitialiseTaskLists+0x60>)
 8006ef4:	4413      	add	r3, r2
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fe fc4c 	bl	8005794 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	3301      	adds	r3, #1
 8006f00:	607b      	str	r3, [r7, #4]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2b37      	cmp	r3, #55	; 0x37
 8006f06:	d9ef      	bls.n	8006ee8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f08:	480d      	ldr	r0, [pc, #52]	; (8006f40 <prvInitialiseTaskLists+0x64>)
 8006f0a:	f7fe fc43 	bl	8005794 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f0e:	480d      	ldr	r0, [pc, #52]	; (8006f44 <prvInitialiseTaskLists+0x68>)
 8006f10:	f7fe fc40 	bl	8005794 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f14:	480c      	ldr	r0, [pc, #48]	; (8006f48 <prvInitialiseTaskLists+0x6c>)
 8006f16:	f7fe fc3d 	bl	8005794 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f1a:	480c      	ldr	r0, [pc, #48]	; (8006f4c <prvInitialiseTaskLists+0x70>)
 8006f1c:	f7fe fc3a 	bl	8005794 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f20:	480b      	ldr	r0, [pc, #44]	; (8006f50 <prvInitialiseTaskLists+0x74>)
 8006f22:	f7fe fc37 	bl	8005794 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f26:	4b0b      	ldr	r3, [pc, #44]	; (8006f54 <prvInitialiseTaskLists+0x78>)
 8006f28:	4a05      	ldr	r2, [pc, #20]	; (8006f40 <prvInitialiseTaskLists+0x64>)
 8006f2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f2c:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <prvInitialiseTaskLists+0x7c>)
 8006f2e:	4a05      	ldr	r2, [pc, #20]	; (8006f44 <prvInitialiseTaskLists+0x68>)
 8006f30:	601a      	str	r2, [r3, #0]
}
 8006f32:	bf00      	nop
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	20000810 	.word	0x20000810
 8006f40:	20000c70 	.word	0x20000c70
 8006f44:	20000c84 	.word	0x20000c84
 8006f48:	20000ca0 	.word	0x20000ca0
 8006f4c:	20000cb4 	.word	0x20000cb4
 8006f50:	20000ccc 	.word	0x20000ccc
 8006f54:	20000c98 	.word	0x20000c98
 8006f58:	20000c9c 	.word	0x20000c9c

08006f5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f62:	e019      	b.n	8006f98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f64:	f000 ff1e 	bl	8007da4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f68:	4b10      	ldr	r3, [pc, #64]	; (8006fac <prvCheckTasksWaitingTermination+0x50>)
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	3304      	adds	r3, #4
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7fe fc97 	bl	80058a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f7a:	4b0d      	ldr	r3, [pc, #52]	; (8006fb0 <prvCheckTasksWaitingTermination+0x54>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	4a0b      	ldr	r2, [pc, #44]	; (8006fb0 <prvCheckTasksWaitingTermination+0x54>)
 8006f82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f84:	4b0b      	ldr	r3, [pc, #44]	; (8006fb4 <prvCheckTasksWaitingTermination+0x58>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	4a0a      	ldr	r2, [pc, #40]	; (8006fb4 <prvCheckTasksWaitingTermination+0x58>)
 8006f8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f8e:	f000 ff39 	bl	8007e04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f810 	bl	8006fb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f98:	4b06      	ldr	r3, [pc, #24]	; (8006fb4 <prvCheckTasksWaitingTermination+0x58>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1e1      	bne.n	8006f64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006fa0:	bf00      	nop
 8006fa2:	bf00      	nop
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	20000cb4 	.word	0x20000cb4
 8006fb0:	20000ce0 	.word	0x20000ce0
 8006fb4:	20000cc8 	.word	0x20000cc8

08006fb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	3354      	adds	r3, #84	; 0x54
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f001 fa5d 	bl	8008484 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d108      	bne.n	8006fe6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f001 f8d1 	bl	8008180 <vPortFree>
				vPortFree( pxTCB );
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f001 f8ce 	bl	8008180 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006fe4:	e018      	b.n	8007018 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d103      	bne.n	8006ff8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f001 f8c5 	bl	8008180 <vPortFree>
	}
 8006ff6:	e00f      	b.n	8007018 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d00a      	beq.n	8007018 <prvDeleteTCB+0x60>
	__asm volatile
 8007002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	60fb      	str	r3, [r7, #12]
}
 8007014:	bf00      	nop
 8007016:	e7fe      	b.n	8007016 <prvDeleteTCB+0x5e>
	}
 8007018:	bf00      	nop
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007026:	4b0c      	ldr	r3, [pc, #48]	; (8007058 <prvResetNextTaskUnblockTime+0x38>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d104      	bne.n	800703a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007030:	4b0a      	ldr	r3, [pc, #40]	; (800705c <prvResetNextTaskUnblockTime+0x3c>)
 8007032:	f04f 32ff 	mov.w	r2, #4294967295
 8007036:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007038:	e008      	b.n	800704c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800703a:	4b07      	ldr	r3, [pc, #28]	; (8007058 <prvResetNextTaskUnblockTime+0x38>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	4a04      	ldr	r2, [pc, #16]	; (800705c <prvResetNextTaskUnblockTime+0x3c>)
 800704a:	6013      	str	r3, [r2, #0]
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	20000c98 	.word	0x20000c98
 800705c:	20000d00 	.word	0x20000d00

08007060 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007066:	4b0b      	ldr	r3, [pc, #44]	; (8007094 <xTaskGetSchedulerState+0x34>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d102      	bne.n	8007074 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800706e:	2301      	movs	r3, #1
 8007070:	607b      	str	r3, [r7, #4]
 8007072:	e008      	b.n	8007086 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007074:	4b08      	ldr	r3, [pc, #32]	; (8007098 <xTaskGetSchedulerState+0x38>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d102      	bne.n	8007082 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800707c:	2302      	movs	r3, #2
 800707e:	607b      	str	r3, [r7, #4]
 8007080:	e001      	b.n	8007086 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007082:	2300      	movs	r3, #0
 8007084:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007086:	687b      	ldr	r3, [r7, #4]
	}
 8007088:	4618      	mov	r0, r3
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	20000cec 	.word	0x20000cec
 8007098:	20000d08 	.word	0x20000d08

0800709c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070a8:	2300      	movs	r3, #0
 80070aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d056      	beq.n	8007160 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80070b2:	4b2e      	ldr	r3, [pc, #184]	; (800716c <xTaskPriorityDisinherit+0xd0>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d00a      	beq.n	80070d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	60fb      	str	r3, [r7, #12]
}
 80070ce:	bf00      	nop
 80070d0:	e7fe      	b.n	80070d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10a      	bne.n	80070f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	60bb      	str	r3, [r7, #8]
}
 80070ec:	bf00      	nop
 80070ee:	e7fe      	b.n	80070ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f4:	1e5a      	subs	r2, r3, #1
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007102:	429a      	cmp	r2, r3
 8007104:	d02c      	beq.n	8007160 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800710a:	2b00      	cmp	r3, #0
 800710c:	d128      	bne.n	8007160 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	3304      	adds	r3, #4
 8007112:	4618      	mov	r0, r3
 8007114:	f7fe fbc8 	bl	80058a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007124:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007130:	4b0f      	ldr	r3, [pc, #60]	; (8007170 <xTaskPriorityDisinherit+0xd4>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	429a      	cmp	r2, r3
 8007136:	d903      	bls.n	8007140 <xTaskPriorityDisinherit+0xa4>
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713c:	4a0c      	ldr	r2, [pc, #48]	; (8007170 <xTaskPriorityDisinherit+0xd4>)
 800713e:	6013      	str	r3, [r2, #0]
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007144:	4613      	mov	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4a09      	ldr	r2, [pc, #36]	; (8007174 <xTaskPriorityDisinherit+0xd8>)
 800714e:	441a      	add	r2, r3
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	3304      	adds	r3, #4
 8007154:	4619      	mov	r1, r3
 8007156:	4610      	mov	r0, r2
 8007158:	f7fe fb49 	bl	80057ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800715c:	2301      	movs	r3, #1
 800715e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007160:	697b      	ldr	r3, [r7, #20]
	}
 8007162:	4618      	mov	r0, r3
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	2000080c 	.word	0x2000080c
 8007170:	20000ce8 	.word	0x20000ce8
 8007174:	20000810 	.word	0x20000810

08007178 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
 8007184:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007186:	f000 fe0d 	bl	8007da4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800718a:	4b29      	ldr	r3, [pc, #164]	; (8007230 <xTaskNotifyWait+0xb8>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b02      	cmp	r3, #2
 8007196:	d01c      	beq.n	80071d2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007198:	4b25      	ldr	r3, [pc, #148]	; (8007230 <xTaskNotifyWait+0xb8>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	43d2      	mvns	r2, r2
 80071a4:	400a      	ands	r2, r1
 80071a6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80071aa:	4b21      	ldr	r3, [pc, #132]	; (8007230 <xTaskNotifyWait+0xb8>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00b      	beq.n	80071d2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071ba:	2101      	movs	r1, #1
 80071bc:	6838      	ldr	r0, [r7, #0]
 80071be:	f000 f91f 	bl	8007400 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80071c2:	4b1c      	ldr	r3, [pc, #112]	; (8007234 <xTaskNotifyWait+0xbc>)
 80071c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071c8:	601a      	str	r2, [r3, #0]
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80071d2:	f000 fe17 	bl	8007e04 <vPortExitCritical>

		taskENTER_CRITICAL();
 80071d6:	f000 fde5 	bl	8007da4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d005      	beq.n	80071ec <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80071e0:	4b13      	ldr	r3, [pc, #76]	; (8007230 <xTaskNotifyWait+0xb8>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80071ec:	4b10      	ldr	r3, [pc, #64]	; (8007230 <xTaskNotifyWait+0xb8>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d002      	beq.n	8007200 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80071fa:	2300      	movs	r3, #0
 80071fc:	617b      	str	r3, [r7, #20]
 80071fe:	e00a      	b.n	8007216 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007200:	4b0b      	ldr	r3, [pc, #44]	; (8007230 <xTaskNotifyWait+0xb8>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	43d2      	mvns	r2, r2
 800720c:	400a      	ands	r2, r1
 800720e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8007212:	2301      	movs	r3, #1
 8007214:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007216:	4b06      	ldr	r3, [pc, #24]	; (8007230 <xTaskNotifyWait+0xb8>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8007220:	f000 fdf0 	bl	8007e04 <vPortExitCritical>

		return xReturn;
 8007224:	697b      	ldr	r3, [r7, #20]
	}
 8007226:	4618      	mov	r0, r3
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	2000080c 	.word	0x2000080c
 8007234:	e000ed04 	.word	0xe000ed04

08007238 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007238:	b580      	push	{r7, lr}
 800723a:	b08e      	sub	sp, #56	; 0x38
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	603b      	str	r3, [r7, #0]
 8007244:	4613      	mov	r3, r2
 8007246:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007248:	2301      	movs	r3, #1
 800724a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10a      	bne.n	8007268 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8007252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007256:	f383 8811 	msr	BASEPRI, r3
 800725a:	f3bf 8f6f 	isb	sy
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007264:	bf00      	nop
 8007266:	e7fe      	b.n	8007266 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007268:	f000 fe7e 	bl	8007f68 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8007270:	f3ef 8211 	mrs	r2, BASEPRI
 8007274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007278:	f383 8811 	msr	BASEPRI, r3
 800727c:	f3bf 8f6f 	isb	sy
 8007280:	f3bf 8f4f 	dsb	sy
 8007284:	623a      	str	r2, [r7, #32]
 8007286:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007288:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800728a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d004      	beq.n	800729c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800729c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80072a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80072a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a8:	2202      	movs	r2, #2
 80072aa:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 80072ae:	79fb      	ldrb	r3, [r7, #7]
 80072b0:	2b04      	cmp	r3, #4
 80072b2:	d82f      	bhi.n	8007314 <xTaskGenericNotifyFromISR+0xdc>
 80072b4:	a201      	add	r2, pc, #4	; (adr r2, 80072bc <xTaskGenericNotifyFromISR+0x84>)
 80072b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ba:	bf00      	nop
 80072bc:	08007337 	.word	0x08007337
 80072c0:	080072d1 	.word	0x080072d1
 80072c4:	080072e3 	.word	0x080072e3
 80072c8:	080072f3 	.word	0x080072f3
 80072cc:	080072fd 	.word	0x080072fd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80072d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	431a      	orrs	r2, r3
 80072da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072dc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80072e0:	e02c      	b.n	800733c <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80072e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80072e8:	1c5a      	adds	r2, r3, #1
 80072ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80072f0:	e024      	b.n	800733c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80072f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80072fa:	e01f      	b.n	800733c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80072fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007300:	2b02      	cmp	r3, #2
 8007302:	d004      	beq.n	800730e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800730c:	e016      	b.n	800733c <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800730e:	2300      	movs	r3, #0
 8007310:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8007312:	e013      	b.n	800733c <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007316:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800731a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731e:	d00c      	beq.n	800733a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	61bb      	str	r3, [r7, #24]
}
 8007332:	bf00      	nop
 8007334:	e7fe      	b.n	8007334 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8007336:	bf00      	nop
 8007338:	e000      	b.n	800733c <xTaskGenericNotifyFromISR+0x104>
					break;
 800733a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800733c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007340:	2b01      	cmp	r3, #1
 8007342:	d146      	bne.n	80073d2 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00a      	beq.n	8007362 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	617b      	str	r3, [r7, #20]
}
 800735e:	bf00      	nop
 8007360:	e7fe      	b.n	8007360 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007362:	4b21      	ldr	r3, [pc, #132]	; (80073e8 <xTaskGenericNotifyFromISR+0x1b0>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d11d      	bne.n	80073a6 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800736a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736c:	3304      	adds	r3, #4
 800736e:	4618      	mov	r0, r3
 8007370:	f7fe fa9a 	bl	80058a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007378:	4b1c      	ldr	r3, [pc, #112]	; (80073ec <xTaskGenericNotifyFromISR+0x1b4>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	429a      	cmp	r2, r3
 800737e:	d903      	bls.n	8007388 <xTaskGenericNotifyFromISR+0x150>
 8007380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	4a19      	ldr	r2, [pc, #100]	; (80073ec <xTaskGenericNotifyFromISR+0x1b4>)
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800738c:	4613      	mov	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4a16      	ldr	r2, [pc, #88]	; (80073f0 <xTaskGenericNotifyFromISR+0x1b8>)
 8007396:	441a      	add	r2, r3
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	3304      	adds	r3, #4
 800739c:	4619      	mov	r1, r3
 800739e:	4610      	mov	r0, r2
 80073a0:	f7fe fa25 	bl	80057ee <vListInsertEnd>
 80073a4:	e005      	b.n	80073b2 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	3318      	adds	r3, #24
 80073aa:	4619      	mov	r1, r3
 80073ac:	4811      	ldr	r0, [pc, #68]	; (80073f4 <xTaskGenericNotifyFromISR+0x1bc>)
 80073ae:	f7fe fa1e 	bl	80057ee <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b6:	4b10      	ldr	r3, [pc, #64]	; (80073f8 <xTaskGenericNotifyFromISR+0x1c0>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073bc:	429a      	cmp	r2, r3
 80073be:	d908      	bls.n	80073d2 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80073c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d002      	beq.n	80073cc <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80073c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073c8:	2201      	movs	r2, #1
 80073ca:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80073cc:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <xTaskGenericNotifyFromISR+0x1c4>)
 80073ce:	2201      	movs	r2, #1
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f383 8811 	msr	BASEPRI, r3
}
 80073dc:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80073de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3738      	adds	r7, #56	; 0x38
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	20000d08 	.word	0x20000d08
 80073ec:	20000ce8 	.word	0x20000ce8
 80073f0:	20000810 	.word	0x20000810
 80073f4:	20000ca0 	.word	0x20000ca0
 80073f8:	2000080c 	.word	0x2000080c
 80073fc:	20000cf4 	.word	0x20000cf4

08007400 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800740a:	4b21      	ldr	r3, [pc, #132]	; (8007490 <prvAddCurrentTaskToDelayedList+0x90>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007410:	4b20      	ldr	r3, [pc, #128]	; (8007494 <prvAddCurrentTaskToDelayedList+0x94>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	3304      	adds	r3, #4
 8007416:	4618      	mov	r0, r3
 8007418:	f7fe fa46 	bl	80058a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007422:	d10a      	bne.n	800743a <prvAddCurrentTaskToDelayedList+0x3a>
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d007      	beq.n	800743a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800742a:	4b1a      	ldr	r3, [pc, #104]	; (8007494 <prvAddCurrentTaskToDelayedList+0x94>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3304      	adds	r3, #4
 8007430:	4619      	mov	r1, r3
 8007432:	4819      	ldr	r0, [pc, #100]	; (8007498 <prvAddCurrentTaskToDelayedList+0x98>)
 8007434:	f7fe f9db 	bl	80057ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007438:	e026      	b.n	8007488 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4413      	add	r3, r2
 8007440:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007442:	4b14      	ldr	r3, [pc, #80]	; (8007494 <prvAddCurrentTaskToDelayedList+0x94>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	429a      	cmp	r2, r3
 8007450:	d209      	bcs.n	8007466 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007452:	4b12      	ldr	r3, [pc, #72]	; (800749c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	4b0f      	ldr	r3, [pc, #60]	; (8007494 <prvAddCurrentTaskToDelayedList+0x94>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3304      	adds	r3, #4
 800745c:	4619      	mov	r1, r3
 800745e:	4610      	mov	r0, r2
 8007460:	f7fe f9e9 	bl	8005836 <vListInsert>
}
 8007464:	e010      	b.n	8007488 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007466:	4b0e      	ldr	r3, [pc, #56]	; (80074a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	4b0a      	ldr	r3, [pc, #40]	; (8007494 <prvAddCurrentTaskToDelayedList+0x94>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	3304      	adds	r3, #4
 8007470:	4619      	mov	r1, r3
 8007472:	4610      	mov	r0, r2
 8007474:	f7fe f9df 	bl	8005836 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007478:	4b0a      	ldr	r3, [pc, #40]	; (80074a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	429a      	cmp	r2, r3
 8007480:	d202      	bcs.n	8007488 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007482:	4a08      	ldr	r2, [pc, #32]	; (80074a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	6013      	str	r3, [r2, #0]
}
 8007488:	bf00      	nop
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	20000ce4 	.word	0x20000ce4
 8007494:	2000080c 	.word	0x2000080c
 8007498:	20000ccc 	.word	0x20000ccc
 800749c:	20000c9c 	.word	0x20000c9c
 80074a0:	20000c98 	.word	0x20000c98
 80074a4:	20000d00 	.word	0x20000d00

080074a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b08a      	sub	sp, #40	; 0x28
 80074ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80074ae:	2300      	movs	r3, #0
 80074b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80074b2:	f000 fb07 	bl	8007ac4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80074b6:	4b1c      	ldr	r3, [pc, #112]	; (8007528 <xTimerCreateTimerTask+0x80>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d021      	beq.n	8007502 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80074be:	2300      	movs	r3, #0
 80074c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80074c6:	1d3a      	adds	r2, r7, #4
 80074c8:	f107 0108 	add.w	r1, r7, #8
 80074cc:	f107 030c 	add.w	r3, r7, #12
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7fe f945 	bl	8005760 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80074d6:	6879      	ldr	r1, [r7, #4]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	9202      	str	r2, [sp, #8]
 80074de:	9301      	str	r3, [sp, #4]
 80074e0:	2302      	movs	r3, #2
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	2300      	movs	r3, #0
 80074e6:	460a      	mov	r2, r1
 80074e8:	4910      	ldr	r1, [pc, #64]	; (800752c <xTimerCreateTimerTask+0x84>)
 80074ea:	4811      	ldr	r0, [pc, #68]	; (8007530 <xTimerCreateTimerTask+0x88>)
 80074ec:	f7fe fef2 	bl	80062d4 <xTaskCreateStatic>
 80074f0:	4603      	mov	r3, r0
 80074f2:	4a10      	ldr	r2, [pc, #64]	; (8007534 <xTimerCreateTimerTask+0x8c>)
 80074f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80074f6:	4b0f      	ldr	r3, [pc, #60]	; (8007534 <xTimerCreateTimerTask+0x8c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80074fe:	2301      	movs	r3, #1
 8007500:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10a      	bne.n	800751e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750c:	f383 8811 	msr	BASEPRI, r3
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	613b      	str	r3, [r7, #16]
}
 800751a:	bf00      	nop
 800751c:	e7fe      	b.n	800751c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800751e:	697b      	ldr	r3, [r7, #20]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3718      	adds	r7, #24
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	20000d3c 	.word	0x20000d3c
 800752c:	080086ec 	.word	0x080086ec
 8007530:	0800766d 	.word	0x0800766d
 8007534:	20000d40 	.word	0x20000d40

08007538 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b08a      	sub	sp, #40	; 0x28
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
 8007544:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007546:	2300      	movs	r3, #0
 8007548:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10a      	bne.n	8007566 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	623b      	str	r3, [r7, #32]
}
 8007562:	bf00      	nop
 8007564:	e7fe      	b.n	8007564 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007566:	4b1a      	ldr	r3, [pc, #104]	; (80075d0 <xTimerGenericCommand+0x98>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d02a      	beq.n	80075c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2b05      	cmp	r3, #5
 800757e:	dc18      	bgt.n	80075b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007580:	f7ff fd6e 	bl	8007060 <xTaskGetSchedulerState>
 8007584:	4603      	mov	r3, r0
 8007586:	2b02      	cmp	r3, #2
 8007588:	d109      	bne.n	800759e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800758a:	4b11      	ldr	r3, [pc, #68]	; (80075d0 <xTimerGenericCommand+0x98>)
 800758c:	6818      	ldr	r0, [r3, #0]
 800758e:	f107 0110 	add.w	r1, r7, #16
 8007592:	2300      	movs	r3, #0
 8007594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007596:	f7fe fab5 	bl	8005b04 <xQueueGenericSend>
 800759a:	6278      	str	r0, [r7, #36]	; 0x24
 800759c:	e012      	b.n	80075c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800759e:	4b0c      	ldr	r3, [pc, #48]	; (80075d0 <xTimerGenericCommand+0x98>)
 80075a0:	6818      	ldr	r0, [r3, #0]
 80075a2:	f107 0110 	add.w	r1, r7, #16
 80075a6:	2300      	movs	r3, #0
 80075a8:	2200      	movs	r2, #0
 80075aa:	f7fe faab 	bl	8005b04 <xQueueGenericSend>
 80075ae:	6278      	str	r0, [r7, #36]	; 0x24
 80075b0:	e008      	b.n	80075c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80075b2:	4b07      	ldr	r3, [pc, #28]	; (80075d0 <xTimerGenericCommand+0x98>)
 80075b4:	6818      	ldr	r0, [r3, #0]
 80075b6:	f107 0110 	add.w	r1, r7, #16
 80075ba:	2300      	movs	r3, #0
 80075bc:	683a      	ldr	r2, [r7, #0]
 80075be:	f7fe fb9f 	bl	8005d00 <xQueueGenericSendFromISR>
 80075c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80075c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3728      	adds	r7, #40	; 0x28
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	20000d3c 	.word	0x20000d3c

080075d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b088      	sub	sp, #32
 80075d8:	af02      	add	r7, sp, #8
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075de:	4b22      	ldr	r3, [pc, #136]	; (8007668 <prvProcessExpiredTimer+0x94>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	3304      	adds	r3, #4
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fe f95b 	bl	80058a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075f8:	f003 0304 	and.w	r3, r3, #4
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d022      	beq.n	8007646 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	699a      	ldr	r2, [r3, #24]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	18d1      	adds	r1, r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	6978      	ldr	r0, [r7, #20]
 800760e:	f000 f8d1 	bl	80077b4 <prvInsertTimerInActiveList>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d01f      	beq.n	8007658 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007618:	2300      	movs	r3, #0
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	2300      	movs	r3, #0
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	2100      	movs	r1, #0
 8007622:	6978      	ldr	r0, [r7, #20]
 8007624:	f7ff ff88 	bl	8007538 <xTimerGenericCommand>
 8007628:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d113      	bne.n	8007658 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	60fb      	str	r3, [r7, #12]
}
 8007642:	bf00      	nop
 8007644:	e7fe      	b.n	8007644 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800764c:	f023 0301 	bic.w	r3, r3, #1
 8007650:	b2da      	uxtb	r2, r3
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	6978      	ldr	r0, [r7, #20]
 800765e:	4798      	blx	r3
}
 8007660:	bf00      	nop
 8007662:	3718      	adds	r7, #24
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	20000d34 	.word	0x20000d34

0800766c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007674:	f107 0308 	add.w	r3, r7, #8
 8007678:	4618      	mov	r0, r3
 800767a:	f000 f857 	bl	800772c <prvGetNextExpireTime>
 800767e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	4619      	mov	r1, r3
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f000 f803 	bl	8007690 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800768a:	f000 f8d5 	bl	8007838 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800768e:	e7f1      	b.n	8007674 <prvTimerTask+0x8>

08007690 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800769a:	f7ff f8f5 	bl	8006888 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800769e:	f107 0308 	add.w	r3, r7, #8
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 f866 	bl	8007774 <prvSampleTimeNow>
 80076a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d130      	bne.n	8007712 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10a      	bne.n	80076cc <prvProcessTimerOrBlockTask+0x3c>
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d806      	bhi.n	80076cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80076be:	f7ff f8f1 	bl	80068a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80076c2:	68f9      	ldr	r1, [r7, #12]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7ff ff85 	bl	80075d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80076ca:	e024      	b.n	8007716 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d008      	beq.n	80076e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80076d2:	4b13      	ldr	r3, [pc, #76]	; (8007720 <prvProcessTimerOrBlockTask+0x90>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <prvProcessTimerOrBlockTask+0x50>
 80076dc:	2301      	movs	r3, #1
 80076de:	e000      	b.n	80076e2 <prvProcessTimerOrBlockTask+0x52>
 80076e0:	2300      	movs	r3, #0
 80076e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076e4:	4b0f      	ldr	r3, [pc, #60]	; (8007724 <prvProcessTimerOrBlockTask+0x94>)
 80076e6:	6818      	ldr	r0, [r3, #0]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	4619      	mov	r1, r3
 80076f2:	f7fe fdbb 	bl	800626c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80076f6:	f7ff f8d5 	bl	80068a4 <xTaskResumeAll>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10a      	bne.n	8007716 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007700:	4b09      	ldr	r3, [pc, #36]	; (8007728 <prvProcessTimerOrBlockTask+0x98>)
 8007702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007706:	601a      	str	r2, [r3, #0]
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	f3bf 8f6f 	isb	sy
}
 8007710:	e001      	b.n	8007716 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007712:	f7ff f8c7 	bl	80068a4 <xTaskResumeAll>
}
 8007716:	bf00      	nop
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	20000d38 	.word	0x20000d38
 8007724:	20000d3c 	.word	0x20000d3c
 8007728:	e000ed04 	.word	0xe000ed04

0800772c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007734:	4b0e      	ldr	r3, [pc, #56]	; (8007770 <prvGetNextExpireTime+0x44>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <prvGetNextExpireTime+0x16>
 800773e:	2201      	movs	r2, #1
 8007740:	e000      	b.n	8007744 <prvGetNextExpireTime+0x18>
 8007742:	2200      	movs	r2, #0
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d105      	bne.n	800775c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007750:	4b07      	ldr	r3, [pc, #28]	; (8007770 <prvGetNextExpireTime+0x44>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	e001      	b.n	8007760 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007760:	68fb      	ldr	r3, [r7, #12]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	20000d34 	.word	0x20000d34

08007774 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800777c:	f7ff f930 	bl	80069e0 <xTaskGetTickCount>
 8007780:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007782:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <prvSampleTimeNow+0x3c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	429a      	cmp	r2, r3
 800778a:	d205      	bcs.n	8007798 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800778c:	f000 f936 	bl	80079fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	e002      	b.n	800779e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800779e:	4a04      	ldr	r2, [pc, #16]	; (80077b0 <prvSampleTimeNow+0x3c>)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80077a4:	68fb      	ldr	r3, [r7, #12]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	20000d44 	.word	0x20000d44

080077b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
 80077c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80077c2:	2300      	movs	r3, #0
 80077c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d812      	bhi.n	8007800 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	1ad2      	subs	r2, r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d302      	bcc.n	80077ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80077e8:	2301      	movs	r3, #1
 80077ea:	617b      	str	r3, [r7, #20]
 80077ec:	e01b      	b.n	8007826 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077ee:	4b10      	ldr	r3, [pc, #64]	; (8007830 <prvInsertTimerInActiveList+0x7c>)
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3304      	adds	r3, #4
 80077f6:	4619      	mov	r1, r3
 80077f8:	4610      	mov	r0, r2
 80077fa:	f7fe f81c 	bl	8005836 <vListInsert>
 80077fe:	e012      	b.n	8007826 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	429a      	cmp	r2, r3
 8007806:	d206      	bcs.n	8007816 <prvInsertTimerInActiveList+0x62>
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	429a      	cmp	r2, r3
 800780e:	d302      	bcc.n	8007816 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007810:	2301      	movs	r3, #1
 8007812:	617b      	str	r3, [r7, #20]
 8007814:	e007      	b.n	8007826 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007816:	4b07      	ldr	r3, [pc, #28]	; (8007834 <prvInsertTimerInActiveList+0x80>)
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	3304      	adds	r3, #4
 800781e:	4619      	mov	r1, r3
 8007820:	4610      	mov	r0, r2
 8007822:	f7fe f808 	bl	8005836 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007826:	697b      	ldr	r3, [r7, #20]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	20000d38 	.word	0x20000d38
 8007834:	20000d34 	.word	0x20000d34

08007838 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b08e      	sub	sp, #56	; 0x38
 800783c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800783e:	e0ca      	b.n	80079d6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	da18      	bge.n	8007878 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007846:	1d3b      	adds	r3, r7, #4
 8007848:	3304      	adds	r3, #4
 800784a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800784c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10a      	bne.n	8007868 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	61fb      	str	r3, [r7, #28]
}
 8007864:	bf00      	nop
 8007866:	e7fe      	b.n	8007866 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800786e:	6850      	ldr	r0, [r2, #4]
 8007870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007872:	6892      	ldr	r2, [r2, #8]
 8007874:	4611      	mov	r1, r2
 8007876:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	f2c0 80aa 	blt.w	80079d4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d004      	beq.n	8007896 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	3304      	adds	r3, #4
 8007890:	4618      	mov	r0, r3
 8007892:	f7fe f809 	bl	80058a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007896:	463b      	mov	r3, r7
 8007898:	4618      	mov	r0, r3
 800789a:	f7ff ff6b 	bl	8007774 <prvSampleTimeNow>
 800789e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b09      	cmp	r3, #9
 80078a4:	f200 8097 	bhi.w	80079d6 <prvProcessReceivedCommands+0x19e>
 80078a8:	a201      	add	r2, pc, #4	; (adr r2, 80078b0 <prvProcessReceivedCommands+0x78>)
 80078aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ae:	bf00      	nop
 80078b0:	080078d9 	.word	0x080078d9
 80078b4:	080078d9 	.word	0x080078d9
 80078b8:	080078d9 	.word	0x080078d9
 80078bc:	0800794d 	.word	0x0800794d
 80078c0:	08007961 	.word	0x08007961
 80078c4:	080079ab 	.word	0x080079ab
 80078c8:	080078d9 	.word	0x080078d9
 80078cc:	080078d9 	.word	0x080078d9
 80078d0:	0800794d 	.word	0x0800794d
 80078d4:	08007961 	.word	0x08007961
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078de:	f043 0301 	orr.w	r3, r3, #1
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	18d1      	adds	r1, r2, r3
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078f8:	f7ff ff5c 	bl	80077b4 <prvInsertTimerInActiveList>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d069      	beq.n	80079d6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007908:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800790a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007910:	f003 0304 	and.w	r3, r3, #4
 8007914:	2b00      	cmp	r3, #0
 8007916:	d05e      	beq.n	80079d6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	441a      	add	r2, r3
 8007920:	2300      	movs	r3, #0
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	2300      	movs	r3, #0
 8007926:	2100      	movs	r1, #0
 8007928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800792a:	f7ff fe05 	bl	8007538 <xTimerGenericCommand>
 800792e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d14f      	bne.n	80079d6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	61bb      	str	r3, [r7, #24]
}
 8007948:	bf00      	nop
 800794a:	e7fe      	b.n	800794a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800794c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007952:	f023 0301 	bic.w	r3, r3, #1
 8007956:	b2da      	uxtb	r2, r3
 8007958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800795e:	e03a      	b.n	80079d6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007966:	f043 0301 	orr.w	r3, r3, #1
 800796a:	b2da      	uxtb	r2, r3
 800796c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10a      	bne.n	8007996 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007984:	f383 8811 	msr	BASEPRI, r3
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	617b      	str	r3, [r7, #20]
}
 8007992:	bf00      	nop
 8007994:	e7fe      	b.n	8007994 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007998:	699a      	ldr	r2, [r3, #24]
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	18d1      	adds	r1, r2, r3
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079a4:	f7ff ff06 	bl	80077b4 <prvInsertTimerInActiveList>
					break;
 80079a8:	e015      	b.n	80079d6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80079aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079b0:	f003 0302 	and.w	r3, r3, #2
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d103      	bne.n	80079c0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80079b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079ba:	f000 fbe1 	bl	8008180 <vPortFree>
 80079be:	e00a      	b.n	80079d6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079c6:	f023 0301 	bic.w	r3, r3, #1
 80079ca:	b2da      	uxtb	r2, r3
 80079cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80079d2:	e000      	b.n	80079d6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80079d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079d6:	4b08      	ldr	r3, [pc, #32]	; (80079f8 <prvProcessReceivedCommands+0x1c0>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	1d39      	adds	r1, r7, #4
 80079dc:	2200      	movs	r2, #0
 80079de:	4618      	mov	r0, r3
 80079e0:	f7fe fa2a 	bl	8005e38 <xQueueReceive>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f47f af2a 	bne.w	8007840 <prvProcessReceivedCommands+0x8>
	}
}
 80079ec:	bf00      	nop
 80079ee:	bf00      	nop
 80079f0:	3730      	adds	r7, #48	; 0x30
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	20000d3c 	.word	0x20000d3c

080079fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b088      	sub	sp, #32
 8007a00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a02:	e048      	b.n	8007a96 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a04:	4b2d      	ldr	r3, [pc, #180]	; (8007abc <prvSwitchTimerLists+0xc0>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a0e:	4b2b      	ldr	r3, [pc, #172]	; (8007abc <prvSwitchTimerLists+0xc0>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7fd ff43 	bl	80058a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a30:	f003 0304 	and.w	r3, r3, #4
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d02e      	beq.n	8007a96 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	4413      	add	r3, r2
 8007a40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d90e      	bls.n	8007a68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a56:	4b19      	ldr	r3, [pc, #100]	; (8007abc <prvSwitchTimerLists+0xc0>)
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	4619      	mov	r1, r3
 8007a60:	4610      	mov	r0, r2
 8007a62:	f7fd fee8 	bl	8005836 <vListInsert>
 8007a66:	e016      	b.n	8007a96 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a68:	2300      	movs	r3, #0
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	2100      	movs	r1, #0
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f7ff fd60 	bl	8007538 <xTimerGenericCommand>
 8007a78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10a      	bne.n	8007a96 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	603b      	str	r3, [r7, #0]
}
 8007a92:	bf00      	nop
 8007a94:	e7fe      	b.n	8007a94 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a96:	4b09      	ldr	r3, [pc, #36]	; (8007abc <prvSwitchTimerLists+0xc0>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1b1      	bne.n	8007a04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007aa0:	4b06      	ldr	r3, [pc, #24]	; (8007abc <prvSwitchTimerLists+0xc0>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007aa6:	4b06      	ldr	r3, [pc, #24]	; (8007ac0 <prvSwitchTimerLists+0xc4>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a04      	ldr	r2, [pc, #16]	; (8007abc <prvSwitchTimerLists+0xc0>)
 8007aac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007aae:	4a04      	ldr	r2, [pc, #16]	; (8007ac0 <prvSwitchTimerLists+0xc4>)
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	6013      	str	r3, [r2, #0]
}
 8007ab4:	bf00      	nop
 8007ab6:	3718      	adds	r7, #24
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	20000d34 	.word	0x20000d34
 8007ac0:	20000d38 	.word	0x20000d38

08007ac4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007aca:	f000 f96b 	bl	8007da4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007ace:	4b15      	ldr	r3, [pc, #84]	; (8007b24 <prvCheckForValidListAndQueue+0x60>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d120      	bne.n	8007b18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007ad6:	4814      	ldr	r0, [pc, #80]	; (8007b28 <prvCheckForValidListAndQueue+0x64>)
 8007ad8:	f7fd fe5c 	bl	8005794 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007adc:	4813      	ldr	r0, [pc, #76]	; (8007b2c <prvCheckForValidListAndQueue+0x68>)
 8007ade:	f7fd fe59 	bl	8005794 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007ae2:	4b13      	ldr	r3, [pc, #76]	; (8007b30 <prvCheckForValidListAndQueue+0x6c>)
 8007ae4:	4a10      	ldr	r2, [pc, #64]	; (8007b28 <prvCheckForValidListAndQueue+0x64>)
 8007ae6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ae8:	4b12      	ldr	r3, [pc, #72]	; (8007b34 <prvCheckForValidListAndQueue+0x70>)
 8007aea:	4a10      	ldr	r2, [pc, #64]	; (8007b2c <prvCheckForValidListAndQueue+0x68>)
 8007aec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007aee:	2300      	movs	r3, #0
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	4b11      	ldr	r3, [pc, #68]	; (8007b38 <prvCheckForValidListAndQueue+0x74>)
 8007af4:	4a11      	ldr	r2, [pc, #68]	; (8007b3c <prvCheckForValidListAndQueue+0x78>)
 8007af6:	2110      	movs	r1, #16
 8007af8:	200a      	movs	r0, #10
 8007afa:	f7fd ff67 	bl	80059cc <xQueueGenericCreateStatic>
 8007afe:	4603      	mov	r3, r0
 8007b00:	4a08      	ldr	r2, [pc, #32]	; (8007b24 <prvCheckForValidListAndQueue+0x60>)
 8007b02:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007b04:	4b07      	ldr	r3, [pc, #28]	; (8007b24 <prvCheckForValidListAndQueue+0x60>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d005      	beq.n	8007b18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b0c:	4b05      	ldr	r3, [pc, #20]	; (8007b24 <prvCheckForValidListAndQueue+0x60>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	490b      	ldr	r1, [pc, #44]	; (8007b40 <prvCheckForValidListAndQueue+0x7c>)
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fe fb80 	bl	8006218 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b18:	f000 f974 	bl	8007e04 <vPortExitCritical>
}
 8007b1c:	bf00      	nop
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	20000d3c 	.word	0x20000d3c
 8007b28:	20000d0c 	.word	0x20000d0c
 8007b2c:	20000d20 	.word	0x20000d20
 8007b30:	20000d34 	.word	0x20000d34
 8007b34:	20000d38 	.word	0x20000d38
 8007b38:	20000de8 	.word	0x20000de8
 8007b3c:	20000d48 	.word	0x20000d48
 8007b40:	080086f4 	.word	0x080086f4

08007b44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	3b04      	subs	r3, #4
 8007b54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3b04      	subs	r3, #4
 8007b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	f023 0201 	bic.w	r2, r3, #1
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	3b04      	subs	r3, #4
 8007b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b74:	4a0c      	ldr	r2, [pc, #48]	; (8007ba8 <pxPortInitialiseStack+0x64>)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	3b14      	subs	r3, #20
 8007b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3b04      	subs	r3, #4
 8007b8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f06f 0202 	mvn.w	r2, #2
 8007b92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3b20      	subs	r3, #32
 8007b98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3714      	adds	r7, #20
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr
 8007ba8:	08007bad 	.word	0x08007bad

08007bac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007bb6:	4b12      	ldr	r3, [pc, #72]	; (8007c00 <prvTaskExitError+0x54>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bbe:	d00a      	beq.n	8007bd6 <prvTaskExitError+0x2a>
	__asm volatile
 8007bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	60fb      	str	r3, [r7, #12]
}
 8007bd2:	bf00      	nop
 8007bd4:	e7fe      	b.n	8007bd4 <prvTaskExitError+0x28>
	__asm volatile
 8007bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	60bb      	str	r3, [r7, #8]
}
 8007be8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007bea:	bf00      	nop
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d0fc      	beq.n	8007bec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bf2:	bf00      	nop
 8007bf4:	bf00      	nop
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	2000000c 	.word	0x2000000c
	...

08007c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c10:	4b07      	ldr	r3, [pc, #28]	; (8007c30 <pxCurrentTCBConst2>)
 8007c12:	6819      	ldr	r1, [r3, #0]
 8007c14:	6808      	ldr	r0, [r1, #0]
 8007c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1a:	f380 8809 	msr	PSP, r0
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	f04f 0000 	mov.w	r0, #0
 8007c26:	f380 8811 	msr	BASEPRI, r0
 8007c2a:	4770      	bx	lr
 8007c2c:	f3af 8000 	nop.w

08007c30 <pxCurrentTCBConst2>:
 8007c30:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c34:	bf00      	nop
 8007c36:	bf00      	nop

08007c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c38:	4808      	ldr	r0, [pc, #32]	; (8007c5c <prvPortStartFirstTask+0x24>)
 8007c3a:	6800      	ldr	r0, [r0, #0]
 8007c3c:	6800      	ldr	r0, [r0, #0]
 8007c3e:	f380 8808 	msr	MSP, r0
 8007c42:	f04f 0000 	mov.w	r0, #0
 8007c46:	f380 8814 	msr	CONTROL, r0
 8007c4a:	b662      	cpsie	i
 8007c4c:	b661      	cpsie	f
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	df00      	svc	0
 8007c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c5a:	bf00      	nop
 8007c5c:	e000ed08 	.word	0xe000ed08

08007c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c66:	4b46      	ldr	r3, [pc, #280]	; (8007d80 <xPortStartScheduler+0x120>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a46      	ldr	r2, [pc, #280]	; (8007d84 <xPortStartScheduler+0x124>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d10a      	bne.n	8007c86 <xPortStartScheduler+0x26>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	613b      	str	r3, [r7, #16]
}
 8007c82:	bf00      	nop
 8007c84:	e7fe      	b.n	8007c84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c86:	4b3e      	ldr	r3, [pc, #248]	; (8007d80 <xPortStartScheduler+0x120>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a3f      	ldr	r2, [pc, #252]	; (8007d88 <xPortStartScheduler+0x128>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d10a      	bne.n	8007ca6 <xPortStartScheduler+0x46>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	60fb      	str	r3, [r7, #12]
}
 8007ca2:	bf00      	nop
 8007ca4:	e7fe      	b.n	8007ca4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ca6:	4b39      	ldr	r3, [pc, #228]	; (8007d8c <xPortStartScheduler+0x12c>)
 8007ca8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	22ff      	movs	r2, #255	; 0xff
 8007cb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007cc0:	78fb      	ldrb	r3, [r7, #3]
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	4b31      	ldr	r3, [pc, #196]	; (8007d90 <xPortStartScheduler+0x130>)
 8007ccc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cce:	4b31      	ldr	r3, [pc, #196]	; (8007d94 <xPortStartScheduler+0x134>)
 8007cd0:	2207      	movs	r2, #7
 8007cd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cd4:	e009      	b.n	8007cea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007cd6:	4b2f      	ldr	r3, [pc, #188]	; (8007d94 <xPortStartScheduler+0x134>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	4a2d      	ldr	r2, [pc, #180]	; (8007d94 <xPortStartScheduler+0x134>)
 8007cde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	005b      	lsls	r3, r3, #1
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cea:	78fb      	ldrb	r3, [r7, #3]
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf2:	2b80      	cmp	r3, #128	; 0x80
 8007cf4:	d0ef      	beq.n	8007cd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007cf6:	4b27      	ldr	r3, [pc, #156]	; (8007d94 <xPortStartScheduler+0x134>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f1c3 0307 	rsb	r3, r3, #7
 8007cfe:	2b04      	cmp	r3, #4
 8007d00:	d00a      	beq.n	8007d18 <xPortStartScheduler+0xb8>
	__asm volatile
 8007d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	60bb      	str	r3, [r7, #8]
}
 8007d14:	bf00      	nop
 8007d16:	e7fe      	b.n	8007d16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d18:	4b1e      	ldr	r3, [pc, #120]	; (8007d94 <xPortStartScheduler+0x134>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	021b      	lsls	r3, r3, #8
 8007d1e:	4a1d      	ldr	r2, [pc, #116]	; (8007d94 <xPortStartScheduler+0x134>)
 8007d20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d22:	4b1c      	ldr	r3, [pc, #112]	; (8007d94 <xPortStartScheduler+0x134>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d2a:	4a1a      	ldr	r2, [pc, #104]	; (8007d94 <xPortStartScheduler+0x134>)
 8007d2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d36:	4b18      	ldr	r3, [pc, #96]	; (8007d98 <xPortStartScheduler+0x138>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a17      	ldr	r2, [pc, #92]	; (8007d98 <xPortStartScheduler+0x138>)
 8007d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d42:	4b15      	ldr	r3, [pc, #84]	; (8007d98 <xPortStartScheduler+0x138>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a14      	ldr	r2, [pc, #80]	; (8007d98 <xPortStartScheduler+0x138>)
 8007d48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d4e:	f000 f8dd 	bl	8007f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d52:	4b12      	ldr	r3, [pc, #72]	; (8007d9c <xPortStartScheduler+0x13c>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d58:	f000 f8fc 	bl	8007f54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d5c:	4b10      	ldr	r3, [pc, #64]	; (8007da0 <xPortStartScheduler+0x140>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a0f      	ldr	r2, [pc, #60]	; (8007da0 <xPortStartScheduler+0x140>)
 8007d62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d68:	f7ff ff66 	bl	8007c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d6c:	f7fe ff02 	bl	8006b74 <vTaskSwitchContext>
	prvTaskExitError();
 8007d70:	f7ff ff1c 	bl	8007bac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3718      	adds	r7, #24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	e000ed00 	.word	0xe000ed00
 8007d84:	410fc271 	.word	0x410fc271
 8007d88:	410fc270 	.word	0x410fc270
 8007d8c:	e000e400 	.word	0xe000e400
 8007d90:	20000e38 	.word	0x20000e38
 8007d94:	20000e3c 	.word	0x20000e3c
 8007d98:	e000ed20 	.word	0xe000ed20
 8007d9c:	2000000c 	.word	0x2000000c
 8007da0:	e000ef34 	.word	0xe000ef34

08007da4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	607b      	str	r3, [r7, #4]
}
 8007dbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007dbe:	4b0f      	ldr	r3, [pc, #60]	; (8007dfc <vPortEnterCritical+0x58>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	4a0d      	ldr	r2, [pc, #52]	; (8007dfc <vPortEnterCritical+0x58>)
 8007dc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007dc8:	4b0c      	ldr	r3, [pc, #48]	; (8007dfc <vPortEnterCritical+0x58>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d10f      	bne.n	8007df0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007dd0:	4b0b      	ldr	r3, [pc, #44]	; (8007e00 <vPortEnterCritical+0x5c>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00a      	beq.n	8007df0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dde:	f383 8811 	msr	BASEPRI, r3
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	603b      	str	r3, [r7, #0]
}
 8007dec:	bf00      	nop
 8007dee:	e7fe      	b.n	8007dee <vPortEnterCritical+0x4a>
	}
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	2000000c 	.word	0x2000000c
 8007e00:	e000ed04 	.word	0xe000ed04

08007e04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e0a:	4b12      	ldr	r3, [pc, #72]	; (8007e54 <vPortExitCritical+0x50>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10a      	bne.n	8007e28 <vPortExitCritical+0x24>
	__asm volatile
 8007e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e16:	f383 8811 	msr	BASEPRI, r3
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	607b      	str	r3, [r7, #4]
}
 8007e24:	bf00      	nop
 8007e26:	e7fe      	b.n	8007e26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e28:	4b0a      	ldr	r3, [pc, #40]	; (8007e54 <vPortExitCritical+0x50>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	4a09      	ldr	r2, [pc, #36]	; (8007e54 <vPortExitCritical+0x50>)
 8007e30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e32:	4b08      	ldr	r3, [pc, #32]	; (8007e54 <vPortExitCritical+0x50>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d105      	bne.n	8007e46 <vPortExitCritical+0x42>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	f383 8811 	msr	BASEPRI, r3
}
 8007e44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e46:	bf00      	nop
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	2000000c 	.word	0x2000000c
	...

08007e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e60:	f3ef 8009 	mrs	r0, PSP
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	4b15      	ldr	r3, [pc, #84]	; (8007ec0 <pxCurrentTCBConst>)
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	f01e 0f10 	tst.w	lr, #16
 8007e70:	bf08      	it	eq
 8007e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7a:	6010      	str	r0, [r2, #0]
 8007e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e84:	f380 8811 	msr	BASEPRI, r0
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	f3bf 8f6f 	isb	sy
 8007e90:	f7fe fe70 	bl	8006b74 <vTaskSwitchContext>
 8007e94:	f04f 0000 	mov.w	r0, #0
 8007e98:	f380 8811 	msr	BASEPRI, r0
 8007e9c:	bc09      	pop	{r0, r3}
 8007e9e:	6819      	ldr	r1, [r3, #0]
 8007ea0:	6808      	ldr	r0, [r1, #0]
 8007ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea6:	f01e 0f10 	tst.w	lr, #16
 8007eaa:	bf08      	it	eq
 8007eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007eb0:	f380 8809 	msr	PSP, r0
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	f3af 8000 	nop.w

08007ec0 <pxCurrentTCBConst>:
 8007ec0:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ec4:	bf00      	nop
 8007ec6:	bf00      	nop

08007ec8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	607b      	str	r3, [r7, #4]
}
 8007ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ee2:	f7fe fd8d 	bl	8006a00 <xTaskIncrementTick>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d003      	beq.n	8007ef4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007eec:	4b06      	ldr	r3, [pc, #24]	; (8007f08 <xPortSysTickHandler+0x40>)
 8007eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	f383 8811 	msr	BASEPRI, r3
}
 8007efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f00:	bf00      	nop
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	e000ed04 	.word	0xe000ed04

08007f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f10:	4b0b      	ldr	r3, [pc, #44]	; (8007f40 <vPortSetupTimerInterrupt+0x34>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f16:	4b0b      	ldr	r3, [pc, #44]	; (8007f44 <vPortSetupTimerInterrupt+0x38>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f1c:	4b0a      	ldr	r3, [pc, #40]	; (8007f48 <vPortSetupTimerInterrupt+0x3c>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a0a      	ldr	r2, [pc, #40]	; (8007f4c <vPortSetupTimerInterrupt+0x40>)
 8007f22:	fba2 2303 	umull	r2, r3, r2, r3
 8007f26:	099b      	lsrs	r3, r3, #6
 8007f28:	4a09      	ldr	r2, [pc, #36]	; (8007f50 <vPortSetupTimerInterrupt+0x44>)
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f2e:	4b04      	ldr	r3, [pc, #16]	; (8007f40 <vPortSetupTimerInterrupt+0x34>)
 8007f30:	2207      	movs	r2, #7
 8007f32:	601a      	str	r2, [r3, #0]
}
 8007f34:	bf00      	nop
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	e000e010 	.word	0xe000e010
 8007f44:	e000e018 	.word	0xe000e018
 8007f48:	20000000 	.word	0x20000000
 8007f4c:	10624dd3 	.word	0x10624dd3
 8007f50:	e000e014 	.word	0xe000e014

08007f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f64 <vPortEnableVFP+0x10>
 8007f58:	6801      	ldr	r1, [r0, #0]
 8007f5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f5e:	6001      	str	r1, [r0, #0]
 8007f60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f62:	bf00      	nop
 8007f64:	e000ed88 	.word	0xe000ed88

08007f68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f6e:	f3ef 8305 	mrs	r3, IPSR
 8007f72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2b0f      	cmp	r3, #15
 8007f78:	d914      	bls.n	8007fa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f7a:	4a17      	ldr	r2, [pc, #92]	; (8007fd8 <vPortValidateInterruptPriority+0x70>)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	4413      	add	r3, r2
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f84:	4b15      	ldr	r3, [pc, #84]	; (8007fdc <vPortValidateInterruptPriority+0x74>)
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	7afa      	ldrb	r2, [r7, #11]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d20a      	bcs.n	8007fa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	607b      	str	r3, [r7, #4]
}
 8007fa0:	bf00      	nop
 8007fa2:	e7fe      	b.n	8007fa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007fa4:	4b0e      	ldr	r3, [pc, #56]	; (8007fe0 <vPortValidateInterruptPriority+0x78>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007fac:	4b0d      	ldr	r3, [pc, #52]	; (8007fe4 <vPortValidateInterruptPriority+0x7c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d90a      	bls.n	8007fca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	603b      	str	r3, [r7, #0]
}
 8007fc6:	bf00      	nop
 8007fc8:	e7fe      	b.n	8007fc8 <vPortValidateInterruptPriority+0x60>
	}
 8007fca:	bf00      	nop
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	e000e3f0 	.word	0xe000e3f0
 8007fdc:	20000e38 	.word	0x20000e38
 8007fe0:	e000ed0c 	.word	0xe000ed0c
 8007fe4:	20000e3c 	.word	0x20000e3c

08007fe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b08a      	sub	sp, #40	; 0x28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ff4:	f7fe fc48 	bl	8006888 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ff8:	4b5b      	ldr	r3, [pc, #364]	; (8008168 <pvPortMalloc+0x180>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008000:	f000 f920 	bl	8008244 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008004:	4b59      	ldr	r3, [pc, #356]	; (800816c <pvPortMalloc+0x184>)
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4013      	ands	r3, r2
 800800c:	2b00      	cmp	r3, #0
 800800e:	f040 8093 	bne.w	8008138 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d01d      	beq.n	8008054 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008018:	2208      	movs	r2, #8
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4413      	add	r3, r2
 800801e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f003 0307 	and.w	r3, r3, #7
 8008026:	2b00      	cmp	r3, #0
 8008028:	d014      	beq.n	8008054 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f023 0307 	bic.w	r3, r3, #7
 8008030:	3308      	adds	r3, #8
 8008032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f003 0307 	and.w	r3, r3, #7
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00a      	beq.n	8008054 <pvPortMalloc+0x6c>
	__asm volatile
 800803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	617b      	str	r3, [r7, #20]
}
 8008050:	bf00      	nop
 8008052:	e7fe      	b.n	8008052 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d06e      	beq.n	8008138 <pvPortMalloc+0x150>
 800805a:	4b45      	ldr	r3, [pc, #276]	; (8008170 <pvPortMalloc+0x188>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	429a      	cmp	r2, r3
 8008062:	d869      	bhi.n	8008138 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008064:	4b43      	ldr	r3, [pc, #268]	; (8008174 <pvPortMalloc+0x18c>)
 8008066:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008068:	4b42      	ldr	r3, [pc, #264]	; (8008174 <pvPortMalloc+0x18c>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800806e:	e004      	b.n	800807a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008072:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	429a      	cmp	r2, r3
 8008082:	d903      	bls.n	800808c <pvPortMalloc+0xa4>
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1f1      	bne.n	8008070 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800808c:	4b36      	ldr	r3, [pc, #216]	; (8008168 <pvPortMalloc+0x180>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008092:	429a      	cmp	r2, r3
 8008094:	d050      	beq.n	8008138 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008096:	6a3b      	ldr	r3, [r7, #32]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2208      	movs	r2, #8
 800809c:	4413      	add	r3, r2
 800809e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80080a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080aa:	685a      	ldr	r2, [r3, #4]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	1ad2      	subs	r2, r2, r3
 80080b0:	2308      	movs	r3, #8
 80080b2:	005b      	lsls	r3, r3, #1
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d91f      	bls.n	80080f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80080b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4413      	add	r3, r2
 80080be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	f003 0307 	and.w	r3, r3, #7
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <pvPortMalloc+0xf8>
	__asm volatile
 80080ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	613b      	str	r3, [r7, #16]
}
 80080dc:	bf00      	nop
 80080de:	e7fe      	b.n	80080de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	1ad2      	subs	r2, r2, r3
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080f2:	69b8      	ldr	r0, [r7, #24]
 80080f4:	f000 f908 	bl	8008308 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080f8:	4b1d      	ldr	r3, [pc, #116]	; (8008170 <pvPortMalloc+0x188>)
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	4a1b      	ldr	r2, [pc, #108]	; (8008170 <pvPortMalloc+0x188>)
 8008104:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008106:	4b1a      	ldr	r3, [pc, #104]	; (8008170 <pvPortMalloc+0x188>)
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	4b1b      	ldr	r3, [pc, #108]	; (8008178 <pvPortMalloc+0x190>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	429a      	cmp	r2, r3
 8008110:	d203      	bcs.n	800811a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008112:	4b17      	ldr	r3, [pc, #92]	; (8008170 <pvPortMalloc+0x188>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a18      	ldr	r2, [pc, #96]	; (8008178 <pvPortMalloc+0x190>)
 8008118:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811c:	685a      	ldr	r2, [r3, #4]
 800811e:	4b13      	ldr	r3, [pc, #76]	; (800816c <pvPortMalloc+0x184>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	431a      	orrs	r2, r3
 8008124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008126:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812a:	2200      	movs	r2, #0
 800812c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800812e:	4b13      	ldr	r3, [pc, #76]	; (800817c <pvPortMalloc+0x194>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3301      	adds	r3, #1
 8008134:	4a11      	ldr	r2, [pc, #68]	; (800817c <pvPortMalloc+0x194>)
 8008136:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008138:	f7fe fbb4 	bl	80068a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	f003 0307 	and.w	r3, r3, #7
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00a      	beq.n	800815c <pvPortMalloc+0x174>
	__asm volatile
 8008146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814a:	f383 8811 	msr	BASEPRI, r3
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	60fb      	str	r3, [r7, #12]
}
 8008158:	bf00      	nop
 800815a:	e7fe      	b.n	800815a <pvPortMalloc+0x172>
	return pvReturn;
 800815c:	69fb      	ldr	r3, [r7, #28]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3728      	adds	r7, #40	; 0x28
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	20001e30 	.word	0x20001e30
 800816c:	20001e44 	.word	0x20001e44
 8008170:	20001e34 	.word	0x20001e34
 8008174:	20001e28 	.word	0x20001e28
 8008178:	20001e38 	.word	0x20001e38
 800817c:	20001e3c 	.word	0x20001e3c

08008180 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d04d      	beq.n	800822e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008192:	2308      	movs	r3, #8
 8008194:	425b      	negs	r3, r3
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	4413      	add	r3, r2
 800819a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	685a      	ldr	r2, [r3, #4]
 80081a4:	4b24      	ldr	r3, [pc, #144]	; (8008238 <vPortFree+0xb8>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4013      	ands	r3, r2
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10a      	bne.n	80081c4 <vPortFree+0x44>
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	60fb      	str	r3, [r7, #12]
}
 80081c0:	bf00      	nop
 80081c2:	e7fe      	b.n	80081c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00a      	beq.n	80081e2 <vPortFree+0x62>
	__asm volatile
 80081cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d0:	f383 8811 	msr	BASEPRI, r3
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	60bb      	str	r3, [r7, #8]
}
 80081de:	bf00      	nop
 80081e0:	e7fe      	b.n	80081e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	685a      	ldr	r2, [r3, #4]
 80081e6:	4b14      	ldr	r3, [pc, #80]	; (8008238 <vPortFree+0xb8>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4013      	ands	r3, r2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d01e      	beq.n	800822e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d11a      	bne.n	800822e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	4b0e      	ldr	r3, [pc, #56]	; (8008238 <vPortFree+0xb8>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	43db      	mvns	r3, r3
 8008202:	401a      	ands	r2, r3
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008208:	f7fe fb3e 	bl	8006888 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	685a      	ldr	r2, [r3, #4]
 8008210:	4b0a      	ldr	r3, [pc, #40]	; (800823c <vPortFree+0xbc>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4413      	add	r3, r2
 8008216:	4a09      	ldr	r2, [pc, #36]	; (800823c <vPortFree+0xbc>)
 8008218:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800821a:	6938      	ldr	r0, [r7, #16]
 800821c:	f000 f874 	bl	8008308 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008220:	4b07      	ldr	r3, [pc, #28]	; (8008240 <vPortFree+0xc0>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3301      	adds	r3, #1
 8008226:	4a06      	ldr	r2, [pc, #24]	; (8008240 <vPortFree+0xc0>)
 8008228:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800822a:	f7fe fb3b 	bl	80068a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800822e:	bf00      	nop
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	20001e44 	.word	0x20001e44
 800823c:	20001e34 	.word	0x20001e34
 8008240:	20001e40 	.word	0x20001e40

08008244 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800824a:	f640 73e8 	movw	r3, #4072	; 0xfe8
 800824e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008250:	4b27      	ldr	r3, [pc, #156]	; (80082f0 <prvHeapInit+0xac>)
 8008252:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f003 0307 	and.w	r3, r3, #7
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00c      	beq.n	8008278 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	3307      	adds	r3, #7
 8008262:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f023 0307 	bic.w	r3, r3, #7
 800826a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	4a1f      	ldr	r2, [pc, #124]	; (80082f0 <prvHeapInit+0xac>)
 8008274:	4413      	add	r3, r2
 8008276:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800827c:	4a1d      	ldr	r2, [pc, #116]	; (80082f4 <prvHeapInit+0xb0>)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008282:	4b1c      	ldr	r3, [pc, #112]	; (80082f4 <prvHeapInit+0xb0>)
 8008284:	2200      	movs	r2, #0
 8008286:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	4413      	add	r3, r2
 800828e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008290:	2208      	movs	r2, #8
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	1a9b      	subs	r3, r3, r2
 8008296:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f023 0307 	bic.w	r3, r3, #7
 800829e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4a15      	ldr	r2, [pc, #84]	; (80082f8 <prvHeapInit+0xb4>)
 80082a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80082a6:	4b14      	ldr	r3, [pc, #80]	; (80082f8 <prvHeapInit+0xb4>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2200      	movs	r2, #0
 80082ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80082ae:	4b12      	ldr	r3, [pc, #72]	; (80082f8 <prvHeapInit+0xb4>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2200      	movs	r2, #0
 80082b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	1ad2      	subs	r2, r2, r3
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082c4:	4b0c      	ldr	r3, [pc, #48]	; (80082f8 <prvHeapInit+0xb4>)
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	4a0a      	ldr	r2, [pc, #40]	; (80082fc <prvHeapInit+0xb8>)
 80082d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	4a09      	ldr	r2, [pc, #36]	; (8008300 <prvHeapInit+0xbc>)
 80082da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082dc:	4b09      	ldr	r3, [pc, #36]	; (8008304 <prvHeapInit+0xc0>)
 80082de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80082e2:	601a      	str	r2, [r3, #0]
}
 80082e4:	bf00      	nop
 80082e6:	3714      	adds	r7, #20
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr
 80082f0:	20000e40 	.word	0x20000e40
 80082f4:	20001e28 	.word	0x20001e28
 80082f8:	20001e30 	.word	0x20001e30
 80082fc:	20001e38 	.word	0x20001e38
 8008300:	20001e34 	.word	0x20001e34
 8008304:	20001e44 	.word	0x20001e44

08008308 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008310:	4b28      	ldr	r3, [pc, #160]	; (80083b4 <prvInsertBlockIntoFreeList+0xac>)
 8008312:	60fb      	str	r3, [r7, #12]
 8008314:	e002      	b.n	800831c <prvInsertBlockIntoFreeList+0x14>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	60fb      	str	r3, [r7, #12]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	429a      	cmp	r2, r3
 8008324:	d8f7      	bhi.n	8008316 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	4413      	add	r3, r2
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	429a      	cmp	r2, r3
 8008336:	d108      	bne.n	800834a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	441a      	add	r2, r3
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	441a      	add	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	429a      	cmp	r2, r3
 800835c:	d118      	bne.n	8008390 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	4b15      	ldr	r3, [pc, #84]	; (80083b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	429a      	cmp	r2, r3
 8008368:	d00d      	beq.n	8008386 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	441a      	add	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	e008      	b.n	8008398 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008386:	4b0c      	ldr	r3, [pc, #48]	; (80083b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	601a      	str	r2, [r3, #0]
 800838e:	e003      	b.n	8008398 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	429a      	cmp	r2, r3
 800839e:	d002      	beq.n	80083a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083a6:	bf00      	nop
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	20001e28 	.word	0x20001e28
 80083b8:	20001e30 	.word	0x20001e30

080083bc <__libc_init_array>:
 80083bc:	b570      	push	{r4, r5, r6, lr}
 80083be:	4d0d      	ldr	r5, [pc, #52]	; (80083f4 <__libc_init_array+0x38>)
 80083c0:	4c0d      	ldr	r4, [pc, #52]	; (80083f8 <__libc_init_array+0x3c>)
 80083c2:	1b64      	subs	r4, r4, r5
 80083c4:	10a4      	asrs	r4, r4, #2
 80083c6:	2600      	movs	r6, #0
 80083c8:	42a6      	cmp	r6, r4
 80083ca:	d109      	bne.n	80083e0 <__libc_init_array+0x24>
 80083cc:	4d0b      	ldr	r5, [pc, #44]	; (80083fc <__libc_init_array+0x40>)
 80083ce:	4c0c      	ldr	r4, [pc, #48]	; (8008400 <__libc_init_array+0x44>)
 80083d0:	f000 f95a 	bl	8008688 <_init>
 80083d4:	1b64      	subs	r4, r4, r5
 80083d6:	10a4      	asrs	r4, r4, #2
 80083d8:	2600      	movs	r6, #0
 80083da:	42a6      	cmp	r6, r4
 80083dc:	d105      	bne.n	80083ea <__libc_init_array+0x2e>
 80083de:	bd70      	pop	{r4, r5, r6, pc}
 80083e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80083e4:	4798      	blx	r3
 80083e6:	3601      	adds	r6, #1
 80083e8:	e7ee      	b.n	80083c8 <__libc_init_array+0xc>
 80083ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ee:	4798      	blx	r3
 80083f0:	3601      	adds	r6, #1
 80083f2:	e7f2      	b.n	80083da <__libc_init_array+0x1e>
 80083f4:	08008890 	.word	0x08008890
 80083f8:	08008890 	.word	0x08008890
 80083fc:	08008890 	.word	0x08008890
 8008400:	08008894 	.word	0x08008894

08008404 <__itoa>:
 8008404:	1e93      	subs	r3, r2, #2
 8008406:	2b22      	cmp	r3, #34	; 0x22
 8008408:	b510      	push	{r4, lr}
 800840a:	460c      	mov	r4, r1
 800840c:	d904      	bls.n	8008418 <__itoa+0x14>
 800840e:	2300      	movs	r3, #0
 8008410:	700b      	strb	r3, [r1, #0]
 8008412:	461c      	mov	r4, r3
 8008414:	4620      	mov	r0, r4
 8008416:	bd10      	pop	{r4, pc}
 8008418:	2a0a      	cmp	r2, #10
 800841a:	d109      	bne.n	8008430 <__itoa+0x2c>
 800841c:	2800      	cmp	r0, #0
 800841e:	da07      	bge.n	8008430 <__itoa+0x2c>
 8008420:	232d      	movs	r3, #45	; 0x2d
 8008422:	700b      	strb	r3, [r1, #0]
 8008424:	4240      	negs	r0, r0
 8008426:	2101      	movs	r1, #1
 8008428:	4421      	add	r1, r4
 800842a:	f000 f88f 	bl	800854c <__utoa>
 800842e:	e7f1      	b.n	8008414 <__itoa+0x10>
 8008430:	2100      	movs	r1, #0
 8008432:	e7f9      	b.n	8008428 <__itoa+0x24>

08008434 <itoa>:
 8008434:	f7ff bfe6 	b.w	8008404 <__itoa>

08008438 <__retarget_lock_acquire_recursive>:
 8008438:	4770      	bx	lr

0800843a <__retarget_lock_release_recursive>:
 800843a:	4770      	bx	lr

0800843c <memcpy>:
 800843c:	440a      	add	r2, r1
 800843e:	4291      	cmp	r1, r2
 8008440:	f100 33ff 	add.w	r3, r0, #4294967295
 8008444:	d100      	bne.n	8008448 <memcpy+0xc>
 8008446:	4770      	bx	lr
 8008448:	b510      	push	{r4, lr}
 800844a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800844e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008452:	4291      	cmp	r1, r2
 8008454:	d1f9      	bne.n	800844a <memcpy+0xe>
 8008456:	bd10      	pop	{r4, pc}

08008458 <memset>:
 8008458:	4402      	add	r2, r0
 800845a:	4603      	mov	r3, r0
 800845c:	4293      	cmp	r3, r2
 800845e:	d100      	bne.n	8008462 <memset+0xa>
 8008460:	4770      	bx	lr
 8008462:	f803 1b01 	strb.w	r1, [r3], #1
 8008466:	e7f9      	b.n	800845c <memset+0x4>

08008468 <cleanup_glue>:
 8008468:	b538      	push	{r3, r4, r5, lr}
 800846a:	460c      	mov	r4, r1
 800846c:	6809      	ldr	r1, [r1, #0]
 800846e:	4605      	mov	r5, r0
 8008470:	b109      	cbz	r1, 8008476 <cleanup_glue+0xe>
 8008472:	f7ff fff9 	bl	8008468 <cleanup_glue>
 8008476:	4621      	mov	r1, r4
 8008478:	4628      	mov	r0, r5
 800847a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800847e:	f000 b8b3 	b.w	80085e8 <_free_r>
	...

08008484 <_reclaim_reent>:
 8008484:	4b2c      	ldr	r3, [pc, #176]	; (8008538 <_reclaim_reent+0xb4>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4283      	cmp	r3, r0
 800848a:	b570      	push	{r4, r5, r6, lr}
 800848c:	4604      	mov	r4, r0
 800848e:	d051      	beq.n	8008534 <_reclaim_reent+0xb0>
 8008490:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008492:	b143      	cbz	r3, 80084a6 <_reclaim_reent+0x22>
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d14a      	bne.n	8008530 <_reclaim_reent+0xac>
 800849a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800849c:	6819      	ldr	r1, [r3, #0]
 800849e:	b111      	cbz	r1, 80084a6 <_reclaim_reent+0x22>
 80084a0:	4620      	mov	r0, r4
 80084a2:	f000 f8a1 	bl	80085e8 <_free_r>
 80084a6:	6961      	ldr	r1, [r4, #20]
 80084a8:	b111      	cbz	r1, 80084b0 <_reclaim_reent+0x2c>
 80084aa:	4620      	mov	r0, r4
 80084ac:	f000 f89c 	bl	80085e8 <_free_r>
 80084b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80084b2:	b111      	cbz	r1, 80084ba <_reclaim_reent+0x36>
 80084b4:	4620      	mov	r0, r4
 80084b6:	f000 f897 	bl	80085e8 <_free_r>
 80084ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80084bc:	b111      	cbz	r1, 80084c4 <_reclaim_reent+0x40>
 80084be:	4620      	mov	r0, r4
 80084c0:	f000 f892 	bl	80085e8 <_free_r>
 80084c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80084c6:	b111      	cbz	r1, 80084ce <_reclaim_reent+0x4a>
 80084c8:	4620      	mov	r0, r4
 80084ca:	f000 f88d 	bl	80085e8 <_free_r>
 80084ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80084d0:	b111      	cbz	r1, 80084d8 <_reclaim_reent+0x54>
 80084d2:	4620      	mov	r0, r4
 80084d4:	f000 f888 	bl	80085e8 <_free_r>
 80084d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80084da:	b111      	cbz	r1, 80084e2 <_reclaim_reent+0x5e>
 80084dc:	4620      	mov	r0, r4
 80084de:	f000 f883 	bl	80085e8 <_free_r>
 80084e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80084e4:	b111      	cbz	r1, 80084ec <_reclaim_reent+0x68>
 80084e6:	4620      	mov	r0, r4
 80084e8:	f000 f87e 	bl	80085e8 <_free_r>
 80084ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084ee:	b111      	cbz	r1, 80084f6 <_reclaim_reent+0x72>
 80084f0:	4620      	mov	r0, r4
 80084f2:	f000 f879 	bl	80085e8 <_free_r>
 80084f6:	69a3      	ldr	r3, [r4, #24]
 80084f8:	b1e3      	cbz	r3, 8008534 <_reclaim_reent+0xb0>
 80084fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80084fc:	4620      	mov	r0, r4
 80084fe:	4798      	blx	r3
 8008500:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008502:	b1b9      	cbz	r1, 8008534 <_reclaim_reent+0xb0>
 8008504:	4620      	mov	r0, r4
 8008506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800850a:	f7ff bfad 	b.w	8008468 <cleanup_glue>
 800850e:	5949      	ldr	r1, [r1, r5]
 8008510:	b941      	cbnz	r1, 8008524 <_reclaim_reent+0xa0>
 8008512:	3504      	adds	r5, #4
 8008514:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008516:	2d80      	cmp	r5, #128	; 0x80
 8008518:	68d9      	ldr	r1, [r3, #12]
 800851a:	d1f8      	bne.n	800850e <_reclaim_reent+0x8a>
 800851c:	4620      	mov	r0, r4
 800851e:	f000 f863 	bl	80085e8 <_free_r>
 8008522:	e7ba      	b.n	800849a <_reclaim_reent+0x16>
 8008524:	680e      	ldr	r6, [r1, #0]
 8008526:	4620      	mov	r0, r4
 8008528:	f000 f85e 	bl	80085e8 <_free_r>
 800852c:	4631      	mov	r1, r6
 800852e:	e7ef      	b.n	8008510 <_reclaim_reent+0x8c>
 8008530:	2500      	movs	r5, #0
 8008532:	e7ef      	b.n	8008514 <_reclaim_reent+0x90>
 8008534:	bd70      	pop	{r4, r5, r6, pc}
 8008536:	bf00      	nop
 8008538:	20000010 	.word	0x20000010

0800853c <strcpy>:
 800853c:	4603      	mov	r3, r0
 800853e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008542:	f803 2b01 	strb.w	r2, [r3], #1
 8008546:	2a00      	cmp	r2, #0
 8008548:	d1f9      	bne.n	800853e <strcpy+0x2>
 800854a:	4770      	bx	lr

0800854c <__utoa>:
 800854c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800854e:	4c1f      	ldr	r4, [pc, #124]	; (80085cc <__utoa+0x80>)
 8008550:	b08b      	sub	sp, #44	; 0x2c
 8008552:	4605      	mov	r5, r0
 8008554:	460b      	mov	r3, r1
 8008556:	466e      	mov	r6, sp
 8008558:	f104 0c20 	add.w	ip, r4, #32
 800855c:	6820      	ldr	r0, [r4, #0]
 800855e:	6861      	ldr	r1, [r4, #4]
 8008560:	4637      	mov	r7, r6
 8008562:	c703      	stmia	r7!, {r0, r1}
 8008564:	3408      	adds	r4, #8
 8008566:	4564      	cmp	r4, ip
 8008568:	463e      	mov	r6, r7
 800856a:	d1f7      	bne.n	800855c <__utoa+0x10>
 800856c:	7921      	ldrb	r1, [r4, #4]
 800856e:	7139      	strb	r1, [r7, #4]
 8008570:	1e91      	subs	r1, r2, #2
 8008572:	6820      	ldr	r0, [r4, #0]
 8008574:	6038      	str	r0, [r7, #0]
 8008576:	2922      	cmp	r1, #34	; 0x22
 8008578:	f04f 0100 	mov.w	r1, #0
 800857c:	d904      	bls.n	8008588 <__utoa+0x3c>
 800857e:	7019      	strb	r1, [r3, #0]
 8008580:	460b      	mov	r3, r1
 8008582:	4618      	mov	r0, r3
 8008584:	b00b      	add	sp, #44	; 0x2c
 8008586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008588:	1e58      	subs	r0, r3, #1
 800858a:	4684      	mov	ip, r0
 800858c:	fbb5 f7f2 	udiv	r7, r5, r2
 8008590:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8008594:	fb02 5617 	mls	r6, r2, r7, r5
 8008598:	4476      	add	r6, lr
 800859a:	460c      	mov	r4, r1
 800859c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80085a0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80085a4:	462e      	mov	r6, r5
 80085a6:	42b2      	cmp	r2, r6
 80085a8:	f101 0101 	add.w	r1, r1, #1
 80085ac:	463d      	mov	r5, r7
 80085ae:	d9ed      	bls.n	800858c <__utoa+0x40>
 80085b0:	2200      	movs	r2, #0
 80085b2:	545a      	strb	r2, [r3, r1]
 80085b4:	1919      	adds	r1, r3, r4
 80085b6:	1aa5      	subs	r5, r4, r2
 80085b8:	42aa      	cmp	r2, r5
 80085ba:	dae2      	bge.n	8008582 <__utoa+0x36>
 80085bc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80085c0:	780e      	ldrb	r6, [r1, #0]
 80085c2:	7006      	strb	r6, [r0, #0]
 80085c4:	3201      	adds	r2, #1
 80085c6:	f801 5901 	strb.w	r5, [r1], #-1
 80085ca:	e7f4      	b.n	80085b6 <__utoa+0x6a>
 80085cc:	08008860 	.word	0x08008860

080085d0 <__malloc_lock>:
 80085d0:	4801      	ldr	r0, [pc, #4]	; (80085d8 <__malloc_lock+0x8>)
 80085d2:	f7ff bf31 	b.w	8008438 <__retarget_lock_acquire_recursive>
 80085d6:	bf00      	nop
 80085d8:	20002174 	.word	0x20002174

080085dc <__malloc_unlock>:
 80085dc:	4801      	ldr	r0, [pc, #4]	; (80085e4 <__malloc_unlock+0x8>)
 80085de:	f7ff bf2c 	b.w	800843a <__retarget_lock_release_recursive>
 80085e2:	bf00      	nop
 80085e4:	20002174 	.word	0x20002174

080085e8 <_free_r>:
 80085e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085ea:	2900      	cmp	r1, #0
 80085ec:	d048      	beq.n	8008680 <_free_r+0x98>
 80085ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085f2:	9001      	str	r0, [sp, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f1a1 0404 	sub.w	r4, r1, #4
 80085fa:	bfb8      	it	lt
 80085fc:	18e4      	addlt	r4, r4, r3
 80085fe:	f7ff ffe7 	bl	80085d0 <__malloc_lock>
 8008602:	4a20      	ldr	r2, [pc, #128]	; (8008684 <_free_r+0x9c>)
 8008604:	9801      	ldr	r0, [sp, #4]
 8008606:	6813      	ldr	r3, [r2, #0]
 8008608:	4615      	mov	r5, r2
 800860a:	b933      	cbnz	r3, 800861a <_free_r+0x32>
 800860c:	6063      	str	r3, [r4, #4]
 800860e:	6014      	str	r4, [r2, #0]
 8008610:	b003      	add	sp, #12
 8008612:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008616:	f7ff bfe1 	b.w	80085dc <__malloc_unlock>
 800861a:	42a3      	cmp	r3, r4
 800861c:	d90b      	bls.n	8008636 <_free_r+0x4e>
 800861e:	6821      	ldr	r1, [r4, #0]
 8008620:	1862      	adds	r2, r4, r1
 8008622:	4293      	cmp	r3, r2
 8008624:	bf04      	itt	eq
 8008626:	681a      	ldreq	r2, [r3, #0]
 8008628:	685b      	ldreq	r3, [r3, #4]
 800862a:	6063      	str	r3, [r4, #4]
 800862c:	bf04      	itt	eq
 800862e:	1852      	addeq	r2, r2, r1
 8008630:	6022      	streq	r2, [r4, #0]
 8008632:	602c      	str	r4, [r5, #0]
 8008634:	e7ec      	b.n	8008610 <_free_r+0x28>
 8008636:	461a      	mov	r2, r3
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	b10b      	cbz	r3, 8008640 <_free_r+0x58>
 800863c:	42a3      	cmp	r3, r4
 800863e:	d9fa      	bls.n	8008636 <_free_r+0x4e>
 8008640:	6811      	ldr	r1, [r2, #0]
 8008642:	1855      	adds	r5, r2, r1
 8008644:	42a5      	cmp	r5, r4
 8008646:	d10b      	bne.n	8008660 <_free_r+0x78>
 8008648:	6824      	ldr	r4, [r4, #0]
 800864a:	4421      	add	r1, r4
 800864c:	1854      	adds	r4, r2, r1
 800864e:	42a3      	cmp	r3, r4
 8008650:	6011      	str	r1, [r2, #0]
 8008652:	d1dd      	bne.n	8008610 <_free_r+0x28>
 8008654:	681c      	ldr	r4, [r3, #0]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	6053      	str	r3, [r2, #4]
 800865a:	4421      	add	r1, r4
 800865c:	6011      	str	r1, [r2, #0]
 800865e:	e7d7      	b.n	8008610 <_free_r+0x28>
 8008660:	d902      	bls.n	8008668 <_free_r+0x80>
 8008662:	230c      	movs	r3, #12
 8008664:	6003      	str	r3, [r0, #0]
 8008666:	e7d3      	b.n	8008610 <_free_r+0x28>
 8008668:	6825      	ldr	r5, [r4, #0]
 800866a:	1961      	adds	r1, r4, r5
 800866c:	428b      	cmp	r3, r1
 800866e:	bf04      	itt	eq
 8008670:	6819      	ldreq	r1, [r3, #0]
 8008672:	685b      	ldreq	r3, [r3, #4]
 8008674:	6063      	str	r3, [r4, #4]
 8008676:	bf04      	itt	eq
 8008678:	1949      	addeq	r1, r1, r5
 800867a:	6021      	streq	r1, [r4, #0]
 800867c:	6054      	str	r4, [r2, #4]
 800867e:	e7c7      	b.n	8008610 <_free_r+0x28>
 8008680:	b003      	add	sp, #12
 8008682:	bd30      	pop	{r4, r5, pc}
 8008684:	20001e48 	.word	0x20001e48

08008688 <_init>:
 8008688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868a:	bf00      	nop
 800868c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800868e:	bc08      	pop	{r3}
 8008690:	469e      	mov	lr, r3
 8008692:	4770      	bx	lr

08008694 <_fini>:
 8008694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008696:	bf00      	nop
 8008698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800869a:	bc08      	pop	{r3}
 800869c:	469e      	mov	lr, r3
 800869e:	4770      	bx	lr
