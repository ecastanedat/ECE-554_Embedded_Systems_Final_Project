
nucleo-STM32G431-Final-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b80  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08007d60  08007d60  00017d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ef0  08007ef0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007ef0  08007ef0  00017ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ef8  08007ef8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ef8  08007ef8  00017ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007efc  08007efc  00017efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d18  20000074  08007f74  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d8c  08007f74  00021d8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bf93  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047cc  00000000  00000000  0004c037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad8  00000000  00000000  00050808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001930  00000000  00000000  000522e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ddc  00000000  00000000  00053c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eda4  00000000  00000000  000759ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d529e  00000000  00000000  00094790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00169a2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074b4  00000000  00000000  00169a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007d48 	.word	0x08007d48

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08007d48 	.word	0x08007d48

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96e 	b.w	8000524 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468c      	mov	ip, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	f040 8083 	bne.w	8000376 <__udivmoddi4+0x116>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d947      	bls.n	8000306 <__udivmoddi4+0xa6>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b142      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027c:	f1c2 0020 	rsb	r0, r2, #32
 8000280:	fa24 f000 	lsr.w	r0, r4, r0
 8000284:	4091      	lsls	r1, r2
 8000286:	4097      	lsls	r7, r2
 8000288:	ea40 0c01 	orr.w	ip, r0, r1
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbbc f6f8 	udiv	r6, ip, r8
 8000298:	fa1f fe87 	uxth.w	lr, r7
 800029c:	fb08 c116 	mls	r1, r8, r6, ip
 80002a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a4:	fb06 f10e 	mul.w	r1, r6, lr
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18fb      	adds	r3, r7, r3
 80002ae:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b2:	f080 8119 	bcs.w	80004e8 <__udivmoddi4+0x288>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8116 	bls.w	80004e8 <__udivmoddi4+0x288>
 80002bc:	3e02      	subs	r6, #2
 80002be:	443b      	add	r3, r7
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002c8:	fb08 3310 	mls	r3, r8, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	193c      	adds	r4, r7, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295
 80002de:	f080 8105 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f240 8102 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002e8:	3802      	subs	r0, #2
 80002ea:	443c      	add	r4, r7
 80002ec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f0:	eba4 040e 	sub.w	r4, r4, lr
 80002f4:	2600      	movs	r6, #0
 80002f6:	b11d      	cbz	r5, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	b902      	cbnz	r2, 800030a <__udivmoddi4+0xaa>
 8000308:	deff      	udf	#255	; 0xff
 800030a:	fab2 f282 	clz	r2, r2
 800030e:	2a00      	cmp	r2, #0
 8000310:	d150      	bne.n	80003b4 <__udivmoddi4+0x154>
 8000312:	1bcb      	subs	r3, r1, r7
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	fa1f f887 	uxth.w	r8, r7
 800031c:	2601      	movs	r6, #1
 800031e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000322:	0c21      	lsrs	r1, r4, #16
 8000324:	fb0e 331c 	mls	r3, lr, ip, r3
 8000328:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800032c:	fb08 f30c 	mul.w	r3, r8, ip
 8000330:	428b      	cmp	r3, r1
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000334:	1879      	adds	r1, r7, r1
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0xe2>
 800033c:	428b      	cmp	r3, r1
 800033e:	f200 80e9 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 8000342:	4684      	mov	ip, r0
 8000344:	1ac9      	subs	r1, r1, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000350:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x10c>
 800035c:	193c      	adds	r4, r7, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x10a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80d9 	bhi.w	800051c <__udivmoddi4+0x2bc>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e7bf      	b.n	80002f6 <__udivmoddi4+0x96>
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x12e>
 800037a:	2d00      	cmp	r5, #0
 800037c:	f000 80b1 	beq.w	80004e2 <__udivmoddi4+0x282>
 8000380:	2600      	movs	r6, #0
 8000382:	e9c5 0100 	strd	r0, r1, [r5]
 8000386:	4630      	mov	r0, r6
 8000388:	4631      	mov	r1, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f683 	clz	r6, r3
 8000392:	2e00      	cmp	r6, #0
 8000394:	d14a      	bne.n	800042c <__udivmoddi4+0x1cc>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0x140>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80b8 	bhi.w	8000510 <__udivmoddi4+0x2b0>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0103 	sbc.w	r1, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	468c      	mov	ip, r1
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d0a8      	beq.n	8000300 <__udivmoddi4+0xa0>
 80003ae:	e9c5 4c00 	strd	r4, ip, [r5]
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0xa0>
 80003b4:	f1c2 0320 	rsb	r3, r2, #32
 80003b8:	fa20 f603 	lsr.w	r6, r0, r3
 80003bc:	4097      	lsls	r7, r2
 80003be:	fa01 f002 	lsl.w	r0, r1, r2
 80003c2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c6:	40d9      	lsrs	r1, r3
 80003c8:	4330      	orrs	r0, r6
 80003ca:	0c03      	lsrs	r3, r0, #16
 80003cc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d0:	fa1f f887 	uxth.w	r8, r7
 80003d4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb06 f108 	mul.w	r1, r6, r8
 80003e0:	4299      	cmp	r1, r3
 80003e2:	fa04 f402 	lsl.w	r4, r4, r2
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x19c>
 80003e8:	18fb      	adds	r3, r7, r3
 80003ea:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ee:	f080 808d 	bcs.w	800050c <__udivmoddi4+0x2ac>
 80003f2:	4299      	cmp	r1, r3
 80003f4:	f240 808a 	bls.w	800050c <__udivmoddi4+0x2ac>
 80003f8:	3e02      	subs	r6, #2
 80003fa:	443b      	add	r3, r7
 80003fc:	1a5b      	subs	r3, r3, r1
 80003fe:	b281      	uxth	r1, r0
 8000400:	fbb3 f0fe 	udiv	r0, r3, lr
 8000404:	fb0e 3310 	mls	r3, lr, r0, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb00 f308 	mul.w	r3, r0, r8
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x1c4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f100 3cff 	add.w	ip, r0, #4294967295
 800041a:	d273      	bcs.n	8000504 <__udivmoddi4+0x2a4>
 800041c:	428b      	cmp	r3, r1
 800041e:	d971      	bls.n	8000504 <__udivmoddi4+0x2a4>
 8000420:	3802      	subs	r0, #2
 8000422:	4439      	add	r1, r7
 8000424:	1acb      	subs	r3, r1, r3
 8000426:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800042a:	e778      	b.n	800031e <__udivmoddi4+0xbe>
 800042c:	f1c6 0c20 	rsb	ip, r6, #32
 8000430:	fa03 f406 	lsl.w	r4, r3, r6
 8000434:	fa22 f30c 	lsr.w	r3, r2, ip
 8000438:	431c      	orrs	r4, r3
 800043a:	fa20 f70c 	lsr.w	r7, r0, ip
 800043e:	fa01 f306 	lsl.w	r3, r1, r6
 8000442:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000446:	fa21 f10c 	lsr.w	r1, r1, ip
 800044a:	431f      	orrs	r7, r3
 800044c:	0c3b      	lsrs	r3, r7, #16
 800044e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000452:	fa1f f884 	uxth.w	r8, r4
 8000456:	fb0e 1119 	mls	r1, lr, r9, r1
 800045a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800045e:	fb09 fa08 	mul.w	sl, r9, r8
 8000462:	458a      	cmp	sl, r1
 8000464:	fa02 f206 	lsl.w	r2, r2, r6
 8000468:	fa00 f306 	lsl.w	r3, r0, r6
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x220>
 800046e:	1861      	adds	r1, r4, r1
 8000470:	f109 30ff 	add.w	r0, r9, #4294967295
 8000474:	d248      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 8000476:	458a      	cmp	sl, r1
 8000478:	d946      	bls.n	8000508 <__udivmoddi4+0x2a8>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4421      	add	r1, r4
 8000480:	eba1 010a 	sub.w	r1, r1, sl
 8000484:	b2bf      	uxth	r7, r7
 8000486:	fbb1 f0fe 	udiv	r0, r1, lr
 800048a:	fb0e 1110 	mls	r1, lr, r0, r1
 800048e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000492:	fb00 f808 	mul.w	r8, r0, r8
 8000496:	45b8      	cmp	r8, r7
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x24a>
 800049a:	19e7      	adds	r7, r4, r7
 800049c:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a0:	d22e      	bcs.n	8000500 <__udivmoddi4+0x2a0>
 80004a2:	45b8      	cmp	r8, r7
 80004a4:	d92c      	bls.n	8000500 <__udivmoddi4+0x2a0>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4427      	add	r7, r4
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	eba7 0708 	sub.w	r7, r7, r8
 80004b2:	fba0 8902 	umull	r8, r9, r0, r2
 80004b6:	454f      	cmp	r7, r9
 80004b8:	46c6      	mov	lr, r8
 80004ba:	4649      	mov	r1, r9
 80004bc:	d31a      	bcc.n	80004f4 <__udivmoddi4+0x294>
 80004be:	d017      	beq.n	80004f0 <__udivmoddi4+0x290>
 80004c0:	b15d      	cbz	r5, 80004da <__udivmoddi4+0x27a>
 80004c2:	ebb3 020e 	subs.w	r2, r3, lr
 80004c6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ca:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ce:	40f2      	lsrs	r2, r6
 80004d0:	ea4c 0202 	orr.w	r2, ip, r2
 80004d4:	40f7      	lsrs	r7, r6
 80004d6:	e9c5 2700 	strd	r2, r7, [r5]
 80004da:	2600      	movs	r6, #0
 80004dc:	4631      	mov	r1, r6
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e70b      	b.n	8000300 <__udivmoddi4+0xa0>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0x60>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fd      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f0:	4543      	cmp	r3, r8
 80004f2:	d2e5      	bcs.n	80004c0 <__udivmoddi4+0x260>
 80004f4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f8:	eb69 0104 	sbc.w	r1, r9, r4
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7df      	b.n	80004c0 <__udivmoddi4+0x260>
 8000500:	4608      	mov	r0, r1
 8000502:	e7d2      	b.n	80004aa <__udivmoddi4+0x24a>
 8000504:	4660      	mov	r0, ip
 8000506:	e78d      	b.n	8000424 <__udivmoddi4+0x1c4>
 8000508:	4681      	mov	r9, r0
 800050a:	e7b9      	b.n	8000480 <__udivmoddi4+0x220>
 800050c:	4666      	mov	r6, ip
 800050e:	e775      	b.n	80003fc <__udivmoddi4+0x19c>
 8000510:	4630      	mov	r0, r6
 8000512:	e74a      	b.n	80003aa <__udivmoddi4+0x14a>
 8000514:	f1ac 0c02 	sub.w	ip, ip, #2
 8000518:	4439      	add	r1, r7
 800051a:	e713      	b.n	8000344 <__udivmoddi4+0xe4>
 800051c:	3802      	subs	r0, #2
 800051e:	443c      	add	r4, r7
 8000520:	e724      	b.n	800036c <__udivmoddi4+0x10c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <print_to_console>:
#include "Globals.h"


/* Function prototypes -----------------------------------------------*/
void print_to_console(char *myString)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b09c      	sub	sp, #112	; 0x70
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[100];

	strcpy((char*)buffer, myString);
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	6879      	ldr	r1, [r7, #4]
 8000536:	4618      	mov	r0, r3
 8000538:	f007 fb60 	bl	8007bfc <strcpy>
	strcat((char*)buffer, "\n");
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff fe6d 	bl	8000220 <strlen>
 8000546:	4603      	mov	r3, r0
 8000548:	461a      	mov	r2, r3
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	4413      	add	r3, r2
 8000550:	4912      	ldr	r1, [pc, #72]	; (800059c <print_to_console+0x74>)
 8000552:	461a      	mov	r2, r3
 8000554:	460b      	mov	r3, r1
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	8013      	strh	r3, [r2, #0]
	strcat((char*)buffer, "\r");
 800055a:	f107 030c 	add.w	r3, r7, #12
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff fe5e 	bl	8000220 <strlen>
 8000564:	4603      	mov	r3, r0
 8000566:	461a      	mov	r2, r3
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	4413      	add	r3, r2
 800056e:	490c      	ldr	r1, [pc, #48]	; (80005a0 <print_to_console+0x78>)
 8000570:	461a      	mov	r2, r3
 8000572:	460b      	mov	r3, r1
 8000574:	881b      	ldrh	r3, [r3, #0]
 8000576:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff fe4f 	bl	8000220 <strlen>
 8000582:	4603      	mov	r3, r0
 8000584:	b29a      	uxth	r2, r3
 8000586:	f107 010c 	add.w	r1, r7, #12
 800058a:	f04f 33ff 	mov.w	r3, #4294967295
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <print_to_console+0x7c>)
 8000590:	f003 fd06 	bl	8003fa0 <HAL_UART_Transmit>

}
 8000594:	bf00      	nop
 8000596:	3770      	adds	r7, #112	; 0x70
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	08007d60 	.word	0x08007d60
 80005a0:	08007d64 	.word	0x08007d64
 80005a4:	20001cac 	.word	0x20001cac

080005a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CAN_Comm */
  CAN_CommHandle = osThreadNew(StartCAN_Comm, NULL, &CAN_Comm_attributes);
 80005ac:	4a0c      	ldr	r2, [pc, #48]	; (80005e0 <MX_FREERTOS_Init+0x38>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	480c      	ldr	r0, [pc, #48]	; (80005e4 <MX_FREERTOS_Init+0x3c>)
 80005b2:	f004 fb6d 	bl	8004c90 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a0b      	ldr	r2, [pc, #44]	; (80005e8 <MX_FREERTOS_Init+0x40>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of ultra_sensor_rx */
  ultra_sensor_rxHandle = osThreadNew(Start_ultra_sensor_rx, NULL, &ultra_sensor_rx_attributes);
 80005bc:	4a0b      	ldr	r2, [pc, #44]	; (80005ec <MX_FREERTOS_Init+0x44>)
 80005be:	2100      	movs	r1, #0
 80005c0:	480b      	ldr	r0, [pc, #44]	; (80005f0 <MX_FREERTOS_Init+0x48>)
 80005c2:	f004 fb65 	bl	8004c90 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <MX_FREERTOS_Init+0x4c>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* creation of ultra_sensor_tr */
  ultra_sensor_trHandle = osThreadNew(Start_ultra_sensor_tr, NULL, &ultra_sensor_tr_attributes);
 80005cc:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <MX_FREERTOS_Init+0x50>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	480a      	ldr	r0, [pc, #40]	; (80005fc <MX_FREERTOS_Init+0x54>)
 80005d2:	f004 fb5d 	bl	8004c90 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a09      	ldr	r2, [pc, #36]	; (8000600 <MX_FREERTOS_Init+0x58>)
 80005da:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	08007dac 	.word	0x08007dac
 80005e4:	08000605 	.word	0x08000605
 80005e8:	20001a78 	.word	0x20001a78
 80005ec:	08007dd0 	.word	0x08007dd0
 80005f0:	080006bd 	.word	0x080006bd
 80005f4:	20001aa0 	.word	0x20001aa0
 80005f8:	08007df4 	.word	0x08007df4
 80005fc:	080006cd 	.word	0x080006cd
 8000600:	20001a74 	.word	0x20001a74

08000604 <StartCAN_Comm>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCAN_Comm */
void StartCAN_Comm(void *argument)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	; 0x28
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCAN_Comm */
  uint32_t timer_val = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	623b      	str	r3, [r7, #32]
  uint8_t reversed_array[8], reversed_array_size = 0, reversed_array_elem = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000616:	2300      	movs	r3, #0
 8000618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  char string_number[10];

  /* Infinite loop */
  for(;;)
  {
	  xTaskNotifyWait(0, 0, &timer_val, pdMS_TO_TICKS(10));
 800061c:	f107 0220 	add.w	r2, r7, #32
 8000620:	230a      	movs	r3, #10
 8000622:	2100      	movs	r1, #0
 8000624:	2000      	movs	r0, #0
 8000626:	f006 f907 	bl	8006838 <xTaskNotifyWait>
	  itoa(timer_val, string_number, 10);
 800062a:	6a3b      	ldr	r3, [r7, #32]
 800062c:	4618      	mov	r0, r3
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	220a      	movs	r2, #10
 8000634:	4619      	mov	r1, r3
 8000636:	f007 fa5d 	bl	8007af4 <itoa>
	  print_to_console(string_number);
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ff72 	bl	8000528 <print_to_console>

	  reversed_array_size = number_to_byte_arr(reversed_array, timer_val);
 8000644:	6a3a      	ldr	r2, [r7, #32]
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	4611      	mov	r1, r2
 800064c:	4618      	mov	r0, r3
 800064e:	f000 f861 	bl	8000714 <number_to_byte_arr>
 8000652:	4603      	mov	r3, r0
 8000654:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	  reversed_array_elem = reversed_array_size;
 8000658:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800065c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  /*Takes the values from the reversed array and populates the array that will be sent via CAN*/
	  for(uint8_t counter = 0; counter <= reversed_array_size; counter++)
 8000660:	2300      	movs	r3, #0
 8000662:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000666:	e014      	b.n	8000692 <StartCAN_Comm+0x8e>
	  {
		  myTxData[counter] = reversed_array[reversed_array_elem];
 8000668:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800066c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000670:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000674:	440a      	add	r2, r1
 8000676:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 800067a:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <StartCAN_Comm+0xac>)
 800067c:	54d1      	strb	r1, [r2, r3]
		  reversed_array_elem--;
 800067e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000682:	3b01      	subs	r3, #1
 8000684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  for(uint8_t counter = 0; counter <= reversed_array_size; counter++)
 8000688:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800068c:	3301      	adds	r3, #1
 800068e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000692:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000696:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800069a:	429a      	cmp	r2, r3
 800069c:	d9e4      	bls.n	8000668 <StartCAN_Comm+0x64>
	  }

	  reversed_array_size = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData); //Sends the distance to the CAN network.
 80006a4:	4a02      	ldr	r2, [pc, #8]	; (80006b0 <StartCAN_Comm+0xac>)
 80006a6:	4903      	ldr	r1, [pc, #12]	; (80006b4 <StartCAN_Comm+0xb0>)
 80006a8:	4803      	ldr	r0, [pc, #12]	; (80006b8 <StartCAN_Comm+0xb4>)
 80006aa:	f001 f8f2 	bl	8001892 <HAL_FDCAN_AddMessageToTxFifoQ>
	  xTaskNotifyWait(0, 0, &timer_val, pdMS_TO_TICKS(10));
 80006ae:	e7b5      	b.n	800061c <StartCAN_Comm+0x18>
 80006b0:	20001a64 	.word	0x20001a64
 80006b4:	20001a7c 	.word	0x20001a7c
 80006b8:	20001acc 	.word	0x20001acc

080006bc <Start_ultra_sensor_rx>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_ultra_sensor_rx */
void Start_ultra_sensor_rx(void *argument)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	  osDelay(100);
 80006c4:	2064      	movs	r0, #100	; 0x64
 80006c6:	f004 fb75 	bl	8004db4 <osDelay>
 80006ca:	e7fb      	b.n	80006c4 <Start_ultra_sensor_rx+0x8>

080006cc <Start_ultra_sensor_tr>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_ultra_sensor_tr */
void Start_ultra_sensor_tr(void *argument)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_ultra_sensor_tr */
  TickType_t xLastWakeTime;
  HAL_TIM_Base_Start(&htim8);
 80006d4:	480e      	ldr	r0, [pc, #56]	; (8000710 <Start_ultra_sensor_tr+0x44>)
 80006d6:	f002 feb1 	bl	800343c <HAL_TIM_Base_Start>

  xLastWakeTime = xTaskGetTickCount();
 80006da:	f005 fce1 	bl	80060a0 <xTaskGetTickCount>
 80006de:	4603      	mov	r3, r0
 80006e0:	60fb      	str	r3, [r7, #12]


  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(ULTR_TRG_GPIO_Port, ULTR_TRG_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2110      	movs	r1, #16
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ea:	f001 fe15 	bl	8002318 <HAL_GPIO_WritePin>
	  delay_us(100);
 80006ee:	2064      	movs	r0, #100	; 0x64
 80006f0:	f000 fcc4 	bl	800107c <delay_us>
	  HAL_GPIO_WritePin(ULTR_TRG_GPIO_Port, ULTR_TRG_Pin, GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2110      	movs	r1, #16
 80006f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fc:	f001 fe0c 	bl	8002318 <HAL_GPIO_WritePin>

      vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(100));
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2164      	movs	r1, #100	; 0x64
 8000706:	4618      	mov	r0, r3
 8000708:	f005 fafc 	bl	8005d04 <vTaskDelayUntil>
	  HAL_GPIO_WritePin(ULTR_TRG_GPIO_Port, ULTR_TRG_Pin, GPIO_PIN_SET);
 800070c:	e7e9      	b.n	80006e2 <Start_ultra_sensor_tr+0x16>
 800070e:	bf00      	nop
 8000710:	20001b7c 	.word	0x20001b7c

08000714 <number_to_byte_arr>:
* @brief Function that converts a number to a byte array.
* @param argument: Array address, number to convert
* @retval Number or array elements
*/
uint8_t number_to_byte_arr(uint8_t *byte_array, uint32_t number_to_convert)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
	uint8_t arr_index = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	73fb      	strb	r3, [r7, #15]

	while(number_to_convert > 0)
 8000722:	e00b      	b.n	800073c <number_to_byte_arr+0x28>
	{
		byte_array[arr_index] = number_to_convert & 0xFF;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	683a      	ldr	r2, [r7, #0]
 800072c:	b2d2      	uxtb	r2, r2
 800072e:	701a      	strb	r2, [r3, #0]
	    number_to_convert >>= 8;
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	0a1b      	lsrs	r3, r3, #8
 8000734:	603b      	str	r3, [r7, #0]
	    arr_index++;
 8000736:	7bfb      	ldrb	r3, [r7, #15]
 8000738:	3301      	adds	r3, #1
 800073a:	73fb      	strb	r3, [r7, #15]
	while(number_to_convert > 0)
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d1f0      	bne.n	8000724 <number_to_byte_arr+0x10>
	}

	return arr_index - 1;  //Decrease 1 unit due to zero indexing.
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	3b01      	subs	r3, #1
 8000746:	b2db      	uxtb	r3, r3
}
 8000748:	4618      	mov	r0, r3
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000758:	4b20      	ldr	r3, [pc, #128]	; (80007dc <MX_FDCAN1_Init+0x88>)
 800075a:	4a21      	ldr	r2, [pc, #132]	; (80007e0 <MX_FDCAN1_Init+0x8c>)
 800075c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800075e:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <MX_FDCAN1_Init+0x88>)
 8000760:	2200      	movs	r2, #0
 8000762:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000764:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <MX_FDCAN1_Init+0x88>)
 8000766:	f44f 7240 	mov.w	r2, #768	; 0x300
 800076a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_FDCAN1_Init+0x88>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_FDCAN1_Init+0x88>)
 8000774:	2201      	movs	r2, #1
 8000776:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_FDCAN1_Init+0x88>)
 800077a:	2200      	movs	r2, #0
 800077c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_FDCAN1_Init+0x88>)
 8000780:	2200      	movs	r2, #0
 8000782:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_FDCAN1_Init+0x88>)
 8000786:	2201      	movs	r2, #1
 8000788:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_FDCAN1_Init+0x88>)
 800078c:	2210      	movs	r2, #16
 800078e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 63;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_FDCAN1_Init+0x88>)
 8000792:	223f      	movs	r2, #63	; 0x3f
 8000794:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_FDCAN1_Init+0x88>)
 8000798:	2210      	movs	r2, #16
 800079a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_FDCAN1_Init+0x88>)
 800079e:	2201      	movs	r2, #1
 80007a0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_FDCAN1_Init+0x88>)
 80007a4:	2204      	movs	r2, #4
 80007a6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_FDCAN1_Init+0x88>)
 80007aa:	2205      	movs	r2, #5
 80007ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_FDCAN1_Init+0x88>)
 80007b0:	2204      	movs	r2, #4
 80007b2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_FDCAN1_Init+0x88>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_FDCAN1_Init+0x88>)
 80007bc:	2200      	movs	r2, #0
 80007be:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_FDCAN1_Init+0x88>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_FDCAN1_Init+0x88>)
 80007c8:	f000 fe56 	bl	8001478 <HAL_FDCAN_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80007d2:	f000 f9e5 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20001acc 	.word	0x20001acc
 80007e0:	40006400 	.word	0x40006400

080007e4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09a      	sub	sp, #104	; 0x68
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	2244      	movs	r2, #68	; 0x44
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f007 f987 	bl	8007b18 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a24      	ldr	r2, [pc, #144]	; (80008a0 <HAL_FDCAN_MspInit+0xbc>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d141      	bne.n	8000898 <HAL_FDCAN_MspInit+0xb4>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000818:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800081a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800081e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000820:	f107 0310 	add.w	r3, r7, #16
 8000824:	4618      	mov	r0, r3
 8000826:	f002 fbc1 	bl	8002fac <HAL_RCCEx_PeriphCLKConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000830:	f000 f9b6 	bl	8000ba0 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000834:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <HAL_FDCAN_MspInit+0xc0>)
 8000836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000838:	4a1a      	ldr	r2, [pc, #104]	; (80008a4 <HAL_FDCAN_MspInit+0xc0>)
 800083a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800083e:	6593      	str	r3, [r2, #88]	; 0x58
 8000840:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <HAL_FDCAN_MspInit+0xc0>)
 8000842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084c:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <HAL_FDCAN_MspInit+0xc0>)
 800084e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000850:	4a14      	ldr	r2, [pc, #80]	; (80008a4 <HAL_FDCAN_MspInit+0xc0>)
 8000852:	f043 0301 	orr.w	r3, r3, #1
 8000856:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <HAL_FDCAN_MspInit+0xc0>)
 800085a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085c:	f003 0301 	and.w	r3, r3, #1
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000864:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000868:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000876:	2309      	movs	r3, #9
 8000878:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800087e:	4619      	mov	r1, r3
 8000880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000884:	f001 fbae 	bl	8001fe4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	2105      	movs	r1, #5
 800088c:	2015      	movs	r0, #21
 800088e:	f000 fdcb 	bl	8001428 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000892:	2015      	movs	r0, #21
 8000894:	f000 fde2 	bl	800145c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000898:	bf00      	nop
 800089a:	3768      	adds	r7, #104	; 0x68
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40006400 	.word	0x40006400
 80008a4:	40021000 	.word	0x40021000

080008a8 <FDCAN1_MSG_config>:
  }
}

/* USER CODE BEGIN 1 */
void FDCAN1_MSG_config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af02      	add	r7, sp, #8
	//myTxData[1] = 0x00;
	//myTxData[2] = 0x00;
	//myTxData[3] = 0x00;

	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80008b6:	2302      	movs	r3, #2
 80008b8:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80008ba:	2301      	movs	r3, #1
 80008bc:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x321;
 80008be:	f240 3321 	movw	r3, #801	; 0x321
 80008c2:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 80008c4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008c8:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80008ca:	463b      	mov	r3, r7
 80008cc:	4619      	mov	r1, r3
 80008ce:	4824      	ldr	r0, [pc, #144]	; (8000960 <FDCAN1_MSG_config+0xb8>)
 80008d0:	f000 ff2c 	bl	800172c <HAL_FDCAN_ConfigFilter>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <FDCAN1_MSG_config+0x36>
	{
	    Error_Handler();
 80008da:	f000 f961 	bl	8000ba0 <Error_Handler>
	}

	/* Configure global filter to reject all non-matching frames */
	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80008de:	2300      	movs	r3, #0
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2300      	movs	r3, #0
 80008e4:	2202      	movs	r2, #2
 80008e6:	2102      	movs	r1, #2
 80008e8:	481d      	ldr	r0, [pc, #116]	; (8000960 <FDCAN1_MSG_config+0xb8>)
 80008ea:	f000 ff79 	bl	80017e0 <HAL_FDCAN_ConfigGlobalFilter>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <FDCAN1_MSG_config+0x50>
	{
	    Error_Handler();
 80008f4:	f000 f954 	bl	8000ba0 <Error_Handler>
	}

	/* Activate Rx FIFO 0 watermark notification */
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80008f8:	2200      	movs	r2, #0
 80008fa:	2101      	movs	r1, #1
 80008fc:	4818      	ldr	r0, [pc, #96]	; (8000960 <FDCAN1_MSG_config+0xb8>)
 80008fe:	f001 f80c 	bl	800191a <HAL_FDCAN_ActivateNotification>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <FDCAN1_MSG_config+0x64>
	{
	    Error_Handler();
 8000908:	f000 f94a 	bl	8000ba0 <Error_Handler>
	}

	/* Prepare Tx Header */
	TxHeader.Identifier = 0x322;
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <FDCAN1_MSG_config+0xbc>)
 800090e:	f240 3222 	movw	r2, #802	; 0x322
 8000912:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <FDCAN1_MSG_config+0xbc>)
 8000916:	2200      	movs	r2, #0
 8000918:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <FDCAN1_MSG_config+0xbc>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000920:	4b10      	ldr	r3, [pc, #64]	; (8000964 <FDCAN1_MSG_config+0xbc>)
 8000922:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000926:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <FDCAN1_MSG_config+0xbc>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800092e:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <FDCAN1_MSG_config+0xbc>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <FDCAN1_MSG_config+0xbc>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <FDCAN1_MSG_config+0xbc>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <FDCAN1_MSG_config+0xbc>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]

	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <FDCAN1_MSG_config+0xb8>)
 8000948:	f000 ff7b 	bl	8001842 <HAL_FDCAN_Start>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <FDCAN1_MSG_config+0xae>
	{
	    Error_Handler();
 8000952:	f000 f925 	bl	8000ba0 <Error_Handler>
	}
}
 8000956:	bf00      	nop
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20001acc 	.word	0x20001acc
 8000964:	20001a7c 	.word	0x20001a7c

08000968 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	4b2e      	ldr	r3, [pc, #184]	; (8000a38 <MX_GPIO_Init+0xd0>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	4a2d      	ldr	r2, [pc, #180]	; (8000a38 <MX_GPIO_Init+0xd0>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098a:	4b2b      	ldr	r3, [pc, #172]	; (8000a38 <MX_GPIO_Init+0xd0>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000996:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <MX_GPIO_Init+0xd0>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	4a27      	ldr	r2, [pc, #156]	; (8000a38 <MX_GPIO_Init+0xd0>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a2:	4b25      	ldr	r3, [pc, #148]	; (8000a38 <MX_GPIO_Init+0xd0>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTR_TRG_GPIO_Port, ULTR_TRG_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2110      	movs	r1, #16
 80009b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b6:	f001 fcaf 	bl	8002318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c0:	481e      	ldr	r0, [pc, #120]	; (8000a3c <MX_GPIO_Init+0xd4>)
 80009c2:	f001 fca9 	bl	8002318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULRT_ECHO_Pin;
 80009c6:	2302      	movs	r3, #2
 80009c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80009ca:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80009ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ULRT_ECHO_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	4619      	mov	r1, r3
 80009da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009de:	f001 fb01 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULTR_TRG_Pin;
 80009e2:	2310      	movs	r3, #16
 80009e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ULTR_TRG_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	4619      	mov	r1, r3
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fc:	f001 faf2 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	4619      	mov	r1, r3
 8000a18:	4808      	ldr	r0, [pc, #32]	; (8000a3c <MX_GPIO_Init+0xd4>)
 8000a1a:	f001 fae3 	bl	8001fe4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2105      	movs	r1, #5
 8000a22:	2007      	movs	r0, #7
 8000a24:	f000 fd00 	bl	8001428 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a28:	2007      	movs	r0, #7
 8000a2a:	f000 fd17 	bl	800145c <HAL_NVIC_EnableIRQ>

}
 8000a2e:	bf00      	nop
 8000a30:	3720      	adds	r7, #32
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	48000400 	.word	0x48000400

08000a40 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af02      	add	r7, sp, #8
 8000a46:	4603      	mov	r3, r0
 8000a48:	80fb      	strh	r3, [r7, #6]
	GPIO_PinState state;

	if(GPIO_Pin == ULRT_ECHO_Pin) /* Interrupt function for ECHO signal */
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d11c      	bne.n	8000a8a <HAL_GPIO_EXTI_Callback+0x4a>
	{
		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

		state = HAL_GPIO_ReadPin(ULRT_ECHO_GPIO_Port, ULRT_ECHO_Pin);
 8000a50:	2102      	movs	r1, #2
 8000a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a56:	f001 fc47 	bl	80022e8 <HAL_GPIO_ReadPin>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	73fb      	strb	r3, [r7, #15]

		switch(state)
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d006      	beq.n	8000a72 <HAL_GPIO_EXTI_Callback+0x32>
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d112      	bne.n	8000a8e <HAL_GPIO_EXTI_Callback+0x4e>
		{
			case GPIO_PIN_SET:  /*Rising Edge*/
								__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x58>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	625a      	str	r2, [r3, #36]	; 0x24
								break;
 8000a70:	e00e      	b.n	8000a90 <HAL_GPIO_EXTI_Callback+0x50>

			case GPIO_PIN_RESET: /*Falling Edge*/
								 xTaskNotifyFromISR((TaskHandle_t)CAN_CommHandle, __HAL_TIM_GET_COUNTER(&htim2), eSetValueWithOverwrite, NULL);
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000a74:	6818      	ldr	r0, [r3, #0]
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x58>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	2300      	movs	r3, #0
 8000a82:	2203      	movs	r2, #3
 8000a84:	f005 ff38 	bl	80068f8 <xTaskGenericNotifyFromISR>
								 break;
 8000a88:	e002      	b.n	8000a90 <HAL_GPIO_EXTI_Callback+0x50>

			default: break;
		}

	}
 8000a8a:	bf00      	nop
 8000a8c:	e000      	b.n	8000a90 <HAL_GPIO_EXTI_Callback+0x50>
			default: break;
 8000a8e:	bf00      	nop

}
 8000a90:	bf00      	nop
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20001c14 	.word	0x20001c14
 8000a9c:	20001a78 	.word	0x20001a78

08000aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa4:	f000 fbd1 	bl	800124a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa8:	f000 f81c 	bl	8000ae4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aac:	f7ff ff5c 	bl	8000968 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ab0:	f000 fafe 	bl	80010b0 <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8000ab4:	f7ff fe4e 	bl	8000754 <MX_FDCAN1_Init>
  MX_TIM6_Init();
 8000ab8:	f000 f9b8 	bl	8000e2c <MX_TIM6_Init>
  MX_TIM7_Init();
 8000abc:	f000 f9ec 	bl	8000e98 <MX_TIM7_Init>
  MX_TIM8_Init();
 8000ac0:	f000 fa20 	bl	8000f04 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000ac4:	f000 f964 	bl	8000d90 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  FDCAN1_MSG_config();
 8000ac8:	f7ff feee 	bl	80008a8 <FDCAN1_MSG_config>
  HAL_TIM_Base_Start(&htim2);
 8000acc:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <main+0x40>)
 8000ace:	f002 fcb5 	bl	800343c <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000ad2:	f004 f893 	bl	8004bfc <osKernelInitialize>
  MX_FREERTOS_Init();
 8000ad6:	f7ff fd67 	bl	80005a8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000ada:	f004 f8b3 	bl	8004c44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <main+0x3e>
 8000ae0:	20001c14 	.word	0x20001c14

08000ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b094      	sub	sp, #80	; 0x50
 8000ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aea:	f107 0318 	add.w	r3, r7, #24
 8000aee:	2238      	movs	r2, #56	; 0x38
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f007 f810 	bl	8007b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b06:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b0a:	f001 fc35 	bl	8002378 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b18:	2340      	movs	r3, #64	; 0x40
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b20:	2302      	movs	r3, #2
 8000b22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000b24:	2301      	movs	r3, #1
 8000b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b28:	230a      	movs	r3, #10
 8000b2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b38:	f107 0318 	add.w	r3, r7, #24
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f001 fccf 	bl	80024e0 <HAL_RCC_OscConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000b48:	f000 f82a 	bl	8000ba0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b50:	2303      	movs	r3, #3
 8000b52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2102      	movs	r1, #2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f001 ffd3 	bl	8002b10 <HAL_RCC_ClockConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b70:	f000 f816 	bl	8000ba0 <Error_Handler>
  }
}
 8000b74:	bf00      	nop
 8000b76:	3750      	adds	r7, #80	; 0x50
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d101      	bne.n	8000b92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b8e:	f000 fb75 	bl	800127c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40012c00 	.word	0x40012c00

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <Error_Handler+0x8>
	...

08000bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_MspInit+0x50>)
 8000bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb6:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <HAL_MspInit+0x50>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6613      	str	r3, [r2, #96]	; 0x60
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <HAL_MspInit+0x50>)
 8000bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_MspInit+0x50>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <HAL_MspInit+0x50>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <HAL_MspInit+0x50>)
 8000bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	210f      	movs	r1, #15
 8000be6:	f06f 0001 	mvn.w	r0, #1
 8000bea:	f000 fc1d 	bl	8001428 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bee:	f001 fc67 	bl	80024c0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000

08000c00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08c      	sub	sp, #48	; 0x30
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c10:	2300      	movs	r3, #0
 8000c12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c16:	4b2d      	ldr	r3, [pc, #180]	; (8000ccc <HAL_InitTick+0xcc>)
 8000c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1a:	4a2c      	ldr	r2, [pc, #176]	; (8000ccc <HAL_InitTick+0xcc>)
 8000c1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c20:	6613      	str	r3, [r2, #96]	; 0x60
 8000c22:	4b2a      	ldr	r3, [pc, #168]	; (8000ccc <HAL_InitTick+0xcc>)
 8000c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c2e:	f107 020c 	add.w	r2, r7, #12
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f002 f93f 	bl	8002ebc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c3e:	f002 f927 	bl	8002e90 <HAL_RCC_GetPCLK2Freq>
 8000c42:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c46:	4a22      	ldr	r2, [pc, #136]	; (8000cd0 <HAL_InitTick+0xd0>)
 8000c48:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4c:	0c9b      	lsrs	r3, r3, #18
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <HAL_InitTick+0xd4>)
 8000c54:	4a20      	ldr	r2, [pc, #128]	; (8000cd8 <HAL_InitTick+0xd8>)
 8000c56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c58:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <HAL_InitTick+0xd4>)
 8000c5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c5e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c60:	4a1c      	ldr	r2, [pc, #112]	; (8000cd4 <HAL_InitTick+0xd4>)
 8000c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c64:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c66:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <HAL_InitTick+0xd4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <HAL_InitTick+0xd4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000c72:	4818      	ldr	r0, [pc, #96]	; (8000cd4 <HAL_InitTick+0xd4>)
 8000c74:	f002 fb8a 	bl	800338c <HAL_TIM_Base_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d11b      	bne.n	8000cbe <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c86:	4813      	ldr	r0, [pc, #76]	; (8000cd4 <HAL_InitTick+0xd4>)
 8000c88:	f002 fc3a 	bl	8003500 <HAL_TIM_Base_Start_IT>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d111      	bne.n	8000cbe <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c9a:	2019      	movs	r0, #25
 8000c9c:	f000 fbde 	bl	800145c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b0f      	cmp	r3, #15
 8000ca4:	d808      	bhi.n	8000cb8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	6879      	ldr	r1, [r7, #4]
 8000caa:	2019      	movs	r0, #25
 8000cac:	f000 fbbc 	bl	8001428 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb0:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <HAL_InitTick+0xdc>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6013      	str	r3, [r2, #0]
 8000cb6:	e002      	b.n	8000cbe <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 8000cbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3730      	adds	r7, #48	; 0x30
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	431bde83 	.word	0x431bde83
 8000cd4:	20001b30 	.word	0x20001b30
 8000cd8:	40012c00 	.word	0x40012c00
 8000cdc:	20000004 	.word	0x20000004

08000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <NMI_Handler+0x4>

08000ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <BusFault_Handler+0x4>

08000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <UsageFault_Handler+0x4>

08000cfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ULRT_ECHO_Pin);
 8000d10:	2002      	movs	r0, #2
 8000d12:	f001 fb19 	bl	8002348 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <FDCAN1_IT0_IRQHandler+0x10>)
 8000d22:	f000 fee0 	bl	8001ae6 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20001acc 	.word	0x20001acc

08000d30 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d36:	f002 fc4d 	bl	80035d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20001b30 	.word	0x20001b30

08000d44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <TIM6_DAC_IRQHandler+0x10>)
 8000d4a:	f002 fc43 	bl	80035d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20001bc8 	.word	0x20001bc8

08000d58 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <TIM7_IRQHandler+0x10>)
 8000d5e:	f002 fc39 	bl	80035d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20001c60 	.word	0x20001c60

08000d6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <SystemInit+0x20>)
 8000d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <SystemInit+0x20>)
 8000d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dae:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <MX_TIM2_Init+0x98>)
 8000db0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000db4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <MX_TIM2_Init+0x98>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <MX_TIM2_Init+0x98>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <MX_TIM2_Init+0x98>)
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dca:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <MX_TIM2_Init+0x98>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <MX_TIM2_Init+0x98>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dd6:	4814      	ldr	r0, [pc, #80]	; (8000e28 <MX_TIM2_Init+0x98>)
 8000dd8:	f002 fad8 	bl	800338c <HAL_TIM_Base_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000de2:	f7ff fedd 	bl	8000ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	4619      	mov	r1, r3
 8000df2:	480d      	ldr	r0, [pc, #52]	; (8000e28 <MX_TIM2_Init+0x98>)
 8000df4:	f002 fd6e 	bl	80038d4 <HAL_TIM_ConfigClockSource>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000dfe:	f7ff fecf 	bl	8000ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4806      	ldr	r0, [pc, #24]	; (8000e28 <MX_TIM2_Init+0x98>)
 8000e10:	f002 ffae 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e1a:	f7ff fec1 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	3720      	adds	r7, #32
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20001c14 	.word	0x20001c14

08000e2c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <MX_TIM6_Init+0x64>)
 8000e3e:	4a15      	ldr	r2, [pc, #84]	; (8000e94 <MX_TIM6_Init+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <MX_TIM6_Init+0x64>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <MX_TIM6_Init+0x64>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <MX_TIM6_Init+0x64>)
 8000e50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e54:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <MX_TIM6_Init+0x64>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e5c:	480c      	ldr	r0, [pc, #48]	; (8000e90 <MX_TIM6_Init+0x64>)
 8000e5e:	f002 fa95 	bl	800338c <HAL_TIM_Base_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000e68:	f7ff fe9a 	bl	8000ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_TIM6_Init+0x64>)
 8000e7a:	f002 ff79 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000e84:	f7ff fe8c 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20001bc8 	.word	0x20001bc8
 8000e94:	40001000 	.word	0x40001000

08000e98 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <MX_TIM7_Init+0x64>)
 8000eaa:	4a15      	ldr	r2, [pc, #84]	; (8000f00 <MX_TIM7_Init+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <MX_TIM7_Init+0x64>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <MX_TIM7_Init+0x64>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <MX_TIM7_Init+0x64>)
 8000ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ec0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <MX_TIM7_Init+0x64>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <MX_TIM7_Init+0x64>)
 8000eca:	f002 fa5f 	bl	800338c <HAL_TIM_Base_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000ed4:	f7ff fe64 	bl	8000ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_TIM7_Init+0x64>)
 8000ee6:	f002 ff43 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000ef0:	f7ff fe56 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20001c60 	.word	0x20001c60
 8000f00:	40001400 	.word	0x40001400

08000f04 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <MX_TIM8_Init+0xa0>)
 8000f24:	4a20      	ldr	r2, [pc, #128]	; (8000fa8 <MX_TIM8_Init+0xa4>)
 8000f26:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 80-1;
 8000f28:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <MX_TIM8_Init+0xa0>)
 8000f2a:	224f      	movs	r2, #79	; 0x4f
 8000f2c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <MX_TIM8_Init+0xa0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65534;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <MX_TIM8_Init+0xa0>)
 8000f36:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000f3a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <MX_TIM8_Init+0xa0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f42:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <MX_TIM8_Init+0xa0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <MX_TIM8_Init+0xa0>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f4e:	4815      	ldr	r0, [pc, #84]	; (8000fa4 <MX_TIM8_Init+0xa0>)
 8000f50:	f002 fa1c 	bl	800338c <HAL_TIM_Base_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8000f5a:	f7ff fe21 	bl	8000ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f64:	f107 0310 	add.w	r3, r7, #16
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480e      	ldr	r0, [pc, #56]	; (8000fa4 <MX_TIM8_Init+0xa0>)
 8000f6c:	f002 fcb2 	bl	80038d4 <HAL_TIM_ConfigClockSource>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8000f76:	f7ff fe13 	bl	8000ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <MX_TIM8_Init+0xa0>)
 8000f8c:	f002 fef0 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000f96:	f7ff fe03 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	3720      	adds	r7, #32
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20001b7c 	.word	0x20001b7c
 8000fa8:	40013400 	.word	0x40013400

08000fac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fbc:	d10c      	bne.n	8000fd8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fbe:	4b2b      	ldr	r3, [pc, #172]	; (800106c <HAL_TIM_Base_MspInit+0xc0>)
 8000fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc2:	4a2a      	ldr	r2, [pc, #168]	; (800106c <HAL_TIM_Base_MspInit+0xc0>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fca:	4b28      	ldr	r3, [pc, #160]	; (800106c <HAL_TIM_Base_MspInit+0xc0>)
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000fd6:	e044      	b.n	8001062 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM6)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a24      	ldr	r2, [pc, #144]	; (8001070 <HAL_TIM_Base_MspInit+0xc4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d114      	bne.n	800100c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fe2:	4b22      	ldr	r3, [pc, #136]	; (800106c <HAL_TIM_Base_MspInit+0xc0>)
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe6:	4a21      	ldr	r2, [pc, #132]	; (800106c <HAL_TIM_Base_MspInit+0xc0>)
 8000fe8:	f043 0310 	orr.w	r3, r3, #16
 8000fec:	6593      	str	r3, [r2, #88]	; 0x58
 8000fee:	4b1f      	ldr	r3, [pc, #124]	; (800106c <HAL_TIM_Base_MspInit+0xc0>)
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	f003 0310 	and.w	r3, r3, #16
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2105      	movs	r1, #5
 8000ffe:	2036      	movs	r0, #54	; 0x36
 8001000:	f000 fa12 	bl	8001428 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001004:	2036      	movs	r0, #54	; 0x36
 8001006:	f000 fa29 	bl	800145c <HAL_NVIC_EnableIRQ>
}
 800100a:	e02a      	b.n	8001062 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM7)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a18      	ldr	r2, [pc, #96]	; (8001074 <HAL_TIM_Base_MspInit+0xc8>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d114      	bne.n	8001040 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <HAL_TIM_Base_MspInit+0xc0>)
 8001018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101a:	4a14      	ldr	r2, [pc, #80]	; (800106c <HAL_TIM_Base_MspInit+0xc0>)
 800101c:	f043 0320 	orr.w	r3, r3, #32
 8001020:	6593      	str	r3, [r2, #88]	; 0x58
 8001022:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_TIM_Base_MspInit+0xc0>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001026:	f003 0320 	and.w	r3, r3, #32
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2105      	movs	r1, #5
 8001032:	2037      	movs	r0, #55	; 0x37
 8001034:	f000 f9f8 	bl	8001428 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001038:	2037      	movs	r0, #55	; 0x37
 800103a:	f000 fa0f 	bl	800145c <HAL_NVIC_EnableIRQ>
}
 800103e:	e010      	b.n	8001062 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <HAL_TIM_Base_MspInit+0xcc>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d10b      	bne.n	8001062 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_TIM_Base_MspInit+0xc0>)
 800104c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104e:	4a07      	ldr	r2, [pc, #28]	; (800106c <HAL_TIM_Base_MspInit+0xc0>)
 8001050:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001054:	6613      	str	r3, [r2, #96]	; 0x60
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_TIM_Base_MspInit+0xc0>)
 8001058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
}
 8001062:	bf00      	nop
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000
 8001070:	40001000 	.word	0x40001000
 8001074:	40001400 	.word	0x40001400
 8001078:	40013400 	.word	0x40013400

0800107c <delay_us>:
  }
}

/* USER CODE BEGIN 1 */
void delay_us(uint16_t us)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim8, 0);
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <delay_us+0x30>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim8) < us);
 800108e:	bf00      	nop
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <delay_us+0x30>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001096:	88fb      	ldrh	r3, [r7, #6]
 8001098:	429a      	cmp	r2, r3
 800109a:	d3f9      	bcc.n	8001090 <delay_us+0x14>
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20001b7c 	.word	0x20001b7c

080010b0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b4:	4b22      	ldr	r3, [pc, #136]	; (8001140 <MX_USART2_UART_Init+0x90>)
 80010b6:	4a23      	ldr	r2, [pc, #140]	; (8001144 <MX_USART2_UART_Init+0x94>)
 80010b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ba:	4b21      	ldr	r3, [pc, #132]	; (8001140 <MX_USART2_UART_Init+0x90>)
 80010bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010c2:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <MX_USART2_UART_Init+0x90>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c8:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <MX_USART2_UART_Init+0x90>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ce:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <MX_USART2_UART_Init+0x90>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d4:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_USART2_UART_Init+0x90>)
 80010d6:	220c      	movs	r2, #12
 80010d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010da:	4b19      	ldr	r3, [pc, #100]	; (8001140 <MX_USART2_UART_Init+0x90>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e0:	4b17      	ldr	r3, [pc, #92]	; (8001140 <MX_USART2_UART_Init+0x90>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e6:	4b16      	ldr	r3, [pc, #88]	; (8001140 <MX_USART2_UART_Init+0x90>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_USART2_UART_Init+0x90>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <MX_USART2_UART_Init+0x90>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010f8:	4811      	ldr	r0, [pc, #68]	; (8001140 <MX_USART2_UART_Init+0x90>)
 80010fa:	f002 ff01 	bl	8003f00 <HAL_UART_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001104:	f7ff fd4c 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001108:	2100      	movs	r1, #0
 800110a:	480d      	ldr	r0, [pc, #52]	; (8001140 <MX_USART2_UART_Init+0x90>)
 800110c:	f003 fc68 	bl	80049e0 <HAL_UARTEx_SetTxFifoThreshold>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001116:	f7ff fd43 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800111a:	2100      	movs	r1, #0
 800111c:	4808      	ldr	r0, [pc, #32]	; (8001140 <MX_USART2_UART_Init+0x90>)
 800111e:	f003 fc9d 	bl	8004a5c <HAL_UARTEx_SetRxFifoThreshold>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001128:	f7ff fd3a 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <MX_USART2_UART_Init+0x90>)
 800112e:	f003 fc1e 	bl	800496e <HAL_UARTEx_DisableFifoMode>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001138:	f7ff fd32 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20001cac 	.word	0x20001cac
 8001144:	40004400 	.word	0x40004400

08001148 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b09a      	sub	sp, #104	; 0x68
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	2244      	movs	r2, #68	; 0x44
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f006 fcd5 	bl	8007b18 <memset>
  if(uartHandle->Instance==USART2)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a1f      	ldr	r2, [pc, #124]	; (80011f0 <HAL_UART_MspInit+0xa8>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d136      	bne.n	80011e6 <HAL_UART_MspInit+0x9e>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001178:	2302      	movs	r3, #2
 800117a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	4618      	mov	r0, r3
 8001186:	f001 ff11 	bl	8002fac <HAL_RCCEx_PeriphCLKConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001190:	f7ff fd06 	bl	8000ba0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <HAL_UART_MspInit+0xac>)
 8001196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001198:	4a16      	ldr	r2, [pc, #88]	; (80011f4 <HAL_UART_MspInit+0xac>)
 800119a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119e:	6593      	str	r3, [r2, #88]	; 0x58
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <HAL_UART_MspInit+0xac>)
 80011a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <HAL_UART_MspInit+0xac>)
 80011ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b0:	4a10      	ldr	r2, [pc, #64]	; (80011f4 <HAL_UART_MspInit+0xac>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <HAL_UART_MspInit+0xac>)
 80011ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80011c4:	230c      	movs	r3, #12
 80011c6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011d4:	2307      	movs	r3, #7
 80011d6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011dc:	4619      	mov	r1, r3
 80011de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e2:	f000 feff 	bl	8001fe4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011e6:	bf00      	nop
 80011e8:	3768      	adds	r7, #104	; 0x68
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40004400 	.word	0x40004400
 80011f4:	40021000 	.word	0x40021000

080011f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011f8:	480d      	ldr	r0, [pc, #52]	; (8001230 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011fc:	480d      	ldr	r0, [pc, #52]	; (8001234 <LoopForever+0x6>)
  ldr r1, =_edata
 80011fe:	490e      	ldr	r1, [pc, #56]	; (8001238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001200:	4a0e      	ldr	r2, [pc, #56]	; (800123c <LoopForever+0xe>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001204:	e002      	b.n	800120c <LoopCopyDataInit>

08001206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120a:	3304      	adds	r3, #4

0800120c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800120c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001210:	d3f9      	bcc.n	8001206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001214:	4c0b      	ldr	r4, [pc, #44]	; (8001244 <LoopForever+0x16>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001218:	e001      	b.n	800121e <LoopFillZerobss>

0800121a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800121c:	3204      	adds	r2, #4

0800121e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001220:	d3fb      	bcc.n	800121a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001222:	f7ff fda3 	bl	8000d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001226:	f006 fc29 	bl	8007a7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800122a:	f7ff fc39 	bl	8000aa0 <main>

0800122e <LoopForever>:

LoopForever:
    b LoopForever
 800122e:	e7fe      	b.n	800122e <LoopForever>
  ldr   r0, =_estack
 8001230:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001238:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800123c:	08007f00 	.word	0x08007f00
  ldr r2, =_sbss
 8001240:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001244:	20001d8c 	.word	0x20001d8c

08001248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC1_2_IRQHandler>

0800124a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001250:	2300      	movs	r3, #0
 8001252:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001254:	2003      	movs	r0, #3
 8001256:	f000 f8dc 	bl	8001412 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800125a:	2005      	movs	r0, #5
 800125c:	f7ff fcd0 	bl	8000c00 <HAL_InitTick>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d002      	beq.n	800126c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	71fb      	strb	r3, [r7, #7]
 800126a:	e001      	b.n	8001270 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800126c:	f7ff fc9e 	bl	8000bac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001270:	79fb      	ldrb	r3, [r7, #7]

}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_IncTick+0x1c>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_IncTick+0x20>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4413      	add	r3, r2
 800128a:	4a03      	ldr	r2, [pc, #12]	; (8001298 <HAL_IncTick+0x1c>)
 800128c:	6013      	str	r3, [r2, #0]
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	20001d3c 	.word	0x20001d3c
 800129c:	20000008 	.word	0x20000008

080012a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <HAL_GetTick+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20001d3c 	.word	0x20001d3c

080012b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d4:	4013      	ands	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ea:	4a04      	ldr	r2, [pc, #16]	; (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	60d3      	str	r3, [r2, #12]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <__NVIC_GetPriorityGrouping+0x18>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	f003 0307 	and.w	r3, r3, #7
}
 800130e:	4618      	mov	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	2b00      	cmp	r3, #0
 800132c:	db0b      	blt.n	8001346 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	f003 021f 	and.w	r2, r3, #31
 8001334:	4907      	ldr	r1, [pc, #28]	; (8001354 <__NVIC_EnableIRQ+0x38>)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	095b      	lsrs	r3, r3, #5
 800133c:	2001      	movs	r0, #1
 800133e:	fa00 f202 	lsl.w	r2, r0, r2
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000e100 	.word	0xe000e100

08001358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	6039      	str	r1, [r7, #0]
 8001362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001368:	2b00      	cmp	r3, #0
 800136a:	db0a      	blt.n	8001382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	b2da      	uxtb	r2, r3
 8001370:	490c      	ldr	r1, [pc, #48]	; (80013a4 <__NVIC_SetPriority+0x4c>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	0112      	lsls	r2, r2, #4
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	440b      	add	r3, r1
 800137c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001380:	e00a      	b.n	8001398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4908      	ldr	r1, [pc, #32]	; (80013a8 <__NVIC_SetPriority+0x50>)
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	3b04      	subs	r3, #4
 8001390:	0112      	lsls	r2, r2, #4
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	440b      	add	r3, r1
 8001396:	761a      	strb	r2, [r3, #24]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000e100 	.word	0xe000e100
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b089      	sub	sp, #36	; 0x24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f1c3 0307 	rsb	r3, r3, #7
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	bf28      	it	cs
 80013ca:	2304      	movcs	r3, #4
 80013cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3304      	adds	r3, #4
 80013d2:	2b06      	cmp	r3, #6
 80013d4:	d902      	bls.n	80013dc <NVIC_EncodePriority+0x30>
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3b03      	subs	r3, #3
 80013da:	e000      	b.n	80013de <NVIC_EncodePriority+0x32>
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	f04f 32ff 	mov.w	r2, #4294967295
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43da      	mvns	r2, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	401a      	ands	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f4:	f04f 31ff 	mov.w	r1, #4294967295
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa01 f303 	lsl.w	r3, r1, r3
 80013fe:	43d9      	mvns	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	4313      	orrs	r3, r2
         );
}
 8001406:	4618      	mov	r0, r3
 8001408:	3724      	adds	r7, #36	; 0x24
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ff4c 	bl	80012b8 <__NVIC_SetPriorityGrouping>
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001436:	f7ff ff63 	bl	8001300 <__NVIC_GetPriorityGrouping>
 800143a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	68b9      	ldr	r1, [r7, #8]
 8001440:	6978      	ldr	r0, [r7, #20]
 8001442:	f7ff ffb3 	bl	80013ac <NVIC_EncodePriority>
 8001446:	4602      	mov	r2, r0
 8001448:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144c:	4611      	mov	r1, r2
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff ff82 	bl	8001358 <__NVIC_SetPriority>
}
 8001454:	bf00      	nop
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff56 	bl	800131c <__NVIC_EnableIRQ>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e147      	b.n	800171a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d106      	bne.n	80014a4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff f9a0 	bl	80007e4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	699a      	ldr	r2, [r3, #24]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0210 	bic.w	r2, r2, #16
 80014b2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b4:	f7ff fef4 	bl	80012a0 <HAL_GetTick>
 80014b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80014ba:	e012      	b.n	80014e2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80014bc:	f7ff fef0 	bl	80012a0 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b0a      	cmp	r3, #10
 80014c8:	d90b      	bls.n	80014e2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ce:	f043 0201 	orr.w	r2, r3, #1
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2203      	movs	r2, #3
 80014da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e11b      	b.n	800171a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	f003 0308 	and.w	r3, r3, #8
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d0e5      	beq.n	80014bc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	699a      	ldr	r2, [r3, #24]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0201 	orr.w	r2, r2, #1
 80014fe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001500:	f7ff fece 	bl	80012a0 <HAL_GetTick>
 8001504:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001506:	e012      	b.n	800152e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001508:	f7ff feca 	bl	80012a0 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b0a      	cmp	r3, #10
 8001514:	d90b      	bls.n	800152e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800151a:	f043 0201 	orr.w	r2, r3, #1
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2203      	movs	r2, #3
 8001526:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e0f5      	b.n	800171a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0e5      	beq.n	8001508 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	699a      	ldr	r2, [r3, #24]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0202 	orr.w	r2, r2, #2
 800154a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a74      	ldr	r2, [pc, #464]	; (8001724 <HAL_FDCAN_Init+0x2ac>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d103      	bne.n	800155e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001556:	4a74      	ldr	r2, [pc, #464]	; (8001728 <HAL_FDCAN_Init+0x2b0>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7c1b      	ldrb	r3, [r3, #16]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d108      	bne.n	8001578 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	699a      	ldr	r2, [r3, #24]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001574:	619a      	str	r2, [r3, #24]
 8001576:	e007      	b.n	8001588 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699a      	ldr	r2, [r3, #24]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001586:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	7c5b      	ldrb	r3, [r3, #17]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d108      	bne.n	80015a2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	699a      	ldr	r2, [r3, #24]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800159e:	619a      	str	r2, [r3, #24]
 80015a0:	e007      	b.n	80015b2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	699a      	ldr	r2, [r3, #24]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015b0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	7c9b      	ldrb	r3, [r3, #18]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d108      	bne.n	80015cc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	699a      	ldr	r2, [r3, #24]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015c8:	619a      	str	r2, [r3, #24]
 80015ca:	e007      	b.n	80015dc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	699a      	ldr	r2, [r3, #24]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015da:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	699a      	ldr	r2, [r3, #24]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001600:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	691a      	ldr	r2, [r3, #16]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0210 	bic.w	r2, r2, #16
 8001610:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d108      	bne.n	800162c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	699a      	ldr	r2, [r3, #24]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f042 0204 	orr.w	r2, r2, #4
 8001628:	619a      	str	r2, [r3, #24]
 800162a:	e02c      	b.n	8001686 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d028      	beq.n	8001686 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b02      	cmp	r3, #2
 800163a:	d01c      	beq.n	8001676 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	699a      	ldr	r2, [r3, #24]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800164a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	691a      	ldr	r2, [r3, #16]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0210 	orr.w	r2, r2, #16
 800165a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	2b03      	cmp	r3, #3
 8001662:	d110      	bne.n	8001686 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	699a      	ldr	r2, [r3, #24]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0220 	orr.w	r2, r2, #32
 8001672:	619a      	str	r2, [r3, #24]
 8001674:	e007      	b.n	8001686 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	699a      	ldr	r2, [r3, #24]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 0220 	orr.w	r2, r2, #32
 8001684:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	3b01      	subs	r3, #1
 800168c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	3b01      	subs	r3, #1
 8001694:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001696:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800169e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80016ae:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016b0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80016ba:	d115      	bne.n	80016e8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	3b01      	subs	r3, #1
 80016c8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016ca:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	3b01      	subs	r3, #1
 80016d2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80016d4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	3b01      	subs	r3, #1
 80016de:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80016e4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016e6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 fb9e 	bl	8001e40 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40006400 	.word	0x40006400
 8001728:	40006500 	.word	0x40006500

0800172c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800172c:	b480      	push	{r7}
 800172e:	b087      	sub	sp, #28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800173c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800173e:	7dfb      	ldrb	r3, [r7, #23]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d002      	beq.n	800174a <HAL_FDCAN_ConfigFilter+0x1e>
 8001744:	7dfb      	ldrb	r3, [r7, #23]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d13d      	bne.n	80017c6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d119      	bne.n	8001786 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800175e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001766:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	e01d      	b.n	80017c2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	075a      	lsls	r2, r3, #29
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	079a      	lsls	r2, r3, #30
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	4313      	orrs	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	4413      	add	r3, r2
 80017ae:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	3304      	adds	r3, #4
 80017ba:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e006      	b.n	80017d4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ca:	f043 0202 	orr.w	r2, r3, #2
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
  }
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	371c      	adds	r7, #28
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
 80017ec:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d116      	bne.n	8001828 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001802:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	011a      	lsls	r2, r3, #4
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	431a      	orrs	r2, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	431a      	orrs	r2, r3
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	431a      	orrs	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	e006      	b.n	8001836 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182c:	f043 0204 	orr.w	r2, r3, #4
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
  }
}
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b01      	cmp	r3, #1
 8001854:	d110      	bne.n	8001878 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2202      	movs	r2, #2
 800185a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	699a      	ldr	r2, [r3, #24]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0201 	bic.w	r2, r2, #1
 800186c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	e006      	b.n	8001886 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187c:	f043 0204 	orr.w	r2, r3, #4
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
  }
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d12c      	bne.n	8001904 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80018b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d007      	beq.n	80018ca <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e023      	b.n	8001912 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80018d2:	0c1b      	lsrs	r3, r3, #16
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	68b9      	ldr	r1, [r7, #8]
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f000 fb03 	bl	8001eec <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2101      	movs	r1, #1
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	fa01 f202 	lsl.w	r2, r1, r2
 80018f2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80018f6:	2201      	movs	r2, #1
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	409a      	lsls	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	e006      	b.n	8001912 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001908:	f043 0208 	orr.w	r2, r3, #8
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
  }
}
 8001912:	4618      	mov	r0, r3
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800191a:	b480      	push	{r7}
 800191c:	b087      	sub	sp, #28
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800192c:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800192e:	7dfb      	ldrb	r3, [r7, #23]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d003      	beq.n	800193c <HAL_FDCAN_ActivateNotification+0x22>
 8001934:	7dfb      	ldrb	r3, [r7, #23]
 8001936:	2b02      	cmp	r3, #2
 8001938:	f040 80c8 	bne.w	8001acc <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	2b00      	cmp	r3, #0
 800194c:	d004      	beq.n	8001958 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d03b      	beq.n	80019d0 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d031      	beq.n	80019d0 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001972:	2b00      	cmp	r3, #0
 8001974:	d004      	beq.n	8001980 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d027      	beq.n	80019d0 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001986:	2b00      	cmp	r3, #0
 8001988:	d004      	beq.n	8001994 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	2b00      	cmp	r3, #0
 8001992:	d01d      	beq.n	80019d0 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	f003 0310 	and.w	r3, r3, #16
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d013      	beq.n	80019d0 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d004      	beq.n	80019bc <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	f003 0320 	and.w	r3, r3, #32
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d009      	beq.n	80019d0 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00c      	beq.n	80019e0 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d107      	bne.n	80019e0 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0201 	orr.w	r2, r2, #1
 80019de:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d004      	beq.n	80019f4 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d13b      	bne.n	8001a6c <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d004      	beq.n	8001a08 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d131      	bne.n	8001a6c <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d004      	beq.n	8001a1c <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d127      	bne.n	8001a6c <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d004      	beq.n	8001a30 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d11d      	bne.n	8001a6c <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d004      	beq.n	8001a44 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	f003 0310 	and.w	r3, r3, #16
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d113      	bne.n	8001a6c <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d004      	beq.n	8001a58 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	f003 0320 	and.w	r3, r3, #32
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d109      	bne.n	8001a6c <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00c      	beq.n	8001a7c <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d007      	beq.n	8001a7c <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0202 	orr.w	r2, r2, #2
 8001a7a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d009      	beq.n	8001a9a <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d009      	beq.n	8001ab8 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e006      	b.n	8001ada <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad0:	f043 0202 	orr.w	r2, r3, #2
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
  }
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	371c      	adds	r7, #28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b08a      	sub	sp, #40	; 0x28
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b02:	4013      	ands	r3, r2
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b18:	6a3a      	ldr	r2, [r7, #32]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b28:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	4013      	ands	r3, r2
 8001b34:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b3c:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001b40:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b54:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b58:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	4013      	ands	r3, r2
 8001b64:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00d      	beq.n	8001b90 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d006      	beq.n	8001b90 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2240      	movs	r2, #64	; 0x40
 8001b88:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f939 	bl	8001e02 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d01b      	beq.n	8001bd6 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d014      	beq.n	8001bd6 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bb4:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bcc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001bce:	6939      	ldr	r1, [r7, #16]
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f8f7 	bl	8001dc4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d007      	beq.n	8001bec <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001be4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f8b6 	bl	8001d58 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d007      	beq.n	8001c02 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6a3a      	ldr	r2, [r7, #32]
 8001bf8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001bfa:	6a39      	ldr	r1, [r7, #32]
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f8b6 	bl	8001d6e <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d007      	beq.n	8001c18 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001c10:	69f9      	ldr	r1, [r7, #28]
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f8b6 	bl	8001d84 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00e      	beq.n	8001c44 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d007      	beq.n	8001c44 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c3c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f8ab 	bl	8001d9a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d01a      	beq.n	8001c88 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d013      	beq.n	8001c88 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c68:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	4013      	ands	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2280      	movs	r2, #128	; 0x80
 8001c7e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001c80:	68f9      	ldr	r1, [r7, #12]
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f893 	bl	8001dae <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00e      	beq.n	8001cb4 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d007      	beq.n	8001cb4 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cac:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f893 	bl	8001dda <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00e      	beq.n	8001ce0 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d007      	beq.n	8001ce0 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cd8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f887 	bl	8001dee <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d011      	beq.n	8001d12 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00a      	beq.n	8001d12 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d04:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001d20:	6979      	ldr	r1, [r7, #20]
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f881 	bl	8001e2a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d009      	beq.n	8001d42 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f863 	bl	8001e16 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001d50:	bf00      	nop
 8001d52:	3728      	adds	r7, #40	; 0x28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001e48:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001e4a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e5a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e62:	041a      	lsls	r2, r3, #16
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e80:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e88:	061a      	lsls	r2, r3, #24
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	e005      	b.n	8001ece <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	3304      	adds	r3, #4
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d3f3      	bcc.n	8001ec2 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001eda:	bf00      	nop
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	4000a400 	.word	0x4000a400

08001eec <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	; 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
 8001ef8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10a      	bne.n	8001f18 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001f0a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61fb      	str	r3, [r7, #28]
 8001f16:	e00a      	b.n	8001f2e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001f20:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001f26:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f2c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f38:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001f3e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001f44:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	3304      	adds	r3, #4
 8001f76:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	e020      	b.n	8001fc0 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3303      	adds	r3, #3
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	3302      	adds	r3, #2
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	440b      	add	r3, r1
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001f96:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	440b      	add	r3, r1
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001fa4:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	440a      	add	r2, r1
 8001fac:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001fae:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	0c1b      	lsrs	r3, r3, #16
 8001fc6:	4a06      	ldr	r2, [pc, #24]	; (8001fe0 <FDCAN_CopyMessageToRAM+0xf4>)
 8001fc8:	5cd3      	ldrb	r3, [r2, r3]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d3d5      	bcc.n	8001f7e <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8001fd2:	bf00      	nop
 8001fd4:	bf00      	nop
 8001fd6:	3724      	adds	r7, #36	; 0x24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	08007e30 	.word	0x08007e30

08001fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ff2:	e15a      	b.n	80022aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	4013      	ands	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 814c 	beq.w	80022a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b01      	cmp	r3, #1
 8002016:	d005      	beq.n	8002024 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002020:	2b02      	cmp	r3, #2
 8002022:	d130      	bne.n	8002086 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	2203      	movs	r2, #3
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800205a:	2201      	movs	r2, #1
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	091b      	lsrs	r3, r3, #4
 8002070:	f003 0201 	and.w	r2, r3, #1
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	2b03      	cmp	r3, #3
 8002090:	d017      	beq.n	80020c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	2203      	movs	r2, #3
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d123      	bne.n	8002116 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	08da      	lsrs	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3208      	adds	r2, #8
 80020d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	220f      	movs	r2, #15
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	08da      	lsrs	r2, r3, #3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3208      	adds	r2, #8
 8002110:	6939      	ldr	r1, [r7, #16]
 8002112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	2203      	movs	r2, #3
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 0203 	and.w	r2, r3, #3
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 80a6 	beq.w	80022a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002158:	4b5b      	ldr	r3, [pc, #364]	; (80022c8 <HAL_GPIO_Init+0x2e4>)
 800215a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800215c:	4a5a      	ldr	r2, [pc, #360]	; (80022c8 <HAL_GPIO_Init+0x2e4>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6613      	str	r3, [r2, #96]	; 0x60
 8002164:	4b58      	ldr	r3, [pc, #352]	; (80022c8 <HAL_GPIO_Init+0x2e4>)
 8002166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002170:	4a56      	ldr	r2, [pc, #344]	; (80022cc <HAL_GPIO_Init+0x2e8>)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	089b      	lsrs	r3, r3, #2
 8002176:	3302      	adds	r3, #2
 8002178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	220f      	movs	r2, #15
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800219a:	d01f      	beq.n	80021dc <HAL_GPIO_Init+0x1f8>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a4c      	ldr	r2, [pc, #304]	; (80022d0 <HAL_GPIO_Init+0x2ec>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d019      	beq.n	80021d8 <HAL_GPIO_Init+0x1f4>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a4b      	ldr	r2, [pc, #300]	; (80022d4 <HAL_GPIO_Init+0x2f0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d013      	beq.n	80021d4 <HAL_GPIO_Init+0x1f0>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a4a      	ldr	r2, [pc, #296]	; (80022d8 <HAL_GPIO_Init+0x2f4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d00d      	beq.n	80021d0 <HAL_GPIO_Init+0x1ec>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a49      	ldr	r2, [pc, #292]	; (80022dc <HAL_GPIO_Init+0x2f8>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d007      	beq.n	80021cc <HAL_GPIO_Init+0x1e8>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a48      	ldr	r2, [pc, #288]	; (80022e0 <HAL_GPIO_Init+0x2fc>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d101      	bne.n	80021c8 <HAL_GPIO_Init+0x1e4>
 80021c4:	2305      	movs	r3, #5
 80021c6:	e00a      	b.n	80021de <HAL_GPIO_Init+0x1fa>
 80021c8:	2306      	movs	r3, #6
 80021ca:	e008      	b.n	80021de <HAL_GPIO_Init+0x1fa>
 80021cc:	2304      	movs	r3, #4
 80021ce:	e006      	b.n	80021de <HAL_GPIO_Init+0x1fa>
 80021d0:	2303      	movs	r3, #3
 80021d2:	e004      	b.n	80021de <HAL_GPIO_Init+0x1fa>
 80021d4:	2302      	movs	r3, #2
 80021d6:	e002      	b.n	80021de <HAL_GPIO_Init+0x1fa>
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <HAL_GPIO_Init+0x1fa>
 80021dc:	2300      	movs	r3, #0
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	f002 0203 	and.w	r2, r2, #3
 80021e4:	0092      	lsls	r2, r2, #2
 80021e6:	4093      	lsls	r3, r2
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021ee:	4937      	ldr	r1, [pc, #220]	; (80022cc <HAL_GPIO_Init+0x2e8>)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	089b      	lsrs	r3, r3, #2
 80021f4:	3302      	adds	r3, #2
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021fc:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <HAL_GPIO_Init+0x300>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	43db      	mvns	r3, r3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002220:	4a30      	ldr	r2, [pc, #192]	; (80022e4 <HAL_GPIO_Init+0x300>)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002226:	4b2f      	ldr	r3, [pc, #188]	; (80022e4 <HAL_GPIO_Init+0x300>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	43db      	mvns	r3, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4013      	ands	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800224a:	4a26      	ldr	r2, [pc, #152]	; (80022e4 <HAL_GPIO_Init+0x300>)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002250:	4b24      	ldr	r3, [pc, #144]	; (80022e4 <HAL_GPIO_Init+0x300>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	43db      	mvns	r3, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4013      	ands	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002274:	4a1b      	ldr	r2, [pc, #108]	; (80022e4 <HAL_GPIO_Init+0x300>)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800227a:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <HAL_GPIO_Init+0x300>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	43db      	mvns	r3, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4013      	ands	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800229e:	4a11      	ldr	r2, [pc, #68]	; (80022e4 <HAL_GPIO_Init+0x300>)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	3301      	adds	r3, #1
 80022a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	fa22 f303 	lsr.w	r3, r2, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f47f ae9d 	bne.w	8001ff4 <HAL_GPIO_Init+0x10>
  }
}
 80022ba:	bf00      	nop
 80022bc:	bf00      	nop
 80022be:	371c      	adds	r7, #28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40010000 	.word	0x40010000
 80022d0:	48000400 	.word	0x48000400
 80022d4:	48000800 	.word	0x48000800
 80022d8:	48000c00 	.word	0x48000c00
 80022dc:	48001000 	.word	0x48001000
 80022e0:	48001400 	.word	0x48001400
 80022e4:	40010400 	.word	0x40010400

080022e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	887b      	ldrh	r3, [r7, #2]
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002300:	2301      	movs	r3, #1
 8002302:	73fb      	strb	r3, [r7, #15]
 8002304:	e001      	b.n	800230a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002306:	2300      	movs	r3, #0
 8002308:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800230a:	7bfb      	ldrb	r3, [r7, #15]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	807b      	strh	r3, [r7, #2]
 8002324:	4613      	mov	r3, r2
 8002326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002328:	787b      	ldrb	r3, [r7, #1]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800232e:	887a      	ldrh	r2, [r7, #2]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002334:	e002      	b.n	800233c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002336:	887a      	ldrh	r2, [r7, #2]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	4013      	ands	r3, r2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d006      	beq.n	800236c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800235e:	4a05      	ldr	r2, [pc, #20]	; (8002374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe fb6a 	bl	8000a40 <HAL_GPIO_EXTI_Callback>
  }
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40010400 	.word	0x40010400

08002378 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d141      	bne.n	800240a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002386:	4b4b      	ldr	r3, [pc, #300]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800238e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002392:	d131      	bne.n	80023f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002394:	4b47      	ldr	r3, [pc, #284]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800239a:	4a46      	ldr	r2, [pc, #280]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800239c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023a4:	4b43      	ldr	r3, [pc, #268]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023ac:	4a41      	ldr	r2, [pc, #260]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023b4:	4b40      	ldr	r3, [pc, #256]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2232      	movs	r2, #50	; 0x32
 80023ba:	fb02 f303 	mul.w	r3, r2, r3
 80023be:	4a3f      	ldr	r2, [pc, #252]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023c0:	fba2 2303 	umull	r2, r3, r2, r3
 80023c4:	0c9b      	lsrs	r3, r3, #18
 80023c6:	3301      	adds	r3, #1
 80023c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023ca:	e002      	b.n	80023d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023d2:	4b38      	ldr	r3, [pc, #224]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023de:	d102      	bne.n	80023e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f2      	bne.n	80023cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023e6:	4b33      	ldr	r3, [pc, #204]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023f2:	d158      	bne.n	80024a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e057      	b.n	80024a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023f8:	4b2e      	ldr	r3, [pc, #184]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023fe:	4a2d      	ldr	r2, [pc, #180]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002404:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002408:	e04d      	b.n	80024a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002410:	d141      	bne.n	8002496 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002412:	4b28      	ldr	r3, [pc, #160]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800241a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241e:	d131      	bne.n	8002484 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002420:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002426:	4a23      	ldr	r2, [pc, #140]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002430:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002438:	4a1e      	ldr	r2, [pc, #120]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800243a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800243e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002440:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2232      	movs	r2, #50	; 0x32
 8002446:	fb02 f303 	mul.w	r3, r2, r3
 800244a:	4a1c      	ldr	r2, [pc, #112]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800244c:	fba2 2303 	umull	r2, r3, r2, r3
 8002450:	0c9b      	lsrs	r3, r3, #18
 8002452:	3301      	adds	r3, #1
 8002454:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002456:	e002      	b.n	800245e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	3b01      	subs	r3, #1
 800245c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800246a:	d102      	bne.n	8002472 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f2      	bne.n	8002458 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002472:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800247e:	d112      	bne.n	80024a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e011      	b.n	80024a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002490:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002494:	e007      	b.n	80024a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002496:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800249e:	4a05      	ldr	r2, [pc, #20]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	40007000 	.word	0x40007000
 80024b8:	20000000 	.word	0x20000000
 80024bc:	431bde83 	.word	0x431bde83

080024c0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4a04      	ldr	r2, [pc, #16]	; (80024dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80024ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ce:	6093      	str	r3, [r2, #8]
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40007000 	.word	0x40007000

080024e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e308      	b.n	8002b04 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d075      	beq.n	80025ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024fe:	4ba3      	ldr	r3, [pc, #652]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002508:	4ba0      	ldr	r3, [pc, #640]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b0c      	cmp	r3, #12
 8002516:	d102      	bne.n	800251e <HAL_RCC_OscConfig+0x3e>
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	2b03      	cmp	r3, #3
 800251c:	d002      	beq.n	8002524 <HAL_RCC_OscConfig+0x44>
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	2b08      	cmp	r3, #8
 8002522:	d10b      	bne.n	800253c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002524:	4b99      	ldr	r3, [pc, #612]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d05b      	beq.n	80025e8 <HAL_RCC_OscConfig+0x108>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d157      	bne.n	80025e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e2e3      	b.n	8002b04 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002544:	d106      	bne.n	8002554 <HAL_RCC_OscConfig+0x74>
 8002546:	4b91      	ldr	r3, [pc, #580]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a90      	ldr	r2, [pc, #576]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800254c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e01d      	b.n	8002590 <HAL_RCC_OscConfig+0xb0>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0x98>
 800255e:	4b8b      	ldr	r3, [pc, #556]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a8a      	ldr	r2, [pc, #552]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b88      	ldr	r3, [pc, #544]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a87      	ldr	r2, [pc, #540]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e00b      	b.n	8002590 <HAL_RCC_OscConfig+0xb0>
 8002578:	4b84      	ldr	r3, [pc, #528]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a83      	ldr	r2, [pc, #524]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800257e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	4b81      	ldr	r3, [pc, #516]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a80      	ldr	r2, [pc, #512]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800258a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d013      	beq.n	80025c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7fe fe82 	bl	80012a0 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a0:	f7fe fe7e 	bl	80012a0 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	; 0x64
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e2a8      	b.n	8002b04 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025b2:	4b76      	ldr	r3, [pc, #472]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0xc0>
 80025be:	e014      	b.n	80025ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fe fe6e 	bl	80012a0 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c8:	f7fe fe6a 	bl	80012a0 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e294      	b.n	8002b04 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025da:	4b6c      	ldr	r3, [pc, #432]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0xe8>
 80025e6:	e000      	b.n	80025ea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d075      	beq.n	80026e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025f6:	4b65      	ldr	r3, [pc, #404]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002600:	4b62      	ldr	r3, [pc, #392]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	2b0c      	cmp	r3, #12
 800260e:	d102      	bne.n	8002616 <HAL_RCC_OscConfig+0x136>
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d002      	beq.n	800261c <HAL_RCC_OscConfig+0x13c>
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	2b04      	cmp	r3, #4
 800261a:	d11f      	bne.n	800265c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800261c:	4b5b      	ldr	r3, [pc, #364]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_OscConfig+0x154>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e267      	b.n	8002b04 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002634:	4b55      	ldr	r3, [pc, #340]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	061b      	lsls	r3, r3, #24
 8002642:	4952      	ldr	r1, [pc, #328]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002644:	4313      	orrs	r3, r2
 8002646:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002648:	4b51      	ldr	r3, [pc, #324]	; (8002790 <HAL_RCC_OscConfig+0x2b0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fad7 	bl	8000c00 <HAL_InitTick>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d043      	beq.n	80026e0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e253      	b.n	8002b04 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d023      	beq.n	80026ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002664:	4b49      	ldr	r3, [pc, #292]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a48      	ldr	r2, [pc, #288]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800266a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002670:	f7fe fe16 	bl	80012a0 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002678:	f7fe fe12 	bl	80012a0 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e23c      	b.n	8002b04 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800268a:	4b40      	ldr	r3, [pc, #256]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f0      	beq.n	8002678 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002696:	4b3d      	ldr	r3, [pc, #244]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	061b      	lsls	r3, r3, #24
 80026a4:	4939      	ldr	r1, [pc, #228]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]
 80026aa:	e01a      	b.n	80026e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ac:	4b37      	ldr	r3, [pc, #220]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a36      	ldr	r2, [pc, #216]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 80026b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b8:	f7fe fdf2 	bl	80012a0 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c0:	f7fe fdee 	bl	80012a0 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e218      	b.n	8002b04 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026d2:	4b2e      	ldr	r3, [pc, #184]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x1e0>
 80026de:	e000      	b.n	80026e2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d03c      	beq.n	8002768 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d01c      	beq.n	8002730 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f6:	4b25      	ldr	r3, [pc, #148]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 80026f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026fc:	4a23      	ldr	r2, [pc, #140]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002706:	f7fe fdcb 	bl	80012a0 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800270e:	f7fe fdc7 	bl	80012a0 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e1f1      	b.n	8002b04 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002720:	4b1a      	ldr	r3, [pc, #104]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0ef      	beq.n	800270e <HAL_RCC_OscConfig+0x22e>
 800272e:	e01b      	b.n	8002768 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002730:	4b16      	ldr	r3, [pc, #88]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002736:	4a15      	ldr	r2, [pc, #84]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002738:	f023 0301 	bic.w	r3, r3, #1
 800273c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002740:	f7fe fdae 	bl	80012a0 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002748:	f7fe fdaa 	bl	80012a0 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e1d4      	b.n	8002b04 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800275a:	4b0c      	ldr	r3, [pc, #48]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800275c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1ef      	bne.n	8002748 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 80ab 	beq.w	80028cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002776:	2300      	movs	r3, #0
 8002778:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800277a:	4b04      	ldr	r3, [pc, #16]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800277c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d106      	bne.n	8002794 <HAL_RCC_OscConfig+0x2b4>
 8002786:	2301      	movs	r3, #1
 8002788:	e005      	b.n	8002796 <HAL_RCC_OscConfig+0x2b6>
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000
 8002790:	20000004 	.word	0x20000004
 8002794:	2300      	movs	r3, #0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00d      	beq.n	80027b6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800279a:	4baf      	ldr	r3, [pc, #700]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 800279c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279e:	4aae      	ldr	r2, [pc, #696]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80027a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a4:	6593      	str	r3, [r2, #88]	; 0x58
 80027a6:	4bac      	ldr	r3, [pc, #688]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80027a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027b2:	2301      	movs	r3, #1
 80027b4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027b6:	4ba9      	ldr	r3, [pc, #676]	; (8002a5c <HAL_RCC_OscConfig+0x57c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d118      	bne.n	80027f4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027c2:	4ba6      	ldr	r3, [pc, #664]	; (8002a5c <HAL_RCC_OscConfig+0x57c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4aa5      	ldr	r2, [pc, #660]	; (8002a5c <HAL_RCC_OscConfig+0x57c>)
 80027c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ce:	f7fe fd67 	bl	80012a0 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d6:	f7fe fd63 	bl	80012a0 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e18d      	b.n	8002b04 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e8:	4b9c      	ldr	r3, [pc, #624]	; (8002a5c <HAL_RCC_OscConfig+0x57c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d108      	bne.n	800280e <HAL_RCC_OscConfig+0x32e>
 80027fc:	4b96      	ldr	r3, [pc, #600]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002802:	4a95      	ldr	r2, [pc, #596]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800280c:	e024      	b.n	8002858 <HAL_RCC_OscConfig+0x378>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b05      	cmp	r3, #5
 8002814:	d110      	bne.n	8002838 <HAL_RCC_OscConfig+0x358>
 8002816:	4b90      	ldr	r3, [pc, #576]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281c:	4a8e      	ldr	r2, [pc, #568]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 800281e:	f043 0304 	orr.w	r3, r3, #4
 8002822:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002826:	4b8c      	ldr	r3, [pc, #560]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282c:	4a8a      	ldr	r2, [pc, #552]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002836:	e00f      	b.n	8002858 <HAL_RCC_OscConfig+0x378>
 8002838:	4b87      	ldr	r3, [pc, #540]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283e:	4a86      	ldr	r2, [pc, #536]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002840:	f023 0301 	bic.w	r3, r3, #1
 8002844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002848:	4b83      	ldr	r3, [pc, #524]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284e:	4a82      	ldr	r2, [pc, #520]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002850:	f023 0304 	bic.w	r3, r3, #4
 8002854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d016      	beq.n	800288e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002860:	f7fe fd1e 	bl	80012a0 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002866:	e00a      	b.n	800287e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002868:	f7fe fd1a 	bl	80012a0 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	; 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e142      	b.n	8002b04 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800287e:	4b76      	ldr	r3, [pc, #472]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0ed      	beq.n	8002868 <HAL_RCC_OscConfig+0x388>
 800288c:	e015      	b.n	80028ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288e:	f7fe fd07 	bl	80012a0 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002894:	e00a      	b.n	80028ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002896:	f7fe fd03 	bl	80012a0 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e12b      	b.n	8002b04 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028ac:	4b6a      	ldr	r3, [pc, #424]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1ed      	bne.n	8002896 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028ba:	7ffb      	ldrb	r3, [r7, #31]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d105      	bne.n	80028cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c0:	4b65      	ldr	r3, [pc, #404]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80028c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c4:	4a64      	ldr	r2, [pc, #400]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80028c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d03c      	beq.n	8002952 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d01c      	beq.n	800291a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028e0:	4b5d      	ldr	r3, [pc, #372]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80028e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028e6:	4a5c      	ldr	r2, [pc, #368]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f0:	f7fe fcd6 	bl	80012a0 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028f8:	f7fe fcd2 	bl	80012a0 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e0fc      	b.n	8002b04 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800290a:	4b53      	ldr	r3, [pc, #332]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 800290c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0ef      	beq.n	80028f8 <HAL_RCC_OscConfig+0x418>
 8002918:	e01b      	b.n	8002952 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800291a:	4b4f      	ldr	r3, [pc, #316]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 800291c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002920:	4a4d      	ldr	r2, [pc, #308]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002922:	f023 0301 	bic.w	r3, r3, #1
 8002926:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292a:	f7fe fcb9 	bl	80012a0 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002932:	f7fe fcb5 	bl	80012a0 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e0df      	b.n	8002b04 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002944:	4b44      	ldr	r3, [pc, #272]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002946:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1ef      	bne.n	8002932 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 80d3 	beq.w	8002b02 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800295c:	4b3e      	ldr	r3, [pc, #248]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 030c 	and.w	r3, r3, #12
 8002964:	2b0c      	cmp	r3, #12
 8002966:	f000 808d 	beq.w	8002a84 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d15a      	bne.n	8002a28 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002972:	4b39      	ldr	r3, [pc, #228]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a38      	ldr	r2, [pc, #224]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002978:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800297c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7fe fc8f 	bl	80012a0 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002986:	f7fe fc8b 	bl	80012a0 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e0b5      	b.n	8002b04 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002998:	4b2f      	ldr	r3, [pc, #188]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1f0      	bne.n	8002986 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029a4:	4b2c      	ldr	r3, [pc, #176]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	4b2d      	ldr	r3, [pc, #180]	; (8002a60 <HAL_RCC_OscConfig+0x580>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6a11      	ldr	r1, [r2, #32]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029b4:	3a01      	subs	r2, #1
 80029b6:	0112      	lsls	r2, r2, #4
 80029b8:	4311      	orrs	r1, r2
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80029be:	0212      	lsls	r2, r2, #8
 80029c0:	4311      	orrs	r1, r2
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80029c6:	0852      	lsrs	r2, r2, #1
 80029c8:	3a01      	subs	r2, #1
 80029ca:	0552      	lsls	r2, r2, #21
 80029cc:	4311      	orrs	r1, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029d2:	0852      	lsrs	r2, r2, #1
 80029d4:	3a01      	subs	r2, #1
 80029d6:	0652      	lsls	r2, r2, #25
 80029d8:	4311      	orrs	r1, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029de:	06d2      	lsls	r2, r2, #27
 80029e0:	430a      	orrs	r2, r1
 80029e2:	491d      	ldr	r1, [pc, #116]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e8:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a1a      	ldr	r2, [pc, #104]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80029ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029f4:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4a17      	ldr	r2, [pc, #92]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 80029fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7fe fc4e 	bl	80012a0 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a08:	f7fe fc4a 	bl	80012a0 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e074      	b.n	8002b04 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a1a:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0x528>
 8002a26:	e06c      	b.n	8002b02 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002a2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a32:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002a34:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4a07      	ldr	r2, [pc, #28]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002a3a:	f023 0303 	bic.w	r3, r3, #3
 8002a3e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <HAL_RCC_OscConfig+0x578>)
 8002a46:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7fe fc26 	bl	80012a0 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a56:	e00e      	b.n	8002a76 <HAL_RCC_OscConfig+0x596>
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40007000 	.word	0x40007000
 8002a60:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a64:	f7fe fc1c 	bl	80012a0 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e046      	b.n	8002b04 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a76:	4b25      	ldr	r3, [pc, #148]	; (8002b0c <HAL_RCC_OscConfig+0x62c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x584>
 8002a82:	e03e      	b.n	8002b02 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e039      	b.n	8002b04 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002a90:	4b1e      	ldr	r3, [pc, #120]	; (8002b0c <HAL_RCC_OscConfig+0x62c>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f003 0203 	and.w	r2, r3, #3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d12c      	bne.n	8002afe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d123      	bne.n	8002afe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d11b      	bne.n	8002afe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d113      	bne.n	8002afe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	085b      	lsrs	r3, r3, #1
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d109      	bne.n	8002afe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af4:	085b      	lsrs	r3, r3, #1
 8002af6:	3b01      	subs	r3, #1
 8002af8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d001      	beq.n	8002b02 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3720      	adds	r7, #32
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40021000 	.word	0x40021000

08002b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e11e      	b.n	8002d66 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b28:	4b91      	ldr	r3, [pc, #580]	; (8002d70 <HAL_RCC_ClockConfig+0x260>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d910      	bls.n	8002b58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b36:	4b8e      	ldr	r3, [pc, #568]	; (8002d70 <HAL_RCC_ClockConfig+0x260>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 020f 	bic.w	r2, r3, #15
 8002b3e:	498c      	ldr	r1, [pc, #560]	; (8002d70 <HAL_RCC_ClockConfig+0x260>)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b8a      	ldr	r3, [pc, #552]	; (8002d70 <HAL_RCC_ClockConfig+0x260>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e106      	b.n	8002d66 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d073      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d129      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6c:	4b81      	ldr	r3, [pc, #516]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0f4      	b.n	8002d66 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002b7c:	f000 f9d0 	bl	8002f20 <RCC_GetSysClockFreqFromPLLSource>
 8002b80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4a7c      	ldr	r2, [pc, #496]	; (8002d78 <HAL_RCC_ClockConfig+0x268>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d93f      	bls.n	8002c0a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b8a:	4b7a      	ldr	r3, [pc, #488]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d009      	beq.n	8002baa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d033      	beq.n	8002c0a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d12f      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002baa:	4b72      	ldr	r3, [pc, #456]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bb2:	4a70      	ldr	r2, [pc, #448]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002bba:	2380      	movs	r3, #128	; 0x80
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	e024      	b.n	8002c0a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d107      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bc8:	4b6a      	ldr	r3, [pc, #424]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d109      	bne.n	8002be8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0c6      	b.n	8002d66 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bd8:	4b66      	ldr	r3, [pc, #408]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0be      	b.n	8002d66 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002be8:	f000 f8ce 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4a61      	ldr	r2, [pc, #388]	; (8002d78 <HAL_RCC_ClockConfig+0x268>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d909      	bls.n	8002c0a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002bf6:	4b5f      	ldr	r3, [pc, #380]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bfe:	4a5d      	ldr	r2, [pc, #372]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c04:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002c06:	2380      	movs	r3, #128	; 0x80
 8002c08:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c0a:	4b5a      	ldr	r3, [pc, #360]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f023 0203 	bic.w	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	4957      	ldr	r1, [pc, #348]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c1c:	f7fe fb40 	bl	80012a0 <HAL_GetTick>
 8002c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c22:	e00a      	b.n	8002c3a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c24:	f7fe fb3c 	bl	80012a0 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e095      	b.n	8002d66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3a:	4b4e      	ldr	r3, [pc, #312]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 020c 	and.w	r2, r3, #12
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d1eb      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d023      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c64:	4b43      	ldr	r3, [pc, #268]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	4a42      	ldr	r2, [pc, #264]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002c6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c6e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d007      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002c7c:	4b3d      	ldr	r3, [pc, #244]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002c84:	4a3b      	ldr	r2, [pc, #236]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002c86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c8c:	4b39      	ldr	r3, [pc, #228]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	4936      	ldr	r1, [pc, #216]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	608b      	str	r3, [r1, #8]
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2b80      	cmp	r3, #128	; 0x80
 8002ca4:	d105      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002ca6:	4b33      	ldr	r3, [pc, #204]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	4a32      	ldr	r2, [pc, #200]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002cac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cb0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb2:	4b2f      	ldr	r3, [pc, #188]	; (8002d70 <HAL_RCC_ClockConfig+0x260>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d21d      	bcs.n	8002cfc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc0:	4b2b      	ldr	r3, [pc, #172]	; (8002d70 <HAL_RCC_ClockConfig+0x260>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f023 020f 	bic.w	r2, r3, #15
 8002cc8:	4929      	ldr	r1, [pc, #164]	; (8002d70 <HAL_RCC_ClockConfig+0x260>)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002cd0:	f7fe fae6 	bl	80012a0 <HAL_GetTick>
 8002cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd8:	f7fe fae2 	bl	80012a0 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e03b      	b.n	8002d66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cee:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <HAL_RCC_ClockConfig+0x260>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d1ed      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d08:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4917      	ldr	r1, [pc, #92]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d009      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d26:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	490f      	ldr	r1, [pc, #60]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d3a:	f000 f825 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <HAL_RCC_ClockConfig+0x264>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	490c      	ldr	r1, [pc, #48]	; (8002d7c <HAL_RCC_ClockConfig+0x26c>)
 8002d4c:	5ccb      	ldrb	r3, [r1, r3]
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	fa22 f303 	lsr.w	r3, r2, r3
 8002d56:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <HAL_RCC_ClockConfig+0x270>)
 8002d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <HAL_RCC_ClockConfig+0x274>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fd ff4e 	bl	8000c00 <HAL_InitTick>
 8002d64:	4603      	mov	r3, r0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40022000 	.word	0x40022000
 8002d74:	40021000 	.word	0x40021000
 8002d78:	04c4b400 	.word	0x04c4b400
 8002d7c:	08007e18 	.word	0x08007e18
 8002d80:	20000000 	.word	0x20000000
 8002d84:	20000004 	.word	0x20000004

08002d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d8e:	4b2c      	ldr	r3, [pc, #176]	; (8002e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d102      	bne.n	8002da0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d9a:	4b2a      	ldr	r3, [pc, #168]	; (8002e44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	e047      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002da0:	4b27      	ldr	r3, [pc, #156]	; (8002e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 030c 	and.w	r3, r3, #12
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d102      	bne.n	8002db2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dac:	4b26      	ldr	r3, [pc, #152]	; (8002e48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	e03e      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002db2:	4b23      	ldr	r3, [pc, #140]	; (8002e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b0c      	cmp	r3, #12
 8002dbc:	d136      	bne.n	8002e2c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dbe:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dc8:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d10c      	bne.n	8002df6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ddc:	4a1a      	ldr	r2, [pc, #104]	; (8002e48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de4:	4a16      	ldr	r2, [pc, #88]	; (8002e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002de6:	68d2      	ldr	r2, [r2, #12]
 8002de8:	0a12      	lsrs	r2, r2, #8
 8002dea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002dee:	fb02 f303 	mul.w	r3, r2, r3
 8002df2:	617b      	str	r3, [r7, #20]
      break;
 8002df4:	e00c      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002df6:	4a13      	ldr	r2, [pc, #76]	; (8002e44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfe:	4a10      	ldr	r2, [pc, #64]	; (8002e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e00:	68d2      	ldr	r2, [r2, #12]
 8002e02:	0a12      	lsrs	r2, r2, #8
 8002e04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e08:	fb02 f303 	mul.w	r3, r2, r3
 8002e0c:	617b      	str	r3, [r7, #20]
      break;
 8002e0e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	0e5b      	lsrs	r3, r3, #25
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	e001      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002e30:	693b      	ldr	r3, [r7, #16]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	371c      	adds	r7, #28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
 8002e44:	00f42400 	.word	0x00f42400
 8002e48:	007a1200 	.word	0x007a1200

08002e4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e50:	4b03      	ldr	r3, [pc, #12]	; (8002e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e52:	681b      	ldr	r3, [r3, #0]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	20000000 	.word	0x20000000

08002e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e68:	f7ff fff0 	bl	8002e4c <HAL_RCC_GetHCLKFreq>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	0a1b      	lsrs	r3, r3, #8
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	4904      	ldr	r1, [pc, #16]	; (8002e8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e7a:	5ccb      	ldrb	r3, [r1, r3]
 8002e7c:	f003 031f 	and.w	r3, r3, #31
 8002e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	08007e28 	.word	0x08007e28

08002e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e94:	f7ff ffda 	bl	8002e4c <HAL_RCC_GetHCLKFreq>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	0adb      	lsrs	r3, r3, #11
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	4904      	ldr	r1, [pc, #16]	; (8002eb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ea6:	5ccb      	ldrb	r3, [r1, r3]
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	08007e28 	.word	0x08007e28

08002ebc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	220f      	movs	r2, #15
 8002eca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002ecc:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <HAL_RCC_GetClockConfig+0x5c>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 0203 	and.w	r2, r3, #3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <HAL_RCC_GetClockConfig+0x5c>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <HAL_RCC_GetClockConfig+0x5c>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002ef0:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <HAL_RCC_GetClockConfig+0x5c>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	08db      	lsrs	r3, r3, #3
 8002ef6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002efe:	4b07      	ldr	r3, [pc, #28]	; (8002f1c <HAL_RCC_GetClockConfig+0x60>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 020f 	and.w	r2, r3, #15
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	601a      	str	r2, [r3, #0]
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40022000 	.word	0x40022000

08002f20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f26:	4b1e      	ldr	r3, [pc, #120]	; (8002fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f30:	4b1b      	ldr	r3, [pc, #108]	; (8002fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	091b      	lsrs	r3, r3, #4
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d10c      	bne.n	8002f5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f44:	4a17      	ldr	r2, [pc, #92]	; (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4c:	4a14      	ldr	r2, [pc, #80]	; (8002fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f4e:	68d2      	ldr	r2, [r2, #12]
 8002f50:	0a12      	lsrs	r2, r2, #8
 8002f52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f56:	fb02 f303 	mul.w	r3, r2, r3
 8002f5a:	617b      	str	r3, [r7, #20]
    break;
 8002f5c:	e00c      	b.n	8002f78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f5e:	4a12      	ldr	r2, [pc, #72]	; (8002fa8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f66:	4a0e      	ldr	r2, [pc, #56]	; (8002fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f68:	68d2      	ldr	r2, [r2, #12]
 8002f6a:	0a12      	lsrs	r2, r2, #8
 8002f6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f70:	fb02 f303 	mul.w	r3, r2, r3
 8002f74:	617b      	str	r3, [r7, #20]
    break;
 8002f76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f78:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	0e5b      	lsrs	r3, r3, #25
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	3301      	adds	r3, #1
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002f92:	687b      	ldr	r3, [r7, #4]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	371c      	adds	r7, #28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	007a1200 	.word	0x007a1200
 8002fa8:	00f42400 	.word	0x00f42400

08002fac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fb8:	2300      	movs	r3, #0
 8002fba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8098 	beq.w	80030fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fce:	4b43      	ldr	r3, [pc, #268]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10d      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fda:	4b40      	ldr	r3, [pc, #256]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fde:	4a3f      	ldr	r2, [pc, #252]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	6593      	str	r3, [r2, #88]	; 0x58
 8002fe6:	4b3d      	ldr	r3, [pc, #244]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ff6:	4b3a      	ldr	r3, [pc, #232]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a39      	ldr	r2, [pc, #228]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003000:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003002:	f7fe f94d 	bl	80012a0 <HAL_GetTick>
 8003006:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003008:	e009      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300a:	f7fe f949 	bl	80012a0 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d902      	bls.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	74fb      	strb	r3, [r7, #19]
        break;
 800301c:	e005      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800301e:	4b30      	ldr	r3, [pc, #192]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0ef      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800302a:	7cfb      	ldrb	r3, [r7, #19]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d159      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003030:	4b2a      	ldr	r3, [pc, #168]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d01e      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	429a      	cmp	r2, r3
 800304a:	d019      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800304c:	4b23      	ldr	r3, [pc, #140]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003056:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003058:	4b20      	ldr	r3, [pc, #128]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305e:	4a1f      	ldr	r2, [pc, #124]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003068:	4b1c      	ldr	r3, [pc, #112]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306e:	4a1b      	ldr	r2, [pc, #108]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003078:	4a18      	ldr	r2, [pc, #96]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d016      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308a:	f7fe f909 	bl	80012a0 <HAL_GetTick>
 800308e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003090:	e00b      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003092:	f7fe f905 	bl	80012a0 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d902      	bls.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	74fb      	strb	r3, [r7, #19]
            break;
 80030a8:	e006      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030aa:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0ec      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80030b8:	7cfb      	ldrb	r3, [r7, #19]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10b      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030be:	4b07      	ldr	r3, [pc, #28]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	4903      	ldr	r1, [pc, #12]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030d4:	e008      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030d6:	7cfb      	ldrb	r3, [r7, #19]
 80030d8:	74bb      	strb	r3, [r7, #18]
 80030da:	e005      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e4:	7cfb      	ldrb	r3, [r7, #19]
 80030e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030e8:	7c7b      	ldrb	r3, [r7, #17]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d105      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ee:	4ba6      	ldr	r3, [pc, #664]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f2:	4aa5      	ldr	r2, [pc, #660]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003106:	4ba0      	ldr	r3, [pc, #640]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310c:	f023 0203 	bic.w	r2, r3, #3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	499c      	ldr	r1, [pc, #624]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003128:	4b97      	ldr	r3, [pc, #604]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312e:	f023 020c 	bic.w	r2, r3, #12
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	4994      	ldr	r1, [pc, #592]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800314a:	4b8f      	ldr	r3, [pc, #572]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800314c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003150:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	498b      	ldr	r1, [pc, #556]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800316c:	4b86      	ldr	r3, [pc, #536]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003172:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	4983      	ldr	r1, [pc, #524]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800318e:	4b7e      	ldr	r3, [pc, #504]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003194:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	497a      	ldr	r1, [pc, #488]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031b0:	4b75      	ldr	r3, [pc, #468]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	4972      	ldr	r1, [pc, #456]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031d2:	4b6d      	ldr	r3, [pc, #436]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	4969      	ldr	r1, [pc, #420]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031f4:	4b64      	ldr	r3, [pc, #400]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	4961      	ldr	r1, [pc, #388]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003216:	4b5c      	ldr	r3, [pc, #368]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	4958      	ldr	r1, [pc, #352]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003226:	4313      	orrs	r3, r2
 8003228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003234:	2b00      	cmp	r3, #0
 8003236:	d015      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003238:	4b53      	ldr	r3, [pc, #332]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003246:	4950      	ldr	r1, [pc, #320]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003256:	d105      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003258:	4b4b      	ldr	r3, [pc, #300]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	4a4a      	ldr	r2, [pc, #296]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800325e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003262:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800326c:	2b00      	cmp	r3, #0
 800326e:	d015      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003270:	4b45      	ldr	r3, [pc, #276]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003276:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	4942      	ldr	r1, [pc, #264]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800328e:	d105      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003290:	4b3d      	ldr	r3, [pc, #244]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	4a3c      	ldr	r2, [pc, #240]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003296:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800329a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d015      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80032a8:	4b37      	ldr	r3, [pc, #220]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	4934      	ldr	r1, [pc, #208]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032c6:	d105      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032c8:	4b2f      	ldr	r3, [pc, #188]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	4a2e      	ldr	r2, [pc, #184]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d015      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032e0:	4b29      	ldr	r3, [pc, #164]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ee:	4926      	ldr	r1, [pc, #152]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032fe:	d105      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003300:	4b21      	ldr	r3, [pc, #132]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4a20      	ldr	r2, [pc, #128]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003306:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800330a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d015      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003318:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003326:	4918      	ldr	r1, [pc, #96]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003336:	d105      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003338:	4b13      	ldr	r3, [pc, #76]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4a12      	ldr	r2, [pc, #72]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800333e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003342:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d015      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003350:	4b0d      	ldr	r3, [pc, #52]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003356:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335e:	490a      	ldr	r1, [pc, #40]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800336e:	d105      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	4a04      	ldr	r2, [pc, #16]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800337c:	7cbb      	ldrb	r3, [r7, #18]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000

0800338c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e049      	b.n	8003432 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7fd fdfa 	bl	8000fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3304      	adds	r3, #4
 80033c8:	4619      	mov	r1, r3
 80033ca:	4610      	mov	r0, r2
 80033cc:	f000 fba4 	bl	8003b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b01      	cmp	r3, #1
 800344e:	d001      	beq.n	8003454 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e042      	b.n	80034da <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a21      	ldr	r2, [pc, #132]	; (80034e8 <HAL_TIM_Base_Start+0xac>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d018      	beq.n	8003498 <HAL_TIM_Base_Start+0x5c>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346e:	d013      	beq.n	8003498 <HAL_TIM_Base_Start+0x5c>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <HAL_TIM_Base_Start+0xb0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00e      	beq.n	8003498 <HAL_TIM_Base_Start+0x5c>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a1c      	ldr	r2, [pc, #112]	; (80034f0 <HAL_TIM_Base_Start+0xb4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d009      	beq.n	8003498 <HAL_TIM_Base_Start+0x5c>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1a      	ldr	r2, [pc, #104]	; (80034f4 <HAL_TIM_Base_Start+0xb8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d004      	beq.n	8003498 <HAL_TIM_Base_Start+0x5c>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a19      	ldr	r2, [pc, #100]	; (80034f8 <HAL_TIM_Base_Start+0xbc>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d115      	bne.n	80034c4 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	4b17      	ldr	r3, [pc, #92]	; (80034fc <HAL_TIM_Base_Start+0xc0>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b06      	cmp	r3, #6
 80034a8:	d015      	beq.n	80034d6 <HAL_TIM_Base_Start+0x9a>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b0:	d011      	beq.n	80034d6 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f042 0201 	orr.w	r2, r2, #1
 80034c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c2:	e008      	b.n	80034d6 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	e000      	b.n	80034d8 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40012c00 	.word	0x40012c00
 80034ec:	40000400 	.word	0x40000400
 80034f0:	40000800 	.word	0x40000800
 80034f4:	40013400 	.word	0x40013400
 80034f8:	40014000 	.word	0x40014000
 80034fc:	00010007 	.word	0x00010007

08003500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b01      	cmp	r3, #1
 8003512:	d001      	beq.n	8003518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e04a      	b.n	80035ae <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0201 	orr.w	r2, r2, #1
 800352e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a21      	ldr	r2, [pc, #132]	; (80035bc <HAL_TIM_Base_Start_IT+0xbc>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d018      	beq.n	800356c <HAL_TIM_Base_Start_IT+0x6c>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003542:	d013      	beq.n	800356c <HAL_TIM_Base_Start_IT+0x6c>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a1d      	ldr	r2, [pc, #116]	; (80035c0 <HAL_TIM_Base_Start_IT+0xc0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00e      	beq.n	800356c <HAL_TIM_Base_Start_IT+0x6c>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1c      	ldr	r2, [pc, #112]	; (80035c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d009      	beq.n	800356c <HAL_TIM_Base_Start_IT+0x6c>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1a      	ldr	r2, [pc, #104]	; (80035c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d004      	beq.n	800356c <HAL_TIM_Base_Start_IT+0x6c>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a19      	ldr	r2, [pc, #100]	; (80035cc <HAL_TIM_Base_Start_IT+0xcc>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d115      	bne.n	8003598 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	4b17      	ldr	r3, [pc, #92]	; (80035d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003574:	4013      	ands	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b06      	cmp	r3, #6
 800357c:	d015      	beq.n	80035aa <HAL_TIM_Base_Start_IT+0xaa>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003584:	d011      	beq.n	80035aa <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0201 	orr.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003596:	e008      	b.n	80035aa <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	e000      	b.n	80035ac <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40012c00 	.word	0x40012c00
 80035c0:	40000400 	.word	0x40000400
 80035c4:	40000800 	.word	0x40000800
 80035c8:	40013400 	.word	0x40013400
 80035cc:	40014000 	.word	0x40014000
 80035d0:	00010007 	.word	0x00010007

080035d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d122      	bne.n	8003630 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d11b      	bne.n	8003630 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0202 	mvn.w	r2, #2
 8003600:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fa60 	bl	8003adc <HAL_TIM_IC_CaptureCallback>
 800361c:	e005      	b.n	800362a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fa52 	bl	8003ac8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fa63 	bl	8003af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	2b04      	cmp	r3, #4
 800363c:	d122      	bne.n	8003684 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b04      	cmp	r3, #4
 800364a:	d11b      	bne.n	8003684 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0204 	mvn.w	r2, #4
 8003654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2202      	movs	r2, #2
 800365a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 fa36 	bl	8003adc <HAL_TIM_IC_CaptureCallback>
 8003670:	e005      	b.n	800367e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fa28 	bl	8003ac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 fa39 	bl	8003af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b08      	cmp	r3, #8
 8003690:	d122      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b08      	cmp	r3, #8
 800369e:	d11b      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0208 	mvn.w	r2, #8
 80036a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2204      	movs	r2, #4
 80036ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fa0c 	bl	8003adc <HAL_TIM_IC_CaptureCallback>
 80036c4:	e005      	b.n	80036d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f9fe 	bl	8003ac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 fa0f 	bl	8003af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	2b10      	cmp	r3, #16
 80036e4:	d122      	bne.n	800372c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0310 	and.w	r3, r3, #16
 80036f0:	2b10      	cmp	r3, #16
 80036f2:	d11b      	bne.n	800372c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0210 	mvn.w	r2, #16
 80036fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2208      	movs	r2, #8
 8003702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f9e2 	bl	8003adc <HAL_TIM_IC_CaptureCallback>
 8003718:	e005      	b.n	8003726 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f9d4 	bl	8003ac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f9e5 	bl	8003af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b01      	cmp	r3, #1
 8003738:	d10e      	bne.n	8003758 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b01      	cmp	r3, #1
 8003746:	d107      	bne.n	8003758 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f06f 0201 	mvn.w	r2, #1
 8003750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fd fa12 	bl	8000b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003762:	2b80      	cmp	r3, #128	; 0x80
 8003764:	d10e      	bne.n	8003784 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003770:	2b80      	cmp	r3, #128	; 0x80
 8003772:	d107      	bne.n	8003784 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800377c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fb82 	bl	8003e88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003792:	d10e      	bne.n	80037b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379e:	2b80      	cmp	r3, #128	; 0x80
 80037a0:	d107      	bne.n	80037b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fb75 	bl	8003e9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037bc:	2b40      	cmp	r3, #64	; 0x40
 80037be:	d10e      	bne.n	80037de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ca:	2b40      	cmp	r3, #64	; 0x40
 80037cc:	d107      	bne.n	80037de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f993 	bl	8003b04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d10e      	bne.n	800380a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d107      	bne.n	800380a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f06f 0220 	mvn.w	r2, #32
 8003802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fb35 	bl	8003e74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003814:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003818:	d10f      	bne.n	800383a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003824:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003828:	d107      	bne.n	800383a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fb3b 	bl	8003eb0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003844:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003848:	d10f      	bne.n	800386a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003854:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003858:	d107      	bne.n	800386a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fb2d 	bl	8003ec4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003878:	d10f      	bne.n	800389a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003888:	d107      	bne.n	800389a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 fb1f 	bl	8003ed8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038a8:	d10f      	bne.n	80038ca <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038b8:	d107      	bne.n	80038ca <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80038c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 fb11 	bl	8003eec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038de:	2300      	movs	r3, #0
 80038e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_TIM_ConfigClockSource+0x1c>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e0de      	b.n	8003aae <HAL_TIM_ConfigClockSource+0x1da>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800390e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800391a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a63      	ldr	r2, [pc, #396]	; (8003ab8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	f000 80a9 	beq.w	8003a82 <HAL_TIM_ConfigClockSource+0x1ae>
 8003930:	4a61      	ldr	r2, [pc, #388]	; (8003ab8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	f200 80ae 	bhi.w	8003a94 <HAL_TIM_ConfigClockSource+0x1c0>
 8003938:	4a60      	ldr	r2, [pc, #384]	; (8003abc <HAL_TIM_ConfigClockSource+0x1e8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	f000 80a1 	beq.w	8003a82 <HAL_TIM_ConfigClockSource+0x1ae>
 8003940:	4a5e      	ldr	r2, [pc, #376]	; (8003abc <HAL_TIM_ConfigClockSource+0x1e8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	f200 80a6 	bhi.w	8003a94 <HAL_TIM_ConfigClockSource+0x1c0>
 8003948:	4a5d      	ldr	r2, [pc, #372]	; (8003ac0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800394a:	4293      	cmp	r3, r2
 800394c:	f000 8099 	beq.w	8003a82 <HAL_TIM_ConfigClockSource+0x1ae>
 8003950:	4a5b      	ldr	r2, [pc, #364]	; (8003ac0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003952:	4293      	cmp	r3, r2
 8003954:	f200 809e 	bhi.w	8003a94 <HAL_TIM_ConfigClockSource+0x1c0>
 8003958:	4a5a      	ldr	r2, [pc, #360]	; (8003ac4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	f000 8091 	beq.w	8003a82 <HAL_TIM_ConfigClockSource+0x1ae>
 8003960:	4a58      	ldr	r2, [pc, #352]	; (8003ac4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	f200 8096 	bhi.w	8003a94 <HAL_TIM_ConfigClockSource+0x1c0>
 8003968:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800396c:	f000 8089 	beq.w	8003a82 <HAL_TIM_ConfigClockSource+0x1ae>
 8003970:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003974:	f200 808e 	bhi.w	8003a94 <HAL_TIM_ConfigClockSource+0x1c0>
 8003978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800397c:	d03e      	beq.n	80039fc <HAL_TIM_ConfigClockSource+0x128>
 800397e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003982:	f200 8087 	bhi.w	8003a94 <HAL_TIM_ConfigClockSource+0x1c0>
 8003986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800398a:	f000 8086 	beq.w	8003a9a <HAL_TIM_ConfigClockSource+0x1c6>
 800398e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003992:	d87f      	bhi.n	8003a94 <HAL_TIM_ConfigClockSource+0x1c0>
 8003994:	2b70      	cmp	r3, #112	; 0x70
 8003996:	d01a      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0xfa>
 8003998:	2b70      	cmp	r3, #112	; 0x70
 800399a:	d87b      	bhi.n	8003a94 <HAL_TIM_ConfigClockSource+0x1c0>
 800399c:	2b60      	cmp	r3, #96	; 0x60
 800399e:	d050      	beq.n	8003a42 <HAL_TIM_ConfigClockSource+0x16e>
 80039a0:	2b60      	cmp	r3, #96	; 0x60
 80039a2:	d877      	bhi.n	8003a94 <HAL_TIM_ConfigClockSource+0x1c0>
 80039a4:	2b50      	cmp	r3, #80	; 0x50
 80039a6:	d03c      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x14e>
 80039a8:	2b50      	cmp	r3, #80	; 0x50
 80039aa:	d873      	bhi.n	8003a94 <HAL_TIM_ConfigClockSource+0x1c0>
 80039ac:	2b40      	cmp	r3, #64	; 0x40
 80039ae:	d058      	beq.n	8003a62 <HAL_TIM_ConfigClockSource+0x18e>
 80039b0:	2b40      	cmp	r3, #64	; 0x40
 80039b2:	d86f      	bhi.n	8003a94 <HAL_TIM_ConfigClockSource+0x1c0>
 80039b4:	2b30      	cmp	r3, #48	; 0x30
 80039b6:	d064      	beq.n	8003a82 <HAL_TIM_ConfigClockSource+0x1ae>
 80039b8:	2b30      	cmp	r3, #48	; 0x30
 80039ba:	d86b      	bhi.n	8003a94 <HAL_TIM_ConfigClockSource+0x1c0>
 80039bc:	2b20      	cmp	r3, #32
 80039be:	d060      	beq.n	8003a82 <HAL_TIM_ConfigClockSource+0x1ae>
 80039c0:	2b20      	cmp	r3, #32
 80039c2:	d867      	bhi.n	8003a94 <HAL_TIM_ConfigClockSource+0x1c0>
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d05c      	beq.n	8003a82 <HAL_TIM_ConfigClockSource+0x1ae>
 80039c8:	2b10      	cmp	r3, #16
 80039ca:	d05a      	beq.n	8003a82 <HAL_TIM_ConfigClockSource+0x1ae>
 80039cc:	e062      	b.n	8003a94 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6818      	ldr	r0, [r3, #0]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	6899      	ldr	r1, [r3, #8]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f000 f9a7 	bl	8003d30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	609a      	str	r2, [r3, #8]
      break;
 80039fa:	e04f      	b.n	8003a9c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6818      	ldr	r0, [r3, #0]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	6899      	ldr	r1, [r3, #8]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f000 f990 	bl	8003d30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a1e:	609a      	str	r2, [r3, #8]
      break;
 8003a20:	e03c      	b.n	8003a9c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	6859      	ldr	r1, [r3, #4]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	f000 f902 	bl	8003c38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2150      	movs	r1, #80	; 0x50
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 f95b 	bl	8003cf6 <TIM_ITRx_SetConfig>
      break;
 8003a40:	e02c      	b.n	8003a9c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	6859      	ldr	r1, [r3, #4]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f000 f921 	bl	8003c96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2160      	movs	r1, #96	; 0x60
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 f94b 	bl	8003cf6 <TIM_ITRx_SetConfig>
      break;
 8003a60:	e01c      	b.n	8003a9c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	6859      	ldr	r1, [r3, #4]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f000 f8e2 	bl	8003c38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2140      	movs	r1, #64	; 0x40
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 f93b 	bl	8003cf6 <TIM_ITRx_SetConfig>
      break;
 8003a80:	e00c      	b.n	8003a9c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	f000 f932 	bl	8003cf6 <TIM_ITRx_SetConfig>
      break;
 8003a92:	e003      	b.n	8003a9c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	73fb      	strb	r3, [r7, #15]
      break;
 8003a98:	e000      	b.n	8003a9c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003a9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	00100070 	.word	0x00100070
 8003abc:	00100040 	.word	0x00100040
 8003ac0:	00100030 	.word	0x00100030
 8003ac4:	00100020 	.word	0x00100020

08003ac8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a3c      	ldr	r2, [pc, #240]	; (8003c1c <TIM_Base_SetConfig+0x104>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00f      	beq.n	8003b50 <TIM_Base_SetConfig+0x38>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b36:	d00b      	beq.n	8003b50 <TIM_Base_SetConfig+0x38>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a39      	ldr	r2, [pc, #228]	; (8003c20 <TIM_Base_SetConfig+0x108>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d007      	beq.n	8003b50 <TIM_Base_SetConfig+0x38>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a38      	ldr	r2, [pc, #224]	; (8003c24 <TIM_Base_SetConfig+0x10c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d003      	beq.n	8003b50 <TIM_Base_SetConfig+0x38>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a37      	ldr	r2, [pc, #220]	; (8003c28 <TIM_Base_SetConfig+0x110>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d108      	bne.n	8003b62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a2d      	ldr	r2, [pc, #180]	; (8003c1c <TIM_Base_SetConfig+0x104>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d01b      	beq.n	8003ba2 <TIM_Base_SetConfig+0x8a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b70:	d017      	beq.n	8003ba2 <TIM_Base_SetConfig+0x8a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a2a      	ldr	r2, [pc, #168]	; (8003c20 <TIM_Base_SetConfig+0x108>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d013      	beq.n	8003ba2 <TIM_Base_SetConfig+0x8a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a29      	ldr	r2, [pc, #164]	; (8003c24 <TIM_Base_SetConfig+0x10c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00f      	beq.n	8003ba2 <TIM_Base_SetConfig+0x8a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a28      	ldr	r2, [pc, #160]	; (8003c28 <TIM_Base_SetConfig+0x110>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00b      	beq.n	8003ba2 <TIM_Base_SetConfig+0x8a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a27      	ldr	r2, [pc, #156]	; (8003c2c <TIM_Base_SetConfig+0x114>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d007      	beq.n	8003ba2 <TIM_Base_SetConfig+0x8a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a26      	ldr	r2, [pc, #152]	; (8003c30 <TIM_Base_SetConfig+0x118>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d003      	beq.n	8003ba2 <TIM_Base_SetConfig+0x8a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a25      	ldr	r2, [pc, #148]	; (8003c34 <TIM_Base_SetConfig+0x11c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d108      	bne.n	8003bb4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a10      	ldr	r2, [pc, #64]	; (8003c1c <TIM_Base_SetConfig+0x104>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00f      	beq.n	8003c00 <TIM_Base_SetConfig+0xe8>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a11      	ldr	r2, [pc, #68]	; (8003c28 <TIM_Base_SetConfig+0x110>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00b      	beq.n	8003c00 <TIM_Base_SetConfig+0xe8>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a10      	ldr	r2, [pc, #64]	; (8003c2c <TIM_Base_SetConfig+0x114>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d007      	beq.n	8003c00 <TIM_Base_SetConfig+0xe8>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a0f      	ldr	r2, [pc, #60]	; (8003c30 <TIM_Base_SetConfig+0x118>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d003      	beq.n	8003c00 <TIM_Base_SetConfig+0xe8>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a0e      	ldr	r2, [pc, #56]	; (8003c34 <TIM_Base_SetConfig+0x11c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d103      	bne.n	8003c08 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	615a      	str	r2, [r3, #20]
}
 8003c0e:	bf00      	nop
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	40012c00 	.word	0x40012c00
 8003c20:	40000400 	.word	0x40000400
 8003c24:	40000800 	.word	0x40000800
 8003c28:	40013400 	.word	0x40013400
 8003c2c:	40014000 	.word	0x40014000
 8003c30:	40014400 	.word	0x40014400
 8003c34:	40014800 	.word	0x40014800

08003c38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	f023 0201 	bic.w	r2, r3, #1
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f023 030a 	bic.w	r3, r3, #10
 8003c74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	621a      	str	r2, [r3, #32]
}
 8003c8a:	bf00      	nop
 8003c8c:	371c      	adds	r7, #28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b087      	sub	sp, #28
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	f023 0210 	bic.w	r2, r3, #16
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	031b      	lsls	r3, r3, #12
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	621a      	str	r2, [r3, #32]
}
 8003cea:	bf00      	nop
 8003cec:	371c      	adds	r7, #28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b085      	sub	sp, #20
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f043 0307 	orr.w	r3, r3, #7
 8003d1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	609a      	str	r2, [r3, #8]
}
 8003d24:	bf00      	nop
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	021a      	lsls	r2, r3, #8
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	609a      	str	r2, [r3, #8]
}
 8003d64:	bf00      	nop
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e065      	b.n	8003e54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a2c      	ldr	r2, [pc, #176]	; (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d004      	beq.n	8003dbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a2b      	ldr	r2, [pc, #172]	; (8003e64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d108      	bne.n	8003dce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003dc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1b      	ldr	r2, [pc, #108]	; (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d018      	beq.n	8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfe:	d013      	beq.n	8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a18      	ldr	r2, [pc, #96]	; (8003e68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00e      	beq.n	8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a17      	ldr	r2, [pc, #92]	; (8003e6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d009      	beq.n	8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a12      	ldr	r2, [pc, #72]	; (8003e64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d004      	beq.n	8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a13      	ldr	r2, [pc, #76]	; (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d10c      	bne.n	8003e42 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	40012c00 	.word	0x40012c00
 8003e64:	40013400 	.word	0x40013400
 8003e68:	40000400 	.word	0x40000400
 8003e6c:	40000800 	.word	0x40000800
 8003e70:	40014000 	.word	0x40014000

08003e74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e042      	b.n	8003f98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d106      	bne.n	8003f2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7fd f90f 	bl	8001148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2224      	movs	r2, #36	; 0x24
 8003f2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0201 	bic.w	r2, r2, #1
 8003f40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f8c2 	bl	80040cc <UART_SetConfig>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d101      	bne.n	8003f52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e022      	b.n	8003f98 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 fb52 	bl	8004604 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689a      	ldr	r2, [r3, #8]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0201 	orr.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 fbd9 	bl	8004748 <UART_CheckIdleState>
 8003f96:	4603      	mov	r3, r0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08a      	sub	sp, #40	; 0x28
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	4613      	mov	r3, r2
 8003fae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	f040 8083 	bne.w	80040c2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_UART_Transmit+0x28>
 8003fc2:	88fb      	ldrh	r3, [r7, #6]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e07b      	b.n	80040c4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <HAL_UART_Transmit+0x3a>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e074      	b.n	80040c4 <HAL_UART_Transmit+0x124>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2221      	movs	r2, #33	; 0x21
 8003fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ff2:	f7fd f955 	bl	80012a0 <HAL_GetTick>
 8003ff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	88fa      	ldrh	r2, [r7, #6]
 8003ffc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	88fa      	ldrh	r2, [r7, #6]
 8004004:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004010:	d108      	bne.n	8004024 <HAL_UART_Transmit+0x84>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d104      	bne.n	8004024 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800401a:	2300      	movs	r3, #0
 800401c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	e003      	b.n	800402c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004028:	2300      	movs	r3, #0
 800402a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004034:	e02c      	b.n	8004090 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2200      	movs	r2, #0
 800403e:	2180      	movs	r1, #128	; 0x80
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 fbcc 	bl	80047de <UART_WaitOnFlagUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e039      	b.n	80040c4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10b      	bne.n	800406e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	461a      	mov	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004064:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	3302      	adds	r3, #2
 800406a:	61bb      	str	r3, [r7, #24]
 800406c:	e007      	b.n	800407e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	781a      	ldrb	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	3301      	adds	r3, #1
 800407c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1cc      	bne.n	8004036 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	2200      	movs	r2, #0
 80040a4:	2140      	movs	r1, #64	; 0x40
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 fb99 	bl	80047de <UART_WaitOnFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e006      	b.n	80040c4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	e000      	b.n	80040c4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80040c2:	2302      	movs	r3, #2
  }
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3720      	adds	r7, #32
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040cc:	b5b0      	push	{r4, r5, r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	4baf      	ldr	r3, [pc, #700]	; (80043b4 <UART_SetConfig+0x2e8>)
 80040f8:	4013      	ands	r3, r2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6812      	ldr	r2, [r2, #0]
 80040fe:	69f9      	ldr	r1, [r7, #28]
 8004100:	430b      	orrs	r3, r1
 8004102:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4aa4      	ldr	r2, [pc, #656]	; (80043b8 <UART_SetConfig+0x2ec>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d004      	beq.n	8004134 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	69fa      	ldr	r2, [r7, #28]
 8004130:	4313      	orrs	r3, r2
 8004132:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800413e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6812      	ldr	r2, [r2, #0]
 8004146:	69f9      	ldr	r1, [r7, #28]
 8004148:	430b      	orrs	r3, r1
 800414a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	f023 010f 	bic.w	r1, r3, #15
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a95      	ldr	r2, [pc, #596]	; (80043bc <UART_SetConfig+0x2f0>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d120      	bne.n	80041ae <UART_SetConfig+0xe2>
 800416c:	4b94      	ldr	r3, [pc, #592]	; (80043c0 <UART_SetConfig+0x2f4>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	2b03      	cmp	r3, #3
 8004178:	d816      	bhi.n	80041a8 <UART_SetConfig+0xdc>
 800417a:	a201      	add	r2, pc, #4	; (adr r2, 8004180 <UART_SetConfig+0xb4>)
 800417c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004180:	08004191 	.word	0x08004191
 8004184:	0800419d 	.word	0x0800419d
 8004188:	08004197 	.word	0x08004197
 800418c:	080041a3 	.word	0x080041a3
 8004190:	2301      	movs	r3, #1
 8004192:	76fb      	strb	r3, [r7, #27]
 8004194:	e0bc      	b.n	8004310 <UART_SetConfig+0x244>
 8004196:	2302      	movs	r3, #2
 8004198:	76fb      	strb	r3, [r7, #27]
 800419a:	e0b9      	b.n	8004310 <UART_SetConfig+0x244>
 800419c:	2304      	movs	r3, #4
 800419e:	76fb      	strb	r3, [r7, #27]
 80041a0:	e0b6      	b.n	8004310 <UART_SetConfig+0x244>
 80041a2:	2308      	movs	r3, #8
 80041a4:	76fb      	strb	r3, [r7, #27]
 80041a6:	e0b3      	b.n	8004310 <UART_SetConfig+0x244>
 80041a8:	2310      	movs	r3, #16
 80041aa:	76fb      	strb	r3, [r7, #27]
 80041ac:	e0b0      	b.n	8004310 <UART_SetConfig+0x244>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a84      	ldr	r2, [pc, #528]	; (80043c4 <UART_SetConfig+0x2f8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d132      	bne.n	800421e <UART_SetConfig+0x152>
 80041b8:	4b81      	ldr	r3, [pc, #516]	; (80043c0 <UART_SetConfig+0x2f4>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041be:	f003 030c 	and.w	r3, r3, #12
 80041c2:	2b0c      	cmp	r3, #12
 80041c4:	d828      	bhi.n	8004218 <UART_SetConfig+0x14c>
 80041c6:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <UART_SetConfig+0x100>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	08004201 	.word	0x08004201
 80041d0:	08004219 	.word	0x08004219
 80041d4:	08004219 	.word	0x08004219
 80041d8:	08004219 	.word	0x08004219
 80041dc:	0800420d 	.word	0x0800420d
 80041e0:	08004219 	.word	0x08004219
 80041e4:	08004219 	.word	0x08004219
 80041e8:	08004219 	.word	0x08004219
 80041ec:	08004207 	.word	0x08004207
 80041f0:	08004219 	.word	0x08004219
 80041f4:	08004219 	.word	0x08004219
 80041f8:	08004219 	.word	0x08004219
 80041fc:	08004213 	.word	0x08004213
 8004200:	2300      	movs	r3, #0
 8004202:	76fb      	strb	r3, [r7, #27]
 8004204:	e084      	b.n	8004310 <UART_SetConfig+0x244>
 8004206:	2302      	movs	r3, #2
 8004208:	76fb      	strb	r3, [r7, #27]
 800420a:	e081      	b.n	8004310 <UART_SetConfig+0x244>
 800420c:	2304      	movs	r3, #4
 800420e:	76fb      	strb	r3, [r7, #27]
 8004210:	e07e      	b.n	8004310 <UART_SetConfig+0x244>
 8004212:	2308      	movs	r3, #8
 8004214:	76fb      	strb	r3, [r7, #27]
 8004216:	e07b      	b.n	8004310 <UART_SetConfig+0x244>
 8004218:	2310      	movs	r3, #16
 800421a:	76fb      	strb	r3, [r7, #27]
 800421c:	e078      	b.n	8004310 <UART_SetConfig+0x244>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a69      	ldr	r2, [pc, #420]	; (80043c8 <UART_SetConfig+0x2fc>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d120      	bne.n	800426a <UART_SetConfig+0x19e>
 8004228:	4b65      	ldr	r3, [pc, #404]	; (80043c0 <UART_SetConfig+0x2f4>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004232:	2b30      	cmp	r3, #48	; 0x30
 8004234:	d013      	beq.n	800425e <UART_SetConfig+0x192>
 8004236:	2b30      	cmp	r3, #48	; 0x30
 8004238:	d814      	bhi.n	8004264 <UART_SetConfig+0x198>
 800423a:	2b20      	cmp	r3, #32
 800423c:	d009      	beq.n	8004252 <UART_SetConfig+0x186>
 800423e:	2b20      	cmp	r3, #32
 8004240:	d810      	bhi.n	8004264 <UART_SetConfig+0x198>
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <UART_SetConfig+0x180>
 8004246:	2b10      	cmp	r3, #16
 8004248:	d006      	beq.n	8004258 <UART_SetConfig+0x18c>
 800424a:	e00b      	b.n	8004264 <UART_SetConfig+0x198>
 800424c:	2300      	movs	r3, #0
 800424e:	76fb      	strb	r3, [r7, #27]
 8004250:	e05e      	b.n	8004310 <UART_SetConfig+0x244>
 8004252:	2302      	movs	r3, #2
 8004254:	76fb      	strb	r3, [r7, #27]
 8004256:	e05b      	b.n	8004310 <UART_SetConfig+0x244>
 8004258:	2304      	movs	r3, #4
 800425a:	76fb      	strb	r3, [r7, #27]
 800425c:	e058      	b.n	8004310 <UART_SetConfig+0x244>
 800425e:	2308      	movs	r3, #8
 8004260:	76fb      	strb	r3, [r7, #27]
 8004262:	e055      	b.n	8004310 <UART_SetConfig+0x244>
 8004264:	2310      	movs	r3, #16
 8004266:	76fb      	strb	r3, [r7, #27]
 8004268:	e052      	b.n	8004310 <UART_SetConfig+0x244>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a57      	ldr	r2, [pc, #348]	; (80043cc <UART_SetConfig+0x300>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d120      	bne.n	80042b6 <UART_SetConfig+0x1ea>
 8004274:	4b52      	ldr	r3, [pc, #328]	; (80043c0 <UART_SetConfig+0x2f4>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800427e:	2bc0      	cmp	r3, #192	; 0xc0
 8004280:	d013      	beq.n	80042aa <UART_SetConfig+0x1de>
 8004282:	2bc0      	cmp	r3, #192	; 0xc0
 8004284:	d814      	bhi.n	80042b0 <UART_SetConfig+0x1e4>
 8004286:	2b80      	cmp	r3, #128	; 0x80
 8004288:	d009      	beq.n	800429e <UART_SetConfig+0x1d2>
 800428a:	2b80      	cmp	r3, #128	; 0x80
 800428c:	d810      	bhi.n	80042b0 <UART_SetConfig+0x1e4>
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <UART_SetConfig+0x1cc>
 8004292:	2b40      	cmp	r3, #64	; 0x40
 8004294:	d006      	beq.n	80042a4 <UART_SetConfig+0x1d8>
 8004296:	e00b      	b.n	80042b0 <UART_SetConfig+0x1e4>
 8004298:	2300      	movs	r3, #0
 800429a:	76fb      	strb	r3, [r7, #27]
 800429c:	e038      	b.n	8004310 <UART_SetConfig+0x244>
 800429e:	2302      	movs	r3, #2
 80042a0:	76fb      	strb	r3, [r7, #27]
 80042a2:	e035      	b.n	8004310 <UART_SetConfig+0x244>
 80042a4:	2304      	movs	r3, #4
 80042a6:	76fb      	strb	r3, [r7, #27]
 80042a8:	e032      	b.n	8004310 <UART_SetConfig+0x244>
 80042aa:	2308      	movs	r3, #8
 80042ac:	76fb      	strb	r3, [r7, #27]
 80042ae:	e02f      	b.n	8004310 <UART_SetConfig+0x244>
 80042b0:	2310      	movs	r3, #16
 80042b2:	76fb      	strb	r3, [r7, #27]
 80042b4:	e02c      	b.n	8004310 <UART_SetConfig+0x244>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a3f      	ldr	r2, [pc, #252]	; (80043b8 <UART_SetConfig+0x2ec>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d125      	bne.n	800430c <UART_SetConfig+0x240>
 80042c0:	4b3f      	ldr	r3, [pc, #252]	; (80043c0 <UART_SetConfig+0x2f4>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042ce:	d017      	beq.n	8004300 <UART_SetConfig+0x234>
 80042d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042d4:	d817      	bhi.n	8004306 <UART_SetConfig+0x23a>
 80042d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042da:	d00b      	beq.n	80042f4 <UART_SetConfig+0x228>
 80042dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042e0:	d811      	bhi.n	8004306 <UART_SetConfig+0x23a>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <UART_SetConfig+0x222>
 80042e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ea:	d006      	beq.n	80042fa <UART_SetConfig+0x22e>
 80042ec:	e00b      	b.n	8004306 <UART_SetConfig+0x23a>
 80042ee:	2300      	movs	r3, #0
 80042f0:	76fb      	strb	r3, [r7, #27]
 80042f2:	e00d      	b.n	8004310 <UART_SetConfig+0x244>
 80042f4:	2302      	movs	r3, #2
 80042f6:	76fb      	strb	r3, [r7, #27]
 80042f8:	e00a      	b.n	8004310 <UART_SetConfig+0x244>
 80042fa:	2304      	movs	r3, #4
 80042fc:	76fb      	strb	r3, [r7, #27]
 80042fe:	e007      	b.n	8004310 <UART_SetConfig+0x244>
 8004300:	2308      	movs	r3, #8
 8004302:	76fb      	strb	r3, [r7, #27]
 8004304:	e004      	b.n	8004310 <UART_SetConfig+0x244>
 8004306:	2310      	movs	r3, #16
 8004308:	76fb      	strb	r3, [r7, #27]
 800430a:	e001      	b.n	8004310 <UART_SetConfig+0x244>
 800430c:	2310      	movs	r3, #16
 800430e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a28      	ldr	r2, [pc, #160]	; (80043b8 <UART_SetConfig+0x2ec>)
 8004316:	4293      	cmp	r3, r2
 8004318:	f040 809e 	bne.w	8004458 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800431c:	7efb      	ldrb	r3, [r7, #27]
 800431e:	2b08      	cmp	r3, #8
 8004320:	d823      	bhi.n	800436a <UART_SetConfig+0x29e>
 8004322:	a201      	add	r2, pc, #4	; (adr r2, 8004328 <UART_SetConfig+0x25c>)
 8004324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004328:	0800434d 	.word	0x0800434d
 800432c:	0800436b 	.word	0x0800436b
 8004330:	08004355 	.word	0x08004355
 8004334:	0800436b 	.word	0x0800436b
 8004338:	0800435b 	.word	0x0800435b
 800433c:	0800436b 	.word	0x0800436b
 8004340:	0800436b 	.word	0x0800436b
 8004344:	0800436b 	.word	0x0800436b
 8004348:	08004363 	.word	0x08004363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800434c:	f7fe fd8a 	bl	8002e64 <HAL_RCC_GetPCLK1Freq>
 8004350:	6178      	str	r0, [r7, #20]
        break;
 8004352:	e00f      	b.n	8004374 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004354:	4b1e      	ldr	r3, [pc, #120]	; (80043d0 <UART_SetConfig+0x304>)
 8004356:	617b      	str	r3, [r7, #20]
        break;
 8004358:	e00c      	b.n	8004374 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800435a:	f7fe fd15 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 800435e:	6178      	str	r0, [r7, #20]
        break;
 8004360:	e008      	b.n	8004374 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004366:	617b      	str	r3, [r7, #20]
        break;
 8004368:	e004      	b.n	8004374 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	76bb      	strb	r3, [r7, #26]
        break;
 8004372:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 812c 	beq.w	80045d4 <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	4a14      	ldr	r2, [pc, #80]	; (80043d4 <UART_SetConfig+0x308>)
 8004382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004386:	461a      	mov	r2, r3
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	fbb3 f3f2 	udiv	r3, r3, r2
 800438e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	4613      	mov	r3, r2
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	4413      	add	r3, r2
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	429a      	cmp	r2, r3
 800439e:	d305      	bcc.n	80043ac <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d915      	bls.n	80043d8 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	76bb      	strb	r3, [r7, #26]
 80043b0:	e110      	b.n	80045d4 <UART_SetConfig+0x508>
 80043b2:	bf00      	nop
 80043b4:	cfff69f3 	.word	0xcfff69f3
 80043b8:	40008000 	.word	0x40008000
 80043bc:	40013800 	.word	0x40013800
 80043c0:	40021000 	.word	0x40021000
 80043c4:	40004400 	.word	0x40004400
 80043c8:	40004800 	.word	0x40004800
 80043cc:	40004c00 	.word	0x40004c00
 80043d0:	00f42400 	.word	0x00f42400
 80043d4:	08007e40 	.word	0x08007e40
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	4618      	mov	r0, r3
 80043dc:	f04f 0100 	mov.w	r1, #0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	4a85      	ldr	r2, [pc, #532]	; (80045fc <UART_SetConfig+0x530>)
 80043e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	f7fb ff1e 	bl	8000230 <__aeabi_uldivmod>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4610      	mov	r0, r2
 80043fa:	4619      	mov	r1, r3
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	020b      	lsls	r3, r1, #8
 8004406:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800440a:	0202      	lsls	r2, r0, #8
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	6849      	ldr	r1, [r1, #4]
 8004410:	0849      	lsrs	r1, r1, #1
 8004412:	4608      	mov	r0, r1
 8004414:	f04f 0100 	mov.w	r1, #0
 8004418:	1814      	adds	r4, r2, r0
 800441a:	eb43 0501 	adc.w	r5, r3, r1
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	461a      	mov	r2, r3
 8004424:	f04f 0300 	mov.w	r3, #0
 8004428:	4620      	mov	r0, r4
 800442a:	4629      	mov	r1, r5
 800442c:	f7fb ff00 	bl	8000230 <__aeabi_uldivmod>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4613      	mov	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800443e:	d308      	bcc.n	8004452 <UART_SetConfig+0x386>
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004446:	d204      	bcs.n	8004452 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	60da      	str	r2, [r3, #12]
 8004450:	e0c0      	b.n	80045d4 <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	76bb      	strb	r3, [r7, #26]
 8004456:	e0bd      	b.n	80045d4 <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004460:	d164      	bne.n	800452c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004462:	7efb      	ldrb	r3, [r7, #27]
 8004464:	2b08      	cmp	r3, #8
 8004466:	d828      	bhi.n	80044ba <UART_SetConfig+0x3ee>
 8004468:	a201      	add	r2, pc, #4	; (adr r2, 8004470 <UART_SetConfig+0x3a4>)
 800446a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446e:	bf00      	nop
 8004470:	08004495 	.word	0x08004495
 8004474:	0800449d 	.word	0x0800449d
 8004478:	080044a5 	.word	0x080044a5
 800447c:	080044bb 	.word	0x080044bb
 8004480:	080044ab 	.word	0x080044ab
 8004484:	080044bb 	.word	0x080044bb
 8004488:	080044bb 	.word	0x080044bb
 800448c:	080044bb 	.word	0x080044bb
 8004490:	080044b3 	.word	0x080044b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004494:	f7fe fce6 	bl	8002e64 <HAL_RCC_GetPCLK1Freq>
 8004498:	6178      	str	r0, [r7, #20]
        break;
 800449a:	e013      	b.n	80044c4 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800449c:	f7fe fcf8 	bl	8002e90 <HAL_RCC_GetPCLK2Freq>
 80044a0:	6178      	str	r0, [r7, #20]
        break;
 80044a2:	e00f      	b.n	80044c4 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044a4:	4b56      	ldr	r3, [pc, #344]	; (8004600 <UART_SetConfig+0x534>)
 80044a6:	617b      	str	r3, [r7, #20]
        break;
 80044a8:	e00c      	b.n	80044c4 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044aa:	f7fe fc6d 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 80044ae:	6178      	str	r0, [r7, #20]
        break;
 80044b0:	e008      	b.n	80044c4 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044b6:	617b      	str	r3, [r7, #20]
        break;
 80044b8:	e004      	b.n	80044c4 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	76bb      	strb	r3, [r7, #26]
        break;
 80044c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 8084 	beq.w	80045d4 <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	4a4a      	ldr	r2, [pc, #296]	; (80045fc <UART_SetConfig+0x530>)
 80044d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044d6:	461a      	mov	r2, r3
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	fbb3 f3f2 	udiv	r3, r3, r2
 80044de:	005a      	lsls	r2, r3, #1
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	085b      	lsrs	r3, r3, #1
 80044e6:	441a      	add	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	2b0f      	cmp	r3, #15
 80044f6:	d916      	bls.n	8004526 <UART_SetConfig+0x45a>
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fe:	d212      	bcs.n	8004526 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	b29b      	uxth	r3, r3
 8004504:	f023 030f 	bic.w	r3, r3, #15
 8004508:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	085b      	lsrs	r3, r3, #1
 800450e:	b29b      	uxth	r3, r3
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	b29a      	uxth	r2, r3
 8004516:	89fb      	ldrh	r3, [r7, #14]
 8004518:	4313      	orrs	r3, r2
 800451a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	89fa      	ldrh	r2, [r7, #14]
 8004522:	60da      	str	r2, [r3, #12]
 8004524:	e056      	b.n	80045d4 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	76bb      	strb	r3, [r7, #26]
 800452a:	e053      	b.n	80045d4 <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 800452c:	7efb      	ldrb	r3, [r7, #27]
 800452e:	2b08      	cmp	r3, #8
 8004530:	d827      	bhi.n	8004582 <UART_SetConfig+0x4b6>
 8004532:	a201      	add	r2, pc, #4	; (adr r2, 8004538 <UART_SetConfig+0x46c>)
 8004534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004538:	0800455d 	.word	0x0800455d
 800453c:	08004565 	.word	0x08004565
 8004540:	0800456d 	.word	0x0800456d
 8004544:	08004583 	.word	0x08004583
 8004548:	08004573 	.word	0x08004573
 800454c:	08004583 	.word	0x08004583
 8004550:	08004583 	.word	0x08004583
 8004554:	08004583 	.word	0x08004583
 8004558:	0800457b 	.word	0x0800457b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800455c:	f7fe fc82 	bl	8002e64 <HAL_RCC_GetPCLK1Freq>
 8004560:	6178      	str	r0, [r7, #20]
        break;
 8004562:	e013      	b.n	800458c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004564:	f7fe fc94 	bl	8002e90 <HAL_RCC_GetPCLK2Freq>
 8004568:	6178      	str	r0, [r7, #20]
        break;
 800456a:	e00f      	b.n	800458c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800456c:	4b24      	ldr	r3, [pc, #144]	; (8004600 <UART_SetConfig+0x534>)
 800456e:	617b      	str	r3, [r7, #20]
        break;
 8004570:	e00c      	b.n	800458c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004572:	f7fe fc09 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8004576:	6178      	str	r0, [r7, #20]
        break;
 8004578:	e008      	b.n	800458c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800457a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800457e:	617b      	str	r3, [r7, #20]
        break;
 8004580:	e004      	b.n	800458c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	76bb      	strb	r3, [r7, #26]
        break;
 800458a:	bf00      	nop
    }

    if (pclk != 0U)
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d020      	beq.n	80045d4 <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	4a19      	ldr	r2, [pc, #100]	; (80045fc <UART_SetConfig+0x530>)
 8004598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800459c:	461a      	mov	r2, r3
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	085b      	lsrs	r3, r3, #1
 80045aa:	441a      	add	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	2b0f      	cmp	r3, #15
 80045ba:	d909      	bls.n	80045d0 <UART_SetConfig+0x504>
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c2:	d205      	bcs.n	80045d0 <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	60da      	str	r2, [r3, #12]
 80045ce:	e001      	b.n	80045d4 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80045f0:	7ebb      	ldrb	r3, [r7, #26]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3720      	adds	r7, #32
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bdb0      	pop	{r4, r5, r7, pc}
 80045fa:	bf00      	nop
 80045fc:	08007e40 	.word	0x08007e40
 8004600:	00f42400 	.word	0x00f42400

08004604 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00a      	beq.n	80046b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d01a      	beq.n	800471a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004702:	d10a      	bne.n	800471a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	605a      	str	r2, [r3, #4]
  }
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af02      	add	r7, sp, #8
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004758:	f7fc fda2 	bl	80012a0 <HAL_GetTick>
 800475c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b08      	cmp	r3, #8
 800476a:	d10e      	bne.n	800478a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800476c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f82f 	bl	80047de <UART_WaitOnFlagUntilTimeout>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e025      	b.n	80047d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b04      	cmp	r3, #4
 8004796:	d10e      	bne.n	80047b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004798:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f819 	bl	80047de <UART_WaitOnFlagUntilTimeout>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e00f      	b.n	80047d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b09c      	sub	sp, #112	; 0x70
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	60f8      	str	r0, [r7, #12]
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	603b      	str	r3, [r7, #0]
 80047ea:	4613      	mov	r3, r2
 80047ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ee:	e0a9      	b.n	8004944 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f6:	f000 80a5 	beq.w	8004944 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fa:	f7fc fd51 	bl	80012a0 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004806:	429a      	cmp	r2, r3
 8004808:	d302      	bcc.n	8004810 <UART_WaitOnFlagUntilTimeout+0x32>
 800480a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800480c:	2b00      	cmp	r3, #0
 800480e:	d140      	bne.n	8004892 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800481e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004820:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004824:	667b      	str	r3, [r7, #100]	; 0x64
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800482e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004830:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004834:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800483c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e6      	bne.n	8004810 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3308      	adds	r3, #8
 8004848:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004854:	f023 0301 	bic.w	r3, r3, #1
 8004858:	663b      	str	r3, [r7, #96]	; 0x60
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3308      	adds	r3, #8
 8004860:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004862:	64ba      	str	r2, [r7, #72]	; 0x48
 8004864:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004868:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e5      	bne.n	8004842 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2220      	movs	r2, #32
 8004882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e069      	b.n	8004966 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d051      	beq.n	8004944 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ae:	d149      	bne.n	8004944 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d8:	637b      	str	r3, [r7, #52]	; 0x34
 80048da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048e0:	e841 2300 	strex	r3, r2, [r1]
 80048e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e6      	bne.n	80048ba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3308      	adds	r3, #8
 80048f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	613b      	str	r3, [r7, #16]
   return(result);
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f023 0301 	bic.w	r3, r3, #1
 8004902:	66bb      	str	r3, [r7, #104]	; 0x68
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3308      	adds	r3, #8
 800490a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800490c:	623a      	str	r2, [r7, #32]
 800490e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	69f9      	ldr	r1, [r7, #28]
 8004912:	6a3a      	ldr	r2, [r7, #32]
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	61bb      	str	r3, [r7, #24]
   return(result);
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e5      	bne.n	80048ec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2220      	movs	r2, #32
 800492c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2220      	movs	r2, #32
 8004934:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e010      	b.n	8004966 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	69da      	ldr	r2, [r3, #28]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	4013      	ands	r3, r2
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	429a      	cmp	r2, r3
 8004952:	bf0c      	ite	eq
 8004954:	2301      	moveq	r3, #1
 8004956:	2300      	movne	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	461a      	mov	r2, r3
 800495c:	79fb      	ldrb	r3, [r7, #7]
 800495e:	429a      	cmp	r2, r3
 8004960:	f43f af46 	beq.w	80047f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3770      	adds	r7, #112	; 0x70
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800496e:	b480      	push	{r7}
 8004970:	b085      	sub	sp, #20
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800497c:	2b01      	cmp	r3, #1
 800497e:	d101      	bne.n	8004984 <HAL_UARTEx_DisableFifoMode+0x16>
 8004980:	2302      	movs	r3, #2
 8004982:	e027      	b.n	80049d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2224      	movs	r2, #36	; 0x24
 8004990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0201 	bic.w	r2, r2, #1
 80049aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80049b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e02d      	b.n	8004a54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2224      	movs	r2, #36	; 0x24
 8004a04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0201 	bic.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f84f 	bl	8004ad8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e02d      	b.n	8004ad0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2224      	movs	r2, #36	; 0x24
 8004a80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0201 	bic.w	r2, r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f811 	bl	8004ad8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d108      	bne.n	8004afa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004af8:	e031      	b.n	8004b5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004afa:	2308      	movs	r3, #8
 8004afc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004afe:	2308      	movs	r3, #8
 8004b00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	0e5b      	lsrs	r3, r3, #25
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	0f5b      	lsrs	r3, r3, #29
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b22:	7bbb      	ldrb	r3, [r7, #14]
 8004b24:	7b3a      	ldrb	r2, [r7, #12]
 8004b26:	4911      	ldr	r1, [pc, #68]	; (8004b6c <UARTEx_SetNbDataToProcess+0x94>)
 8004b28:	5c8a      	ldrb	r2, [r1, r2]
 8004b2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b2e:	7b3a      	ldrb	r2, [r7, #12]
 8004b30:	490f      	ldr	r1, [pc, #60]	; (8004b70 <UARTEx_SetNbDataToProcess+0x98>)
 8004b32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b34:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
 8004b42:	7b7a      	ldrb	r2, [r7, #13]
 8004b44:	4909      	ldr	r1, [pc, #36]	; (8004b6c <UARTEx_SetNbDataToProcess+0x94>)
 8004b46:	5c8a      	ldrb	r2, [r1, r2]
 8004b48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b4c:	7b7a      	ldrb	r2, [r7, #13]
 8004b4e:	4908      	ldr	r1, [pc, #32]	; (8004b70 <UARTEx_SetNbDataToProcess+0x98>)
 8004b50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b52:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004b5e:	bf00      	nop
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	08007e58 	.word	0x08007e58
 8004b70:	08007e60 	.word	0x08007e60

08004b74 <__NVIC_SetPriority>:
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	6039      	str	r1, [r7, #0]
 8004b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	db0a      	blt.n	8004b9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	490c      	ldr	r1, [pc, #48]	; (8004bc0 <__NVIC_SetPriority+0x4c>)
 8004b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b92:	0112      	lsls	r2, r2, #4
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	440b      	add	r3, r1
 8004b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004b9c:	e00a      	b.n	8004bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	4908      	ldr	r1, [pc, #32]	; (8004bc4 <__NVIC_SetPriority+0x50>)
 8004ba4:	79fb      	ldrb	r3, [r7, #7]
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	3b04      	subs	r3, #4
 8004bac:	0112      	lsls	r2, r2, #4
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	761a      	strb	r2, [r3, #24]
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	e000e100 	.word	0xe000e100
 8004bc4:	e000ed00 	.word	0xe000ed00

08004bc8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004bcc:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <SysTick_Handler+0x1c>)
 8004bce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004bd0:	f001 fda6 	bl	8006720 <xTaskGetSchedulerState>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d001      	beq.n	8004bde <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004bda:	f002 fcd5 	bl	8007588 <xPortSysTickHandler>
  }
}
 8004bde:	bf00      	nop
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	e000e010 	.word	0xe000e010

08004be8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004bec:	2100      	movs	r1, #0
 8004bee:	f06f 0004 	mvn.w	r0, #4
 8004bf2:	f7ff ffbf 	bl	8004b74 <__NVIC_SetPriority>
#endif
}
 8004bf6:	bf00      	nop
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c02:	f3ef 8305 	mrs	r3, IPSR
 8004c06:	603b      	str	r3, [r7, #0]
  return(result);
 8004c08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004c0e:	f06f 0305 	mvn.w	r3, #5
 8004c12:	607b      	str	r3, [r7, #4]
 8004c14:	e00c      	b.n	8004c30 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c16:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <osKernelInitialize+0x44>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d105      	bne.n	8004c2a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004c1e:	4b08      	ldr	r3, [pc, #32]	; (8004c40 <osKernelInitialize+0x44>)
 8004c20:	2201      	movs	r2, #1
 8004c22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c24:	2300      	movs	r3, #0
 8004c26:	607b      	str	r3, [r7, #4]
 8004c28:	e002      	b.n	8004c30 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c30:	687b      	ldr	r3, [r7, #4]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	20000090 	.word	0x20000090

08004c44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c4a:	f3ef 8305 	mrs	r3, IPSR
 8004c4e:	603b      	str	r3, [r7, #0]
  return(result);
 8004c50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004c56:	f06f 0305 	mvn.w	r3, #5
 8004c5a:	607b      	str	r3, [r7, #4]
 8004c5c:	e010      	b.n	8004c80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c5e:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <osKernelStart+0x48>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d109      	bne.n	8004c7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004c66:	f7ff ffbf 	bl	8004be8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004c6a:	4b08      	ldr	r3, [pc, #32]	; (8004c8c <osKernelStart+0x48>)
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004c70:	f001 f8fa 	bl	8005e68 <vTaskStartScheduler>
      stat = osOK;
 8004c74:	2300      	movs	r3, #0
 8004c76:	607b      	str	r3, [r7, #4]
 8004c78:	e002      	b.n	8004c80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c80:	687b      	ldr	r3, [r7, #4]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000090 	.word	0x20000090

08004c90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08e      	sub	sp, #56	; 0x38
 8004c94:	af04      	add	r7, sp, #16
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ca0:	f3ef 8305 	mrs	r3, IPSR
 8004ca4:	617b      	str	r3, [r7, #20]
  return(result);
 8004ca6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d17e      	bne.n	8004daa <osThreadNew+0x11a>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d07b      	beq.n	8004daa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004cb2:	2380      	movs	r3, #128	; 0x80
 8004cb4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004cb6:	2318      	movs	r3, #24
 8004cb8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d045      	beq.n	8004d56 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <osThreadNew+0x48>
        name = attr->name;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d008      	beq.n	8004cfe <osThreadNew+0x6e>
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	2b38      	cmp	r3, #56	; 0x38
 8004cf0:	d805      	bhi.n	8004cfe <osThreadNew+0x6e>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <osThreadNew+0x72>
        return (NULL);
 8004cfe:	2300      	movs	r3, #0
 8004d00:	e054      	b.n	8004dac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	089b      	lsrs	r3, r3, #2
 8004d10:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00e      	beq.n	8004d38 <osThreadNew+0xa8>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	2bbb      	cmp	r3, #187	; 0xbb
 8004d20:	d90a      	bls.n	8004d38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d006      	beq.n	8004d38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <osThreadNew+0xa8>
        mem = 1;
 8004d32:	2301      	movs	r3, #1
 8004d34:	61bb      	str	r3, [r7, #24]
 8004d36:	e010      	b.n	8004d5a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10c      	bne.n	8004d5a <osThreadNew+0xca>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d108      	bne.n	8004d5a <osThreadNew+0xca>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d104      	bne.n	8004d5a <osThreadNew+0xca>
          mem = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	61bb      	str	r3, [r7, #24]
 8004d54:	e001      	b.n	8004d5a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004d56:	2300      	movs	r3, #0
 8004d58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d110      	bne.n	8004d82 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d68:	9202      	str	r2, [sp, #8]
 8004d6a:	9301      	str	r3, [sp, #4]
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	6a3a      	ldr	r2, [r7, #32]
 8004d74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 fe0c 	bl	8005994 <xTaskCreateStatic>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	613b      	str	r3, [r7, #16]
 8004d80:	e013      	b.n	8004daa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d110      	bne.n	8004daa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	f107 0310 	add.w	r3, r7, #16
 8004d90:	9301      	str	r3, [sp, #4]
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 fe57 	bl	8005a4e <xTaskCreate>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d001      	beq.n	8004daa <osThreadNew+0x11a>
            hTask = NULL;
 8004da6:	2300      	movs	r3, #0
 8004da8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004daa:	693b      	ldr	r3, [r7, #16]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3728      	adds	r7, #40	; 0x28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dbc:	f3ef 8305 	mrs	r3, IPSR
 8004dc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dc2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <osDelay+0x1c>
    stat = osErrorISR;
 8004dc8:	f06f 0305 	mvn.w	r3, #5
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	e007      	b.n	8004de0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f001 f810 	bl	8005e00 <vTaskDelay>
    }
  }

  return (stat);
 8004de0:	68fb      	ldr	r3, [r7, #12]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4a07      	ldr	r2, [pc, #28]	; (8004e18 <vApplicationGetIdleTaskMemory+0x2c>)
 8004dfc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	4a06      	ldr	r2, [pc, #24]	; (8004e1c <vApplicationGetIdleTaskMemory+0x30>)
 8004e02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2280      	movs	r2, #128	; 0x80
 8004e08:	601a      	str	r2, [r3, #0]
}
 8004e0a:	bf00      	nop
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	20000094 	.word	0x20000094
 8004e1c:	20000150 	.word	0x20000150

08004e20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4a07      	ldr	r2, [pc, #28]	; (8004e4c <vApplicationGetTimerTaskMemory+0x2c>)
 8004e30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	4a06      	ldr	r2, [pc, #24]	; (8004e50 <vApplicationGetTimerTaskMemory+0x30>)
 8004e36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e3e:	601a      	str	r2, [r3, #0]
}
 8004e40:	bf00      	nop
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	20000350 	.word	0x20000350
 8004e50:	2000040c 	.word	0x2000040c

08004e54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f103 0208 	add.w	r2, r3, #8
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f04f 32ff 	mov.w	r2, #4294967295
 8004e6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f103 0208 	add.w	r2, r3, #8
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f103 0208 	add.w	r2, r3, #8
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ea2:	bf00      	nop
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	601a      	str	r2, [r3, #0]
}
 8004eea:	bf00      	nop
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b085      	sub	sp, #20
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0c:	d103      	bne.n	8004f16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e00c      	b.n	8004f30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3308      	adds	r3, #8
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	e002      	b.n	8004f24 <vListInsert+0x2e>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d2f6      	bcs.n	8004f1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	601a      	str	r2, [r3, #0]
}
 8004f5c:	bf00      	nop
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6892      	ldr	r2, [r2, #8]
 8004f7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6852      	ldr	r2, [r2, #4]
 8004f88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d103      	bne.n	8004f9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	1e5a      	subs	r2, r3, #1
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10a      	bne.n	8004fe6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004fe2:	bf00      	nop
 8004fe4:	e7fe      	b.n	8004fe4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004fe6:	f002 fa3d 	bl	8007464 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff2:	68f9      	ldr	r1, [r7, #12]
 8004ff4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ff6:	fb01 f303 	mul.w	r3, r1, r3
 8004ffa:	441a      	add	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005016:	3b01      	subs	r3, #1
 8005018:	68f9      	ldr	r1, [r7, #12]
 800501a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800501c:	fb01 f303 	mul.w	r3, r1, r3
 8005020:	441a      	add	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	22ff      	movs	r2, #255	; 0xff
 800502a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	22ff      	movs	r2, #255	; 0xff
 8005032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d114      	bne.n	8005066 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d01a      	beq.n	800507a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	3310      	adds	r3, #16
 8005048:	4618      	mov	r0, r3
 800504a:	f001 f9a7 	bl	800639c <xTaskRemoveFromEventList>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d012      	beq.n	800507a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005054:	4b0c      	ldr	r3, [pc, #48]	; (8005088 <xQueueGenericReset+0xcc>)
 8005056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	e009      	b.n	800507a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3310      	adds	r3, #16
 800506a:	4618      	mov	r0, r3
 800506c:	f7ff fef2 	bl	8004e54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	3324      	adds	r3, #36	; 0x24
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff feed 	bl	8004e54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800507a:	f002 fa23 	bl	80074c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800507e:	2301      	movs	r3, #1
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	e000ed04 	.word	0xe000ed04

0800508c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08e      	sub	sp, #56	; 0x38
 8005090:	af02      	add	r7, sp, #8
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10a      	bne.n	80050b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050b2:	bf00      	nop
 80050b4:	e7fe      	b.n	80050b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10a      	bne.n	80050d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050ce:	bf00      	nop
 80050d0:	e7fe      	b.n	80050d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <xQueueGenericCreateStatic+0x52>
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <xQueueGenericCreateStatic+0x56>
 80050de:	2301      	movs	r3, #1
 80050e0:	e000      	b.n	80050e4 <xQueueGenericCreateStatic+0x58>
 80050e2:	2300      	movs	r3, #0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10a      	bne.n	80050fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80050e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ec:	f383 8811 	msr	BASEPRI, r3
 80050f0:	f3bf 8f6f 	isb	sy
 80050f4:	f3bf 8f4f 	dsb	sy
 80050f8:	623b      	str	r3, [r7, #32]
}
 80050fa:	bf00      	nop
 80050fc:	e7fe      	b.n	80050fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d102      	bne.n	800510a <xQueueGenericCreateStatic+0x7e>
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <xQueueGenericCreateStatic+0x82>
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <xQueueGenericCreateStatic+0x84>
 800510e:	2300      	movs	r3, #0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10a      	bne.n	800512a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	61fb      	str	r3, [r7, #28]
}
 8005126:	bf00      	nop
 8005128:	e7fe      	b.n	8005128 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800512a:	2350      	movs	r3, #80	; 0x50
 800512c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b50      	cmp	r3, #80	; 0x50
 8005132:	d00a      	beq.n	800514a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	61bb      	str	r3, [r7, #24]
}
 8005146:	bf00      	nop
 8005148:	e7fe      	b.n	8005148 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800514a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00d      	beq.n	8005172 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800515e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	4613      	mov	r3, r2
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 f805 	bl	800517c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005174:	4618      	mov	r0, r3
 8005176:	3730      	adds	r7, #48	; 0x30
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d103      	bne.n	8005198 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	e002      	b.n	800519e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80051aa:	2101      	movs	r1, #1
 80051ac:	69b8      	ldr	r0, [r7, #24]
 80051ae:	f7ff ff05 	bl	8004fbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	78fa      	ldrb	r2, [r7, #3]
 80051b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80051ba:	bf00      	nop
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b08e      	sub	sp, #56	; 0x38
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80051d2:	2300      	movs	r3, #0
 80051d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10a      	bne.n	80051f6 <xQueueGenericSend+0x32>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051f2:	bf00      	nop
 80051f4:	e7fe      	b.n	80051f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d103      	bne.n	8005204 <xQueueGenericSend+0x40>
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <xQueueGenericSend+0x44>
 8005204:	2301      	movs	r3, #1
 8005206:	e000      	b.n	800520a <xQueueGenericSend+0x46>
 8005208:	2300      	movs	r3, #0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10a      	bne.n	8005224 <xQueueGenericSend+0x60>
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005220:	bf00      	nop
 8005222:	e7fe      	b.n	8005222 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2b02      	cmp	r3, #2
 8005228:	d103      	bne.n	8005232 <xQueueGenericSend+0x6e>
 800522a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522e:	2b01      	cmp	r3, #1
 8005230:	d101      	bne.n	8005236 <xQueueGenericSend+0x72>
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <xQueueGenericSend+0x74>
 8005236:	2300      	movs	r3, #0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10a      	bne.n	8005252 <xQueueGenericSend+0x8e>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	623b      	str	r3, [r7, #32]
}
 800524e:	bf00      	nop
 8005250:	e7fe      	b.n	8005250 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005252:	f001 fa65 	bl	8006720 <xTaskGetSchedulerState>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d102      	bne.n	8005262 <xQueueGenericSend+0x9e>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <xQueueGenericSend+0xa2>
 8005262:	2301      	movs	r3, #1
 8005264:	e000      	b.n	8005268 <xQueueGenericSend+0xa4>
 8005266:	2300      	movs	r3, #0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10a      	bne.n	8005282 <xQueueGenericSend+0xbe>
	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	61fb      	str	r3, [r7, #28]
}
 800527e:	bf00      	nop
 8005280:	e7fe      	b.n	8005280 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005282:	f002 f8ef 	bl	8007464 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528e:	429a      	cmp	r2, r3
 8005290:	d302      	bcc.n	8005298 <xQueueGenericSend+0xd4>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b02      	cmp	r3, #2
 8005296:	d129      	bne.n	80052ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	68b9      	ldr	r1, [r7, #8]
 800529c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800529e:	f000 fa0b 	bl	80056b8 <prvCopyDataToQueue>
 80052a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d010      	beq.n	80052ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ae:	3324      	adds	r3, #36	; 0x24
 80052b0:	4618      	mov	r0, r3
 80052b2:	f001 f873 	bl	800639c <xTaskRemoveFromEventList>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d013      	beq.n	80052e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80052bc:	4b3f      	ldr	r3, [pc, #252]	; (80053bc <xQueueGenericSend+0x1f8>)
 80052be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	e00a      	b.n	80052e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d007      	beq.n	80052e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80052d4:	4b39      	ldr	r3, [pc, #228]	; (80053bc <xQueueGenericSend+0x1f8>)
 80052d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80052e4:	f002 f8ee 	bl	80074c4 <vPortExitCritical>
				return pdPASS;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e063      	b.n	80053b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d103      	bne.n	80052fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052f2:	f002 f8e7 	bl	80074c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	e05c      	b.n	80053b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d106      	bne.n	800530e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005300:	f107 0314 	add.w	r3, r7, #20
 8005304:	4618      	mov	r0, r3
 8005306:	f001 f8ad 	bl	8006464 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800530a:	2301      	movs	r3, #1
 800530c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800530e:	f002 f8d9 	bl	80074c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005312:	f000 fe19 	bl	8005f48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005316:	f002 f8a5 	bl	8007464 <vPortEnterCritical>
 800531a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005320:	b25b      	sxtb	r3, r3
 8005322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005326:	d103      	bne.n	8005330 <xQueueGenericSend+0x16c>
 8005328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005332:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005336:	b25b      	sxtb	r3, r3
 8005338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533c:	d103      	bne.n	8005346 <xQueueGenericSend+0x182>
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005346:	f002 f8bd 	bl	80074c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800534a:	1d3a      	adds	r2, r7, #4
 800534c:	f107 0314 	add.w	r3, r7, #20
 8005350:	4611      	mov	r1, r2
 8005352:	4618      	mov	r0, r3
 8005354:	f001 f89c 	bl	8006490 <xTaskCheckForTimeOut>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d124      	bne.n	80053a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800535e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005360:	f000 faa2 	bl	80058a8 <prvIsQueueFull>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d018      	beq.n	800539c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	3310      	adds	r3, #16
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	4611      	mov	r1, r2
 8005372:	4618      	mov	r0, r3
 8005374:	f000 ffc2 	bl	80062fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005378:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800537a:	f000 fa2d 	bl	80057d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800537e:	f000 fdf1 	bl	8005f64 <xTaskResumeAll>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	f47f af7c 	bne.w	8005282 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800538a:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <xQueueGenericSend+0x1f8>)
 800538c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	e772      	b.n	8005282 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800539c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800539e:	f000 fa1b 	bl	80057d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053a2:	f000 fddf 	bl	8005f64 <xTaskResumeAll>
 80053a6:	e76c      	b.n	8005282 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80053a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053aa:	f000 fa15 	bl	80057d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053ae:	f000 fdd9 	bl	8005f64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80053b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3738      	adds	r7, #56	; 0x38
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	e000ed04 	.word	0xe000ed04

080053c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b090      	sub	sp, #64	; 0x40
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80053d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10a      	bne.n	80053ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053ea:	bf00      	nop
 80053ec:	e7fe      	b.n	80053ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d103      	bne.n	80053fc <xQueueGenericSendFromISR+0x3c>
 80053f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <xQueueGenericSendFromISR+0x40>
 80053fc:	2301      	movs	r3, #1
 80053fe:	e000      	b.n	8005402 <xQueueGenericSendFromISR+0x42>
 8005400:	2300      	movs	r3, #0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10a      	bne.n	800541c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005418:	bf00      	nop
 800541a:	e7fe      	b.n	800541a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2b02      	cmp	r3, #2
 8005420:	d103      	bne.n	800542a <xQueueGenericSendFromISR+0x6a>
 8005422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <xQueueGenericSendFromISR+0x6e>
 800542a:	2301      	movs	r3, #1
 800542c:	e000      	b.n	8005430 <xQueueGenericSendFromISR+0x70>
 800542e:	2300      	movs	r3, #0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10a      	bne.n	800544a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	623b      	str	r3, [r7, #32]
}
 8005446:	bf00      	nop
 8005448:	e7fe      	b.n	8005448 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800544a:	f002 f8ed 	bl	8007628 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800544e:	f3ef 8211 	mrs	r2, BASEPRI
 8005452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005456:	f383 8811 	msr	BASEPRI, r3
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	61fa      	str	r2, [r7, #28]
 8005464:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005466:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005468:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800546e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005472:	429a      	cmp	r2, r3
 8005474:	d302      	bcc.n	800547c <xQueueGenericSendFromISR+0xbc>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b02      	cmp	r3, #2
 800547a:	d12f      	bne.n	80054dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800547c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	68b9      	ldr	r1, [r7, #8]
 8005490:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005492:	f000 f911 	bl	80056b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005496:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549e:	d112      	bne.n	80054c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d016      	beq.n	80054d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054aa:	3324      	adds	r3, #36	; 0x24
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 ff75 	bl	800639c <xTaskRemoveFromEventList>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00e      	beq.n	80054d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00b      	beq.n	80054d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	e007      	b.n	80054d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80054ca:	3301      	adds	r3, #1
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	b25a      	sxtb	r2, r3
 80054d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80054d6:	2301      	movs	r3, #1
 80054d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80054da:	e001      	b.n	80054e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054dc:	2300      	movs	r3, #0
 80054de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3740      	adds	r7, #64	; 0x40
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
	...

080054f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08c      	sub	sp, #48	; 0x30
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005504:	2300      	movs	r3, #0
 8005506:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10a      	bne.n	8005528 <xQueueReceive+0x30>
	__asm volatile
 8005512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	623b      	str	r3, [r7, #32]
}
 8005524:	bf00      	nop
 8005526:	e7fe      	b.n	8005526 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d103      	bne.n	8005536 <xQueueReceive+0x3e>
 800552e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <xQueueReceive+0x42>
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <xQueueReceive+0x44>
 800553a:	2300      	movs	r3, #0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <xQueueReceive+0x5e>
	__asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	61fb      	str	r3, [r7, #28]
}
 8005552:	bf00      	nop
 8005554:	e7fe      	b.n	8005554 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005556:	f001 f8e3 	bl	8006720 <xTaskGetSchedulerState>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d102      	bne.n	8005566 <xQueueReceive+0x6e>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <xQueueReceive+0x72>
 8005566:	2301      	movs	r3, #1
 8005568:	e000      	b.n	800556c <xQueueReceive+0x74>
 800556a:	2300      	movs	r3, #0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10a      	bne.n	8005586 <xQueueReceive+0x8e>
	__asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	61bb      	str	r3, [r7, #24]
}
 8005582:	bf00      	nop
 8005584:	e7fe      	b.n	8005584 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005586:	f001 ff6d 	bl	8007464 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	2b00      	cmp	r3, #0
 8005594:	d01f      	beq.n	80055d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005596:	68b9      	ldr	r1, [r7, #8]
 8005598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800559a:	f000 f8f7 	bl	800578c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	1e5a      	subs	r2, r3, #1
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00f      	beq.n	80055ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b0:	3310      	adds	r3, #16
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fef2 	bl	800639c <xTaskRemoveFromEventList>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d007      	beq.n	80055ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055be:	4b3d      	ldr	r3, [pc, #244]	; (80056b4 <xQueueReceive+0x1bc>)
 80055c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055ce:	f001 ff79 	bl	80074c4 <vPortExitCritical>
				return pdPASS;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e069      	b.n	80056aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d103      	bne.n	80055e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055dc:	f001 ff72 	bl	80074c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055e0:	2300      	movs	r3, #0
 80055e2:	e062      	b.n	80056aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d106      	bne.n	80055f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055ea:	f107 0310 	add.w	r3, r7, #16
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 ff38 	bl	8006464 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055f4:	2301      	movs	r3, #1
 80055f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055f8:	f001 ff64 	bl	80074c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055fc:	f000 fca4 	bl	8005f48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005600:	f001 ff30 	bl	8007464 <vPortEnterCritical>
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800560a:	b25b      	sxtb	r3, r3
 800560c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005610:	d103      	bne.n	800561a <xQueueReceive+0x122>
 8005612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005620:	b25b      	sxtb	r3, r3
 8005622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005626:	d103      	bne.n	8005630 <xQueueReceive+0x138>
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005630:	f001 ff48 	bl	80074c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005634:	1d3a      	adds	r2, r7, #4
 8005636:	f107 0310 	add.w	r3, r7, #16
 800563a:	4611      	mov	r1, r2
 800563c:	4618      	mov	r0, r3
 800563e:	f000 ff27 	bl	8006490 <xTaskCheckForTimeOut>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d123      	bne.n	8005690 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800564a:	f000 f917 	bl	800587c <prvIsQueueEmpty>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d017      	beq.n	8005684 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005656:	3324      	adds	r3, #36	; 0x24
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	4611      	mov	r1, r2
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fe4d 	bl	80062fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005664:	f000 f8b8 	bl	80057d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005668:	f000 fc7c 	bl	8005f64 <xTaskResumeAll>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d189      	bne.n	8005586 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005672:	4b10      	ldr	r3, [pc, #64]	; (80056b4 <xQueueReceive+0x1bc>)
 8005674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	e780      	b.n	8005586 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005686:	f000 f8a7 	bl	80057d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800568a:	f000 fc6b 	bl	8005f64 <xTaskResumeAll>
 800568e:	e77a      	b.n	8005586 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005692:	f000 f8a1 	bl	80057d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005696:	f000 fc65 	bl	8005f64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800569a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800569c:	f000 f8ee 	bl	800587c <prvIsQueueEmpty>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f43f af6f 	beq.w	8005586 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80056a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3730      	adds	r7, #48	; 0x30
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	e000ed04 	.word	0xe000ed04

080056b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80056c4:	2300      	movs	r3, #0
 80056c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10d      	bne.n	80056f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d14d      	bne.n	800577a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f001 f83a 	bl	800675c <xTaskPriorityDisinherit>
 80056e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	609a      	str	r2, [r3, #8]
 80056f0:	e043      	b.n	800577a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d119      	bne.n	800572c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6858      	ldr	r0, [r3, #4]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005700:	461a      	mov	r2, r3
 8005702:	68b9      	ldr	r1, [r7, #8]
 8005704:	f002 f9fa 	bl	8007afc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005710:	441a      	add	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	429a      	cmp	r2, r3
 8005720:	d32b      	bcc.n	800577a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	605a      	str	r2, [r3, #4]
 800572a:	e026      	b.n	800577a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	68d8      	ldr	r0, [r3, #12]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005734:	461a      	mov	r2, r3
 8005736:	68b9      	ldr	r1, [r7, #8]
 8005738:	f002 f9e0 	bl	8007afc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	425b      	negs	r3, r3
 8005746:	441a      	add	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	429a      	cmp	r2, r3
 8005756:	d207      	bcs.n	8005768 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	425b      	negs	r3, r3
 8005762:	441a      	add	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b02      	cmp	r3, #2
 800576c:	d105      	bne.n	800577a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	3b01      	subs	r3, #1
 8005778:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005782:	697b      	ldr	r3, [r7, #20]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3718      	adds	r7, #24
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	2b00      	cmp	r3, #0
 800579c:	d018      	beq.n	80057d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	441a      	add	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68da      	ldr	r2, [r3, #12]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d303      	bcc.n	80057c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68d9      	ldr	r1, [r3, #12]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c8:	461a      	mov	r2, r3
 80057ca:	6838      	ldr	r0, [r7, #0]
 80057cc:	f002 f996 	bl	8007afc <memcpy>
	}
}
 80057d0:	bf00      	nop
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80057e0:	f001 fe40 	bl	8007464 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057ec:	e011      	b.n	8005812 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d012      	beq.n	800581c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	3324      	adds	r3, #36	; 0x24
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 fdce 	bl	800639c <xTaskRemoveFromEventList>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005806:	f000 fea5 	bl	8006554 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	3b01      	subs	r3, #1
 800580e:	b2db      	uxtb	r3, r3
 8005810:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005816:	2b00      	cmp	r3, #0
 8005818:	dce9      	bgt.n	80057ee <prvUnlockQueue+0x16>
 800581a:	e000      	b.n	800581e <prvUnlockQueue+0x46>
					break;
 800581c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	22ff      	movs	r2, #255	; 0xff
 8005822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005826:	f001 fe4d 	bl	80074c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800582a:	f001 fe1b 	bl	8007464 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005834:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005836:	e011      	b.n	800585c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d012      	beq.n	8005866 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3310      	adds	r3, #16
 8005844:	4618      	mov	r0, r3
 8005846:	f000 fda9 	bl	800639c <xTaskRemoveFromEventList>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005850:	f000 fe80 	bl	8006554 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005854:	7bbb      	ldrb	r3, [r7, #14]
 8005856:	3b01      	subs	r3, #1
 8005858:	b2db      	uxtb	r3, r3
 800585a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800585c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005860:	2b00      	cmp	r3, #0
 8005862:	dce9      	bgt.n	8005838 <prvUnlockQueue+0x60>
 8005864:	e000      	b.n	8005868 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005866:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	22ff      	movs	r2, #255	; 0xff
 800586c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005870:	f001 fe28 	bl	80074c4 <vPortExitCritical>
}
 8005874:	bf00      	nop
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005884:	f001 fdee 	bl	8007464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588c:	2b00      	cmp	r3, #0
 800588e:	d102      	bne.n	8005896 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005890:	2301      	movs	r3, #1
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	e001      	b.n	800589a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005896:	2300      	movs	r3, #0
 8005898:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800589a:	f001 fe13 	bl	80074c4 <vPortExitCritical>

	return xReturn;
 800589e:	68fb      	ldr	r3, [r7, #12]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058b0:	f001 fdd8 	bl	8007464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058bc:	429a      	cmp	r2, r3
 80058be:	d102      	bne.n	80058c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80058c0:	2301      	movs	r3, #1
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	e001      	b.n	80058ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058ca:	f001 fdfb 	bl	80074c4 <vPortExitCritical>

	return xReturn;
 80058ce:	68fb      	ldr	r3, [r7, #12]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058e2:	2300      	movs	r3, #0
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	e014      	b.n	8005912 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80058e8:	4a0f      	ldr	r2, [pc, #60]	; (8005928 <vQueueAddToRegistry+0x50>)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10b      	bne.n	800590c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80058f4:	490c      	ldr	r1, [pc, #48]	; (8005928 <vQueueAddToRegistry+0x50>)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80058fe:	4a0a      	ldr	r2, [pc, #40]	; (8005928 <vQueueAddToRegistry+0x50>)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	4413      	add	r3, r2
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800590a:	e006      	b.n	800591a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3301      	adds	r3, #1
 8005910:	60fb      	str	r3, [r7, #12]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2b07      	cmp	r3, #7
 8005916:	d9e7      	bls.n	80058e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005918:	bf00      	nop
 800591a:	bf00      	nop
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	20001d40 	.word	0x20001d40

0800592c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800593c:	f001 fd92 	bl	8007464 <vPortEnterCritical>
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005946:	b25b      	sxtb	r3, r3
 8005948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594c:	d103      	bne.n	8005956 <vQueueWaitForMessageRestricted+0x2a>
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800595c:	b25b      	sxtb	r3, r3
 800595e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005962:	d103      	bne.n	800596c <vQueueWaitForMessageRestricted+0x40>
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800596c:	f001 fdaa 	bl	80074c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005974:	2b00      	cmp	r3, #0
 8005976:	d106      	bne.n	8005986 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	3324      	adds	r3, #36	; 0x24
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	68b9      	ldr	r1, [r7, #8]
 8005980:	4618      	mov	r0, r3
 8005982:	f000 fcdf 	bl	8006344 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005986:	6978      	ldr	r0, [r7, #20]
 8005988:	f7ff ff26 	bl	80057d8 <prvUnlockQueue>
	}
 800598c:	bf00      	nop
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005994:	b580      	push	{r7, lr}
 8005996:	b08e      	sub	sp, #56	; 0x38
 8005998:	af04      	add	r7, sp, #16
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80059a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10a      	bne.n	80059be <xTaskCreateStatic+0x2a>
	__asm volatile
 80059a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	623b      	str	r3, [r7, #32]
}
 80059ba:	bf00      	nop
 80059bc:	e7fe      	b.n	80059bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10a      	bne.n	80059da <xTaskCreateStatic+0x46>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	61fb      	str	r3, [r7, #28]
}
 80059d6:	bf00      	nop
 80059d8:	e7fe      	b.n	80059d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059da:	23bc      	movs	r3, #188	; 0xbc
 80059dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	2bbc      	cmp	r3, #188	; 0xbc
 80059e2:	d00a      	beq.n	80059fa <xTaskCreateStatic+0x66>
	__asm volatile
 80059e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	61bb      	str	r3, [r7, #24]
}
 80059f6:	bf00      	nop
 80059f8:	e7fe      	b.n	80059f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80059fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80059fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d01e      	beq.n	8005a40 <xTaskCreateStatic+0xac>
 8005a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d01b      	beq.n	8005a40 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	2202      	movs	r2, #2
 8005a16:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	9303      	str	r3, [sp, #12]
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	9302      	str	r3, [sp, #8]
 8005a22:	f107 0314 	add.w	r3, r7, #20
 8005a26:	9301      	str	r3, [sp, #4]
 8005a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	68b9      	ldr	r1, [r7, #8]
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f000 f850 	bl	8005ad8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a3a:	f000 f8f3 	bl	8005c24 <prvAddNewTaskToReadyList>
 8005a3e:	e001      	b.n	8005a44 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005a40:	2300      	movs	r3, #0
 8005a42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a44:	697b      	ldr	r3, [r7, #20]
	}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3728      	adds	r7, #40	; 0x28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b08c      	sub	sp, #48	; 0x30
 8005a52:	af04      	add	r7, sp, #16
 8005a54:	60f8      	str	r0, [r7, #12]
 8005a56:	60b9      	str	r1, [r7, #8]
 8005a58:	603b      	str	r3, [r7, #0]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a5e:	88fb      	ldrh	r3, [r7, #6]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4618      	mov	r0, r3
 8005a64:	f001 fe20 	bl	80076a8 <pvPortMalloc>
 8005a68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00e      	beq.n	8005a8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a70:	20bc      	movs	r0, #188	; 0xbc
 8005a72:	f001 fe19 	bl	80076a8 <pvPortMalloc>
 8005a76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	631a      	str	r2, [r3, #48]	; 0x30
 8005a84:	e005      	b.n	8005a92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a86:	6978      	ldr	r0, [r7, #20]
 8005a88:	f001 feda 	bl	8007840 <vPortFree>
 8005a8c:	e001      	b.n	8005a92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d017      	beq.n	8005ac8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005aa0:	88fa      	ldrh	r2, [r7, #6]
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	9303      	str	r3, [sp, #12]
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	9302      	str	r3, [sp, #8]
 8005aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aac:	9301      	str	r3, [sp, #4]
 8005aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68b9      	ldr	r1, [r7, #8]
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 f80e 	bl	8005ad8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005abc:	69f8      	ldr	r0, [r7, #28]
 8005abe:	f000 f8b1 	bl	8005c24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	61bb      	str	r3, [r7, #24]
 8005ac6:	e002      	b.n	8005ace <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8005acc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ace:	69bb      	ldr	r3, [r7, #24]
	}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3720      	adds	r7, #32
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b088      	sub	sp, #32
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
 8005ae4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	461a      	mov	r2, r3
 8005af0:	21a5      	movs	r1, #165	; 0xa5
 8005af2:	f002 f811 	bl	8007b18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b00:	3b01      	subs	r3, #1
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	f023 0307 	bic.w	r3, r3, #7
 8005b0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00a      	beq.n	8005b30 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	617b      	str	r3, [r7, #20]
}
 8005b2c:	bf00      	nop
 8005b2e:	e7fe      	b.n	8005b2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d01f      	beq.n	8005b76 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b36:	2300      	movs	r3, #0
 8005b38:	61fb      	str	r3, [r7, #28]
 8005b3a:	e012      	b.n	8005b62 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	4413      	add	r3, r2
 8005b42:	7819      	ldrb	r1, [r3, #0]
 8005b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	3334      	adds	r3, #52	; 0x34
 8005b4c:	460a      	mov	r2, r1
 8005b4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	4413      	add	r3, r2
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d006      	beq.n	8005b6a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	61fb      	str	r3, [r7, #28]
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	2b0f      	cmp	r3, #15
 8005b66:	d9e9      	bls.n	8005b3c <prvInitialiseNewTask+0x64>
 8005b68:	e000      	b.n	8005b6c <prvInitialiseNewTask+0x94>
			{
				break;
 8005b6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b74:	e003      	b.n	8005b7e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b80:	2b37      	cmp	r3, #55	; 0x37
 8005b82:	d901      	bls.n	8005b88 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b84:	2337      	movs	r3, #55	; 0x37
 8005b86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b96:	2200      	movs	r2, #0
 8005b98:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7ff f978 	bl	8004e94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba6:	3318      	adds	r3, #24
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff f973 	bl	8004e94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bc2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	3354      	adds	r3, #84	; 0x54
 8005bd8:	2260      	movs	r2, #96	; 0x60
 8005bda:	2100      	movs	r1, #0
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f001 ff9b 	bl	8007b18 <memset>
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	4a0c      	ldr	r2, [pc, #48]	; (8005c18 <prvInitialiseNewTask+0x140>)
 8005be6:	659a      	str	r2, [r3, #88]	; 0x58
 8005be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bea:	4a0c      	ldr	r2, [pc, #48]	; (8005c1c <prvInitialiseNewTask+0x144>)
 8005bec:	65da      	str	r2, [r3, #92]	; 0x5c
 8005bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf0:	4a0b      	ldr	r2, [pc, #44]	; (8005c20 <prvInitialiseNewTask+0x148>)
 8005bf2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	68f9      	ldr	r1, [r7, #12]
 8005bf8:	69b8      	ldr	r0, [r7, #24]
 8005bfa:	f001 fb03 	bl	8007204 <pxPortInitialiseStack>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c02:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c10:	bf00      	nop
 8005c12:	3720      	adds	r7, #32
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	08007e88 	.word	0x08007e88
 8005c1c:	08007ea8 	.word	0x08007ea8
 8005c20:	08007e68 	.word	0x08007e68

08005c24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c2c:	f001 fc1a 	bl	8007464 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c30:	4b2d      	ldr	r3, [pc, #180]	; (8005ce8 <prvAddNewTaskToReadyList+0xc4>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3301      	adds	r3, #1
 8005c36:	4a2c      	ldr	r2, [pc, #176]	; (8005ce8 <prvAddNewTaskToReadyList+0xc4>)
 8005c38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c3a:	4b2c      	ldr	r3, [pc, #176]	; (8005cec <prvAddNewTaskToReadyList+0xc8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d109      	bne.n	8005c56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c42:	4a2a      	ldr	r2, [pc, #168]	; (8005cec <prvAddNewTaskToReadyList+0xc8>)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c48:	4b27      	ldr	r3, [pc, #156]	; (8005ce8 <prvAddNewTaskToReadyList+0xc4>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d110      	bne.n	8005c72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c50:	f000 fca4 	bl	800659c <prvInitialiseTaskLists>
 8005c54:	e00d      	b.n	8005c72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c56:	4b26      	ldr	r3, [pc, #152]	; (8005cf0 <prvAddNewTaskToReadyList+0xcc>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d109      	bne.n	8005c72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c5e:	4b23      	ldr	r3, [pc, #140]	; (8005cec <prvAddNewTaskToReadyList+0xc8>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d802      	bhi.n	8005c72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c6c:	4a1f      	ldr	r2, [pc, #124]	; (8005cec <prvAddNewTaskToReadyList+0xc8>)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c72:	4b20      	ldr	r3, [pc, #128]	; (8005cf4 <prvAddNewTaskToReadyList+0xd0>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3301      	adds	r3, #1
 8005c78:	4a1e      	ldr	r2, [pc, #120]	; (8005cf4 <prvAddNewTaskToReadyList+0xd0>)
 8005c7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c7c:	4b1d      	ldr	r3, [pc, #116]	; (8005cf4 <prvAddNewTaskToReadyList+0xd0>)
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c88:	4b1b      	ldr	r3, [pc, #108]	; (8005cf8 <prvAddNewTaskToReadyList+0xd4>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d903      	bls.n	8005c98 <prvAddNewTaskToReadyList+0x74>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c94:	4a18      	ldr	r2, [pc, #96]	; (8005cf8 <prvAddNewTaskToReadyList+0xd4>)
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4a15      	ldr	r2, [pc, #84]	; (8005cfc <prvAddNewTaskToReadyList+0xd8>)
 8005ca6:	441a      	add	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3304      	adds	r3, #4
 8005cac:	4619      	mov	r1, r3
 8005cae:	4610      	mov	r0, r2
 8005cb0:	f7ff f8fd 	bl	8004eae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005cb4:	f001 fc06 	bl	80074c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005cb8:	4b0d      	ldr	r3, [pc, #52]	; (8005cf0 <prvAddNewTaskToReadyList+0xcc>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00e      	beq.n	8005cde <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005cc0:	4b0a      	ldr	r3, [pc, #40]	; (8005cec <prvAddNewTaskToReadyList+0xc8>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d207      	bcs.n	8005cde <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005cce:	4b0c      	ldr	r3, [pc, #48]	; (8005d00 <prvAddNewTaskToReadyList+0xdc>)
 8005cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cde:	bf00      	nop
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20000ce0 	.word	0x20000ce0
 8005cec:	2000080c 	.word	0x2000080c
 8005cf0:	20000cec 	.word	0x20000cec
 8005cf4:	20000cfc 	.word	0x20000cfc
 8005cf8:	20000ce8 	.word	0x20000ce8
 8005cfc:	20000810 	.word	0x20000810
 8005d00:	e000ed04 	.word	0xe000ed04

08005d04 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b08a      	sub	sp, #40	; 0x28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10a      	bne.n	8005d2e <vTaskDelayUntil+0x2a>
	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	617b      	str	r3, [r7, #20]
}
 8005d2a:	bf00      	nop
 8005d2c:	e7fe      	b.n	8005d2c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10a      	bne.n	8005d4a <vTaskDelayUntil+0x46>
	__asm volatile
 8005d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	613b      	str	r3, [r7, #16]
}
 8005d46:	bf00      	nop
 8005d48:	e7fe      	b.n	8005d48 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8005d4a:	4b2a      	ldr	r3, [pc, #168]	; (8005df4 <vTaskDelayUntil+0xf0>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <vTaskDelayUntil+0x64>
	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	60fb      	str	r3, [r7, #12]
}
 8005d64:	bf00      	nop
 8005d66:	e7fe      	b.n	8005d66 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8005d68:	f000 f8ee 	bl	8005f48 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005d6c:	4b22      	ldr	r3, [pc, #136]	; (8005df8 <vTaskDelayUntil+0xf4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	4413      	add	r3, r2
 8005d7a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6a3a      	ldr	r2, [r7, #32]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d20b      	bcs.n	8005d9e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d211      	bcs.n	8005db4 <vTaskDelayUntil+0xb0>
 8005d90:	69fa      	ldr	r2, [r7, #28]
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d90d      	bls.n	8005db4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d9c:	e00a      	b.n	8005db4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69fa      	ldr	r2, [r7, #28]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d303      	bcc.n	8005db0 <vTaskDelayUntil+0xac>
 8005da8:	69fa      	ldr	r2, [r7, #28]
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d901      	bls.n	8005db4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005db0:	2301      	movs	r3, #1
 8005db2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	69fa      	ldr	r2, [r7, #28]
 8005db8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d006      	beq.n	8005dce <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005dc0:	69fa      	ldr	r2, [r7, #28]
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 fe79 	bl	8006ac0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005dce:	f000 f8c9 	bl	8005f64 <xTaskResumeAll>
 8005dd2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d107      	bne.n	8005dea <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8005dda:	4b08      	ldr	r3, [pc, #32]	; (8005dfc <vTaskDelayUntil+0xf8>)
 8005ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005dea:	bf00      	nop
 8005dec:	3728      	adds	r7, #40	; 0x28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	20000d08 	.word	0x20000d08
 8005df8:	20000ce4 	.word	0x20000ce4
 8005dfc:	e000ed04 	.word	0xe000ed04

08005e00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d017      	beq.n	8005e42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e12:	4b13      	ldr	r3, [pc, #76]	; (8005e60 <vTaskDelay+0x60>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <vTaskDelay+0x30>
	__asm volatile
 8005e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1e:	f383 8811 	msr	BASEPRI, r3
 8005e22:	f3bf 8f6f 	isb	sy
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	60bb      	str	r3, [r7, #8]
}
 8005e2c:	bf00      	nop
 8005e2e:	e7fe      	b.n	8005e2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e30:	f000 f88a 	bl	8005f48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e34:	2100      	movs	r1, #0
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fe42 	bl	8006ac0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e3c:	f000 f892 	bl	8005f64 <xTaskResumeAll>
 8005e40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d107      	bne.n	8005e58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005e48:	4b06      	ldr	r3, [pc, #24]	; (8005e64 <vTaskDelay+0x64>)
 8005e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e58:	bf00      	nop
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20000d08 	.word	0x20000d08
 8005e64:	e000ed04 	.word	0xe000ed04

08005e68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08a      	sub	sp, #40	; 0x28
 8005e6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e72:	2300      	movs	r3, #0
 8005e74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e76:	463a      	mov	r2, r7
 8005e78:	1d39      	adds	r1, r7, #4
 8005e7a:	f107 0308 	add.w	r3, r7, #8
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fe ffb4 	bl	8004dec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e84:	6839      	ldr	r1, [r7, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	9202      	str	r2, [sp, #8]
 8005e8c:	9301      	str	r3, [sp, #4]
 8005e8e:	2300      	movs	r3, #0
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	2300      	movs	r3, #0
 8005e94:	460a      	mov	r2, r1
 8005e96:	4924      	ldr	r1, [pc, #144]	; (8005f28 <vTaskStartScheduler+0xc0>)
 8005e98:	4824      	ldr	r0, [pc, #144]	; (8005f2c <vTaskStartScheduler+0xc4>)
 8005e9a:	f7ff fd7b 	bl	8005994 <xTaskCreateStatic>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	4a23      	ldr	r2, [pc, #140]	; (8005f30 <vTaskStartScheduler+0xc8>)
 8005ea2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ea4:	4b22      	ldr	r3, [pc, #136]	; (8005f30 <vTaskStartScheduler+0xc8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005eac:	2301      	movs	r3, #1
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	e001      	b.n	8005eb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d102      	bne.n	8005ec2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ebc:	f000 fe54 	bl	8006b68 <xTimerCreateTimerTask>
 8005ec0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d11b      	bne.n	8005f00 <vTaskStartScheduler+0x98>
	__asm volatile
 8005ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ecc:	f383 8811 	msr	BASEPRI, r3
 8005ed0:	f3bf 8f6f 	isb	sy
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	613b      	str	r3, [r7, #16]
}
 8005eda:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005edc:	4b15      	ldr	r3, [pc, #84]	; (8005f34 <vTaskStartScheduler+0xcc>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3354      	adds	r3, #84	; 0x54
 8005ee2:	4a15      	ldr	r2, [pc, #84]	; (8005f38 <vTaskStartScheduler+0xd0>)
 8005ee4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ee6:	4b15      	ldr	r3, [pc, #84]	; (8005f3c <vTaskStartScheduler+0xd4>)
 8005ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8005eec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005eee:	4b14      	ldr	r3, [pc, #80]	; (8005f40 <vTaskStartScheduler+0xd8>)
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ef4:	4b13      	ldr	r3, [pc, #76]	; (8005f44 <vTaskStartScheduler+0xdc>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005efa:	f001 fa11 	bl	8007320 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005efe:	e00e      	b.n	8005f1e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f06:	d10a      	bne.n	8005f1e <vTaskStartScheduler+0xb6>
	__asm volatile
 8005f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	60fb      	str	r3, [r7, #12]
}
 8005f1a:	bf00      	nop
 8005f1c:	e7fe      	b.n	8005f1c <vTaskStartScheduler+0xb4>
}
 8005f1e:	bf00      	nop
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	08007d94 	.word	0x08007d94
 8005f2c:	0800656d 	.word	0x0800656d
 8005f30:	20000d04 	.word	0x20000d04
 8005f34:	2000080c 	.word	0x2000080c
 8005f38:	20000010 	.word	0x20000010
 8005f3c:	20000d00 	.word	0x20000d00
 8005f40:	20000cec 	.word	0x20000cec
 8005f44:	20000ce4 	.word	0x20000ce4

08005f48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f48:	b480      	push	{r7}
 8005f4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f4c:	4b04      	ldr	r3, [pc, #16]	; (8005f60 <vTaskSuspendAll+0x18>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3301      	adds	r3, #1
 8005f52:	4a03      	ldr	r2, [pc, #12]	; (8005f60 <vTaskSuspendAll+0x18>)
 8005f54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f56:	bf00      	nop
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	20000d08 	.word	0x20000d08

08005f64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f72:	4b42      	ldr	r3, [pc, #264]	; (800607c <xTaskResumeAll+0x118>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10a      	bne.n	8005f90 <xTaskResumeAll+0x2c>
	__asm volatile
 8005f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7e:	f383 8811 	msr	BASEPRI, r3
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	603b      	str	r3, [r7, #0]
}
 8005f8c:	bf00      	nop
 8005f8e:	e7fe      	b.n	8005f8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f90:	f001 fa68 	bl	8007464 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f94:	4b39      	ldr	r3, [pc, #228]	; (800607c <xTaskResumeAll+0x118>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	4a38      	ldr	r2, [pc, #224]	; (800607c <xTaskResumeAll+0x118>)
 8005f9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f9e:	4b37      	ldr	r3, [pc, #220]	; (800607c <xTaskResumeAll+0x118>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d162      	bne.n	800606c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fa6:	4b36      	ldr	r3, [pc, #216]	; (8006080 <xTaskResumeAll+0x11c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d05e      	beq.n	800606c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fae:	e02f      	b.n	8006010 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fb0:	4b34      	ldr	r3, [pc, #208]	; (8006084 <xTaskResumeAll+0x120>)
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3318      	adds	r3, #24
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7fe ffd3 	bl	8004f68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fe ffce 	bl	8004f68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd0:	4b2d      	ldr	r3, [pc, #180]	; (8006088 <xTaskResumeAll+0x124>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d903      	bls.n	8005fe0 <xTaskResumeAll+0x7c>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fdc:	4a2a      	ldr	r2, [pc, #168]	; (8006088 <xTaskResumeAll+0x124>)
 8005fde:	6013      	str	r3, [r2, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4a27      	ldr	r2, [pc, #156]	; (800608c <xTaskResumeAll+0x128>)
 8005fee:	441a      	add	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	4610      	mov	r0, r2
 8005ff8:	f7fe ff59 	bl	8004eae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006000:	4b23      	ldr	r3, [pc, #140]	; (8006090 <xTaskResumeAll+0x12c>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006006:	429a      	cmp	r2, r3
 8006008:	d302      	bcc.n	8006010 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800600a:	4b22      	ldr	r3, [pc, #136]	; (8006094 <xTaskResumeAll+0x130>)
 800600c:	2201      	movs	r2, #1
 800600e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006010:	4b1c      	ldr	r3, [pc, #112]	; (8006084 <xTaskResumeAll+0x120>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1cb      	bne.n	8005fb0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800601e:	f000 fb5f 	bl	80066e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006022:	4b1d      	ldr	r3, [pc, #116]	; (8006098 <xTaskResumeAll+0x134>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d010      	beq.n	8006050 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800602e:	f000 f847 	bl	80060c0 <xTaskIncrementTick>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d002      	beq.n	800603e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006038:	4b16      	ldr	r3, [pc, #88]	; (8006094 <xTaskResumeAll+0x130>)
 800603a:	2201      	movs	r2, #1
 800603c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	3b01      	subs	r3, #1
 8006042:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1f1      	bne.n	800602e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800604a:	4b13      	ldr	r3, [pc, #76]	; (8006098 <xTaskResumeAll+0x134>)
 800604c:	2200      	movs	r2, #0
 800604e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006050:	4b10      	ldr	r3, [pc, #64]	; (8006094 <xTaskResumeAll+0x130>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d009      	beq.n	800606c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006058:	2301      	movs	r3, #1
 800605a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800605c:	4b0f      	ldr	r3, [pc, #60]	; (800609c <xTaskResumeAll+0x138>)
 800605e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800606c:	f001 fa2a 	bl	80074c4 <vPortExitCritical>

	return xAlreadyYielded;
 8006070:	68bb      	ldr	r3, [r7, #8]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	20000d08 	.word	0x20000d08
 8006080:	20000ce0 	.word	0x20000ce0
 8006084:	20000ca0 	.word	0x20000ca0
 8006088:	20000ce8 	.word	0x20000ce8
 800608c:	20000810 	.word	0x20000810
 8006090:	2000080c 	.word	0x2000080c
 8006094:	20000cf4 	.word	0x20000cf4
 8006098:	20000cf0 	.word	0x20000cf0
 800609c:	e000ed04 	.word	0xe000ed04

080060a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80060a6:	4b05      	ldr	r3, [pc, #20]	; (80060bc <xTaskGetTickCount+0x1c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80060ac:	687b      	ldr	r3, [r7, #4]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	20000ce4 	.word	0x20000ce4

080060c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060c6:	2300      	movs	r3, #0
 80060c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060ca:	4b4f      	ldr	r3, [pc, #316]	; (8006208 <xTaskIncrementTick+0x148>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f040 808f 	bne.w	80061f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060d4:	4b4d      	ldr	r3, [pc, #308]	; (800620c <xTaskIncrementTick+0x14c>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	3301      	adds	r3, #1
 80060da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060dc:	4a4b      	ldr	r2, [pc, #300]	; (800620c <xTaskIncrementTick+0x14c>)
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d120      	bne.n	800612a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80060e8:	4b49      	ldr	r3, [pc, #292]	; (8006210 <xTaskIncrementTick+0x150>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <xTaskIncrementTick+0x48>
	__asm volatile
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	603b      	str	r3, [r7, #0]
}
 8006104:	bf00      	nop
 8006106:	e7fe      	b.n	8006106 <xTaskIncrementTick+0x46>
 8006108:	4b41      	ldr	r3, [pc, #260]	; (8006210 <xTaskIncrementTick+0x150>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	60fb      	str	r3, [r7, #12]
 800610e:	4b41      	ldr	r3, [pc, #260]	; (8006214 <xTaskIncrementTick+0x154>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a3f      	ldr	r2, [pc, #252]	; (8006210 <xTaskIncrementTick+0x150>)
 8006114:	6013      	str	r3, [r2, #0]
 8006116:	4a3f      	ldr	r2, [pc, #252]	; (8006214 <xTaskIncrementTick+0x154>)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6013      	str	r3, [r2, #0]
 800611c:	4b3e      	ldr	r3, [pc, #248]	; (8006218 <xTaskIncrementTick+0x158>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3301      	adds	r3, #1
 8006122:	4a3d      	ldr	r2, [pc, #244]	; (8006218 <xTaskIncrementTick+0x158>)
 8006124:	6013      	str	r3, [r2, #0]
 8006126:	f000 fadb 	bl	80066e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800612a:	4b3c      	ldr	r3, [pc, #240]	; (800621c <xTaskIncrementTick+0x15c>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	429a      	cmp	r2, r3
 8006132:	d349      	bcc.n	80061c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006134:	4b36      	ldr	r3, [pc, #216]	; (8006210 <xTaskIncrementTick+0x150>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d104      	bne.n	8006148 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800613e:	4b37      	ldr	r3, [pc, #220]	; (800621c <xTaskIncrementTick+0x15c>)
 8006140:	f04f 32ff 	mov.w	r2, #4294967295
 8006144:	601a      	str	r2, [r3, #0]
					break;
 8006146:	e03f      	b.n	80061c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006148:	4b31      	ldr	r3, [pc, #196]	; (8006210 <xTaskIncrementTick+0x150>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	429a      	cmp	r2, r3
 800615e:	d203      	bcs.n	8006168 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006160:	4a2e      	ldr	r2, [pc, #184]	; (800621c <xTaskIncrementTick+0x15c>)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006166:	e02f      	b.n	80061c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	3304      	adds	r3, #4
 800616c:	4618      	mov	r0, r3
 800616e:	f7fe fefb 	bl	8004f68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006176:	2b00      	cmp	r3, #0
 8006178:	d004      	beq.n	8006184 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	3318      	adds	r3, #24
 800617e:	4618      	mov	r0, r3
 8006180:	f7fe fef2 	bl	8004f68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006188:	4b25      	ldr	r3, [pc, #148]	; (8006220 <xTaskIncrementTick+0x160>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	429a      	cmp	r2, r3
 800618e:	d903      	bls.n	8006198 <xTaskIncrementTick+0xd8>
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006194:	4a22      	ldr	r2, [pc, #136]	; (8006220 <xTaskIncrementTick+0x160>)
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800619c:	4613      	mov	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4a1f      	ldr	r2, [pc, #124]	; (8006224 <xTaskIncrementTick+0x164>)
 80061a6:	441a      	add	r2, r3
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	3304      	adds	r3, #4
 80061ac:	4619      	mov	r1, r3
 80061ae:	4610      	mov	r0, r2
 80061b0:	f7fe fe7d 	bl	8004eae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b8:	4b1b      	ldr	r3, [pc, #108]	; (8006228 <xTaskIncrementTick+0x168>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061be:	429a      	cmp	r2, r3
 80061c0:	d3b8      	bcc.n	8006134 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80061c2:	2301      	movs	r3, #1
 80061c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061c6:	e7b5      	b.n	8006134 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061c8:	4b17      	ldr	r3, [pc, #92]	; (8006228 <xTaskIncrementTick+0x168>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ce:	4915      	ldr	r1, [pc, #84]	; (8006224 <xTaskIncrementTick+0x164>)
 80061d0:	4613      	mov	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	440b      	add	r3, r1
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d901      	bls.n	80061e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80061e0:	2301      	movs	r3, #1
 80061e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80061e4:	4b11      	ldr	r3, [pc, #68]	; (800622c <xTaskIncrementTick+0x16c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d007      	beq.n	80061fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80061ec:	2301      	movs	r3, #1
 80061ee:	617b      	str	r3, [r7, #20]
 80061f0:	e004      	b.n	80061fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80061f2:	4b0f      	ldr	r3, [pc, #60]	; (8006230 <xTaskIncrementTick+0x170>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3301      	adds	r3, #1
 80061f8:	4a0d      	ldr	r2, [pc, #52]	; (8006230 <xTaskIncrementTick+0x170>)
 80061fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80061fc:	697b      	ldr	r3, [r7, #20]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20000d08 	.word	0x20000d08
 800620c:	20000ce4 	.word	0x20000ce4
 8006210:	20000c98 	.word	0x20000c98
 8006214:	20000c9c 	.word	0x20000c9c
 8006218:	20000cf8 	.word	0x20000cf8
 800621c:	20000d00 	.word	0x20000d00
 8006220:	20000ce8 	.word	0x20000ce8
 8006224:	20000810 	.word	0x20000810
 8006228:	2000080c 	.word	0x2000080c
 800622c:	20000cf4 	.word	0x20000cf4
 8006230:	20000cf0 	.word	0x20000cf0

08006234 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800623a:	4b2a      	ldr	r3, [pc, #168]	; (80062e4 <vTaskSwitchContext+0xb0>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d003      	beq.n	800624a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006242:	4b29      	ldr	r3, [pc, #164]	; (80062e8 <vTaskSwitchContext+0xb4>)
 8006244:	2201      	movs	r2, #1
 8006246:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006248:	e046      	b.n	80062d8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800624a:	4b27      	ldr	r3, [pc, #156]	; (80062e8 <vTaskSwitchContext+0xb4>)
 800624c:	2200      	movs	r2, #0
 800624e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006250:	4b26      	ldr	r3, [pc, #152]	; (80062ec <vTaskSwitchContext+0xb8>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	e010      	b.n	800627a <vTaskSwitchContext+0x46>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10a      	bne.n	8006274 <vTaskSwitchContext+0x40>
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	607b      	str	r3, [r7, #4]
}
 8006270:	bf00      	nop
 8006272:	e7fe      	b.n	8006272 <vTaskSwitchContext+0x3e>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3b01      	subs	r3, #1
 8006278:	60fb      	str	r3, [r7, #12]
 800627a:	491d      	ldr	r1, [pc, #116]	; (80062f0 <vTaskSwitchContext+0xbc>)
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	440b      	add	r3, r1
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0e4      	beq.n	8006258 <vTaskSwitchContext+0x24>
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4613      	mov	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4a15      	ldr	r2, [pc, #84]	; (80062f0 <vTaskSwitchContext+0xbc>)
 800629a:	4413      	add	r3, r2
 800629c:	60bb      	str	r3, [r7, #8]
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	605a      	str	r2, [r3, #4]
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	3308      	adds	r3, #8
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d104      	bne.n	80062be <vTaskSwitchContext+0x8a>
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	605a      	str	r2, [r3, #4]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	4a0b      	ldr	r2, [pc, #44]	; (80062f4 <vTaskSwitchContext+0xc0>)
 80062c6:	6013      	str	r3, [r2, #0]
 80062c8:	4a08      	ldr	r2, [pc, #32]	; (80062ec <vTaskSwitchContext+0xb8>)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80062ce:	4b09      	ldr	r3, [pc, #36]	; (80062f4 <vTaskSwitchContext+0xc0>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3354      	adds	r3, #84	; 0x54
 80062d4:	4a08      	ldr	r2, [pc, #32]	; (80062f8 <vTaskSwitchContext+0xc4>)
 80062d6:	6013      	str	r3, [r2, #0]
}
 80062d8:	bf00      	nop
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	20000d08 	.word	0x20000d08
 80062e8:	20000cf4 	.word	0x20000cf4
 80062ec:	20000ce8 	.word	0x20000ce8
 80062f0:	20000810 	.word	0x20000810
 80062f4:	2000080c 	.word	0x2000080c
 80062f8:	20000010 	.word	0x20000010

080062fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10a      	bne.n	8006322 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	60fb      	str	r3, [r7, #12]
}
 800631e:	bf00      	nop
 8006320:	e7fe      	b.n	8006320 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006322:	4b07      	ldr	r3, [pc, #28]	; (8006340 <vTaskPlaceOnEventList+0x44>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3318      	adds	r3, #24
 8006328:	4619      	mov	r1, r3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7fe fde3 	bl	8004ef6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006330:	2101      	movs	r1, #1
 8006332:	6838      	ldr	r0, [r7, #0]
 8006334:	f000 fbc4 	bl	8006ac0 <prvAddCurrentTaskToDelayedList>
}
 8006338:	bf00      	nop
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	2000080c 	.word	0x2000080c

08006344 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10a      	bne.n	800636c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	617b      	str	r3, [r7, #20]
}
 8006368:	bf00      	nop
 800636a:	e7fe      	b.n	800636a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800636c:	4b0a      	ldr	r3, [pc, #40]	; (8006398 <vTaskPlaceOnEventListRestricted+0x54>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3318      	adds	r3, #24
 8006372:	4619      	mov	r1, r3
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f7fe fd9a 	bl	8004eae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006380:	f04f 33ff 	mov.w	r3, #4294967295
 8006384:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006386:	6879      	ldr	r1, [r7, #4]
 8006388:	68b8      	ldr	r0, [r7, #8]
 800638a:	f000 fb99 	bl	8006ac0 <prvAddCurrentTaskToDelayedList>
	}
 800638e:	bf00      	nop
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	2000080c 	.word	0x2000080c

0800639c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10a      	bne.n	80063c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80063b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	60fb      	str	r3, [r7, #12]
}
 80063c4:	bf00      	nop
 80063c6:	e7fe      	b.n	80063c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	3318      	adds	r3, #24
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7fe fdcb 	bl	8004f68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063d2:	4b1e      	ldr	r3, [pc, #120]	; (800644c <xTaskRemoveFromEventList+0xb0>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d11d      	bne.n	8006416 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	3304      	adds	r3, #4
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fe fdc2 	bl	8004f68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e8:	4b19      	ldr	r3, [pc, #100]	; (8006450 <xTaskRemoveFromEventList+0xb4>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d903      	bls.n	80063f8 <xTaskRemoveFromEventList+0x5c>
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	4a16      	ldr	r2, [pc, #88]	; (8006450 <xTaskRemoveFromEventList+0xb4>)
 80063f6:	6013      	str	r3, [r2, #0]
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fc:	4613      	mov	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4a13      	ldr	r2, [pc, #76]	; (8006454 <xTaskRemoveFromEventList+0xb8>)
 8006406:	441a      	add	r2, r3
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	3304      	adds	r3, #4
 800640c:	4619      	mov	r1, r3
 800640e:	4610      	mov	r0, r2
 8006410:	f7fe fd4d 	bl	8004eae <vListInsertEnd>
 8006414:	e005      	b.n	8006422 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	3318      	adds	r3, #24
 800641a:	4619      	mov	r1, r3
 800641c:	480e      	ldr	r0, [pc, #56]	; (8006458 <xTaskRemoveFromEventList+0xbc>)
 800641e:	f7fe fd46 	bl	8004eae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006426:	4b0d      	ldr	r3, [pc, #52]	; (800645c <xTaskRemoveFromEventList+0xc0>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	429a      	cmp	r2, r3
 800642e:	d905      	bls.n	800643c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006430:	2301      	movs	r3, #1
 8006432:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006434:	4b0a      	ldr	r3, [pc, #40]	; (8006460 <xTaskRemoveFromEventList+0xc4>)
 8006436:	2201      	movs	r2, #1
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	e001      	b.n	8006440 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800643c:	2300      	movs	r3, #0
 800643e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006440:	697b      	ldr	r3, [r7, #20]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20000d08 	.word	0x20000d08
 8006450:	20000ce8 	.word	0x20000ce8
 8006454:	20000810 	.word	0x20000810
 8006458:	20000ca0 	.word	0x20000ca0
 800645c:	2000080c 	.word	0x2000080c
 8006460:	20000cf4 	.word	0x20000cf4

08006464 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800646c:	4b06      	ldr	r3, [pc, #24]	; (8006488 <vTaskInternalSetTimeOutState+0x24>)
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006474:	4b05      	ldr	r3, [pc, #20]	; (800648c <vTaskInternalSetTimeOutState+0x28>)
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	605a      	str	r2, [r3, #4]
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	20000cf8 	.word	0x20000cf8
 800648c:	20000ce4 	.word	0x20000ce4

08006490 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b088      	sub	sp, #32
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10a      	bne.n	80064b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	613b      	str	r3, [r7, #16]
}
 80064b2:	bf00      	nop
 80064b4:	e7fe      	b.n	80064b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10a      	bne.n	80064d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	60fb      	str	r3, [r7, #12]
}
 80064ce:	bf00      	nop
 80064d0:	e7fe      	b.n	80064d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80064d2:	f000 ffc7 	bl	8007464 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80064d6:	4b1d      	ldr	r3, [pc, #116]	; (800654c <xTaskCheckForTimeOut+0xbc>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ee:	d102      	bne.n	80064f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80064f0:	2300      	movs	r3, #0
 80064f2:	61fb      	str	r3, [r7, #28]
 80064f4:	e023      	b.n	800653e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	4b15      	ldr	r3, [pc, #84]	; (8006550 <xTaskCheckForTimeOut+0xc0>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d007      	beq.n	8006512 <xTaskCheckForTimeOut+0x82>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	429a      	cmp	r2, r3
 800650a:	d302      	bcc.n	8006512 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800650c:	2301      	movs	r3, #1
 800650e:	61fb      	str	r3, [r7, #28]
 8006510:	e015      	b.n	800653e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	429a      	cmp	r2, r3
 800651a:	d20b      	bcs.n	8006534 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	1ad2      	subs	r2, r2, r3
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7ff ff9b 	bl	8006464 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800652e:	2300      	movs	r3, #0
 8006530:	61fb      	str	r3, [r7, #28]
 8006532:	e004      	b.n	800653e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	2200      	movs	r2, #0
 8006538:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800653a:	2301      	movs	r3, #1
 800653c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800653e:	f000 ffc1 	bl	80074c4 <vPortExitCritical>

	return xReturn;
 8006542:	69fb      	ldr	r3, [r7, #28]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3720      	adds	r7, #32
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	20000ce4 	.word	0x20000ce4
 8006550:	20000cf8 	.word	0x20000cf8

08006554 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006554:	b480      	push	{r7}
 8006556:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006558:	4b03      	ldr	r3, [pc, #12]	; (8006568 <vTaskMissedYield+0x14>)
 800655a:	2201      	movs	r2, #1
 800655c:	601a      	str	r2, [r3, #0]
}
 800655e:	bf00      	nop
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	20000cf4 	.word	0x20000cf4

0800656c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006574:	f000 f852 	bl	800661c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006578:	4b06      	ldr	r3, [pc, #24]	; (8006594 <prvIdleTask+0x28>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d9f9      	bls.n	8006574 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006580:	4b05      	ldr	r3, [pc, #20]	; (8006598 <prvIdleTask+0x2c>)
 8006582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006590:	e7f0      	b.n	8006574 <prvIdleTask+0x8>
 8006592:	bf00      	nop
 8006594:	20000810 	.word	0x20000810
 8006598:	e000ed04 	.word	0xe000ed04

0800659c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065a2:	2300      	movs	r3, #0
 80065a4:	607b      	str	r3, [r7, #4]
 80065a6:	e00c      	b.n	80065c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	4613      	mov	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4a12      	ldr	r2, [pc, #72]	; (80065fc <prvInitialiseTaskLists+0x60>)
 80065b4:	4413      	add	r3, r2
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fe fc4c 	bl	8004e54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3301      	adds	r3, #1
 80065c0:	607b      	str	r3, [r7, #4]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b37      	cmp	r3, #55	; 0x37
 80065c6:	d9ef      	bls.n	80065a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065c8:	480d      	ldr	r0, [pc, #52]	; (8006600 <prvInitialiseTaskLists+0x64>)
 80065ca:	f7fe fc43 	bl	8004e54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065ce:	480d      	ldr	r0, [pc, #52]	; (8006604 <prvInitialiseTaskLists+0x68>)
 80065d0:	f7fe fc40 	bl	8004e54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065d4:	480c      	ldr	r0, [pc, #48]	; (8006608 <prvInitialiseTaskLists+0x6c>)
 80065d6:	f7fe fc3d 	bl	8004e54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065da:	480c      	ldr	r0, [pc, #48]	; (800660c <prvInitialiseTaskLists+0x70>)
 80065dc:	f7fe fc3a 	bl	8004e54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065e0:	480b      	ldr	r0, [pc, #44]	; (8006610 <prvInitialiseTaskLists+0x74>)
 80065e2:	f7fe fc37 	bl	8004e54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80065e6:	4b0b      	ldr	r3, [pc, #44]	; (8006614 <prvInitialiseTaskLists+0x78>)
 80065e8:	4a05      	ldr	r2, [pc, #20]	; (8006600 <prvInitialiseTaskLists+0x64>)
 80065ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065ec:	4b0a      	ldr	r3, [pc, #40]	; (8006618 <prvInitialiseTaskLists+0x7c>)
 80065ee:	4a05      	ldr	r2, [pc, #20]	; (8006604 <prvInitialiseTaskLists+0x68>)
 80065f0:	601a      	str	r2, [r3, #0]
}
 80065f2:	bf00      	nop
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20000810 	.word	0x20000810
 8006600:	20000c70 	.word	0x20000c70
 8006604:	20000c84 	.word	0x20000c84
 8006608:	20000ca0 	.word	0x20000ca0
 800660c:	20000cb4 	.word	0x20000cb4
 8006610:	20000ccc 	.word	0x20000ccc
 8006614:	20000c98 	.word	0x20000c98
 8006618:	20000c9c 	.word	0x20000c9c

0800661c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006622:	e019      	b.n	8006658 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006624:	f000 ff1e 	bl	8007464 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006628:	4b10      	ldr	r3, [pc, #64]	; (800666c <prvCheckTasksWaitingTermination+0x50>)
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	3304      	adds	r3, #4
 8006634:	4618      	mov	r0, r3
 8006636:	f7fe fc97 	bl	8004f68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800663a:	4b0d      	ldr	r3, [pc, #52]	; (8006670 <prvCheckTasksWaitingTermination+0x54>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	3b01      	subs	r3, #1
 8006640:	4a0b      	ldr	r2, [pc, #44]	; (8006670 <prvCheckTasksWaitingTermination+0x54>)
 8006642:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006644:	4b0b      	ldr	r3, [pc, #44]	; (8006674 <prvCheckTasksWaitingTermination+0x58>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3b01      	subs	r3, #1
 800664a:	4a0a      	ldr	r2, [pc, #40]	; (8006674 <prvCheckTasksWaitingTermination+0x58>)
 800664c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800664e:	f000 ff39 	bl	80074c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f810 	bl	8006678 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006658:	4b06      	ldr	r3, [pc, #24]	; (8006674 <prvCheckTasksWaitingTermination+0x58>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e1      	bne.n	8006624 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006660:	bf00      	nop
 8006662:	bf00      	nop
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	20000cb4 	.word	0x20000cb4
 8006670:	20000ce0 	.word	0x20000ce0
 8006674:	20000cc8 	.word	0x20000cc8

08006678 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	3354      	adds	r3, #84	; 0x54
 8006684:	4618      	mov	r0, r3
 8006686:	f001 fa5d 	bl	8007b44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006690:	2b00      	cmp	r3, #0
 8006692:	d108      	bne.n	80066a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006698:	4618      	mov	r0, r3
 800669a:	f001 f8d1 	bl	8007840 <vPortFree>
				vPortFree( pxTCB );
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f001 f8ce 	bl	8007840 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066a4:	e018      	b.n	80066d8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d103      	bne.n	80066b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f001 f8c5 	bl	8007840 <vPortFree>
	}
 80066b6:	e00f      	b.n	80066d8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d00a      	beq.n	80066d8 <prvDeleteTCB+0x60>
	__asm volatile
 80066c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	60fb      	str	r3, [r7, #12]
}
 80066d4:	bf00      	nop
 80066d6:	e7fe      	b.n	80066d6 <prvDeleteTCB+0x5e>
	}
 80066d8:	bf00      	nop
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066e6:	4b0c      	ldr	r3, [pc, #48]	; (8006718 <prvResetNextTaskUnblockTime+0x38>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d104      	bne.n	80066fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066f0:	4b0a      	ldr	r3, [pc, #40]	; (800671c <prvResetNextTaskUnblockTime+0x3c>)
 80066f2:	f04f 32ff 	mov.w	r2, #4294967295
 80066f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066f8:	e008      	b.n	800670c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066fa:	4b07      	ldr	r3, [pc, #28]	; (8006718 <prvResetNextTaskUnblockTime+0x38>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	4a04      	ldr	r2, [pc, #16]	; (800671c <prvResetNextTaskUnblockTime+0x3c>)
 800670a:	6013      	str	r3, [r2, #0]
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	20000c98 	.word	0x20000c98
 800671c:	20000d00 	.word	0x20000d00

08006720 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006726:	4b0b      	ldr	r3, [pc, #44]	; (8006754 <xTaskGetSchedulerState+0x34>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d102      	bne.n	8006734 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800672e:	2301      	movs	r3, #1
 8006730:	607b      	str	r3, [r7, #4]
 8006732:	e008      	b.n	8006746 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006734:	4b08      	ldr	r3, [pc, #32]	; (8006758 <xTaskGetSchedulerState+0x38>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d102      	bne.n	8006742 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800673c:	2302      	movs	r3, #2
 800673e:	607b      	str	r3, [r7, #4]
 8006740:	e001      	b.n	8006746 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006742:	2300      	movs	r3, #0
 8006744:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006746:	687b      	ldr	r3, [r7, #4]
	}
 8006748:	4618      	mov	r0, r3
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr
 8006754:	20000cec 	.word	0x20000cec
 8006758:	20000d08 	.word	0x20000d08

0800675c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006768:	2300      	movs	r3, #0
 800676a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d056      	beq.n	8006820 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006772:	4b2e      	ldr	r3, [pc, #184]	; (800682c <xTaskPriorityDisinherit+0xd0>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	429a      	cmp	r2, r3
 800677a:	d00a      	beq.n	8006792 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800677c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006780:	f383 8811 	msr	BASEPRI, r3
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	60fb      	str	r3, [r7, #12]
}
 800678e:	bf00      	nop
 8006790:	e7fe      	b.n	8006790 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10a      	bne.n	80067b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800679a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	60bb      	str	r3, [r7, #8]
}
 80067ac:	bf00      	nop
 80067ae:	e7fe      	b.n	80067ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067b4:	1e5a      	subs	r2, r3, #1
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d02c      	beq.n	8006820 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d128      	bne.n	8006820 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	3304      	adds	r3, #4
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fe fbc8 	bl	8004f68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f0:	4b0f      	ldr	r3, [pc, #60]	; (8006830 <xTaskPriorityDisinherit+0xd4>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d903      	bls.n	8006800 <xTaskPriorityDisinherit+0xa4>
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fc:	4a0c      	ldr	r2, [pc, #48]	; (8006830 <xTaskPriorityDisinherit+0xd4>)
 80067fe:	6013      	str	r3, [r2, #0]
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006804:	4613      	mov	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4a09      	ldr	r2, [pc, #36]	; (8006834 <xTaskPriorityDisinherit+0xd8>)
 800680e:	441a      	add	r2, r3
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	3304      	adds	r3, #4
 8006814:	4619      	mov	r1, r3
 8006816:	4610      	mov	r0, r2
 8006818:	f7fe fb49 	bl	8004eae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800681c:	2301      	movs	r3, #1
 800681e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006820:	697b      	ldr	r3, [r7, #20]
	}
 8006822:	4618      	mov	r0, r3
 8006824:	3718      	adds	r7, #24
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	2000080c 	.word	0x2000080c
 8006830:	20000ce8 	.word	0x20000ce8
 8006834:	20000810 	.word	0x20000810

08006838 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
 8006844:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006846:	f000 fe0d 	bl	8007464 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800684a:	4b29      	ldr	r3, [pc, #164]	; (80068f0 <xTaskNotifyWait+0xb8>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b02      	cmp	r3, #2
 8006856:	d01c      	beq.n	8006892 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006858:	4b25      	ldr	r3, [pc, #148]	; (80068f0 <xTaskNotifyWait+0xb8>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	43d2      	mvns	r2, r2
 8006864:	400a      	ands	r2, r1
 8006866:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800686a:	4b21      	ldr	r3, [pc, #132]	; (80068f0 <xTaskNotifyWait+0xb8>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00b      	beq.n	8006892 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800687a:	2101      	movs	r1, #1
 800687c:	6838      	ldr	r0, [r7, #0]
 800687e:	f000 f91f 	bl	8006ac0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006882:	4b1c      	ldr	r3, [pc, #112]	; (80068f4 <xTaskNotifyWait+0xbc>)
 8006884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006888:	601a      	str	r2, [r3, #0]
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006892:	f000 fe17 	bl	80074c4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8006896:	f000 fde5 	bl	8007464 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d005      	beq.n	80068ac <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80068a0:	4b13      	ldr	r3, [pc, #76]	; (80068f0 <xTaskNotifyWait+0xb8>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80068ac:	4b10      	ldr	r3, [pc, #64]	; (80068f0 <xTaskNotifyWait+0xb8>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d002      	beq.n	80068c0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80068ba:	2300      	movs	r3, #0
 80068bc:	617b      	str	r3, [r7, #20]
 80068be:	e00a      	b.n	80068d6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80068c0:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <xTaskNotifyWait+0xb8>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	43d2      	mvns	r2, r2
 80068cc:	400a      	ands	r2, r1
 80068ce:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 80068d2:	2301      	movs	r3, #1
 80068d4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068d6:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <xTaskNotifyWait+0xb8>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 80068e0:	f000 fdf0 	bl	80074c4 <vPortExitCritical>

		return xReturn;
 80068e4:	697b      	ldr	r3, [r7, #20]
	}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3718      	adds	r7, #24
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	2000080c 	.word	0x2000080c
 80068f4:	e000ed04 	.word	0xe000ed04

080068f8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08e      	sub	sp, #56	; 0x38
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	603b      	str	r3, [r7, #0]
 8006904:	4613      	mov	r3, r2
 8006906:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006908:	2301      	movs	r3, #1
 800690a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10a      	bne.n	8006928 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006924:	bf00      	nop
 8006926:	e7fe      	b.n	8006926 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006928:	f000 fe7e 	bl	8007628 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8006930:	f3ef 8211 	mrs	r2, BASEPRI
 8006934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	623a      	str	r2, [r7, #32]
 8006946:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8006948:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800694a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d004      	beq.n	800695c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006954:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800695c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8006962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	2202      	movs	r2, #2
 800696a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800696e:	79fb      	ldrb	r3, [r7, #7]
 8006970:	2b04      	cmp	r3, #4
 8006972:	d82f      	bhi.n	80069d4 <xTaskGenericNotifyFromISR+0xdc>
 8006974:	a201      	add	r2, pc, #4	; (adr r2, 800697c <xTaskGenericNotifyFromISR+0x84>)
 8006976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697a:	bf00      	nop
 800697c:	080069f7 	.word	0x080069f7
 8006980:	08006991 	.word	0x08006991
 8006984:	080069a3 	.word	0x080069a3
 8006988:	080069b3 	.word	0x080069b3
 800698c:	080069bd 	.word	0x080069bd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006992:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	431a      	orrs	r2, r3
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80069a0:	e02c      	b.n	80069fc <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80069a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80069a8:	1c5a      	adds	r2, r3, #1
 80069aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80069b0:	e024      	b.n	80069fc <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80069b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80069ba:	e01f      	b.n	80069fc <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80069bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d004      	beq.n	80069ce <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80069c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80069cc:	e016      	b.n	80069fc <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 80069ce:	2300      	movs	r3, #0
 80069d0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80069d2:	e013      	b.n	80069fc <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80069d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80069da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069de:	d00c      	beq.n	80069fa <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80069e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	61bb      	str	r3, [r7, #24]
}
 80069f2:	bf00      	nop
 80069f4:	e7fe      	b.n	80069f4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80069f6:	bf00      	nop
 80069f8:	e000      	b.n	80069fc <xTaskGenericNotifyFromISR+0x104>
					break;
 80069fa:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80069fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d146      	bne.n	8006a92 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00a      	beq.n	8006a22 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8006a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a10:	f383 8811 	msr	BASEPRI, r3
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	617b      	str	r3, [r7, #20]
}
 8006a1e:	bf00      	nop
 8006a20:	e7fe      	b.n	8006a20 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a22:	4b21      	ldr	r3, [pc, #132]	; (8006aa8 <xTaskGenericNotifyFromISR+0x1b0>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d11d      	bne.n	8006a66 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe fa9a 	bl	8004f68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a38:	4b1c      	ldr	r3, [pc, #112]	; (8006aac <xTaskGenericNotifyFromISR+0x1b4>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d903      	bls.n	8006a48 <xTaskGenericNotifyFromISR+0x150>
 8006a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	4a19      	ldr	r2, [pc, #100]	; (8006aac <xTaskGenericNotifyFromISR+0x1b4>)
 8006a46:	6013      	str	r3, [r2, #0]
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4a16      	ldr	r2, [pc, #88]	; (8006ab0 <xTaskGenericNotifyFromISR+0x1b8>)
 8006a56:	441a      	add	r2, r3
 8006a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	4610      	mov	r0, r2
 8006a60:	f7fe fa25 	bl	8004eae <vListInsertEnd>
 8006a64:	e005      	b.n	8006a72 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	3318      	adds	r3, #24
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	4811      	ldr	r0, [pc, #68]	; (8006ab4 <xTaskGenericNotifyFromISR+0x1bc>)
 8006a6e:	f7fe fa1e 	bl	8004eae <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a76:	4b10      	ldr	r3, [pc, #64]	; (8006ab8 <xTaskGenericNotifyFromISR+0x1c0>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d908      	bls.n	8006a92 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d002      	beq.n	8006a8c <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a88:	2201      	movs	r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006a8c:	4b0b      	ldr	r3, [pc, #44]	; (8006abc <xTaskGenericNotifyFromISR+0x1c4>)
 8006a8e:	2201      	movs	r2, #1
 8006a90:	601a      	str	r2, [r3, #0]
 8006a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a94:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f383 8811 	msr	BASEPRI, r3
}
 8006a9c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8006a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3738      	adds	r7, #56	; 0x38
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	20000d08 	.word	0x20000d08
 8006aac:	20000ce8 	.word	0x20000ce8
 8006ab0:	20000810 	.word	0x20000810
 8006ab4:	20000ca0 	.word	0x20000ca0
 8006ab8:	2000080c 	.word	0x2000080c
 8006abc:	20000cf4 	.word	0x20000cf4

08006ac0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006aca:	4b21      	ldr	r3, [pc, #132]	; (8006b50 <prvAddCurrentTaskToDelayedList+0x90>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ad0:	4b20      	ldr	r3, [pc, #128]	; (8006b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe fa46 	bl	8004f68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae2:	d10a      	bne.n	8006afa <prvAddCurrentTaskToDelayedList+0x3a>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d007      	beq.n	8006afa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aea:	4b1a      	ldr	r3, [pc, #104]	; (8006b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3304      	adds	r3, #4
 8006af0:	4619      	mov	r1, r3
 8006af2:	4819      	ldr	r0, [pc, #100]	; (8006b58 <prvAddCurrentTaskToDelayedList+0x98>)
 8006af4:	f7fe f9db 	bl	8004eae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006af8:	e026      	b.n	8006b48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4413      	add	r3, r2
 8006b00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b02:	4b14      	ldr	r3, [pc, #80]	; (8006b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d209      	bcs.n	8006b26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b12:	4b12      	ldr	r3, [pc, #72]	; (8006b5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	4b0f      	ldr	r3, [pc, #60]	; (8006b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4610      	mov	r0, r2
 8006b20:	f7fe f9e9 	bl	8004ef6 <vListInsert>
}
 8006b24:	e010      	b.n	8006b48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b26:	4b0e      	ldr	r3, [pc, #56]	; (8006b60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	4b0a      	ldr	r3, [pc, #40]	; (8006b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3304      	adds	r3, #4
 8006b30:	4619      	mov	r1, r3
 8006b32:	4610      	mov	r0, r2
 8006b34:	f7fe f9df 	bl	8004ef6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b38:	4b0a      	ldr	r3, [pc, #40]	; (8006b64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d202      	bcs.n	8006b48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b42:	4a08      	ldr	r2, [pc, #32]	; (8006b64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	6013      	str	r3, [r2, #0]
}
 8006b48:	bf00      	nop
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	20000ce4 	.word	0x20000ce4
 8006b54:	2000080c 	.word	0x2000080c
 8006b58:	20000ccc 	.word	0x20000ccc
 8006b5c:	20000c9c 	.word	0x20000c9c
 8006b60:	20000c98 	.word	0x20000c98
 8006b64:	20000d00 	.word	0x20000d00

08006b68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b08a      	sub	sp, #40	; 0x28
 8006b6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b72:	f000 fb07 	bl	8007184 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b76:	4b1c      	ldr	r3, [pc, #112]	; (8006be8 <xTimerCreateTimerTask+0x80>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d021      	beq.n	8006bc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b86:	1d3a      	adds	r2, r7, #4
 8006b88:	f107 0108 	add.w	r1, r7, #8
 8006b8c:	f107 030c 	add.w	r3, r7, #12
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fe f945 	bl	8004e20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	9202      	str	r2, [sp, #8]
 8006b9e:	9301      	str	r3, [sp, #4]
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	460a      	mov	r2, r1
 8006ba8:	4910      	ldr	r1, [pc, #64]	; (8006bec <xTimerCreateTimerTask+0x84>)
 8006baa:	4811      	ldr	r0, [pc, #68]	; (8006bf0 <xTimerCreateTimerTask+0x88>)
 8006bac:	f7fe fef2 	bl	8005994 <xTaskCreateStatic>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	4a10      	ldr	r2, [pc, #64]	; (8006bf4 <xTimerCreateTimerTask+0x8c>)
 8006bb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006bb6:	4b0f      	ldr	r3, [pc, #60]	; (8006bf4 <xTimerCreateTimerTask+0x8c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10a      	bne.n	8006bde <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	613b      	str	r3, [r7, #16]
}
 8006bda:	bf00      	nop
 8006bdc:	e7fe      	b.n	8006bdc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006bde:	697b      	ldr	r3, [r7, #20]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3718      	adds	r7, #24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	20000d3c 	.word	0x20000d3c
 8006bec:	08007d9c 	.word	0x08007d9c
 8006bf0:	08006d2d 	.word	0x08006d2d
 8006bf4:	20000d40 	.word	0x20000d40

08006bf8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b08a      	sub	sp, #40	; 0x28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
 8006c04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10a      	bne.n	8006c26 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	623b      	str	r3, [r7, #32]
}
 8006c22:	bf00      	nop
 8006c24:	e7fe      	b.n	8006c24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006c26:	4b1a      	ldr	r3, [pc, #104]	; (8006c90 <xTimerGenericCommand+0x98>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d02a      	beq.n	8006c84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2b05      	cmp	r3, #5
 8006c3e:	dc18      	bgt.n	8006c72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c40:	f7ff fd6e 	bl	8006720 <xTaskGetSchedulerState>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d109      	bne.n	8006c5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c4a:	4b11      	ldr	r3, [pc, #68]	; (8006c90 <xTimerGenericCommand+0x98>)
 8006c4c:	6818      	ldr	r0, [r3, #0]
 8006c4e:	f107 0110 	add.w	r1, r7, #16
 8006c52:	2300      	movs	r3, #0
 8006c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c56:	f7fe fab5 	bl	80051c4 <xQueueGenericSend>
 8006c5a:	6278      	str	r0, [r7, #36]	; 0x24
 8006c5c:	e012      	b.n	8006c84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c5e:	4b0c      	ldr	r3, [pc, #48]	; (8006c90 <xTimerGenericCommand+0x98>)
 8006c60:	6818      	ldr	r0, [r3, #0]
 8006c62:	f107 0110 	add.w	r1, r7, #16
 8006c66:	2300      	movs	r3, #0
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f7fe faab 	bl	80051c4 <xQueueGenericSend>
 8006c6e:	6278      	str	r0, [r7, #36]	; 0x24
 8006c70:	e008      	b.n	8006c84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c72:	4b07      	ldr	r3, [pc, #28]	; (8006c90 <xTimerGenericCommand+0x98>)
 8006c74:	6818      	ldr	r0, [r3, #0]
 8006c76:	f107 0110 	add.w	r1, r7, #16
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	f7fe fb9f 	bl	80053c0 <xQueueGenericSendFromISR>
 8006c82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3728      	adds	r7, #40	; 0x28
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	20000d3c 	.word	0x20000d3c

08006c94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b088      	sub	sp, #32
 8006c98:	af02      	add	r7, sp, #8
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c9e:	4b22      	ldr	r3, [pc, #136]	; (8006d28 <prvProcessExpiredTimer+0x94>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	3304      	adds	r3, #4
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fe f95b 	bl	8004f68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d022      	beq.n	8006d06 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	699a      	ldr	r2, [r3, #24]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	18d1      	adds	r1, r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	6978      	ldr	r0, [r7, #20]
 8006cce:	f000 f8d1 	bl	8006e74 <prvInsertTimerInActiveList>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d01f      	beq.n	8006d18 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006cd8:	2300      	movs	r3, #0
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	2300      	movs	r3, #0
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	6978      	ldr	r0, [r7, #20]
 8006ce4:	f7ff ff88 	bl	8006bf8 <xTimerGenericCommand>
 8006ce8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d113      	bne.n	8006d18 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	60fb      	str	r3, [r7, #12]
}
 8006d02:	bf00      	nop
 8006d04:	e7fe      	b.n	8006d04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d0c:	f023 0301 	bic.w	r3, r3, #1
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	6978      	ldr	r0, [r7, #20]
 8006d1e:	4798      	blx	r3
}
 8006d20:	bf00      	nop
 8006d22:	3718      	adds	r7, #24
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	20000d34 	.word	0x20000d34

08006d2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d34:	f107 0308 	add.w	r3, r7, #8
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 f857 	bl	8006dec <prvGetNextExpireTime>
 8006d3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	4619      	mov	r1, r3
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 f803 	bl	8006d50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d4a:	f000 f8d5 	bl	8006ef8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d4e:	e7f1      	b.n	8006d34 <prvTimerTask+0x8>

08006d50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d5a:	f7ff f8f5 	bl	8005f48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d5e:	f107 0308 	add.w	r3, r7, #8
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 f866 	bl	8006e34 <prvSampleTimeNow>
 8006d68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d130      	bne.n	8006dd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10a      	bne.n	8006d8c <prvProcessTimerOrBlockTask+0x3c>
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d806      	bhi.n	8006d8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d7e:	f7ff f8f1 	bl	8005f64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d82:	68f9      	ldr	r1, [r7, #12]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7ff ff85 	bl	8006c94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d8a:	e024      	b.n	8006dd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d008      	beq.n	8006da4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d92:	4b13      	ldr	r3, [pc, #76]	; (8006de0 <prvProcessTimerOrBlockTask+0x90>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <prvProcessTimerOrBlockTask+0x50>
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e000      	b.n	8006da2 <prvProcessTimerOrBlockTask+0x52>
 8006da0:	2300      	movs	r3, #0
 8006da2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006da4:	4b0f      	ldr	r3, [pc, #60]	; (8006de4 <prvProcessTimerOrBlockTask+0x94>)
 8006da6:	6818      	ldr	r0, [r3, #0]
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	4619      	mov	r1, r3
 8006db2:	f7fe fdbb 	bl	800592c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006db6:	f7ff f8d5 	bl	8005f64 <xTaskResumeAll>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10a      	bne.n	8006dd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006dc0:	4b09      	ldr	r3, [pc, #36]	; (8006de8 <prvProcessTimerOrBlockTask+0x98>)
 8006dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	f3bf 8f6f 	isb	sy
}
 8006dd0:	e001      	b.n	8006dd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006dd2:	f7ff f8c7 	bl	8005f64 <xTaskResumeAll>
}
 8006dd6:	bf00      	nop
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	20000d38 	.word	0x20000d38
 8006de4:	20000d3c 	.word	0x20000d3c
 8006de8:	e000ed04 	.word	0xe000ed04

08006dec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006dec:	b480      	push	{r7}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006df4:	4b0e      	ldr	r3, [pc, #56]	; (8006e30 <prvGetNextExpireTime+0x44>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <prvGetNextExpireTime+0x16>
 8006dfe:	2201      	movs	r2, #1
 8006e00:	e000      	b.n	8006e04 <prvGetNextExpireTime+0x18>
 8006e02:	2200      	movs	r2, #0
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d105      	bne.n	8006e1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e10:	4b07      	ldr	r3, [pc, #28]	; (8006e30 <prvGetNextExpireTime+0x44>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	e001      	b.n	8006e20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006e20:	68fb      	ldr	r3, [r7, #12]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	20000d34 	.word	0x20000d34

08006e34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e3c:	f7ff f930 	bl	80060a0 <xTaskGetTickCount>
 8006e40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e42:	4b0b      	ldr	r3, [pc, #44]	; (8006e70 <prvSampleTimeNow+0x3c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d205      	bcs.n	8006e58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e4c:	f000 f936 	bl	80070bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	601a      	str	r2, [r3, #0]
 8006e56:	e002      	b.n	8006e5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e5e:	4a04      	ldr	r2, [pc, #16]	; (8006e70 <prvSampleTimeNow+0x3c>)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e64:	68fb      	ldr	r3, [r7, #12]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	20000d44 	.word	0x20000d44

08006e74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e82:	2300      	movs	r3, #0
 8006e84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d812      	bhi.n	8006ec0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	1ad2      	subs	r2, r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d302      	bcc.n	8006eae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	617b      	str	r3, [r7, #20]
 8006eac:	e01b      	b.n	8006ee6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006eae:	4b10      	ldr	r3, [pc, #64]	; (8006ef0 <prvInsertTimerInActiveList+0x7c>)
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	4610      	mov	r0, r2
 8006eba:	f7fe f81c 	bl	8004ef6 <vListInsert>
 8006ebe:	e012      	b.n	8006ee6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d206      	bcs.n	8006ed6 <prvInsertTimerInActiveList+0x62>
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d302      	bcc.n	8006ed6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	617b      	str	r3, [r7, #20]
 8006ed4:	e007      	b.n	8006ee6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ed6:	4b07      	ldr	r3, [pc, #28]	; (8006ef4 <prvInsertTimerInActiveList+0x80>)
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	3304      	adds	r3, #4
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	f7fe f808 	bl	8004ef6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006ee6:	697b      	ldr	r3, [r7, #20]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3718      	adds	r7, #24
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	20000d38 	.word	0x20000d38
 8006ef4:	20000d34 	.word	0x20000d34

08006ef8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08e      	sub	sp, #56	; 0x38
 8006efc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006efe:	e0ca      	b.n	8007096 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	da18      	bge.n	8006f38 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006f06:	1d3b      	adds	r3, r7, #4
 8006f08:	3304      	adds	r3, #4
 8006f0a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10a      	bne.n	8006f28 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	61fb      	str	r3, [r7, #28]
}
 8006f24:	bf00      	nop
 8006f26:	e7fe      	b.n	8006f26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f2e:	6850      	ldr	r0, [r2, #4]
 8006f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f32:	6892      	ldr	r2, [r2, #8]
 8006f34:	4611      	mov	r1, r2
 8006f36:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f2c0 80aa 	blt.w	8007094 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d004      	beq.n	8006f56 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4e:	3304      	adds	r3, #4
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fe f809 	bl	8004f68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f56:	463b      	mov	r3, r7
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7ff ff6b 	bl	8006e34 <prvSampleTimeNow>
 8006f5e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b09      	cmp	r3, #9
 8006f64:	f200 8097 	bhi.w	8007096 <prvProcessReceivedCommands+0x19e>
 8006f68:	a201      	add	r2, pc, #4	; (adr r2, 8006f70 <prvProcessReceivedCommands+0x78>)
 8006f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6e:	bf00      	nop
 8006f70:	08006f99 	.word	0x08006f99
 8006f74:	08006f99 	.word	0x08006f99
 8006f78:	08006f99 	.word	0x08006f99
 8006f7c:	0800700d 	.word	0x0800700d
 8006f80:	08007021 	.word	0x08007021
 8006f84:	0800706b 	.word	0x0800706b
 8006f88:	08006f99 	.word	0x08006f99
 8006f8c:	08006f99 	.word	0x08006f99
 8006f90:	0800700d 	.word	0x0800700d
 8006f94:	08007021 	.word	0x08007021
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f9e:	f043 0301 	orr.w	r3, r3, #1
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	18d1      	adds	r1, r2, r3
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fb8:	f7ff ff5c 	bl	8006e74 <prvInsertTimerInActiveList>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d069      	beq.n	8007096 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fd0:	f003 0304 	and.w	r3, r3, #4
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d05e      	beq.n	8007096 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	441a      	add	r2, r3
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fea:	f7ff fe05 	bl	8006bf8 <xTimerGenericCommand>
 8006fee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d14f      	bne.n	8007096 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	61bb      	str	r3, [r7, #24]
}
 8007008:	bf00      	nop
 800700a:	e7fe      	b.n	800700a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800700c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007012:	f023 0301 	bic.w	r3, r3, #1
 8007016:	b2da      	uxtb	r2, r3
 8007018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800701e:	e03a      	b.n	8007096 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007022:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007026:	f043 0301 	orr.w	r3, r3, #1
 800702a:	b2da      	uxtb	r2, r3
 800702c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007036:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10a      	bne.n	8007056 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007044:	f383 8811 	msr	BASEPRI, r3
 8007048:	f3bf 8f6f 	isb	sy
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	617b      	str	r3, [r7, #20]
}
 8007052:	bf00      	nop
 8007054:	e7fe      	b.n	8007054 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007058:	699a      	ldr	r2, [r3, #24]
 800705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705c:	18d1      	adds	r1, r2, r3
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007064:	f7ff ff06 	bl	8006e74 <prvInsertTimerInActiveList>
					break;
 8007068:	e015      	b.n	8007096 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007070:	f003 0302 	and.w	r3, r3, #2
 8007074:	2b00      	cmp	r3, #0
 8007076:	d103      	bne.n	8007080 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800707a:	f000 fbe1 	bl	8007840 <vPortFree>
 800707e:	e00a      	b.n	8007096 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007082:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007086:	f023 0301 	bic.w	r3, r3, #1
 800708a:	b2da      	uxtb	r2, r3
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007092:	e000      	b.n	8007096 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007094:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007096:	4b08      	ldr	r3, [pc, #32]	; (80070b8 <prvProcessReceivedCommands+0x1c0>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	1d39      	adds	r1, r7, #4
 800709c:	2200      	movs	r2, #0
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fe fa2a 	bl	80054f8 <xQueueReceive>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f47f af2a 	bne.w	8006f00 <prvProcessReceivedCommands+0x8>
	}
}
 80070ac:	bf00      	nop
 80070ae:	bf00      	nop
 80070b0:	3730      	adds	r7, #48	; 0x30
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	20000d3c 	.word	0x20000d3c

080070bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b088      	sub	sp, #32
 80070c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070c2:	e048      	b.n	8007156 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070c4:	4b2d      	ldr	r3, [pc, #180]	; (800717c <prvSwitchTimerLists+0xc0>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070ce:	4b2b      	ldr	r3, [pc, #172]	; (800717c <prvSwitchTimerLists+0xc0>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	3304      	adds	r3, #4
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fd ff43 	bl	8004f68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070f0:	f003 0304 	and.w	r3, r3, #4
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d02e      	beq.n	8007156 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	4413      	add	r3, r2
 8007100:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	429a      	cmp	r2, r3
 8007108:	d90e      	bls.n	8007128 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007116:	4b19      	ldr	r3, [pc, #100]	; (800717c <prvSwitchTimerLists+0xc0>)
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	3304      	adds	r3, #4
 800711e:	4619      	mov	r1, r3
 8007120:	4610      	mov	r0, r2
 8007122:	f7fd fee8 	bl	8004ef6 <vListInsert>
 8007126:	e016      	b.n	8007156 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007128:	2300      	movs	r3, #0
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	2300      	movs	r3, #0
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	2100      	movs	r1, #0
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f7ff fd60 	bl	8006bf8 <xTimerGenericCommand>
 8007138:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10a      	bne.n	8007156 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007144:	f383 8811 	msr	BASEPRI, r3
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	603b      	str	r3, [r7, #0]
}
 8007152:	bf00      	nop
 8007154:	e7fe      	b.n	8007154 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007156:	4b09      	ldr	r3, [pc, #36]	; (800717c <prvSwitchTimerLists+0xc0>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1b1      	bne.n	80070c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007160:	4b06      	ldr	r3, [pc, #24]	; (800717c <prvSwitchTimerLists+0xc0>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007166:	4b06      	ldr	r3, [pc, #24]	; (8007180 <prvSwitchTimerLists+0xc4>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a04      	ldr	r2, [pc, #16]	; (800717c <prvSwitchTimerLists+0xc0>)
 800716c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800716e:	4a04      	ldr	r2, [pc, #16]	; (8007180 <prvSwitchTimerLists+0xc4>)
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	6013      	str	r3, [r2, #0]
}
 8007174:	bf00      	nop
 8007176:	3718      	adds	r7, #24
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	20000d34 	.word	0x20000d34
 8007180:	20000d38 	.word	0x20000d38

08007184 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800718a:	f000 f96b 	bl	8007464 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800718e:	4b15      	ldr	r3, [pc, #84]	; (80071e4 <prvCheckForValidListAndQueue+0x60>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d120      	bne.n	80071d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007196:	4814      	ldr	r0, [pc, #80]	; (80071e8 <prvCheckForValidListAndQueue+0x64>)
 8007198:	f7fd fe5c 	bl	8004e54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800719c:	4813      	ldr	r0, [pc, #76]	; (80071ec <prvCheckForValidListAndQueue+0x68>)
 800719e:	f7fd fe59 	bl	8004e54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80071a2:	4b13      	ldr	r3, [pc, #76]	; (80071f0 <prvCheckForValidListAndQueue+0x6c>)
 80071a4:	4a10      	ldr	r2, [pc, #64]	; (80071e8 <prvCheckForValidListAndQueue+0x64>)
 80071a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80071a8:	4b12      	ldr	r3, [pc, #72]	; (80071f4 <prvCheckForValidListAndQueue+0x70>)
 80071aa:	4a10      	ldr	r2, [pc, #64]	; (80071ec <prvCheckForValidListAndQueue+0x68>)
 80071ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80071ae:	2300      	movs	r3, #0
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	4b11      	ldr	r3, [pc, #68]	; (80071f8 <prvCheckForValidListAndQueue+0x74>)
 80071b4:	4a11      	ldr	r2, [pc, #68]	; (80071fc <prvCheckForValidListAndQueue+0x78>)
 80071b6:	2110      	movs	r1, #16
 80071b8:	200a      	movs	r0, #10
 80071ba:	f7fd ff67 	bl	800508c <xQueueGenericCreateStatic>
 80071be:	4603      	mov	r3, r0
 80071c0:	4a08      	ldr	r2, [pc, #32]	; (80071e4 <prvCheckForValidListAndQueue+0x60>)
 80071c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80071c4:	4b07      	ldr	r3, [pc, #28]	; (80071e4 <prvCheckForValidListAndQueue+0x60>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d005      	beq.n	80071d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80071cc:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <prvCheckForValidListAndQueue+0x60>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	490b      	ldr	r1, [pc, #44]	; (8007200 <prvCheckForValidListAndQueue+0x7c>)
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fe fb80 	bl	80058d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071d8:	f000 f974 	bl	80074c4 <vPortExitCritical>
}
 80071dc:	bf00      	nop
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	20000d3c 	.word	0x20000d3c
 80071e8:	20000d0c 	.word	0x20000d0c
 80071ec:	20000d20 	.word	0x20000d20
 80071f0:	20000d34 	.word	0x20000d34
 80071f4:	20000d38 	.word	0x20000d38
 80071f8:	20000de8 	.word	0x20000de8
 80071fc:	20000d48 	.word	0x20000d48
 8007200:	08007da4 	.word	0x08007da4

08007204 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	3b04      	subs	r3, #4
 8007214:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800721c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	3b04      	subs	r3, #4
 8007222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	f023 0201 	bic.w	r2, r3, #1
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	3b04      	subs	r3, #4
 8007232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007234:	4a0c      	ldr	r2, [pc, #48]	; (8007268 <pxPortInitialiseStack+0x64>)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	3b14      	subs	r3, #20
 800723e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	3b04      	subs	r3, #4
 800724a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f06f 0202 	mvn.w	r2, #2
 8007252:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	3b20      	subs	r3, #32
 8007258:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800725a:	68fb      	ldr	r3, [r7, #12]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	0800726d 	.word	0x0800726d

0800726c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007272:	2300      	movs	r3, #0
 8007274:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007276:	4b12      	ldr	r3, [pc, #72]	; (80072c0 <prvTaskExitError+0x54>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727e:	d00a      	beq.n	8007296 <prvTaskExitError+0x2a>
	__asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	60fb      	str	r3, [r7, #12]
}
 8007292:	bf00      	nop
 8007294:	e7fe      	b.n	8007294 <prvTaskExitError+0x28>
	__asm volatile
 8007296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729a:	f383 8811 	msr	BASEPRI, r3
 800729e:	f3bf 8f6f 	isb	sy
 80072a2:	f3bf 8f4f 	dsb	sy
 80072a6:	60bb      	str	r3, [r7, #8]
}
 80072a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80072aa:	bf00      	nop
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d0fc      	beq.n	80072ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80072b2:	bf00      	nop
 80072b4:	bf00      	nop
 80072b6:	3714      	adds	r7, #20
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr
 80072c0:	2000000c 	.word	0x2000000c
	...

080072d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80072d0:	4b07      	ldr	r3, [pc, #28]	; (80072f0 <pxCurrentTCBConst2>)
 80072d2:	6819      	ldr	r1, [r3, #0]
 80072d4:	6808      	ldr	r0, [r1, #0]
 80072d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072da:	f380 8809 	msr	PSP, r0
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f04f 0000 	mov.w	r0, #0
 80072e6:	f380 8811 	msr	BASEPRI, r0
 80072ea:	4770      	bx	lr
 80072ec:	f3af 8000 	nop.w

080072f0 <pxCurrentTCBConst2>:
 80072f0:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80072f4:	bf00      	nop
 80072f6:	bf00      	nop

080072f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80072f8:	4808      	ldr	r0, [pc, #32]	; (800731c <prvPortStartFirstTask+0x24>)
 80072fa:	6800      	ldr	r0, [r0, #0]
 80072fc:	6800      	ldr	r0, [r0, #0]
 80072fe:	f380 8808 	msr	MSP, r0
 8007302:	f04f 0000 	mov.w	r0, #0
 8007306:	f380 8814 	msr	CONTROL, r0
 800730a:	b662      	cpsie	i
 800730c:	b661      	cpsie	f
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	f3bf 8f6f 	isb	sy
 8007316:	df00      	svc	0
 8007318:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800731a:	bf00      	nop
 800731c:	e000ed08 	.word	0xe000ed08

08007320 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007326:	4b46      	ldr	r3, [pc, #280]	; (8007440 <xPortStartScheduler+0x120>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a46      	ldr	r2, [pc, #280]	; (8007444 <xPortStartScheduler+0x124>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d10a      	bne.n	8007346 <xPortStartScheduler+0x26>
	__asm volatile
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	613b      	str	r3, [r7, #16]
}
 8007342:	bf00      	nop
 8007344:	e7fe      	b.n	8007344 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007346:	4b3e      	ldr	r3, [pc, #248]	; (8007440 <xPortStartScheduler+0x120>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a3f      	ldr	r2, [pc, #252]	; (8007448 <xPortStartScheduler+0x128>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d10a      	bne.n	8007366 <xPortStartScheduler+0x46>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	60fb      	str	r3, [r7, #12]
}
 8007362:	bf00      	nop
 8007364:	e7fe      	b.n	8007364 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007366:	4b39      	ldr	r3, [pc, #228]	; (800744c <xPortStartScheduler+0x12c>)
 8007368:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	b2db      	uxtb	r3, r3
 8007370:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	22ff      	movs	r2, #255	; 0xff
 8007376:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	b2db      	uxtb	r3, r3
 800737e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007380:	78fb      	ldrb	r3, [r7, #3]
 8007382:	b2db      	uxtb	r3, r3
 8007384:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007388:	b2da      	uxtb	r2, r3
 800738a:	4b31      	ldr	r3, [pc, #196]	; (8007450 <xPortStartScheduler+0x130>)
 800738c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800738e:	4b31      	ldr	r3, [pc, #196]	; (8007454 <xPortStartScheduler+0x134>)
 8007390:	2207      	movs	r2, #7
 8007392:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007394:	e009      	b.n	80073aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007396:	4b2f      	ldr	r3, [pc, #188]	; (8007454 <xPortStartScheduler+0x134>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	3b01      	subs	r3, #1
 800739c:	4a2d      	ldr	r2, [pc, #180]	; (8007454 <xPortStartScheduler+0x134>)
 800739e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	005b      	lsls	r3, r3, #1
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073aa:	78fb      	ldrb	r3, [r7, #3]
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073b2:	2b80      	cmp	r3, #128	; 0x80
 80073b4:	d0ef      	beq.n	8007396 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80073b6:	4b27      	ldr	r3, [pc, #156]	; (8007454 <xPortStartScheduler+0x134>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f1c3 0307 	rsb	r3, r3, #7
 80073be:	2b04      	cmp	r3, #4
 80073c0:	d00a      	beq.n	80073d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80073c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c6:	f383 8811 	msr	BASEPRI, r3
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	60bb      	str	r3, [r7, #8]
}
 80073d4:	bf00      	nop
 80073d6:	e7fe      	b.n	80073d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80073d8:	4b1e      	ldr	r3, [pc, #120]	; (8007454 <xPortStartScheduler+0x134>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	021b      	lsls	r3, r3, #8
 80073de:	4a1d      	ldr	r2, [pc, #116]	; (8007454 <xPortStartScheduler+0x134>)
 80073e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80073e2:	4b1c      	ldr	r3, [pc, #112]	; (8007454 <xPortStartScheduler+0x134>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073ea:	4a1a      	ldr	r2, [pc, #104]	; (8007454 <xPortStartScheduler+0x134>)
 80073ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80073f6:	4b18      	ldr	r3, [pc, #96]	; (8007458 <xPortStartScheduler+0x138>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a17      	ldr	r2, [pc, #92]	; (8007458 <xPortStartScheduler+0x138>)
 80073fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007400:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007402:	4b15      	ldr	r3, [pc, #84]	; (8007458 <xPortStartScheduler+0x138>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a14      	ldr	r2, [pc, #80]	; (8007458 <xPortStartScheduler+0x138>)
 8007408:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800740c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800740e:	f000 f8dd 	bl	80075cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007412:	4b12      	ldr	r3, [pc, #72]	; (800745c <xPortStartScheduler+0x13c>)
 8007414:	2200      	movs	r2, #0
 8007416:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007418:	f000 f8fc 	bl	8007614 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800741c:	4b10      	ldr	r3, [pc, #64]	; (8007460 <xPortStartScheduler+0x140>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a0f      	ldr	r2, [pc, #60]	; (8007460 <xPortStartScheduler+0x140>)
 8007422:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007426:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007428:	f7ff ff66 	bl	80072f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800742c:	f7fe ff02 	bl	8006234 <vTaskSwitchContext>
	prvTaskExitError();
 8007430:	f7ff ff1c 	bl	800726c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	e000ed00 	.word	0xe000ed00
 8007444:	410fc271 	.word	0x410fc271
 8007448:	410fc270 	.word	0x410fc270
 800744c:	e000e400 	.word	0xe000e400
 8007450:	20000e38 	.word	0x20000e38
 8007454:	20000e3c 	.word	0x20000e3c
 8007458:	e000ed20 	.word	0xe000ed20
 800745c:	2000000c 	.word	0x2000000c
 8007460:	e000ef34 	.word	0xe000ef34

08007464 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
	__asm volatile
 800746a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746e:	f383 8811 	msr	BASEPRI, r3
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	f3bf 8f4f 	dsb	sy
 800747a:	607b      	str	r3, [r7, #4]
}
 800747c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800747e:	4b0f      	ldr	r3, [pc, #60]	; (80074bc <vPortEnterCritical+0x58>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3301      	adds	r3, #1
 8007484:	4a0d      	ldr	r2, [pc, #52]	; (80074bc <vPortEnterCritical+0x58>)
 8007486:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007488:	4b0c      	ldr	r3, [pc, #48]	; (80074bc <vPortEnterCritical+0x58>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d10f      	bne.n	80074b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007490:	4b0b      	ldr	r3, [pc, #44]	; (80074c0 <vPortEnterCritical+0x5c>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800749a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749e:	f383 8811 	msr	BASEPRI, r3
 80074a2:	f3bf 8f6f 	isb	sy
 80074a6:	f3bf 8f4f 	dsb	sy
 80074aa:	603b      	str	r3, [r7, #0]
}
 80074ac:	bf00      	nop
 80074ae:	e7fe      	b.n	80074ae <vPortEnterCritical+0x4a>
	}
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr
 80074bc:	2000000c 	.word	0x2000000c
 80074c0:	e000ed04 	.word	0xe000ed04

080074c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80074ca:	4b12      	ldr	r3, [pc, #72]	; (8007514 <vPortExitCritical+0x50>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10a      	bne.n	80074e8 <vPortExitCritical+0x24>
	__asm volatile
 80074d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d6:	f383 8811 	msr	BASEPRI, r3
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	607b      	str	r3, [r7, #4]
}
 80074e4:	bf00      	nop
 80074e6:	e7fe      	b.n	80074e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80074e8:	4b0a      	ldr	r3, [pc, #40]	; (8007514 <vPortExitCritical+0x50>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	3b01      	subs	r3, #1
 80074ee:	4a09      	ldr	r2, [pc, #36]	; (8007514 <vPortExitCritical+0x50>)
 80074f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80074f2:	4b08      	ldr	r3, [pc, #32]	; (8007514 <vPortExitCritical+0x50>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d105      	bne.n	8007506 <vPortExitCritical+0x42>
 80074fa:	2300      	movs	r3, #0
 80074fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	f383 8811 	msr	BASEPRI, r3
}
 8007504:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007506:	bf00      	nop
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	2000000c 	.word	0x2000000c
	...

08007520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007520:	f3ef 8009 	mrs	r0, PSP
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	4b15      	ldr	r3, [pc, #84]	; (8007580 <pxCurrentTCBConst>)
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	f01e 0f10 	tst.w	lr, #16
 8007530:	bf08      	it	eq
 8007532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800753a:	6010      	str	r0, [r2, #0]
 800753c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007540:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007544:	f380 8811 	msr	BASEPRI, r0
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f7fe fe70 	bl	8006234 <vTaskSwitchContext>
 8007554:	f04f 0000 	mov.w	r0, #0
 8007558:	f380 8811 	msr	BASEPRI, r0
 800755c:	bc09      	pop	{r0, r3}
 800755e:	6819      	ldr	r1, [r3, #0]
 8007560:	6808      	ldr	r0, [r1, #0]
 8007562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007566:	f01e 0f10 	tst.w	lr, #16
 800756a:	bf08      	it	eq
 800756c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007570:	f380 8809 	msr	PSP, r0
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	f3af 8000 	nop.w

08007580 <pxCurrentTCBConst>:
 8007580:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop

08007588 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
	__asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	607b      	str	r3, [r7, #4]
}
 80075a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80075a2:	f7fe fd8d 	bl	80060c0 <xTaskIncrementTick>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d003      	beq.n	80075b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80075ac:	4b06      	ldr	r3, [pc, #24]	; (80075c8 <xPortSysTickHandler+0x40>)
 80075ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	2300      	movs	r3, #0
 80075b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	f383 8811 	msr	BASEPRI, r3
}
 80075be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80075c0:	bf00      	nop
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	e000ed04 	.word	0xe000ed04

080075cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80075cc:	b480      	push	{r7}
 80075ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075d0:	4b0b      	ldr	r3, [pc, #44]	; (8007600 <vPortSetupTimerInterrupt+0x34>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075d6:	4b0b      	ldr	r3, [pc, #44]	; (8007604 <vPortSetupTimerInterrupt+0x38>)
 80075d8:	2200      	movs	r2, #0
 80075da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075dc:	4b0a      	ldr	r3, [pc, #40]	; (8007608 <vPortSetupTimerInterrupt+0x3c>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a0a      	ldr	r2, [pc, #40]	; (800760c <vPortSetupTimerInterrupt+0x40>)
 80075e2:	fba2 2303 	umull	r2, r3, r2, r3
 80075e6:	099b      	lsrs	r3, r3, #6
 80075e8:	4a09      	ldr	r2, [pc, #36]	; (8007610 <vPortSetupTimerInterrupt+0x44>)
 80075ea:	3b01      	subs	r3, #1
 80075ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80075ee:	4b04      	ldr	r3, [pc, #16]	; (8007600 <vPortSetupTimerInterrupt+0x34>)
 80075f0:	2207      	movs	r2, #7
 80075f2:	601a      	str	r2, [r3, #0]
}
 80075f4:	bf00      	nop
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	e000e010 	.word	0xe000e010
 8007604:	e000e018 	.word	0xe000e018
 8007608:	20000000 	.word	0x20000000
 800760c:	10624dd3 	.word	0x10624dd3
 8007610:	e000e014 	.word	0xe000e014

08007614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007614:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007624 <vPortEnableVFP+0x10>
 8007618:	6801      	ldr	r1, [r0, #0]
 800761a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800761e:	6001      	str	r1, [r0, #0]
 8007620:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007622:	bf00      	nop
 8007624:	e000ed88 	.word	0xe000ed88

08007628 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800762e:	f3ef 8305 	mrs	r3, IPSR
 8007632:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2b0f      	cmp	r3, #15
 8007638:	d914      	bls.n	8007664 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800763a:	4a17      	ldr	r2, [pc, #92]	; (8007698 <vPortValidateInterruptPriority+0x70>)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	4413      	add	r3, r2
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007644:	4b15      	ldr	r3, [pc, #84]	; (800769c <vPortValidateInterruptPriority+0x74>)
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	7afa      	ldrb	r2, [r7, #11]
 800764a:	429a      	cmp	r2, r3
 800764c:	d20a      	bcs.n	8007664 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	607b      	str	r3, [r7, #4]
}
 8007660:	bf00      	nop
 8007662:	e7fe      	b.n	8007662 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007664:	4b0e      	ldr	r3, [pc, #56]	; (80076a0 <vPortValidateInterruptPriority+0x78>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800766c:	4b0d      	ldr	r3, [pc, #52]	; (80076a4 <vPortValidateInterruptPriority+0x7c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	429a      	cmp	r2, r3
 8007672:	d90a      	bls.n	800768a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	603b      	str	r3, [r7, #0]
}
 8007686:	bf00      	nop
 8007688:	e7fe      	b.n	8007688 <vPortValidateInterruptPriority+0x60>
	}
 800768a:	bf00      	nop
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	e000e3f0 	.word	0xe000e3f0
 800769c:	20000e38 	.word	0x20000e38
 80076a0:	e000ed0c 	.word	0xe000ed0c
 80076a4:	20000e3c 	.word	0x20000e3c

080076a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b08a      	sub	sp, #40	; 0x28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80076b0:	2300      	movs	r3, #0
 80076b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80076b4:	f7fe fc48 	bl	8005f48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80076b8:	4b5b      	ldr	r3, [pc, #364]	; (8007828 <pvPortMalloc+0x180>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80076c0:	f000 f920 	bl	8007904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80076c4:	4b59      	ldr	r3, [pc, #356]	; (800782c <pvPortMalloc+0x184>)
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4013      	ands	r3, r2
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f040 8093 	bne.w	80077f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d01d      	beq.n	8007714 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80076d8:	2208      	movs	r2, #8
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4413      	add	r3, r2
 80076de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f003 0307 	and.w	r3, r3, #7
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d014      	beq.n	8007714 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f023 0307 	bic.w	r3, r3, #7
 80076f0:	3308      	adds	r3, #8
 80076f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f003 0307 	and.w	r3, r3, #7
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00a      	beq.n	8007714 <pvPortMalloc+0x6c>
	__asm volatile
 80076fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	617b      	str	r3, [r7, #20]
}
 8007710:	bf00      	nop
 8007712:	e7fe      	b.n	8007712 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d06e      	beq.n	80077f8 <pvPortMalloc+0x150>
 800771a:	4b45      	ldr	r3, [pc, #276]	; (8007830 <pvPortMalloc+0x188>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	429a      	cmp	r2, r3
 8007722:	d869      	bhi.n	80077f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007724:	4b43      	ldr	r3, [pc, #268]	; (8007834 <pvPortMalloc+0x18c>)
 8007726:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007728:	4b42      	ldr	r3, [pc, #264]	; (8007834 <pvPortMalloc+0x18c>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800772e:	e004      	b.n	800773a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800773a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	429a      	cmp	r2, r3
 8007742:	d903      	bls.n	800774c <pvPortMalloc+0xa4>
 8007744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1f1      	bne.n	8007730 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800774c:	4b36      	ldr	r3, [pc, #216]	; (8007828 <pvPortMalloc+0x180>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007752:	429a      	cmp	r2, r3
 8007754:	d050      	beq.n	80077f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2208      	movs	r2, #8
 800775c:	4413      	add	r3, r2
 800775e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	1ad2      	subs	r2, r2, r3
 8007770:	2308      	movs	r3, #8
 8007772:	005b      	lsls	r3, r3, #1
 8007774:	429a      	cmp	r2, r3
 8007776:	d91f      	bls.n	80077b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4413      	add	r3, r2
 800777e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	f003 0307 	and.w	r3, r3, #7
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00a      	beq.n	80077a0 <pvPortMalloc+0xf8>
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	613b      	str	r3, [r7, #16]
}
 800779c:	bf00      	nop
 800779e:	e7fe      	b.n	800779e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	685a      	ldr	r2, [r3, #4]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	1ad2      	subs	r2, r2, r3
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80077b2:	69b8      	ldr	r0, [r7, #24]
 80077b4:	f000 f908 	bl	80079c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80077b8:	4b1d      	ldr	r3, [pc, #116]	; (8007830 <pvPortMalloc+0x188>)
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	4a1b      	ldr	r2, [pc, #108]	; (8007830 <pvPortMalloc+0x188>)
 80077c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077c6:	4b1a      	ldr	r3, [pc, #104]	; (8007830 <pvPortMalloc+0x188>)
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	4b1b      	ldr	r3, [pc, #108]	; (8007838 <pvPortMalloc+0x190>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d203      	bcs.n	80077da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80077d2:	4b17      	ldr	r3, [pc, #92]	; (8007830 <pvPortMalloc+0x188>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a18      	ldr	r2, [pc, #96]	; (8007838 <pvPortMalloc+0x190>)
 80077d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077dc:	685a      	ldr	r2, [r3, #4]
 80077de:	4b13      	ldr	r3, [pc, #76]	; (800782c <pvPortMalloc+0x184>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	431a      	orrs	r2, r3
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	2200      	movs	r2, #0
 80077ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80077ee:	4b13      	ldr	r3, [pc, #76]	; (800783c <pvPortMalloc+0x194>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	3301      	adds	r3, #1
 80077f4:	4a11      	ldr	r2, [pc, #68]	; (800783c <pvPortMalloc+0x194>)
 80077f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80077f8:	f7fe fbb4 	bl	8005f64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	f003 0307 	and.w	r3, r3, #7
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00a      	beq.n	800781c <pvPortMalloc+0x174>
	__asm volatile
 8007806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	60fb      	str	r3, [r7, #12]
}
 8007818:	bf00      	nop
 800781a:	e7fe      	b.n	800781a <pvPortMalloc+0x172>
	return pvReturn;
 800781c:	69fb      	ldr	r3, [r7, #28]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3728      	adds	r7, #40	; 0x28
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	20001a48 	.word	0x20001a48
 800782c:	20001a5c 	.word	0x20001a5c
 8007830:	20001a4c 	.word	0x20001a4c
 8007834:	20001a40 	.word	0x20001a40
 8007838:	20001a50 	.word	0x20001a50
 800783c:	20001a54 	.word	0x20001a54

08007840 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d04d      	beq.n	80078ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007852:	2308      	movs	r3, #8
 8007854:	425b      	negs	r3, r3
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	4413      	add	r3, r2
 800785a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	685a      	ldr	r2, [r3, #4]
 8007864:	4b24      	ldr	r3, [pc, #144]	; (80078f8 <vPortFree+0xb8>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4013      	ands	r3, r2
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10a      	bne.n	8007884 <vPortFree+0x44>
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	60fb      	str	r3, [r7, #12]
}
 8007880:	bf00      	nop
 8007882:	e7fe      	b.n	8007882 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00a      	beq.n	80078a2 <vPortFree+0x62>
	__asm volatile
 800788c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007890:	f383 8811 	msr	BASEPRI, r3
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	60bb      	str	r3, [r7, #8]
}
 800789e:	bf00      	nop
 80078a0:	e7fe      	b.n	80078a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	4b14      	ldr	r3, [pc, #80]	; (80078f8 <vPortFree+0xb8>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4013      	ands	r3, r2
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d01e      	beq.n	80078ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d11a      	bne.n	80078ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	4b0e      	ldr	r3, [pc, #56]	; (80078f8 <vPortFree+0xb8>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	43db      	mvns	r3, r3
 80078c2:	401a      	ands	r2, r3
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80078c8:	f7fe fb3e 	bl	8005f48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	4b0a      	ldr	r3, [pc, #40]	; (80078fc <vPortFree+0xbc>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4413      	add	r3, r2
 80078d6:	4a09      	ldr	r2, [pc, #36]	; (80078fc <vPortFree+0xbc>)
 80078d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078da:	6938      	ldr	r0, [r7, #16]
 80078dc:	f000 f874 	bl	80079c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80078e0:	4b07      	ldr	r3, [pc, #28]	; (8007900 <vPortFree+0xc0>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	3301      	adds	r3, #1
 80078e6:	4a06      	ldr	r2, [pc, #24]	; (8007900 <vPortFree+0xc0>)
 80078e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80078ea:	f7fe fb3b 	bl	8005f64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80078ee:	bf00      	nop
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	20001a5c 	.word	0x20001a5c
 80078fc:	20001a4c 	.word	0x20001a4c
 8007900:	20001a58 	.word	0x20001a58

08007904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800790a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800790e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007910:	4b27      	ldr	r3, [pc, #156]	; (80079b0 <prvHeapInit+0xac>)
 8007912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f003 0307 	and.w	r3, r3, #7
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00c      	beq.n	8007938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3307      	adds	r3, #7
 8007922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f023 0307 	bic.w	r3, r3, #7
 800792a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	4a1f      	ldr	r2, [pc, #124]	; (80079b0 <prvHeapInit+0xac>)
 8007934:	4413      	add	r3, r2
 8007936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800793c:	4a1d      	ldr	r2, [pc, #116]	; (80079b4 <prvHeapInit+0xb0>)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007942:	4b1c      	ldr	r3, [pc, #112]	; (80079b4 <prvHeapInit+0xb0>)
 8007944:	2200      	movs	r2, #0
 8007946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	68ba      	ldr	r2, [r7, #8]
 800794c:	4413      	add	r3, r2
 800794e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007950:	2208      	movs	r2, #8
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	1a9b      	subs	r3, r3, r2
 8007956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f023 0307 	bic.w	r3, r3, #7
 800795e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4a15      	ldr	r2, [pc, #84]	; (80079b8 <prvHeapInit+0xb4>)
 8007964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007966:	4b14      	ldr	r3, [pc, #80]	; (80079b8 <prvHeapInit+0xb4>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2200      	movs	r2, #0
 800796c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800796e:	4b12      	ldr	r3, [pc, #72]	; (80079b8 <prvHeapInit+0xb4>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2200      	movs	r2, #0
 8007974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	1ad2      	subs	r2, r2, r3
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007984:	4b0c      	ldr	r3, [pc, #48]	; (80079b8 <prvHeapInit+0xb4>)
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	4a0a      	ldr	r2, [pc, #40]	; (80079bc <prvHeapInit+0xb8>)
 8007992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	4a09      	ldr	r2, [pc, #36]	; (80079c0 <prvHeapInit+0xbc>)
 800799a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800799c:	4b09      	ldr	r3, [pc, #36]	; (80079c4 <prvHeapInit+0xc0>)
 800799e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80079a2:	601a      	str	r2, [r3, #0]
}
 80079a4:	bf00      	nop
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	20000e40 	.word	0x20000e40
 80079b4:	20001a40 	.word	0x20001a40
 80079b8:	20001a48 	.word	0x20001a48
 80079bc:	20001a50 	.word	0x20001a50
 80079c0:	20001a4c 	.word	0x20001a4c
 80079c4:	20001a5c 	.word	0x20001a5c

080079c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079d0:	4b28      	ldr	r3, [pc, #160]	; (8007a74 <prvInsertBlockIntoFreeList+0xac>)
 80079d2:	60fb      	str	r3, [r7, #12]
 80079d4:	e002      	b.n	80079dc <prvInsertBlockIntoFreeList+0x14>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	60fb      	str	r3, [r7, #12]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d8f7      	bhi.n	80079d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	4413      	add	r3, r2
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d108      	bne.n	8007a0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	441a      	add	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	441a      	add	r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d118      	bne.n	8007a50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	4b15      	ldr	r3, [pc, #84]	; (8007a78 <prvInsertBlockIntoFreeList+0xb0>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d00d      	beq.n	8007a46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685a      	ldr	r2, [r3, #4]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	441a      	add	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	601a      	str	r2, [r3, #0]
 8007a44:	e008      	b.n	8007a58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a46:	4b0c      	ldr	r3, [pc, #48]	; (8007a78 <prvInsertBlockIntoFreeList+0xb0>)
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	e003      	b.n	8007a58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d002      	beq.n	8007a66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a66:	bf00      	nop
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	20001a40 	.word	0x20001a40
 8007a78:	20001a48 	.word	0x20001a48

08007a7c <__libc_init_array>:
 8007a7c:	b570      	push	{r4, r5, r6, lr}
 8007a7e:	4d0d      	ldr	r5, [pc, #52]	; (8007ab4 <__libc_init_array+0x38>)
 8007a80:	4c0d      	ldr	r4, [pc, #52]	; (8007ab8 <__libc_init_array+0x3c>)
 8007a82:	1b64      	subs	r4, r4, r5
 8007a84:	10a4      	asrs	r4, r4, #2
 8007a86:	2600      	movs	r6, #0
 8007a88:	42a6      	cmp	r6, r4
 8007a8a:	d109      	bne.n	8007aa0 <__libc_init_array+0x24>
 8007a8c:	4d0b      	ldr	r5, [pc, #44]	; (8007abc <__libc_init_array+0x40>)
 8007a8e:	4c0c      	ldr	r4, [pc, #48]	; (8007ac0 <__libc_init_array+0x44>)
 8007a90:	f000 f95a 	bl	8007d48 <_init>
 8007a94:	1b64      	subs	r4, r4, r5
 8007a96:	10a4      	asrs	r4, r4, #2
 8007a98:	2600      	movs	r6, #0
 8007a9a:	42a6      	cmp	r6, r4
 8007a9c:	d105      	bne.n	8007aaa <__libc_init_array+0x2e>
 8007a9e:	bd70      	pop	{r4, r5, r6, pc}
 8007aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aa4:	4798      	blx	r3
 8007aa6:	3601      	adds	r6, #1
 8007aa8:	e7ee      	b.n	8007a88 <__libc_init_array+0xc>
 8007aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aae:	4798      	blx	r3
 8007ab0:	3601      	adds	r6, #1
 8007ab2:	e7f2      	b.n	8007a9a <__libc_init_array+0x1e>
 8007ab4:	08007ef8 	.word	0x08007ef8
 8007ab8:	08007ef8 	.word	0x08007ef8
 8007abc:	08007ef8 	.word	0x08007ef8
 8007ac0:	08007efc 	.word	0x08007efc

08007ac4 <__itoa>:
 8007ac4:	1e93      	subs	r3, r2, #2
 8007ac6:	2b22      	cmp	r3, #34	; 0x22
 8007ac8:	b510      	push	{r4, lr}
 8007aca:	460c      	mov	r4, r1
 8007acc:	d904      	bls.n	8007ad8 <__itoa+0x14>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	700b      	strb	r3, [r1, #0]
 8007ad2:	461c      	mov	r4, r3
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	bd10      	pop	{r4, pc}
 8007ad8:	2a0a      	cmp	r2, #10
 8007ada:	d109      	bne.n	8007af0 <__itoa+0x2c>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	da07      	bge.n	8007af0 <__itoa+0x2c>
 8007ae0:	232d      	movs	r3, #45	; 0x2d
 8007ae2:	700b      	strb	r3, [r1, #0]
 8007ae4:	4240      	negs	r0, r0
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	4421      	add	r1, r4
 8007aea:	f000 f88f 	bl	8007c0c <__utoa>
 8007aee:	e7f1      	b.n	8007ad4 <__itoa+0x10>
 8007af0:	2100      	movs	r1, #0
 8007af2:	e7f9      	b.n	8007ae8 <__itoa+0x24>

08007af4 <itoa>:
 8007af4:	f7ff bfe6 	b.w	8007ac4 <__itoa>

08007af8 <__retarget_lock_acquire_recursive>:
 8007af8:	4770      	bx	lr

08007afa <__retarget_lock_release_recursive>:
 8007afa:	4770      	bx	lr

08007afc <memcpy>:
 8007afc:	440a      	add	r2, r1
 8007afe:	4291      	cmp	r1, r2
 8007b00:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b04:	d100      	bne.n	8007b08 <memcpy+0xc>
 8007b06:	4770      	bx	lr
 8007b08:	b510      	push	{r4, lr}
 8007b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b12:	4291      	cmp	r1, r2
 8007b14:	d1f9      	bne.n	8007b0a <memcpy+0xe>
 8007b16:	bd10      	pop	{r4, pc}

08007b18 <memset>:
 8007b18:	4402      	add	r2, r0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d100      	bne.n	8007b22 <memset+0xa>
 8007b20:	4770      	bx	lr
 8007b22:	f803 1b01 	strb.w	r1, [r3], #1
 8007b26:	e7f9      	b.n	8007b1c <memset+0x4>

08007b28 <cleanup_glue>:
 8007b28:	b538      	push	{r3, r4, r5, lr}
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	6809      	ldr	r1, [r1, #0]
 8007b2e:	4605      	mov	r5, r0
 8007b30:	b109      	cbz	r1, 8007b36 <cleanup_glue+0xe>
 8007b32:	f7ff fff9 	bl	8007b28 <cleanup_glue>
 8007b36:	4621      	mov	r1, r4
 8007b38:	4628      	mov	r0, r5
 8007b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b3e:	f000 b8b3 	b.w	8007ca8 <_free_r>
	...

08007b44 <_reclaim_reent>:
 8007b44:	4b2c      	ldr	r3, [pc, #176]	; (8007bf8 <_reclaim_reent+0xb4>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4283      	cmp	r3, r0
 8007b4a:	b570      	push	{r4, r5, r6, lr}
 8007b4c:	4604      	mov	r4, r0
 8007b4e:	d051      	beq.n	8007bf4 <_reclaim_reent+0xb0>
 8007b50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007b52:	b143      	cbz	r3, 8007b66 <_reclaim_reent+0x22>
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d14a      	bne.n	8007bf0 <_reclaim_reent+0xac>
 8007b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b5c:	6819      	ldr	r1, [r3, #0]
 8007b5e:	b111      	cbz	r1, 8007b66 <_reclaim_reent+0x22>
 8007b60:	4620      	mov	r0, r4
 8007b62:	f000 f8a1 	bl	8007ca8 <_free_r>
 8007b66:	6961      	ldr	r1, [r4, #20]
 8007b68:	b111      	cbz	r1, 8007b70 <_reclaim_reent+0x2c>
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f000 f89c 	bl	8007ca8 <_free_r>
 8007b70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007b72:	b111      	cbz	r1, 8007b7a <_reclaim_reent+0x36>
 8007b74:	4620      	mov	r0, r4
 8007b76:	f000 f897 	bl	8007ca8 <_free_r>
 8007b7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007b7c:	b111      	cbz	r1, 8007b84 <_reclaim_reent+0x40>
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f000 f892 	bl	8007ca8 <_free_r>
 8007b84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007b86:	b111      	cbz	r1, 8007b8e <_reclaim_reent+0x4a>
 8007b88:	4620      	mov	r0, r4
 8007b8a:	f000 f88d 	bl	8007ca8 <_free_r>
 8007b8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007b90:	b111      	cbz	r1, 8007b98 <_reclaim_reent+0x54>
 8007b92:	4620      	mov	r0, r4
 8007b94:	f000 f888 	bl	8007ca8 <_free_r>
 8007b98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007b9a:	b111      	cbz	r1, 8007ba2 <_reclaim_reent+0x5e>
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	f000 f883 	bl	8007ca8 <_free_r>
 8007ba2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007ba4:	b111      	cbz	r1, 8007bac <_reclaim_reent+0x68>
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f000 f87e 	bl	8007ca8 <_free_r>
 8007bac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bae:	b111      	cbz	r1, 8007bb6 <_reclaim_reent+0x72>
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f000 f879 	bl	8007ca8 <_free_r>
 8007bb6:	69a3      	ldr	r3, [r4, #24]
 8007bb8:	b1e3      	cbz	r3, 8007bf4 <_reclaim_reent+0xb0>
 8007bba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	4798      	blx	r3
 8007bc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007bc2:	b1b9      	cbz	r1, 8007bf4 <_reclaim_reent+0xb0>
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007bca:	f7ff bfad 	b.w	8007b28 <cleanup_glue>
 8007bce:	5949      	ldr	r1, [r1, r5]
 8007bd0:	b941      	cbnz	r1, 8007be4 <_reclaim_reent+0xa0>
 8007bd2:	3504      	adds	r5, #4
 8007bd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bd6:	2d80      	cmp	r5, #128	; 0x80
 8007bd8:	68d9      	ldr	r1, [r3, #12]
 8007bda:	d1f8      	bne.n	8007bce <_reclaim_reent+0x8a>
 8007bdc:	4620      	mov	r0, r4
 8007bde:	f000 f863 	bl	8007ca8 <_free_r>
 8007be2:	e7ba      	b.n	8007b5a <_reclaim_reent+0x16>
 8007be4:	680e      	ldr	r6, [r1, #0]
 8007be6:	4620      	mov	r0, r4
 8007be8:	f000 f85e 	bl	8007ca8 <_free_r>
 8007bec:	4631      	mov	r1, r6
 8007bee:	e7ef      	b.n	8007bd0 <_reclaim_reent+0x8c>
 8007bf0:	2500      	movs	r5, #0
 8007bf2:	e7ef      	b.n	8007bd4 <_reclaim_reent+0x90>
 8007bf4:	bd70      	pop	{r4, r5, r6, pc}
 8007bf6:	bf00      	nop
 8007bf8:	20000010 	.word	0x20000010

08007bfc <strcpy>:
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c02:	f803 2b01 	strb.w	r2, [r3], #1
 8007c06:	2a00      	cmp	r2, #0
 8007c08:	d1f9      	bne.n	8007bfe <strcpy+0x2>
 8007c0a:	4770      	bx	lr

08007c0c <__utoa>:
 8007c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c0e:	4c1f      	ldr	r4, [pc, #124]	; (8007c8c <__utoa+0x80>)
 8007c10:	b08b      	sub	sp, #44	; 0x2c
 8007c12:	4605      	mov	r5, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	466e      	mov	r6, sp
 8007c18:	f104 0c20 	add.w	ip, r4, #32
 8007c1c:	6820      	ldr	r0, [r4, #0]
 8007c1e:	6861      	ldr	r1, [r4, #4]
 8007c20:	4637      	mov	r7, r6
 8007c22:	c703      	stmia	r7!, {r0, r1}
 8007c24:	3408      	adds	r4, #8
 8007c26:	4564      	cmp	r4, ip
 8007c28:	463e      	mov	r6, r7
 8007c2a:	d1f7      	bne.n	8007c1c <__utoa+0x10>
 8007c2c:	7921      	ldrb	r1, [r4, #4]
 8007c2e:	7139      	strb	r1, [r7, #4]
 8007c30:	1e91      	subs	r1, r2, #2
 8007c32:	6820      	ldr	r0, [r4, #0]
 8007c34:	6038      	str	r0, [r7, #0]
 8007c36:	2922      	cmp	r1, #34	; 0x22
 8007c38:	f04f 0100 	mov.w	r1, #0
 8007c3c:	d904      	bls.n	8007c48 <__utoa+0x3c>
 8007c3e:	7019      	strb	r1, [r3, #0]
 8007c40:	460b      	mov	r3, r1
 8007c42:	4618      	mov	r0, r3
 8007c44:	b00b      	add	sp, #44	; 0x2c
 8007c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c48:	1e58      	subs	r0, r3, #1
 8007c4a:	4684      	mov	ip, r0
 8007c4c:	fbb5 f7f2 	udiv	r7, r5, r2
 8007c50:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8007c54:	fb02 5617 	mls	r6, r2, r7, r5
 8007c58:	4476      	add	r6, lr
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007c60:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007c64:	462e      	mov	r6, r5
 8007c66:	42b2      	cmp	r2, r6
 8007c68:	f101 0101 	add.w	r1, r1, #1
 8007c6c:	463d      	mov	r5, r7
 8007c6e:	d9ed      	bls.n	8007c4c <__utoa+0x40>
 8007c70:	2200      	movs	r2, #0
 8007c72:	545a      	strb	r2, [r3, r1]
 8007c74:	1919      	adds	r1, r3, r4
 8007c76:	1aa5      	subs	r5, r4, r2
 8007c78:	42aa      	cmp	r2, r5
 8007c7a:	dae2      	bge.n	8007c42 <__utoa+0x36>
 8007c7c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007c80:	780e      	ldrb	r6, [r1, #0]
 8007c82:	7006      	strb	r6, [r0, #0]
 8007c84:	3201      	adds	r2, #1
 8007c86:	f801 5901 	strb.w	r5, [r1], #-1
 8007c8a:	e7f4      	b.n	8007c76 <__utoa+0x6a>
 8007c8c:	08007ec8 	.word	0x08007ec8

08007c90 <__malloc_lock>:
 8007c90:	4801      	ldr	r0, [pc, #4]	; (8007c98 <__malloc_lock+0x8>)
 8007c92:	f7ff bf31 	b.w	8007af8 <__retarget_lock_acquire_recursive>
 8007c96:	bf00      	nop
 8007c98:	20001d84 	.word	0x20001d84

08007c9c <__malloc_unlock>:
 8007c9c:	4801      	ldr	r0, [pc, #4]	; (8007ca4 <__malloc_unlock+0x8>)
 8007c9e:	f7ff bf2c 	b.w	8007afa <__retarget_lock_release_recursive>
 8007ca2:	bf00      	nop
 8007ca4:	20001d84 	.word	0x20001d84

08007ca8 <_free_r>:
 8007ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007caa:	2900      	cmp	r1, #0
 8007cac:	d048      	beq.n	8007d40 <_free_r+0x98>
 8007cae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cb2:	9001      	str	r0, [sp, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f1a1 0404 	sub.w	r4, r1, #4
 8007cba:	bfb8      	it	lt
 8007cbc:	18e4      	addlt	r4, r4, r3
 8007cbe:	f7ff ffe7 	bl	8007c90 <__malloc_lock>
 8007cc2:	4a20      	ldr	r2, [pc, #128]	; (8007d44 <_free_r+0x9c>)
 8007cc4:	9801      	ldr	r0, [sp, #4]
 8007cc6:	6813      	ldr	r3, [r2, #0]
 8007cc8:	4615      	mov	r5, r2
 8007cca:	b933      	cbnz	r3, 8007cda <_free_r+0x32>
 8007ccc:	6063      	str	r3, [r4, #4]
 8007cce:	6014      	str	r4, [r2, #0]
 8007cd0:	b003      	add	sp, #12
 8007cd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cd6:	f7ff bfe1 	b.w	8007c9c <__malloc_unlock>
 8007cda:	42a3      	cmp	r3, r4
 8007cdc:	d90b      	bls.n	8007cf6 <_free_r+0x4e>
 8007cde:	6821      	ldr	r1, [r4, #0]
 8007ce0:	1862      	adds	r2, r4, r1
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	bf04      	itt	eq
 8007ce6:	681a      	ldreq	r2, [r3, #0]
 8007ce8:	685b      	ldreq	r3, [r3, #4]
 8007cea:	6063      	str	r3, [r4, #4]
 8007cec:	bf04      	itt	eq
 8007cee:	1852      	addeq	r2, r2, r1
 8007cf0:	6022      	streq	r2, [r4, #0]
 8007cf2:	602c      	str	r4, [r5, #0]
 8007cf4:	e7ec      	b.n	8007cd0 <_free_r+0x28>
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	b10b      	cbz	r3, 8007d00 <_free_r+0x58>
 8007cfc:	42a3      	cmp	r3, r4
 8007cfe:	d9fa      	bls.n	8007cf6 <_free_r+0x4e>
 8007d00:	6811      	ldr	r1, [r2, #0]
 8007d02:	1855      	adds	r5, r2, r1
 8007d04:	42a5      	cmp	r5, r4
 8007d06:	d10b      	bne.n	8007d20 <_free_r+0x78>
 8007d08:	6824      	ldr	r4, [r4, #0]
 8007d0a:	4421      	add	r1, r4
 8007d0c:	1854      	adds	r4, r2, r1
 8007d0e:	42a3      	cmp	r3, r4
 8007d10:	6011      	str	r1, [r2, #0]
 8007d12:	d1dd      	bne.n	8007cd0 <_free_r+0x28>
 8007d14:	681c      	ldr	r4, [r3, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	6053      	str	r3, [r2, #4]
 8007d1a:	4421      	add	r1, r4
 8007d1c:	6011      	str	r1, [r2, #0]
 8007d1e:	e7d7      	b.n	8007cd0 <_free_r+0x28>
 8007d20:	d902      	bls.n	8007d28 <_free_r+0x80>
 8007d22:	230c      	movs	r3, #12
 8007d24:	6003      	str	r3, [r0, #0]
 8007d26:	e7d3      	b.n	8007cd0 <_free_r+0x28>
 8007d28:	6825      	ldr	r5, [r4, #0]
 8007d2a:	1961      	adds	r1, r4, r5
 8007d2c:	428b      	cmp	r3, r1
 8007d2e:	bf04      	itt	eq
 8007d30:	6819      	ldreq	r1, [r3, #0]
 8007d32:	685b      	ldreq	r3, [r3, #4]
 8007d34:	6063      	str	r3, [r4, #4]
 8007d36:	bf04      	itt	eq
 8007d38:	1949      	addeq	r1, r1, r5
 8007d3a:	6021      	streq	r1, [r4, #0]
 8007d3c:	6054      	str	r4, [r2, #4]
 8007d3e:	e7c7      	b.n	8007cd0 <_free_r+0x28>
 8007d40:	b003      	add	sp, #12
 8007d42:	bd30      	pop	{r4, r5, pc}
 8007d44:	20001a60 	.word	0x20001a60

08007d48 <_init>:
 8007d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4a:	bf00      	nop
 8007d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d4e:	bc08      	pop	{r3}
 8007d50:	469e      	mov	lr, r3
 8007d52:	4770      	bx	lr

08007d54 <_fini>:
 8007d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d56:	bf00      	nop
 8007d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d5a:	bc08      	pop	{r3}
 8007d5c:	469e      	mov	lr, r3
 8007d5e:	4770      	bx	lr
