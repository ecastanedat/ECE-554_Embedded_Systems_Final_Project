
nucleo-STM32G431-Final-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba08  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800bbe8  0800bbe8  0001bbe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c134  0800c134  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c134  0800c134  0001c134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c13c  0800c13c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c13c  0800c13c  0001c13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c140  0800c140  0001c140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003124  200001e0  0800c324  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003304  0800c324  00023304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ddc2  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c64  00000000  00000000  0004dfd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb8  00000000  00000000  00052c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019f0  00000000  00000000  000547f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000235a7  00000000  00000000  000561e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ff8d  00000000  00000000  00079787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d813a  00000000  00000000  00099714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017184e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008630  00000000  00000000  001718a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bbd0 	.word	0x0800bbd0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800bbd0 	.word	0x0800bbd0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <print_to_console>:
#include "Globals.h"


/* Function prototypes -----------------------------------------------*/
void print_to_console(char *myString)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b09c      	sub	sp, #112	; 0x70
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	uint8_t buffer[100];

	strcpy((char*)buffer, myString);
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f008 fdb7 	bl	8009b12 <strcpy>
	strcat((char*)buffer, "\n");
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff f939 	bl	8000220 <strlen>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4912      	ldr	r1, [pc, #72]	; (8001004 <print_to_console+0x74>)
 8000fba:	461a      	mov	r2, r3
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	8013      	strh	r3, [r2, #0]
	strcat((char*)buffer, "\r");
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff f92a 	bl	8000220 <strlen>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	461a      	mov	r2, r3
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	4413      	add	r3, r2
 8000fd6:	490c      	ldr	r1, [pc, #48]	; (8001008 <print_to_console+0x78>)
 8000fd8:	461a      	mov	r2, r3
 8000fda:	460b      	mov	r3, r1
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff f91b 	bl	8000220 <strlen>
 8000fea:	4603      	mov	r3, r0
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	f107 010c 	add.w	r1, r7, #12
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <print_to_console+0x7c>)
 8000ff8:	f004 f8a0 	bl	800513c <HAL_UART_Transmit>

}
 8000ffc:	bf00      	nop
 8000ffe:	3770      	adds	r7, #112	; 0x70
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	0800bbe8 	.word	0x0800bbe8
 8001008:	0800bbec 	.word	0x0800bbec
 800100c:	20003220 	.word	0x20003220

08001010 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Controller */
  ControllerHandle = osThreadNew(Controller_handler, NULL, &Controller_attributes);
 8001014:	4a14      	ldr	r2, [pc, #80]	; (8001068 <MX_FREERTOS_Init+0x58>)
 8001016:	2100      	movs	r1, #0
 8001018:	4814      	ldr	r0, [pc, #80]	; (800106c <MX_FREERTOS_Init+0x5c>)
 800101a:	f004 ff07 	bl	8005e2c <osThreadNew>
 800101e:	4603      	mov	r3, r0
 8001020:	4a13      	ldr	r2, [pc, #76]	; (8001070 <MX_FREERTOS_Init+0x60>)
 8001022:	6013      	str	r3, [r2, #0]

  /* creation of led_green */
  led_greenHandle = osThreadNew(led_green_handler, NULL, &led_green_attributes);
 8001024:	4a13      	ldr	r2, [pc, #76]	; (8001074 <MX_FREERTOS_Init+0x64>)
 8001026:	2100      	movs	r1, #0
 8001028:	4813      	ldr	r0, [pc, #76]	; (8001078 <MX_FREERTOS_Init+0x68>)
 800102a:	f004 feff 	bl	8005e2c <osThreadNew>
 800102e:	4603      	mov	r3, r0
 8001030:	4a12      	ldr	r2, [pc, #72]	; (800107c <MX_FREERTOS_Init+0x6c>)
 8001032:	6013      	str	r3, [r2, #0]

  /* creation of ultra_sensor_tr */
  ultra_sensor_trHandle = osThreadNew(Start_ultra_sensor_tr, NULL, &ultra_sensor_tr_attributes);
 8001034:	4a12      	ldr	r2, [pc, #72]	; (8001080 <MX_FREERTOS_Init+0x70>)
 8001036:	2100      	movs	r1, #0
 8001038:	4812      	ldr	r0, [pc, #72]	; (8001084 <MX_FREERTOS_Init+0x74>)
 800103a:	f004 fef7 	bl	8005e2c <osThreadNew>
 800103e:	4603      	mov	r3, r0
 8001040:	4a11      	ldr	r2, [pc, #68]	; (8001088 <MX_FREERTOS_Init+0x78>)
 8001042:	6013      	str	r3, [r2, #0]

  /* creation of led_yellow */
  led_yellowHandle = osThreadNew(led_yellow_handler, NULL, &led_yellow_attributes);
 8001044:	4a11      	ldr	r2, [pc, #68]	; (800108c <MX_FREERTOS_Init+0x7c>)
 8001046:	2100      	movs	r1, #0
 8001048:	4811      	ldr	r0, [pc, #68]	; (8001090 <MX_FREERTOS_Init+0x80>)
 800104a:	f004 feef 	bl	8005e2c <osThreadNew>
 800104e:	4603      	mov	r3, r0
 8001050:	4a10      	ldr	r2, [pc, #64]	; (8001094 <MX_FREERTOS_Init+0x84>)
 8001052:	6013      	str	r3, [r2, #0]

  /* creation of led_red */
  led_redHandle = osThreadNew(led_red_handler, NULL, &led_red_attributes);
 8001054:	4a10      	ldr	r2, [pc, #64]	; (8001098 <MX_FREERTOS_Init+0x88>)
 8001056:	2100      	movs	r1, #0
 8001058:	4810      	ldr	r0, [pc, #64]	; (800109c <MX_FREERTOS_Init+0x8c>)
 800105a:	f004 fee7 	bl	8005e2c <osThreadNew>
 800105e:	4603      	mov	r3, r0
 8001060:	4a0f      	ldr	r2, [pc, #60]	; (80010a0 <MX_FREERTOS_Init+0x90>)
 8001062:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	0800bc4c 	.word	0x0800bc4c
 800106c:	080010a9 	.word	0x080010a9
 8001070:	20002f64 	.word	0x20002f64
 8001074:	0800bc70 	.word	0x0800bc70
 8001078:	0800137d 	.word	0x0800137d
 800107c:	20002f6c 	.word	0x20002f6c
 8001080:	0800bc94 	.word	0x0800bc94
 8001084:	080013dd 	.word	0x080013dd
 8001088:	20002f60 	.word	0x20002f60
 800108c:	0800bcb8 	.word	0x0800bcb8
 8001090:	08001425 	.word	0x08001425
 8001094:	20002f70 	.word	0x20002f70
 8001098:	0800bcdc 	.word	0x0800bcdc
 800109c:	08001485 	.word	0x08001485
 80010a0:	20002f74 	.word	0x20002f74
 80010a4:	00000000 	.word	0x00000000

080010a8 <Controller_handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Controller_handler */
void Controller_handler(void *argument)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b090      	sub	sp, #64	; 0x40
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Controller_handler */
  uint32_t timer_ticks = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t reversed_array[8], reversed_array_size = 0, reversed_array_elem = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80010ba:	2300      	movs	r3, #0
 80010bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  float distance;
  char string_number[20];
  SM_STATES state = INIT;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  /* Infinite loop */
  for(;;)
  {
	  /* USER CODE BEGIN SM_Controller */
	  switch(state)
 80010c6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	f000 8138 	beq.w	8001340 <Controller_handler+0x298>
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	f300 8136 	bgt.w	8001342 <Controller_handler+0x29a>
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d002      	beq.n	80010e0 <Controller_handler+0x38>
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d01e      	beq.n	800111c <Controller_handler+0x74>
					  break;

		  case ERROR_handling:  for(;;){}
			                    break;

		  default:     break;
 80010de:	e130      	b.n	8001342 <Controller_handler+0x29a>
			  	  	  xTaskNotify((TaskHandle_t)led_greenHandle, ON, eSetValueWithOverwrite);
 80010e0:	4b9d      	ldr	r3, [pc, #628]	; (8001358 <Controller_handler+0x2b0>)
 80010e2:	6818      	ldr	r0, [r3, #0]
 80010e4:	2300      	movs	r3, #0
 80010e6:	2203      	movs	r2, #3
 80010e8:	2101      	movs	r1, #1
 80010ea:	f006 fcb7 	bl	8007a5c <xTaskGenericNotify>
			  	  	  xTaskNotify((TaskHandle_t)led_yellowHandle, OFF, eSetValueWithOverwrite);
 80010ee:	4b9b      	ldr	r3, [pc, #620]	; (800135c <Controller_handler+0x2b4>)
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	2300      	movs	r3, #0
 80010f4:	2203      	movs	r2, #3
 80010f6:	2100      	movs	r1, #0
 80010f8:	f006 fcb0 	bl	8007a5c <xTaskGenericNotify>
			  	  	  xTaskNotify((TaskHandle_t)led_redHandle, OFF, eSetValueWithOverwrite);
 80010fc:	4b98      	ldr	r3, [pc, #608]	; (8001360 <Controller_handler+0x2b8>)
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	2300      	movs	r3, #0
 8001102:	2203      	movs	r2, #3
 8001104:	2100      	movs	r1, #0
 8001106:	f006 fca9 	bl	8007a5c <xTaskGenericNotify>
			  	  	  memory.downcounter = RESTART;
 800110a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110e:	60fb      	str	r3, [r7, #12]
			  	  	  memory.enable = OFF;
 8001110:	2300      	movs	r3, #0
 8001112:	743b      	strb	r3, [r7, #16]
			  	  	  state = MAIN;
 8001114:	2301      	movs	r3, #1
 8001116:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					  break;
 800111a:	e115      	b.n	8001348 <Controller_handler+0x2a0>
					   xTaskNotifyWait(0, 0, &timer_ticks, pdMS_TO_TICKS(1));
 800111c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001120:	2301      	movs	r3, #1
 8001122:	2100      	movs	r1, #0
 8001124:	2000      	movs	r0, #0
 8001126:	f006 fc39 	bl	800799c <xTaskNotifyWait>
					   if(timer_ticks > 2000)
 800112a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001130:	f240 8109 	bls.w	8001346 <Controller_handler+0x29e>
						   if(memory.enable == ON)
 8001134:	7c3b      	ldrb	r3, [r7, #16]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d104      	bne.n	8001144 <Controller_handler+0x9c>
							   timer_ticks = memory.ticks;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	637b      	str	r3, [r7, #52]	; 0x34
							   memory.downcounter--;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	3b01      	subs	r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
						  distance = ((SPEED_OF_SOUND * TIMER_PERIOD * timer_ticks)/2);
 8001144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fa04 	bl	8000554 <__aeabi_ui2d>
 800114c:	a380      	add	r3, pc, #512	; (adr r3, 8001350 <Controller_handler+0x2a8>)
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	f7ff fa79 	bl	8000648 <__aeabi_dmul>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001166:	f7ff fb99 	bl	800089c <__aeabi_ddiv>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	f7ff fd41 	bl	8000bf8 <__aeabi_d2f>
 8001176:	4603      	mov	r3, r0
 8001178:	63bb      	str	r3, [r7, #56]	; 0x38
						  sprintf(string_number, "%0.3f", distance);
 800117a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800117c:	f7ff fa0c 	bl	8000598 <__aeabi_f2d>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	f107 0018 	add.w	r0, r7, #24
 8001188:	4976      	ldr	r1, [pc, #472]	; (8001364 <Controller_handler+0x2bc>)
 800118a:	f008 fc5f 	bl	8009a4c <siprintf>
						  print_to_console(string_number);
 800118e:	f107 0318 	add.w	r3, r7, #24
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fefc 	bl	8000f90 <print_to_console>
						  if(distance >= 0 && distance <= distance_danger_thershold)
 8001198:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800119c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a4:	db32      	blt.n	800120c <Controller_handler+0x164>
 80011a6:	4b70      	ldr	r3, [pc, #448]	; (8001368 <Controller_handler+0x2c0>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80011b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011be:	d825      	bhi.n	800120c <Controller_handler+0x164>
							   xTaskNotify((TaskHandle_t)led_redHandle, TOGGLE, eSetValueWithOverwrite);
 80011c0:	4b67      	ldr	r3, [pc, #412]	; (8001360 <Controller_handler+0x2b8>)
 80011c2:	6818      	ldr	r0, [r3, #0]
 80011c4:	2300      	movs	r3, #0
 80011c6:	2203      	movs	r2, #3
 80011c8:	2102      	movs	r1, #2
 80011ca:	f006 fc47 	bl	8007a5c <xTaskGenericNotify>
							   xTaskNotify((TaskHandle_t)led_greenHandle, OFF, eSetValueWithOverwrite);
 80011ce:	4b62      	ldr	r3, [pc, #392]	; (8001358 <Controller_handler+0x2b0>)
 80011d0:	6818      	ldr	r0, [r3, #0]
 80011d2:	2300      	movs	r3, #0
 80011d4:	2203      	movs	r2, #3
 80011d6:	2100      	movs	r1, #0
 80011d8:	f006 fc40 	bl	8007a5c <xTaskGenericNotify>
							   xTaskNotify((TaskHandle_t)led_yellowHandle, OFF, eSetValueWithOverwrite);
 80011dc:	4b5f      	ldr	r3, [pc, #380]	; (800135c <Controller_handler+0x2b4>)
 80011de:	6818      	ldr	r0, [r3, #0]
 80011e0:	2300      	movs	r3, #0
 80011e2:	2203      	movs	r2, #3
 80011e4:	2100      	movs	r1, #0
 80011e6:	f006 fc39 	bl	8007a5c <xTaskGenericNotify>
							   if(memory.downcounter == 0)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d105      	bne.n	80011fc <Controller_handler+0x154>
								   memory.enable = OFF;
 80011f0:	2300      	movs	r3, #0
 80011f2:	743b      	strb	r3, [r7, #16]
								   memory.downcounter = RESTART;
 80011f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	e003      	b.n	8001204 <Controller_handler+0x15c>
								   memory.enable = ON;
 80011fc:	2301      	movs	r3, #1
 80011fe:	743b      	strb	r3, [r7, #16]
								   memory.ticks = timer_ticks;
 8001200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001202:	617b      	str	r3, [r7, #20]
							   CAN_Tx_Data[7] = 0x02;
 8001204:	4b59      	ldr	r3, [pc, #356]	; (800136c <Controller_handler+0x2c4>)
 8001206:	2202      	movs	r2, #2
 8001208:	71da      	strb	r2, [r3, #7]
 800120a:	e05b      	b.n	80012c4 <Controller_handler+0x21c>
						  else if(distance > distance_danger_thershold && distance <= distance_warning_thershold)
 800120c:	4b56      	ldr	r3, [pc, #344]	; (8001368 <Controller_handler+0x2c0>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	ee07 3a90 	vmov	s15, r3
 8001214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001218:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800121c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001224:	dd36      	ble.n	8001294 <Controller_handler+0x1ec>
 8001226:	4b52      	ldr	r3, [pc, #328]	; (8001370 <Controller_handler+0x2c8>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001232:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001236:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800123a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123e:	d829      	bhi.n	8001294 <Controller_handler+0x1ec>
								xTaskNotify((TaskHandle_t)led_yellowHandle, ON, eSetValueWithOverwrite);
 8001240:	4b46      	ldr	r3, [pc, #280]	; (800135c <Controller_handler+0x2b4>)
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	2300      	movs	r3, #0
 8001246:	2203      	movs	r2, #3
 8001248:	2101      	movs	r1, #1
 800124a:	f006 fc07 	bl	8007a5c <xTaskGenericNotify>
								xTaskNotify((TaskHandle_t)led_greenHandle, OFF, eSetValueWithOverwrite);
 800124e:	4b42      	ldr	r3, [pc, #264]	; (8001358 <Controller_handler+0x2b0>)
 8001250:	6818      	ldr	r0, [r3, #0]
 8001252:	2300      	movs	r3, #0
 8001254:	2203      	movs	r2, #3
 8001256:	2100      	movs	r1, #0
 8001258:	f006 fc00 	bl	8007a5c <xTaskGenericNotify>
							    xTaskNotify((TaskHandle_t)led_redHandle, OFF, eSetValueWithOverwrite);
 800125c:	4b40      	ldr	r3, [pc, #256]	; (8001360 <Controller_handler+0x2b8>)
 800125e:	6818      	ldr	r0, [r3, #0]
 8001260:	2300      	movs	r3, #0
 8001262:	2203      	movs	r2, #3
 8001264:	2100      	movs	r1, #0
 8001266:	f006 fbf9 	bl	8007a5c <xTaskGenericNotify>
								memory.enable = ON;
 800126a:	2301      	movs	r3, #1
 800126c:	743b      	strb	r3, [r7, #16]
								memory.ticks = timer_ticks;
 800126e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001270:	617b      	str	r3, [r7, #20]
								if(memory.downcounter == 0)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d105      	bne.n	8001284 <Controller_handler+0x1dc>
								   memory.enable = OFF;
 8001278:	2300      	movs	r3, #0
 800127a:	743b      	strb	r3, [r7, #16]
								   memory.downcounter = RESTART;
 800127c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	e003      	b.n	800128c <Controller_handler+0x1e4>
								   memory.enable = ON;
 8001284:	2301      	movs	r3, #1
 8001286:	743b      	strb	r3, [r7, #16]
								   memory.ticks = timer_ticks;
 8001288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800128a:	617b      	str	r3, [r7, #20]
								CAN_Tx_Data[7] = 0x01;
 800128c:	4b37      	ldr	r3, [pc, #220]	; (800136c <Controller_handler+0x2c4>)
 800128e:	2201      	movs	r2, #1
 8001290:	71da      	strb	r2, [r3, #7]
 8001292:	e017      	b.n	80012c4 <Controller_handler+0x21c>
							  xTaskNotify((TaskHandle_t)led_yellowHandle, OFF, eSetValueWithOverwrite);
 8001294:	4b31      	ldr	r3, [pc, #196]	; (800135c <Controller_handler+0x2b4>)
 8001296:	6818      	ldr	r0, [r3, #0]
 8001298:	2300      	movs	r3, #0
 800129a:	2203      	movs	r2, #3
 800129c:	2100      	movs	r1, #0
 800129e:	f006 fbdd 	bl	8007a5c <xTaskGenericNotify>
							  xTaskNotify((TaskHandle_t)led_redHandle, OFF, eSetValueWithOverwrite);
 80012a2:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <Controller_handler+0x2b8>)
 80012a4:	6818      	ldr	r0, [r3, #0]
 80012a6:	2300      	movs	r3, #0
 80012a8:	2203      	movs	r2, #3
 80012aa:	2100      	movs	r1, #0
 80012ac:	f006 fbd6 	bl	8007a5c <xTaskGenericNotify>
							  xTaskNotify((TaskHandle_t)led_greenHandle, ON, eSetValueWithOverwrite);
 80012b0:	4b29      	ldr	r3, [pc, #164]	; (8001358 <Controller_handler+0x2b0>)
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	2300      	movs	r3, #0
 80012b6:	2203      	movs	r2, #3
 80012b8:	2101      	movs	r1, #1
 80012ba:	f006 fbcf 	bl	8007a5c <xTaskGenericNotify>
							  CAN_Tx_Data[7] = 0x00;
 80012be:	4b2b      	ldr	r3, [pc, #172]	; (800136c <Controller_handler+0x2c4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	71da      	strb	r2, [r3, #7]
						  reversed_array_size = number_to_byte_arr(reversed_array, (uint8_t)distance);
 80012c4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80012c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012cc:	edc7 7a00 	vstr	s15, [r7]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 f904 	bl	80014ea <number_to_byte_arr>
 80012e2:	4603      	mov	r3, r0
 80012e4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
						  reversed_array_elem = reversed_array_size;
 80012e8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80012ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						  for(uint8_t counter = 0; counter <= reversed_array_size; counter++)
 80012f0:	2300      	movs	r3, #0
 80012f2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80012f6:	e014      	b.n	8001322 <Controller_handler+0x27a>
							  CAN_Tx_Data[counter] = reversed_array[reversed_array_elem];
 80012f8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80012fc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001300:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001304:	440a      	add	r2, r1
 8001306:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 800130a:	4a18      	ldr	r2, [pc, #96]	; (800136c <Controller_handler+0x2c4>)
 800130c:	54d1      	strb	r1, [r2, r3]
							  reversed_array_elem--;
 800130e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001312:	3b01      	subs	r3, #1
 8001314:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						  for(uint8_t counter = 0; counter <= reversed_array_size; counter++)
 8001318:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800131c:	3301      	adds	r3, #1
 800131e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001322:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001326:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800132a:	429a      	cmp	r2, r3
 800132c:	d9e4      	bls.n	80012f8 <Controller_handler+0x250>
						  reversed_array_size = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
						  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, CAN_Tx_Data); //Sends the distance to the CAN network.
 8001334:	4a0d      	ldr	r2, [pc, #52]	; (800136c <Controller_handler+0x2c4>)
 8001336:	490f      	ldr	r1, [pc, #60]	; (8001374 <Controller_handler+0x2cc>)
 8001338:	480f      	ldr	r0, [pc, #60]	; (8001378 <Controller_handler+0x2d0>)
 800133a:	f001 fa8e 	bl	800285a <HAL_FDCAN_AddMessageToTxFifoQ>
					  break;
 800133e:	e002      	b.n	8001346 <Controller_handler+0x29e>
		  case ERROR_handling:  for(;;){}
 8001340:	e7fe      	b.n	8001340 <Controller_handler+0x298>
		  default:     break;
 8001342:	bf00      	nop
 8001344:	e6bf      	b.n	80010c6 <Controller_handler+0x1e>
					  break;
 8001346:	bf00      	nop
	  switch(state)
 8001348:	e6bd      	b.n	80010c6 <Controller_handler+0x1e>
 800134a:	bf00      	nop
 800134c:	f3af 8000 	nop.w
 8001350:	3a68b19a 	.word	0x3a68b19a
 8001354:	3f3c193b 	.word	0x3f3c193b
 8001358:	20002f6c 	.word	0x20002f6c
 800135c:	20002f70 	.word	0x20002f70
 8001360:	20002f74 	.word	0x20002f74
 8001364:	0800bc2c 	.word	0x0800bc2c
 8001368:	20002f78 	.word	0x20002f78
 800136c:	20003038 	.word	0x20003038
 8001370:	20002f68 	.word	0x20002f68
 8001374:	20002fec 	.word	0x20002fec
 8001378:	20003040 	.word	0x20003040

0800137c <led_green_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_green_handler */
void led_green_handler(void *argument)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  //HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
	  status = xTaskNotifyWait(0, 0, &flag, pdMS_TO_TICKS(10));
 8001384:	f107 0208 	add.w	r2, r7, #8
 8001388:	230a      	movs	r3, #10
 800138a:	2100      	movs	r1, #0
 800138c:	2000      	movs	r0, #0
 800138e:	f006 fb05 	bl	800799c <xTaskNotifyWait>
 8001392:	60f8      	str	r0, [r7, #12]

	  if(status == pdPASS)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d11c      	bne.n	80013d4 <led_green_handler+0x58>
	  {
		  switch(flag)
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d013      	beq.n	80013c8 <led_green_handler+0x4c>
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d819      	bhi.n	80013d8 <led_green_handler+0x5c>
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d008      	beq.n	80013ba <led_green_handler+0x3e>
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d115      	bne.n	80013d8 <led_green_handler+0x5c>
		  {
			  case ON:     HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, ON);   break;
 80013ac:	2201      	movs	r2, #1
 80013ae:	2101      	movs	r1, #1
 80013b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b4:	f002 f864 	bl	8003480 <HAL_GPIO_WritePin>
 80013b8:	e00f      	b.n	80013da <led_green_handler+0x5e>
			  case OFF:    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, OFF);  break;
 80013ba:	2200      	movs	r2, #0
 80013bc:	2101      	movs	r1, #1
 80013be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c2:	f002 f85d 	bl	8003480 <HAL_GPIO_WritePin>
 80013c6:	e008      	b.n	80013da <led_green_handler+0x5e>
			  case TOGGLE: HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);      break;
 80013c8:	2101      	movs	r1, #1
 80013ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ce:	f002 f86f 	bl	80034b0 <HAL_GPIO_TogglePin>
 80013d2:	e002      	b.n	80013da <led_green_handler+0x5e>
			  default:                                                                  break;
		  }
	  }
 80013d4:	bf00      	nop
 80013d6:	e7d5      	b.n	8001384 <led_green_handler+0x8>
			  default:                                                                  break;
 80013d8:	bf00      	nop
	  status = xTaskNotifyWait(0, 0, &flag, pdMS_TO_TICKS(10));
 80013da:	e7d3      	b.n	8001384 <led_green_handler+0x8>

080013dc <Start_ultra_sensor_tr>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_ultra_sensor_tr */
void Start_ultra_sensor_tr(void *argument)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_ultra_sensor_tr */
  TickType_t xLastWakeTime;
  HAL_TIM_Base_Start(&htim8);
 80013e4:	480e      	ldr	r0, [pc, #56]	; (8001420 <Start_ultra_sensor_tr+0x44>)
 80013e6:	f003 f8f7 	bl	80045d8 <HAL_TIM_Base_Start>

  xLastWakeTime = xTaskGetTickCount();
 80013ea:	f005 ff0b 	bl	8007204 <xTaskGetTickCount>
 80013ee:	4603      	mov	r3, r0
 80013f0:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(ULTR_TRG_GPIO_Port, ULTR_TRG_Pin, GPIO_PIN_SET);
 80013f2:	2201      	movs	r2, #1
 80013f4:	2110      	movs	r1, #16
 80013f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fa:	f002 f841 	bl	8003480 <HAL_GPIO_WritePin>
	  delay_us(100);  //The HC-SR10 needs a delay of 10 us as a minimum for the TRIG to happen.
 80013fe:	2064      	movs	r0, #100	; 0x64
 8001400:	f000 fe20 	bl	8002044 <delay_us>
	  HAL_GPIO_WritePin(ULTR_TRG_GPIO_Port, ULTR_TRG_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	2110      	movs	r1, #16
 8001408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140c:	f002 f838 	bl	8003480 <HAL_GPIO_WritePin>

      vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(10));
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	210a      	movs	r1, #10
 8001416:	4618      	mov	r0, r3
 8001418:	f005 fd26 	bl	8006e68 <vTaskDelayUntil>
	  HAL_GPIO_WritePin(ULTR_TRG_GPIO_Port, ULTR_TRG_Pin, GPIO_PIN_SET);
 800141c:	e7e9      	b.n	80013f2 <Start_ultra_sensor_tr+0x16>
 800141e:	bf00      	nop
 8001420:	200030f0 	.word	0x200030f0

08001424 <led_yellow_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_yellow_handler */
void led_yellow_handler(void *argument)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  BaseType_t status;

  /* Infinite loop */
  for(;;)
  {
	  status = xTaskNotifyWait(0, 0, &flag, pdMS_TO_TICKS(10));
 800142c:	f107 0208 	add.w	r2, r7, #8
 8001430:	230a      	movs	r3, #10
 8001432:	2100      	movs	r1, #0
 8001434:	2000      	movs	r0, #0
 8001436:	f006 fab1 	bl	800799c <xTaskNotifyWait>
 800143a:	60f8      	str	r0, [r7, #12]

	  if(status == pdPASS)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d11c      	bne.n	800147c <led_yellow_handler+0x58>
	  {
		  switch(flag)
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	2b02      	cmp	r3, #2
 8001446:	d013      	beq.n	8001470 <led_yellow_handler+0x4c>
 8001448:	2b02      	cmp	r3, #2
 800144a:	d819      	bhi.n	8001480 <led_yellow_handler+0x5c>
 800144c:	2b00      	cmp	r3, #0
 800144e:	d008      	beq.n	8001462 <led_yellow_handler+0x3e>
 8001450:	2b01      	cmp	r3, #1
 8001452:	d115      	bne.n	8001480 <led_yellow_handler+0x5c>
		  {
			  case ON:     HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, ON);  break;
 8001454:	2201      	movs	r2, #1
 8001456:	2120      	movs	r1, #32
 8001458:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145c:	f002 f810 	bl	8003480 <HAL_GPIO_WritePin>
 8001460:	e00f      	b.n	8001482 <led_yellow_handler+0x5e>
			  case OFF:    HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, OFF); break;
 8001462:	2200      	movs	r2, #0
 8001464:	2120      	movs	r1, #32
 8001466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146a:	f002 f809 	bl	8003480 <HAL_GPIO_WritePin>
 800146e:	e008      	b.n	8001482 <led_yellow_handler+0x5e>
			  case TOGGLE: HAL_GPIO_TogglePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin);     break;
 8001470:	2120      	movs	r1, #32
 8001472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001476:	f002 f81b 	bl	80034b0 <HAL_GPIO_TogglePin>
 800147a:	e002      	b.n	8001482 <led_yellow_handler+0x5e>
			  default:                                                                   break;
		  }
	  }
 800147c:	bf00      	nop
 800147e:	e7d5      	b.n	800142c <led_yellow_handler+0x8>
			  default:                                                                   break;
 8001480:	bf00      	nop
	  status = xTaskNotifyWait(0, 0, &flag, pdMS_TO_TICKS(10));
 8001482:	e7d3      	b.n	800142c <led_yellow_handler+0x8>

08001484 <led_red_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_red_handler */
void led_red_handler(void *argument)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  BaseType_t status;

  /* Infinite loop */
  for(;;)
  {
	  status = xTaskNotifyWait(0, 0, &flag, pdMS_TO_TICKS(10));
 800148c:	f107 0208 	add.w	r2, r7, #8
 8001490:	230a      	movs	r3, #10
 8001492:	2100      	movs	r1, #0
 8001494:	2000      	movs	r0, #0
 8001496:	f006 fa81 	bl	800799c <xTaskNotifyWait>
 800149a:	60f8      	str	r0, [r7, #12]

	  if(status == pdTRUE)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d11f      	bne.n	80014e2 <led_red_handler+0x5e>
	  {
		  switch(flag)
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d013      	beq.n	80014d0 <led_red_handler+0x4c>
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d81c      	bhi.n	80014e6 <led_red_handler+0x62>
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d008      	beq.n	80014c2 <led_red_handler+0x3e>
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d118      	bne.n	80014e6 <led_red_handler+0x62>
		  {
			  case ON:     HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, ON);  break;
 80014b4:	2201      	movs	r2, #1
 80014b6:	2140      	movs	r1, #64	; 0x40
 80014b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014bc:	f001 ffe0 	bl	8003480 <HAL_GPIO_WritePin>
 80014c0:	e012      	b.n	80014e8 <led_red_handler+0x64>
			  case OFF:    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, OFF); break;
 80014c2:	2200      	movs	r2, #0
 80014c4:	2140      	movs	r1, #64	; 0x40
 80014c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ca:	f001 ffd9 	bl	8003480 <HAL_GPIO_WritePin>
 80014ce:	e00b      	b.n	80014e8 <led_red_handler+0x64>
			  case TOGGLE: HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 80014d0:	2140      	movs	r1, #64	; 0x40
 80014d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d6:	f001 ffeb 	bl	80034b0 <HAL_GPIO_TogglePin>
			               vTaskDelay(pdMS_TO_TICKS(100));
 80014da:	2064      	movs	r0, #100	; 0x64
 80014dc:	f005 fd42 	bl	8006f64 <vTaskDelay>
						   break;
 80014e0:	e002      	b.n	80014e8 <led_red_handler+0x64>
			  default:     break;
		  }
	  }
 80014e2:	bf00      	nop
 80014e4:	e7d2      	b.n	800148c <led_red_handler+0x8>
			  default:     break;
 80014e6:	bf00      	nop
	  status = xTaskNotifyWait(0, 0, &flag, pdMS_TO_TICKS(10));
 80014e8:	e7d0      	b.n	800148c <led_red_handler+0x8>

080014ea <number_to_byte_arr>:
* @brief Function that converts a number to a byte array.
* @param argument: Array address, number to convert
* @retval Number or array elements
*/
uint8_t number_to_byte_arr(uint8_t *byte_array, uint32_t number_to_convert)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b085      	sub	sp, #20
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	6039      	str	r1, [r7, #0]
	uint8_t arr_index = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	73fb      	strb	r3, [r7, #15]

	while(number_to_convert > 0)
 80014f8:	e00b      	b.n	8001512 <number_to_byte_arr+0x28>
	{
		byte_array[arr_index] = number_to_convert & 0xFF;
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	4413      	add	r3, r2
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	701a      	strb	r2, [r3, #0]
	    number_to_convert >>= 8;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	0a1b      	lsrs	r3, r3, #8
 800150a:	603b      	str	r3, [r7, #0]
	    arr_index++;
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	3301      	adds	r3, #1
 8001510:	73fb      	strb	r3, [r7, #15]
	while(number_to_convert > 0)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f0      	bne.n	80014fa <number_to_byte_arr+0x10>
	}

	return arr_index - 1;  //Decrease 1 unit due to zero indexing.
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	3b01      	subs	r3, #1
 800151c:	b2db      	uxtb	r3, r3
}
 800151e:	4618      	mov	r0, r3
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001530:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <MX_FDCAN1_Init+0x88>)
 8001532:	4a21      	ldr	r2, [pc, #132]	; (80015b8 <MX_FDCAN1_Init+0x8c>)
 8001534:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <MX_FDCAN1_Init+0x88>)
 8001538:	2200      	movs	r2, #0
 800153a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800153c:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <MX_FDCAN1_Init+0x88>)
 800153e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001542:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <MX_FDCAN1_Init+0x88>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800154a:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <MX_FDCAN1_Init+0x88>)
 800154c:	2201      	movs	r2, #1
 800154e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001550:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <MX_FDCAN1_Init+0x88>)
 8001552:	2200      	movs	r2, #0
 8001554:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001556:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <MX_FDCAN1_Init+0x88>)
 8001558:	2200      	movs	r2, #0
 800155a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <MX_FDCAN1_Init+0x88>)
 800155e:	2201      	movs	r2, #1
 8001560:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <MX_FDCAN1_Init+0x88>)
 8001564:	2210      	movs	r2, #16
 8001566:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 63;
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_FDCAN1_Init+0x88>)
 800156a:	223f      	movs	r2, #63	; 0x3f
 800156c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_FDCAN1_Init+0x88>)
 8001570:	2210      	movs	r2, #16
 8001572:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_FDCAN1_Init+0x88>)
 8001576:	2201      	movs	r2, #1
 8001578:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_FDCAN1_Init+0x88>)
 800157c:	2204      	movs	r2, #4
 800157e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <MX_FDCAN1_Init+0x88>)
 8001582:	2205      	movs	r2, #5
 8001584:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <MX_FDCAN1_Init+0x88>)
 8001588:	2204      	movs	r2, #4
 800158a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_FDCAN1_Init+0x88>)
 800158e:	2201      	movs	r2, #1
 8001590:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <MX_FDCAN1_Init+0x88>)
 8001594:	2200      	movs	r2, #0
 8001596:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_FDCAN1_Init+0x88>)
 800159a:	2200      	movs	r2, #0
 800159c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_FDCAN1_Init+0x88>)
 80015a0:	f000 ff4e 	bl	8002440 <HAL_FDCAN_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80015aa:	f000 fa17 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20003040 	.word	0x20003040
 80015b8:	40006400 	.word	0x40006400

080015bc <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b09a      	sub	sp, #104	; 0x68
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	2244      	movs	r2, #68	; 0x44
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f007 fcee 	bl	8008fbe <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a24      	ldr	r2, [pc, #144]	; (8001678 <HAL_FDCAN_MspInit+0xbc>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d141      	bne.n	8001670 <HAL_FDCAN_MspInit+0xb4>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80015ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80015f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015f6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	4618      	mov	r0, r3
 80015fe:	f002 fda3 	bl	8004148 <HAL_RCCEx_PeriphCLKConfig>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001608:	f000 f9e8 	bl	80019dc <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <HAL_FDCAN_MspInit+0xc0>)
 800160e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001610:	4a1a      	ldr	r2, [pc, #104]	; (800167c <HAL_FDCAN_MspInit+0xc0>)
 8001612:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001616:	6593      	str	r3, [r2, #88]	; 0x58
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <HAL_FDCAN_MspInit+0xc0>)
 800161a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_FDCAN_MspInit+0xc0>)
 8001626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001628:	4a14      	ldr	r2, [pc, #80]	; (800167c <HAL_FDCAN_MspInit+0xc0>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_FDCAN_MspInit+0xc0>)
 8001632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800163c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001640:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800164e:	2309      	movs	r3, #9
 8001650:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001656:	4619      	mov	r1, r3
 8001658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165c:	f001 fd76 	bl	800314c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2105      	movs	r1, #5
 8001664:	2015      	movs	r0, #21
 8001666:	f000 fec3 	bl	80023f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800166a:	2015      	movs	r0, #21
 800166c:	f000 feda 	bl	8002424 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001670:	bf00      	nop
 8001672:	3768      	adds	r7, #104	; 0x68
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40006400 	.word	0x40006400
 800167c:	40021000 	.word	0x40021000

08001680 <FDCAN1_MSG_config>:
  }
}

/* USER CODE BEGIN 1 */
void FDCAN1_MSG_config(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af02      	add	r7, sp, #8
	//CAN_Tx_Data[1] = 0x00;
	//CAN_Tx_Data[2] = 0x00;
	//CAN_Tx_Data[3] = 0x00;

	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001686:	2300      	movs	r3, #0
 8001688:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800168e:	2302      	movs	r3, #2
 8001690:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001692:	2301      	movs	r3, #1
 8001694:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x124;
 8001696:	f44f 7392 	mov.w	r3, #292	; 0x124
 800169a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 800169c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80016a0:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80016a2:	463b      	mov	r3, r7
 80016a4:	4619      	mov	r1, r3
 80016a6:	4824      	ldr	r0, [pc, #144]	; (8001738 <FDCAN1_MSG_config+0xb8>)
 80016a8:	f001 f824 	bl	80026f4 <HAL_FDCAN_ConfigFilter>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <FDCAN1_MSG_config+0x36>
	{
	    Error_Handler();
 80016b2:	f000 f993 	bl	80019dc <Error_Handler>
	}

	/* Configure global filter to reject all non-matching frames */
	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80016b6:	2300      	movs	r3, #0
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2300      	movs	r3, #0
 80016bc:	2202      	movs	r2, #2
 80016be:	2102      	movs	r1, #2
 80016c0:	481d      	ldr	r0, [pc, #116]	; (8001738 <FDCAN1_MSG_config+0xb8>)
 80016c2:	f001 f871 	bl	80027a8 <HAL_FDCAN_ConfigGlobalFilter>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <FDCAN1_MSG_config+0x50>
	{
	    Error_Handler();
 80016cc:	f000 f986 	bl	80019dc <Error_Handler>
	}

	/* Activate Rx FIFO 0 watermark notification */
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80016d0:	2200      	movs	r2, #0
 80016d2:	2101      	movs	r1, #1
 80016d4:	4818      	ldr	r0, [pc, #96]	; (8001738 <FDCAN1_MSG_config+0xb8>)
 80016d6:	f001 f9df 	bl	8002a98 <HAL_FDCAN_ActivateNotification>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <FDCAN1_MSG_config+0x64>
	{
	    Error_Handler();
 80016e0:	f000 f97c 	bl	80019dc <Error_Handler>
	}

	/* Prepare Tx Header */
	TxHeader.Identifier = 0x322;
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <FDCAN1_MSG_config+0xbc>)
 80016e6:	f240 3222 	movw	r2, #802	; 0x322
 80016ea:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <FDCAN1_MSG_config+0xbc>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80016f2:	4b12      	ldr	r3, [pc, #72]	; (800173c <FDCAN1_MSG_config+0xbc>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <FDCAN1_MSG_config+0xbc>)
 80016fa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016fe:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001700:	4b0e      	ldr	r3, [pc, #56]	; (800173c <FDCAN1_MSG_config+0xbc>)
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <FDCAN1_MSG_config+0xbc>)
 8001708:	2200      	movs	r2, #0
 800170a:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <FDCAN1_MSG_config+0xbc>)
 800170e:	2200      	movs	r2, #0
 8001710:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <FDCAN1_MSG_config+0xbc>)
 8001714:	2200      	movs	r2, #0
 8001716:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <FDCAN1_MSG_config+0xbc>)
 800171a:	2200      	movs	r2, #0
 800171c:	621a      	str	r2, [r3, #32]

	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800171e:	4806      	ldr	r0, [pc, #24]	; (8001738 <FDCAN1_MSG_config+0xb8>)
 8001720:	f001 f873 	bl	800280a <HAL_FDCAN_Start>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <FDCAN1_MSG_config+0xae>
	{
	    Error_Handler();
 800172a:	f000 f957 	bl	80019dc <Error_Handler>
	}
}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20003040 	.word	0x20003040
 800173c:	20002fec 	.word	0x20002fec

08001740 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
	/* Retrieve Rx messages from RX FIFO0 */
	HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, CAN_Rx_Data);
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <HAL_FDCAN_RxFifo0Callback+0x40>)
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <HAL_FDCAN_RxFifo0Callback+0x44>)
 800174e:	2140      	movs	r1, #64	; 0x40
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f001 f8c7 	bl	80028e4 <HAL_FDCAN_GetRxMessage>

	/* Display LEDx */
	if ((RxHeader.Identifier == 0x124) && (RxHeader.IdType == FDCAN_STANDARD_ID))
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_FDCAN_RxFifo0Callback+0x44>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
 800175e:	d10b      	bne.n	8001778 <HAL_FDCAN_RxFifo0Callback+0x38>
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <HAL_FDCAN_RxFifo0Callback+0x44>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d107      	bne.n	8001778 <HAL_FDCAN_RxFifo0Callback+0x38>
	{
		distance_danger_thershold = CAN_Rx_Data[0];       //Replace global variable with MUTEX.
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <HAL_FDCAN_RxFifo0Callback+0x40>)
 800176a:	781a      	ldrb	r2, [r3, #0]
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_FDCAN_RxFifo0Callback+0x48>)
 800176e:	701a      	strb	r2, [r3, #0]
	    distance_warning_thershold = CAN_Rx_Data[1];
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <HAL_FDCAN_RxFifo0Callback+0x40>)
 8001772:	785a      	ldrb	r2, [r3, #1]
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8001776:	701a      	strb	r2, [r3, #0]
	}

}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20002fe4 	.word	0x20002fe4
 8001784:	20003010 	.word	0x20003010
 8001788:	20002f78 	.word	0x20002f78
 800178c:	20002f68 	.word	0x20002f68

08001790 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	4b2e      	ldr	r3, [pc, #184]	; (8001860 <MX_GPIO_Init+0xd0>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	4a2d      	ldr	r2, [pc, #180]	; (8001860 <MX_GPIO_Init+0xd0>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b2:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <MX_GPIO_Init+0xd0>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017be:	4b28      	ldr	r3, [pc, #160]	; (8001860 <MX_GPIO_Init+0xd0>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	4a27      	ldr	r2, [pc, #156]	; (8001860 <MX_GPIO_Init+0xd0>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ca:	4b25      	ldr	r3, [pc, #148]	; (8001860 <MX_GPIO_Init+0xd0>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN_LED_Pin|ULTR_TRG_Pin|YELLOW_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2171      	movs	r1, #113	; 0x71
 80017da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017de:	f001 fe4f 	bl	8003480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e8:	481e      	ldr	r0, [pc, #120]	; (8001864 <MX_GPIO_Init+0xd4>)
 80017ea:	f001 fe49 	bl	8003480 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ULTR_TRG_Pin|YELLOW_LED_Pin|RED_LED_Pin;
 80017ee:	2371      	movs	r3, #113	; 0x71
 80017f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	4619      	mov	r1, r3
 8001804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001808:	f001 fca0 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULRT_ECHO_Pin;
 800180c:	2302      	movs	r3, #2
 800180e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001810:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ULRT_ECHO_GPIO_Port, &GPIO_InitStruct);
 800181a:	f107 030c 	add.w	r3, r7, #12
 800181e:	4619      	mov	r1, r3
 8001820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001824:	f001 fc92 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182e:	2301      	movs	r3, #1
 8001830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	4619      	mov	r1, r3
 8001840:	4808      	ldr	r0, [pc, #32]	; (8001864 <MX_GPIO_Init+0xd4>)
 8001842:	f001 fc83 	bl	800314c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2105      	movs	r1, #5
 800184a:	2007      	movs	r0, #7
 800184c:	f000 fdd0 	bl	80023f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001850:	2007      	movs	r0, #7
 8001852:	f000 fde7 	bl	8002424 <HAL_NVIC_EnableIRQ>

}
 8001856:	bf00      	nop
 8001858:	3720      	adds	r7, #32
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000
 8001864:	48000400 	.word	0x48000400

08001868 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af02      	add	r7, sp, #8
 800186e:	4603      	mov	r3, r0
 8001870:	80fb      	strh	r3, [r7, #6]
	GPIO_PinState state;

	if(GPIO_Pin == ULRT_ECHO_Pin) /* Interrupt function for ECHO signal */
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	2b02      	cmp	r3, #2
 8001876:	d11c      	bne.n	80018b2 <HAL_GPIO_EXTI_Callback+0x4a>
	{
		state = HAL_GPIO_ReadPin(ULRT_ECHO_GPIO_Port, ULRT_ECHO_Pin);
 8001878:	2102      	movs	r1, #2
 800187a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187e:	f001 fde7 	bl	8003450 <HAL_GPIO_ReadPin>
 8001882:	4603      	mov	r3, r0
 8001884:	73fb      	strb	r3, [r7, #15]

		switch(state)
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d006      	beq.n	800189a <HAL_GPIO_EXTI_Callback+0x32>
 800188c:	2b01      	cmp	r3, #1
 800188e:	d112      	bne.n	80018b6 <HAL_GPIO_EXTI_Callback+0x4e>
		{
			case GPIO_PIN_SET:   __HAL_TIM_SET_COUNTER(&htim2, 0); break; /*Rising Edge*/
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_GPIO_EXTI_Callback+0x58>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2200      	movs	r2, #0
 8001896:	625a      	str	r2, [r3, #36]	; 0x24
 8001898:	e00e      	b.n	80018b8 <HAL_GPIO_EXTI_Callback+0x50>
			case GPIO_PIN_RESET: xTaskNotifyFromISR((TaskHandle_t)ControllerHandle, __HAL_TIM_GET_COUNTER(&htim2), eSetValueWithOverwrite, NULL); /*Falling Edge*/
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_GPIO_EXTI_Callback+0x5c>)
 800189c:	6818      	ldr	r0, [r3, #0]
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_GPIO_EXTI_Callback+0x58>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80018a4:	2300      	movs	r3, #0
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	2300      	movs	r3, #0
 80018aa:	2203      	movs	r2, #3
 80018ac:	f006 f994 	bl	8007bd8 <xTaskGenericNotifyFromISR>
			                     break;
 80018b0:	e002      	b.n	80018b8 <HAL_GPIO_EXTI_Callback+0x50>
			default: break;
		}
	}
 80018b2:	bf00      	nop
 80018b4:	e000      	b.n	80018b8 <HAL_GPIO_EXTI_Callback+0x50>
			default: break;
 80018b6:	bf00      	nop
}
 80018b8:	bf00      	nop
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20003188 	.word	0x20003188
 80018c4:	20002f64 	.word	0x20002f64

080018c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018cc:	f000 fca1 	bl	8002212 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d0:	f000 f826 	bl	8001920 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  distance_danger_thershold = 10;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <main+0x4c>)
 80018d6:	220a      	movs	r2, #10
 80018d8:	701a      	strb	r2, [r3, #0]
  distance_warning_thershold = 20;
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <main+0x50>)
 80018dc:	2214      	movs	r2, #20
 80018de:	701a      	strb	r2, [r3, #0]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e0:	f7ff ff56 	bl	8001790 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018e4:	f000 fbc8 	bl	8002078 <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 80018e8:	f7ff fe20 	bl	800152c <MX_FDCAN1_Init>
  MX_TIM6_Init();
 80018ec:	f000 fa82 	bl	8001df4 <MX_TIM6_Init>
  MX_TIM7_Init();
 80018f0:	f000 fab6 	bl	8001e60 <MX_TIM7_Init>
  MX_TIM8_Init();
 80018f4:	f000 faea 	bl	8001ecc <MX_TIM8_Init>
  MX_TIM2_Init();
 80018f8:	f000 fa2e 	bl	8001d58 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  FDCAN1_MSG_config();
 80018fc:	f7ff fec0 	bl	8001680 <FDCAN1_MSG_config>
  HAL_TIM_Base_Start(&htim2);
 8001900:	4806      	ldr	r0, [pc, #24]	; (800191c <main+0x54>)
 8001902:	f002 fe69 	bl	80045d8 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001906:	f004 fa47 	bl	8005d98 <osKernelInitialize>
  MX_FREERTOS_Init();
 800190a:	f7ff fb81 	bl	8001010 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800190e:	f004 fa67 	bl	8005de0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001912:	e7fe      	b.n	8001912 <main+0x4a>
 8001914:	20002f78 	.word	0x20002f78
 8001918:	20002f68 	.word	0x20002f68
 800191c:	20003188 	.word	0x20003188

08001920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b094      	sub	sp, #80	; 0x50
 8001924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001926:	f107 0318 	add.w	r3, r7, #24
 800192a:	2238      	movs	r2, #56	; 0x38
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f007 fb45 	bl	8008fbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
 8001940:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001942:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001946:	f001 fde5 	bl	8003514 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800194a:	2302      	movs	r3, #2
 800194c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800194e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001954:	2340      	movs	r3, #64	; 0x40
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001958:	2302      	movs	r3, #2
 800195a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800195c:	2302      	movs	r3, #2
 800195e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001960:	2301      	movs	r3, #1
 8001962:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001964:	230a      	movs	r3, #10
 8001966:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001968:	2302      	movs	r3, #2
 800196a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800196c:	2302      	movs	r3, #2
 800196e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001970:	2302      	movs	r3, #2
 8001972:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001974:	f107 0318 	add.w	r3, r7, #24
 8001978:	4618      	mov	r0, r3
 800197a:	f001 fe7f 	bl	800367c <HAL_RCC_OscConfig>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001984:	f000 f82a 	bl	80019dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001988:	230f      	movs	r3, #15
 800198a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800198c:	2303      	movs	r3, #3
 800198e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	2102      	movs	r1, #2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 f983 	bl	8003cac <HAL_RCC_ClockConfig>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80019ac:	f000 f816 	bl	80019dc <Error_Handler>
  }
}
 80019b0:	bf00      	nop
 80019b2:	3750      	adds	r7, #80	; 0x50
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d101      	bne.n	80019ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019ca:	f000 fc3b 	bl	8002244 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40012c00 	.word	0x40012c00

080019dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e0:	b672      	cpsid	i
}
 80019e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <Error_Handler+0x8>
	...

080019e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_MspInit+0x50>)
 80019f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f2:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <HAL_MspInit+0x50>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6613      	str	r3, [r2, #96]	; 0x60
 80019fa:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <HAL_MspInit+0x50>)
 80019fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <HAL_MspInit+0x50>)
 8001a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0a:	4a0b      	ldr	r2, [pc, #44]	; (8001a38 <HAL_MspInit+0x50>)
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a10:	6593      	str	r3, [r2, #88]	; 0x58
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_MspInit+0x50>)
 8001a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	210f      	movs	r1, #15
 8001a22:	f06f 0001 	mvn.w	r0, #1
 8001a26:	f000 fce3 	bl	80023f0 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a2a:	f001 fe17 	bl	800365c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000

08001a3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08c      	sub	sp, #48	; 0x30
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a52:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <HAL_InitTick+0xcc>)
 8001a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a56:	4a2c      	ldr	r2, [pc, #176]	; (8001b08 <HAL_InitTick+0xcc>)
 8001a58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a5e:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <HAL_InitTick+0xcc>)
 8001a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a6a:	f107 020c 	add.w	r2, r7, #12
 8001a6e:	f107 0310 	add.w	r3, r7, #16
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f002 faef 	bl	8004058 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a7a:	f002 fad7 	bl	800402c <HAL_RCC_GetPCLK2Freq>
 8001a7e:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a82:	4a22      	ldr	r2, [pc, #136]	; (8001b0c <HAL_InitTick+0xd0>)
 8001a84:	fba2 2303 	umull	r2, r3, r2, r3
 8001a88:	0c9b      	lsrs	r3, r3, #18
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a8e:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <HAL_InitTick+0xd4>)
 8001a90:	4a20      	ldr	r2, [pc, #128]	; (8001b14 <HAL_InitTick+0xd8>)
 8001a92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001a94:	4b1e      	ldr	r3, [pc, #120]	; (8001b10 <HAL_InitTick+0xd4>)
 8001a96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a9a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a9c:	4a1c      	ldr	r2, [pc, #112]	; (8001b10 <HAL_InitTick+0xd4>)
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <HAL_InitTick+0xd4>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <HAL_InitTick+0xd4>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001aae:	4818      	ldr	r0, [pc, #96]	; (8001b10 <HAL_InitTick+0xd4>)
 8001ab0:	f002 fd3a 	bl	8004528 <HAL_TIM_Base_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001aba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d11b      	bne.n	8001afa <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001ac2:	4813      	ldr	r0, [pc, #76]	; (8001b10 <HAL_InitTick+0xd4>)
 8001ac4:	f002 fdea 	bl	800469c <HAL_TIM_Base_Start_IT>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001ace:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d111      	bne.n	8001afa <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001ad6:	2019      	movs	r0, #25
 8001ad8:	f000 fca4 	bl	8002424 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b0f      	cmp	r3, #15
 8001ae0:	d808      	bhi.n	8001af4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	2019      	movs	r0, #25
 8001ae8:	f000 fc82 	bl	80023f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aec:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <HAL_InitTick+0xdc>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e002      	b.n	8001afa <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 8001afa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3730      	adds	r7, #48	; 0x30
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	431bde83 	.word	0x431bde83
 8001b10:	200030a4 	.word	0x200030a4
 8001b14:	40012c00 	.word	0x40012c00
 8001b18:	20000004 	.word	0x20000004

08001b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <NMI_Handler+0x4>

08001b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b26:	e7fe      	b.n	8001b26 <HardFault_Handler+0x4>

08001b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <MemManage_Handler+0x4>

08001b2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b32:	e7fe      	b.n	8001b32 <BusFault_Handler+0x4>

08001b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <UsageFault_Handler+0x4>

08001b3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ULRT_ECHO_Pin);
 8001b4c:	2002      	movs	r0, #2
 8001b4e:	f001 fcc9 	bl	80034e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001b5c:	4802      	ldr	r0, [pc, #8]	; (8001b68 <FDCAN1_IT0_IRQHandler+0x10>)
 8001b5e:	f001 f881 	bl	8002c64 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20003040 	.word	0x20003040

08001b6c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b70:	4802      	ldr	r0, [pc, #8]	; (8001b7c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001b72:	f002 fdfd 	bl	8004770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	200030a4 	.word	0x200030a4

08001b80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b84:	4802      	ldr	r0, [pc, #8]	; (8001b90 <TIM6_DAC_IRQHandler+0x10>)
 8001b86:	f002 fdf3 	bl	8004770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	2000313c 	.word	0x2000313c

08001b94 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <TIM7_IRQHandler+0x10>)
 8001b9a:	f002 fde9 	bl	8004770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200031d4 	.word	0x200031d4

08001ba8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
	return 1;
 8001bac:	2301      	movs	r3, #1
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_kill>:

int _kill(int pid, int sig)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bc2:	f007 f8cb 	bl	8008d5c <__errno>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2216      	movs	r2, #22
 8001bca:	601a      	str	r2, [r3, #0]
	return -1;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_exit>:

void _exit (int status)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ffe7 	bl	8001bb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bea:	e7fe      	b.n	8001bea <_exit+0x12>

08001bec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	e00a      	b.n	8001c14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bfe:	f3af 8000 	nop.w
 8001c02:	4601      	mov	r1, r0
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	60ba      	str	r2, [r7, #8]
 8001c0a:	b2ca      	uxtb	r2, r1
 8001c0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	3301      	adds	r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	dbf0      	blt.n	8001bfe <_read+0x12>
	}

return len;
 8001c1c:	687b      	ldr	r3, [r7, #4]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	e009      	b.n	8001c4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	60ba      	str	r2, [r7, #8]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	dbf1      	blt.n	8001c38 <_write+0x12>
	}
	return len;
 8001c54:	687b      	ldr	r3, [r7, #4]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <_close>:

int _close(int file)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
	return -1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c86:	605a      	str	r2, [r3, #4]
	return 0;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <_isatty>:

int _isatty(int file)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c9e:	2301      	movs	r3, #1
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
	return 0;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <_sbrk+0x5c>)
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <_sbrk+0x60>)
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cdc:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <_sbrk+0x64>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d102      	bne.n	8001cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <_sbrk+0x64>)
 8001ce6:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <_sbrk+0x68>)
 8001ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <_sbrk+0x64>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d207      	bcs.n	8001d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf8:	f007 f830 	bl	8008d5c <__errno>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	220c      	movs	r2, #12
 8001d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295
 8001d06:	e009      	b.n	8001d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <_sbrk+0x64>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	4a05      	ldr	r2, [pc, #20]	; (8001d2c <_sbrk+0x64>)
 8001d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20008000 	.word	0x20008000
 8001d28:	00000400 	.word	0x00000400
 8001d2c:	200001fc 	.word	0x200001fc
 8001d30:	20003308 	.word	0x20003308

08001d34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <SystemInit+0x20>)
 8001d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3e:	4a05      	ldr	r2, [pc, #20]	; (8001d54 <SystemInit+0x20>)
 8001d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5e:	f107 0310 	add.w	r3, r7, #16
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d76:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d7e:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d84:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001d8a:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d92:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d98:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d9e:	4814      	ldr	r0, [pc, #80]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001da0:	f002 fbc2 	bl	8004528 <HAL_TIM_Base_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001daa:	f7ff fe17 	bl	80019dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001db4:	f107 0310 	add.w	r3, r7, #16
 8001db8:	4619      	mov	r1, r3
 8001dba:	480d      	ldr	r0, [pc, #52]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001dbc:	f002 fe58 	bl	8004a70 <HAL_TIM_ConfigClockSource>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001dc6:	f7ff fe09 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4806      	ldr	r0, [pc, #24]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001dd8:	f003 f898 	bl	8004f0c <HAL_TIMEx_MasterConfigSynchronization>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001de2:	f7ff fdfb 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001de6:	bf00      	nop
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20003188 	.word	0x20003188

08001df4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e04:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <MX_TIM6_Init+0x64>)
 8001e06:	4a15      	ldr	r2, [pc, #84]	; (8001e5c <MX_TIM6_Init+0x68>)
 8001e08:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001e0a:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <MX_TIM6_Init+0x64>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <MX_TIM6_Init+0x64>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <MX_TIM6_Init+0x64>)
 8001e18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e1c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <MX_TIM6_Init+0x64>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e24:	480c      	ldr	r0, [pc, #48]	; (8001e58 <MX_TIM6_Init+0x64>)
 8001e26:	f002 fb7f 	bl	8004528 <HAL_TIM_Base_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001e30:	f7ff fdd4 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e34:	2300      	movs	r3, #0
 8001e36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e3c:	1d3b      	adds	r3, r7, #4
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4805      	ldr	r0, [pc, #20]	; (8001e58 <MX_TIM6_Init+0x64>)
 8001e42:	f003 f863 	bl	8004f0c <HAL_TIMEx_MasterConfigSynchronization>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001e4c:	f7ff fdc6 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e50:	bf00      	nop
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	2000313c 	.word	0x2000313c
 8001e5c:	40001000 	.word	0x40001000

08001e60 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e70:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <MX_TIM7_Init+0x64>)
 8001e72:	4a15      	ldr	r2, [pc, #84]	; (8001ec8 <MX_TIM7_Init+0x68>)
 8001e74:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001e76:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <MX_TIM7_Init+0x64>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <MX_TIM7_Init+0x64>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <MX_TIM7_Init+0x64>)
 8001e84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e88:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <MX_TIM7_Init+0x64>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e90:	480c      	ldr	r0, [pc, #48]	; (8001ec4 <MX_TIM7_Init+0x64>)
 8001e92:	f002 fb49 	bl	8004528 <HAL_TIM_Base_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001e9c:	f7ff fd9e 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ea8:	1d3b      	adds	r3, r7, #4
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <MX_TIM7_Init+0x64>)
 8001eae:	f003 f82d 	bl	8004f0c <HAL_TIMEx_MasterConfigSynchronization>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001eb8:	f7ff fd90 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001ebc:	bf00      	nop
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	200031d4 	.word	0x200031d4
 8001ec8:	40001400 	.word	0x40001400

08001ecc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ed2:	f107 0310 	add.w	r3, r7, #16
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	609a      	str	r2, [r3, #8]
 8001ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001eea:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <MX_TIM8_Init+0xa0>)
 8001eec:	4a20      	ldr	r2, [pc, #128]	; (8001f70 <MX_TIM8_Init+0xa4>)
 8001eee:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 80-1;
 8001ef0:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <MX_TIM8_Init+0xa0>)
 8001ef2:	224f      	movs	r2, #79	; 0x4f
 8001ef4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <MX_TIM8_Init+0xa0>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65534;
 8001efc:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <MX_TIM8_Init+0xa0>)
 8001efe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001f02:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <MX_TIM8_Init+0xa0>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001f0a:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <MX_TIM8_Init+0xa0>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f10:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <MX_TIM8_Init+0xa0>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001f16:	4815      	ldr	r0, [pc, #84]	; (8001f6c <MX_TIM8_Init+0xa0>)
 8001f18:	f002 fb06 	bl	8004528 <HAL_TIM_Base_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001f22:	f7ff fd5b 	bl	80019dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001f2c:	f107 0310 	add.w	r3, r7, #16
 8001f30:	4619      	mov	r1, r3
 8001f32:	480e      	ldr	r0, [pc, #56]	; (8001f6c <MX_TIM8_Init+0xa0>)
 8001f34:	f002 fd9c 	bl	8004a70 <HAL_TIM_ConfigClockSource>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001f3e:	f7ff fd4d 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	4619      	mov	r1, r3
 8001f52:	4806      	ldr	r0, [pc, #24]	; (8001f6c <MX_TIM8_Init+0xa0>)
 8001f54:	f002 ffda 	bl	8004f0c <HAL_TIMEx_MasterConfigSynchronization>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001f5e:	f7ff fd3d 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	3720      	adds	r7, #32
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200030f0 	.word	0x200030f0
 8001f70:	40013400 	.word	0x40013400

08001f74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f84:	d10c      	bne.n	8001fa0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f86:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <HAL_TIM_Base_MspInit+0xc0>)
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	4a2a      	ldr	r2, [pc, #168]	; (8002034 <HAL_TIM_Base_MspInit+0xc0>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6593      	str	r3, [r2, #88]	; 0x58
 8001f92:	4b28      	ldr	r3, [pc, #160]	; (8002034 <HAL_TIM_Base_MspInit+0xc0>)
 8001f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001f9e:	e044      	b.n	800202a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM6)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a24      	ldr	r2, [pc, #144]	; (8002038 <HAL_TIM_Base_MspInit+0xc4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d114      	bne.n	8001fd4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001faa:	4b22      	ldr	r3, [pc, #136]	; (8002034 <HAL_TIM_Base_MspInit+0xc0>)
 8001fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fae:	4a21      	ldr	r2, [pc, #132]	; (8002034 <HAL_TIM_Base_MspInit+0xc0>)
 8001fb0:	f043 0310 	orr.w	r3, r3, #16
 8001fb4:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <HAL_TIM_Base_MspInit+0xc0>)
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2105      	movs	r1, #5
 8001fc6:	2036      	movs	r0, #54	; 0x36
 8001fc8:	f000 fa12 	bl	80023f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fcc:	2036      	movs	r0, #54	; 0x36
 8001fce:	f000 fa29 	bl	8002424 <HAL_NVIC_EnableIRQ>
}
 8001fd2:	e02a      	b.n	800202a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM7)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a18      	ldr	r2, [pc, #96]	; (800203c <HAL_TIM_Base_MspInit+0xc8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d114      	bne.n	8002008 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001fde:	4b15      	ldr	r3, [pc, #84]	; (8002034 <HAL_TIM_Base_MspInit+0xc0>)
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe2:	4a14      	ldr	r2, [pc, #80]	; (8002034 <HAL_TIM_Base_MspInit+0xc0>)
 8001fe4:	f043 0320 	orr.w	r3, r3, #32
 8001fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8001fea:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_TIM_Base_MspInit+0xc0>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fee:	f003 0320 	and.w	r3, r3, #32
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2105      	movs	r1, #5
 8001ffa:	2037      	movs	r0, #55	; 0x37
 8001ffc:	f000 f9f8 	bl	80023f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002000:	2037      	movs	r0, #55	; 0x37
 8002002:	f000 fa0f 	bl	8002424 <HAL_NVIC_EnableIRQ>
}
 8002006:	e010      	b.n	800202a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a0c      	ldr	r2, [pc, #48]	; (8002040 <HAL_TIM_Base_MspInit+0xcc>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d10b      	bne.n	800202a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HAL_TIM_Base_MspInit+0xc0>)
 8002014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002016:	4a07      	ldr	r2, [pc, #28]	; (8002034 <HAL_TIM_Base_MspInit+0xc0>)
 8002018:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800201c:	6613      	str	r3, [r2, #96]	; 0x60
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <HAL_TIM_Base_MspInit+0xc0>)
 8002020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002022:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
}
 800202a:	bf00      	nop
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
 8002038:	40001000 	.word	0x40001000
 800203c:	40001400 	.word	0x40001400
 8002040:	40013400 	.word	0x40013400

08002044 <delay_us>:
  }
}

/* USER CODE BEGIN 1 */
void delay_us(uint16_t us)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim8, 0);
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <delay_us+0x30>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2200      	movs	r2, #0
 8002054:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim8) < us);
 8002056:	bf00      	nop
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <delay_us+0x30>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	429a      	cmp	r2, r3
 8002062:	d3f9      	bcc.n	8002058 <delay_us+0x14>
}
 8002064:	bf00      	nop
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	200030f0 	.word	0x200030f0

08002078 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800207c:	4b22      	ldr	r3, [pc, #136]	; (8002108 <MX_USART2_UART_Init+0x90>)
 800207e:	4a23      	ldr	r2, [pc, #140]	; (800210c <MX_USART2_UART_Init+0x94>)
 8002080:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002082:	4b21      	ldr	r3, [pc, #132]	; (8002108 <MX_USART2_UART_Init+0x90>)
 8002084:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002088:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800208a:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <MX_USART2_UART_Init+0x90>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002090:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <MX_USART2_UART_Init+0x90>)
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002096:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <MX_USART2_UART_Init+0x90>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800209c:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <MX_USART2_UART_Init+0x90>)
 800209e:	220c      	movs	r2, #12
 80020a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a2:	4b19      	ldr	r3, [pc, #100]	; (8002108 <MX_USART2_UART_Init+0x90>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a8:	4b17      	ldr	r3, [pc, #92]	; (8002108 <MX_USART2_UART_Init+0x90>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020ae:	4b16      	ldr	r3, [pc, #88]	; (8002108 <MX_USART2_UART_Init+0x90>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020b4:	4b14      	ldr	r3, [pc, #80]	; (8002108 <MX_USART2_UART_Init+0x90>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020ba:	4b13      	ldr	r3, [pc, #76]	; (8002108 <MX_USART2_UART_Init+0x90>)
 80020bc:	2200      	movs	r2, #0
 80020be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020c0:	4811      	ldr	r0, [pc, #68]	; (8002108 <MX_USART2_UART_Init+0x90>)
 80020c2:	f002 ffeb 	bl	800509c <HAL_UART_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80020cc:	f7ff fc86 	bl	80019dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020d0:	2100      	movs	r1, #0
 80020d2:	480d      	ldr	r0, [pc, #52]	; (8002108 <MX_USART2_UART_Init+0x90>)
 80020d4:	f003 fd52 	bl	8005b7c <HAL_UARTEx_SetTxFifoThreshold>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80020de:	f7ff fc7d 	bl	80019dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020e2:	2100      	movs	r1, #0
 80020e4:	4808      	ldr	r0, [pc, #32]	; (8002108 <MX_USART2_UART_Init+0x90>)
 80020e6:	f003 fd87 	bl	8005bf8 <HAL_UARTEx_SetRxFifoThreshold>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80020f0:	f7ff fc74 	bl	80019dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80020f4:	4804      	ldr	r0, [pc, #16]	; (8002108 <MX_USART2_UART_Init+0x90>)
 80020f6:	f003 fd08 	bl	8005b0a <HAL_UARTEx_DisableFifoMode>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002100:	f7ff fc6c 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20003220 	.word	0x20003220
 800210c:	40004400 	.word	0x40004400

08002110 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b09a      	sub	sp, #104	; 0x68
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002128:	f107 0310 	add.w	r3, r7, #16
 800212c:	2244      	movs	r2, #68	; 0x44
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f006 ff44 	bl	8008fbe <memset>
  if(uartHandle->Instance==USART2)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a1f      	ldr	r2, [pc, #124]	; (80021b8 <HAL_UART_MspInit+0xa8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d136      	bne.n	80021ae <HAL_UART_MspInit+0x9e>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002140:	2302      	movs	r3, #2
 8002142:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002144:	2300      	movs	r3, #0
 8002146:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002148:	f107 0310 	add.w	r3, r7, #16
 800214c:	4618      	mov	r0, r3
 800214e:	f001 fffb 	bl	8004148 <HAL_RCCEx_PeriphCLKConfig>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002158:	f7ff fc40 	bl	80019dc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800215c:	4b17      	ldr	r3, [pc, #92]	; (80021bc <HAL_UART_MspInit+0xac>)
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	4a16      	ldr	r2, [pc, #88]	; (80021bc <HAL_UART_MspInit+0xac>)
 8002162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002166:	6593      	str	r3, [r2, #88]	; 0x58
 8002168:	4b14      	ldr	r3, [pc, #80]	; (80021bc <HAL_UART_MspInit+0xac>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <HAL_UART_MspInit+0xac>)
 8002176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002178:	4a10      	ldr	r2, [pc, #64]	; (80021bc <HAL_UART_MspInit+0xac>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002180:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_UART_MspInit+0xac>)
 8002182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800218c:	230c      	movs	r3, #12
 800218e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	2300      	movs	r3, #0
 800219a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800219c:	2307      	movs	r3, #7
 800219e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021a4:	4619      	mov	r1, r3
 80021a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021aa:	f000 ffcf 	bl	800314c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80021ae:	bf00      	nop
 80021b0:	3768      	adds	r7, #104	; 0x68
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40004400 	.word	0x40004400
 80021bc:	40021000 	.word	0x40021000

080021c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021c0:	480d      	ldr	r0, [pc, #52]	; (80021f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021c4:	480d      	ldr	r0, [pc, #52]	; (80021fc <LoopForever+0x6>)
  ldr r1, =_edata
 80021c6:	490e      	ldr	r1, [pc, #56]	; (8002200 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021c8:	4a0e      	ldr	r2, [pc, #56]	; (8002204 <LoopForever+0xe>)
  movs r3, #0
 80021ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80021cc:	e002      	b.n	80021d4 <LoopCopyDataInit>

080021ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021d2:	3304      	adds	r3, #4

080021d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021d8:	d3f9      	bcc.n	80021ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021da:	4a0b      	ldr	r2, [pc, #44]	; (8002208 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021dc:	4c0b      	ldr	r4, [pc, #44]	; (800220c <LoopForever+0x16>)
  movs r3, #0
 80021de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e0:	e001      	b.n	80021e6 <LoopFillZerobss>

080021e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e4:	3204      	adds	r2, #4

080021e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021e8:	d3fb      	bcc.n	80021e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021ea:	f7ff fda3 	bl	8001d34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ee:	f006 feb1 	bl	8008f54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021f2:	f7ff fb69 	bl	80018c8 <main>

080021f6 <LoopForever>:

LoopForever:
    b LoopForever
 80021f6:	e7fe      	b.n	80021f6 <LoopForever>
  ldr   r0, =_estack
 80021f8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80021fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002200:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002204:	0800c144 	.word	0x0800c144
  ldr r2, =_sbss
 8002208:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800220c:	20003304 	.word	0x20003304

08002210 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002210:	e7fe      	b.n	8002210 <ADC1_2_IRQHandler>

08002212 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002218:	2300      	movs	r3, #0
 800221a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800221c:	2003      	movs	r0, #3
 800221e:	f000 f8dc 	bl	80023da <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002222:	2005      	movs	r0, #5
 8002224:	f7ff fc0a 	bl	8001a3c <HAL_InitTick>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	71fb      	strb	r3, [r7, #7]
 8002232:	e001      	b.n	8002238 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002234:	f7ff fbd8 	bl	80019e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002238:	79fb      	ldrb	r3, [r7, #7]

}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <HAL_IncTick+0x1c>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <HAL_IncTick+0x20>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4413      	add	r3, r2
 8002252:	4a03      	ldr	r2, [pc, #12]	; (8002260 <HAL_IncTick+0x1c>)
 8002254:	6013      	str	r3, [r2, #0]
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	200032b0 	.word	0x200032b0
 8002264:	20000008 	.word	0x20000008

08002268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return uwTick;
 800226c:	4b03      	ldr	r3, [pc, #12]	; (800227c <HAL_GetTick+0x14>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	200032b0 	.word	0x200032b0

08002280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800229c:	4013      	ands	r3, r2
 800229e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b2:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <__NVIC_SetPriorityGrouping+0x44>)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	60d3      	str	r3, [r2, #12]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	f003 0307 	and.w	r3, r3, #7
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	db0b      	blt.n	800230e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	f003 021f 	and.w	r2, r3, #31
 80022fc:	4907      	ldr	r1, [pc, #28]	; (800231c <__NVIC_EnableIRQ+0x38>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	2001      	movs	r0, #1
 8002306:	fa00 f202 	lsl.w	r2, r0, r2
 800230a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	e000e100 	.word	0xe000e100

08002320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	6039      	str	r1, [r7, #0]
 800232a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002330:	2b00      	cmp	r3, #0
 8002332:	db0a      	blt.n	800234a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	b2da      	uxtb	r2, r3
 8002338:	490c      	ldr	r1, [pc, #48]	; (800236c <__NVIC_SetPriority+0x4c>)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	0112      	lsls	r2, r2, #4
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	440b      	add	r3, r1
 8002344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002348:	e00a      	b.n	8002360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	b2da      	uxtb	r2, r3
 800234e:	4908      	ldr	r1, [pc, #32]	; (8002370 <__NVIC_SetPriority+0x50>)
 8002350:	79fb      	ldrb	r3, [r7, #7]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	3b04      	subs	r3, #4
 8002358:	0112      	lsls	r2, r2, #4
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	440b      	add	r3, r1
 800235e:	761a      	strb	r2, [r3, #24]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	e000e100 	.word	0xe000e100
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002374:	b480      	push	{r7}
 8002376:	b089      	sub	sp, #36	; 0x24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f1c3 0307 	rsb	r3, r3, #7
 800238e:	2b04      	cmp	r3, #4
 8002390:	bf28      	it	cs
 8002392:	2304      	movcs	r3, #4
 8002394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3304      	adds	r3, #4
 800239a:	2b06      	cmp	r3, #6
 800239c:	d902      	bls.n	80023a4 <NVIC_EncodePriority+0x30>
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3b03      	subs	r3, #3
 80023a2:	e000      	b.n	80023a6 <NVIC_EncodePriority+0x32>
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43da      	mvns	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	401a      	ands	r2, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023bc:	f04f 31ff 	mov.w	r1, #4294967295
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	fa01 f303 	lsl.w	r3, r1, r3
 80023c6:	43d9      	mvns	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	4313      	orrs	r3, r2
         );
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3724      	adds	r7, #36	; 0x24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff ff4c 	bl	8002280 <__NVIC_SetPriorityGrouping>
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023fe:	f7ff ff63 	bl	80022c8 <__NVIC_GetPriorityGrouping>
 8002402:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	68b9      	ldr	r1, [r7, #8]
 8002408:	6978      	ldr	r0, [r7, #20]
 800240a:	f7ff ffb3 	bl	8002374 <NVIC_EncodePriority>
 800240e:	4602      	mov	r2, r0
 8002410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002414:	4611      	mov	r1, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff ff82 	bl	8002320 <__NVIC_SetPriority>
}
 800241c:	bf00      	nop
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff ff56 	bl	80022e4 <__NVIC_EnableIRQ>
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e147      	b.n	80026e2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff f8a8 	bl	80015bc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699a      	ldr	r2, [r3, #24]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0210 	bic.w	r2, r2, #16
 800247a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800247c:	f7ff fef4 	bl	8002268 <HAL_GetTick>
 8002480:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002482:	e012      	b.n	80024aa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002484:	f7ff fef0 	bl	8002268 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b0a      	cmp	r3, #10
 8002490:	d90b      	bls.n	80024aa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002496:	f043 0201 	orr.w	r2, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2203      	movs	r2, #3
 80024a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e11b      	b.n	80026e2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f003 0308 	and.w	r3, r3, #8
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d0e5      	beq.n	8002484 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	699a      	ldr	r2, [r3, #24]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024c8:	f7ff fece 	bl	8002268 <HAL_GetTick>
 80024cc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80024ce:	e012      	b.n	80024f6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80024d0:	f7ff feca 	bl	8002268 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b0a      	cmp	r3, #10
 80024dc:	d90b      	bls.n	80024f6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e2:	f043 0201 	orr.w	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2203      	movs	r2, #3
 80024ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e0f5      	b.n	80026e2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0e5      	beq.n	80024d0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699a      	ldr	r2, [r3, #24]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0202 	orr.w	r2, r2, #2
 8002512:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a74      	ldr	r2, [pc, #464]	; (80026ec <HAL_FDCAN_Init+0x2ac>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d103      	bne.n	8002526 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800251e:	4a74      	ldr	r2, [pc, #464]	; (80026f0 <HAL_FDCAN_Init+0x2b0>)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	7c1b      	ldrb	r3, [r3, #16]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d108      	bne.n	8002540 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	699a      	ldr	r2, [r3, #24]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800253c:	619a      	str	r2, [r3, #24]
 800253e:	e007      	b.n	8002550 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699a      	ldr	r2, [r3, #24]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800254e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	7c5b      	ldrb	r3, [r3, #17]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d108      	bne.n	800256a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699a      	ldr	r2, [r3, #24]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002566:	619a      	str	r2, [r3, #24]
 8002568:	e007      	b.n	800257a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	699a      	ldr	r2, [r3, #24]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002578:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7c9b      	ldrb	r3, [r3, #18]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d108      	bne.n	8002594 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699a      	ldr	r2, [r3, #24]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002590:	619a      	str	r2, [r3, #24]
 8002592:	e007      	b.n	80025a4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025a2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	699a      	ldr	r2, [r3, #24]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80025c8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0210 	bic.w	r2, r2, #16
 80025d8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d108      	bne.n	80025f4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699a      	ldr	r2, [r3, #24]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0204 	orr.w	r2, r2, #4
 80025f0:	619a      	str	r2, [r3, #24]
 80025f2:	e02c      	b.n	800264e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d028      	beq.n	800264e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	2b02      	cmp	r3, #2
 8002602:	d01c      	beq.n	800263e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	699a      	ldr	r2, [r3, #24]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002612:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0210 	orr.w	r2, r2, #16
 8002622:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2b03      	cmp	r3, #3
 800262a:	d110      	bne.n	800264e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699a      	ldr	r2, [r3, #24]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0220 	orr.w	r2, r2, #32
 800263a:	619a      	str	r2, [r3, #24]
 800263c:	e007      	b.n	800264e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	699a      	ldr	r2, [r3, #24]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0220 	orr.w	r2, r2, #32
 800264c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	3b01      	subs	r3, #1
 8002654:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	3b01      	subs	r3, #1
 800265c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800265e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002666:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	3b01      	subs	r3, #1
 8002670:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002676:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002678:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002682:	d115      	bne.n	80026b0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	3b01      	subs	r3, #1
 8002690:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002692:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	3b01      	subs	r3, #1
 800269a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800269c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	3b01      	subs	r3, #1
 80026a6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80026ac:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80026ae:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 fc6e 	bl	8002fa8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40006400 	.word	0x40006400
 80026f0:	40006500 	.word	0x40006500

080026f4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002704:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002706:	7dfb      	ldrb	r3, [r7, #23]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d002      	beq.n	8002712 <HAL_FDCAN_ConfigFilter+0x1e>
 800270c:	7dfb      	ldrb	r3, [r7, #23]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d13d      	bne.n	800278e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d119      	bne.n	800274e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002726:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800272e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	e01d      	b.n	800278a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	075a      	lsls	r2, r3, #29
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	079a      	lsls	r2, r3, #30
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	4313      	orrs	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	3304      	adds	r3, #4
 8002782:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	e006      	b.n	800279c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002792:	f043 0202 	orr.w	r2, r3, #2
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
  }
}
 800279c:	4618      	mov	r0, r3
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d116      	bne.n	80027f0 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027ca:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	011a      	lsls	r2, r3, #4
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	431a      	orrs	r2, r3
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	431a      	orrs	r2, r3
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	431a      	orrs	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	e006      	b.n	80027fe <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f4:	f043 0204 	orr.w	r2, r3, #4
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
  }
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b01      	cmp	r3, #1
 800281c:	d110      	bne.n	8002840 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2202      	movs	r2, #2
 8002822:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699a      	ldr	r2, [r3, #24]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800283c:	2300      	movs	r3, #0
 800283e:	e006      	b.n	800284e <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002844:	f043 0204 	orr.w	r2, r3, #4
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
  }
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d12c      	bne.n	80028cc <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800287a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d007      	beq.n	8002892 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002886:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e023      	b.n	80028da <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800289a:	0c1b      	lsrs	r3, r3, #16
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 fbd3 	bl	8003054 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2101      	movs	r1, #1
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	fa01 f202 	lsl.w	r2, r1, r2
 80028ba:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80028be:	2201      	movs	r2, #1
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	409a      	lsls	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e006      	b.n	80028da <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d0:	f043 0208 	orr.w	r2, r3, #8
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
  }
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b08b      	sub	sp, #44	; 0x2c
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80028f8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80028fa:	7efb      	ldrb	r3, [r7, #27]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	f040 80bc 	bne.w	8002a7a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b40      	cmp	r3, #64	; 0x40
 8002906:	d121      	bne.n	800294c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	2b00      	cmp	r3, #0
 8002916:	d107      	bne.n	8002928 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0af      	b.n	8002a88 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002930:	0a1b      	lsrs	r3, r3, #8
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800293c:	69fa      	ldr	r2, [r7, #28]
 800293e:	4613      	mov	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	4413      	add	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	440b      	add	r3, r1
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
 800294a:	e020      	b.n	800298e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	2b00      	cmp	r3, #0
 800295a:	d107      	bne.n	800296c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002960:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e08d      	b.n	8002a88 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002974:	0a1b      	lsrs	r3, r3, #8
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	4613      	mov	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4413      	add	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	440b      	add	r3, r1
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d107      	bne.n	80029b2 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	0c9b      	lsrs	r3, r3, #18
 80029a8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	e005      	b.n	80029be <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	3304      	adds	r3, #4
 80029da:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	0e1b      	lsrs	r3, r3, #24
 8002a10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	0fda      	lsrs	r2, r3, #31
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	3304      	adds	r3, #4
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	623b      	str	r3, [r7, #32]
 8002a30:	e00a      	b.n	8002a48 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	441a      	add	r2, r3
 8002a38:	6839      	ldr	r1, [r7, #0]
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	440b      	add	r3, r1
 8002a3e:	7812      	ldrb	r2, [r2, #0]
 8002a40:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	3301      	adds	r3, #1
 8002a46:	623b      	str	r3, [r7, #32]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	0c1b      	lsrs	r3, r3, #16
 8002a4e:	4a11      	ldr	r2, [pc, #68]	; (8002a94 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8002a50:	5cd3      	ldrb	r3, [r2, r3]
 8002a52:	461a      	mov	r2, r3
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d3eb      	bcc.n	8002a32 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b40      	cmp	r3, #64	; 0x40
 8002a5e:	d105      	bne.n	8002a6c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	69fa      	ldr	r2, [r7, #28]
 8002a66:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8002a6a:	e004      	b.n	8002a76 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	e006      	b.n	8002a88 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a7e:	f043 0208 	orr.w	r2, r3, #8
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
  }
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	372c      	adds	r7, #44	; 0x2c
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	0800bd18 	.word	0x0800bd18

08002a98 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002aaa:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002aac:	7dfb      	ldrb	r3, [r7, #23]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d003      	beq.n	8002aba <HAL_FDCAN_ActivateNotification+0x22>
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	f040 80c8 	bne.w	8002c4a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d004      	beq.n	8002ad6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d03b      	beq.n	8002b4e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d004      	beq.n	8002aea <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d031      	beq.n	8002b4e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d004      	beq.n	8002afe <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d027      	beq.n	8002b4e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d004      	beq.n	8002b12 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d01d      	beq.n	8002b4e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d013      	beq.n	8002b4e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d004      	beq.n	8002b3a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d009      	beq.n	8002b4e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00c      	beq.n	8002b5e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d107      	bne.n	8002b5e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 0201 	orr.w	r2, r2, #1
 8002b5c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d004      	beq.n	8002b72 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d13b      	bne.n	8002bea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d004      	beq.n	8002b86 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d131      	bne.n	8002bea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d004      	beq.n	8002b9a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d127      	bne.n	8002bea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d004      	beq.n	8002bae <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d11d      	bne.n	8002bea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d004      	beq.n	8002bc2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d113      	bne.n	8002bea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d004      	beq.n	8002bd6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00c      	beq.n	8002bfa <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d007      	beq.n	8002bfa <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0202 	orr.w	r2, r2, #2
 8002bf8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d009      	beq.n	8002c18 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d009      	beq.n	8002c36 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	e006      	b.n	8002c58 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c4e:	f043 0202 	orr.w	r2, r3, #2
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
  }
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	371c      	adds	r7, #28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08a      	sub	sp, #40	; 0x28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c72:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c80:	4013      	ands	r3, r2
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c96:	6a3a      	ldr	r2, [r7, #32]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ca6:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cba:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8002cbe:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002cd6:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00d      	beq.n	8002d0e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d006      	beq.n	8002d0e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2240      	movs	r2, #64	; 0x40
 8002d06:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f92e 	bl	8002f6a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d01b      	beq.n	8002d54 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d014      	beq.n	8002d54 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d32:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d4a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002d4c:	6939      	ldr	r1, [r7, #16]
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f8ec 	bl	8002f2c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d007      	beq.n	8002d6a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d60:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002d62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f8b6 	bl	8002ed6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d007      	beq.n	8002d80 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6a3a      	ldr	r2, [r7, #32]
 8002d76:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002d78:	6a39      	ldr	r1, [r7, #32]
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7fe fce0 	bl	8001740 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d007      	beq.n	8002d96 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	69fa      	ldr	r2, [r7, #28]
 8002d8c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002d8e:	69f9      	ldr	r1, [r7, #28]
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f8ab 	bl	8002eec <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00e      	beq.n	8002dc2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d007      	beq.n	8002dc2 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dba:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f8a0 	bl	8002f02 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d01a      	beq.n	8002e06 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d013      	beq.n	8002e06 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002de6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	4013      	ands	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2280      	movs	r2, #128	; 0x80
 8002dfc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002dfe:	68f9      	ldr	r1, [r7, #12]
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f888 	bl	8002f16 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00e      	beq.n	8002e32 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d007      	beq.n	8002e32 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e2a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f888 	bl	8002f42 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00e      	beq.n	8002e5e <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e56:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f87c 	bl	8002f56 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d011      	beq.n	8002e90 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00a      	beq.n	8002e90 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e82:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d007      	beq.n	8002ea6 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002e9e:	6979      	ldr	r1, [r7, #20]
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f876 	bl	8002f92 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d009      	beq.n	8002ec0 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f858 	bl	8002f7e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002ece:	bf00      	nop
 8002ed0:	3728      	adds	r7, #40	; 0x28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002fb0:	4b27      	ldr	r3, [pc, #156]	; (8003050 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002fb2:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fc2:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fca:	041a      	lsls	r2, r3, #16
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fe8:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff0:	061a      	lsls	r2, r3, #24
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	e005      	b.n	8003036 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	3304      	adds	r3, #4
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	429a      	cmp	r2, r3
 8003040:	d3f3      	bcc.n	800302a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003042:	bf00      	nop
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	4000a400 	.word	0x4000a400

08003054 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8003054:	b480      	push	{r7}
 8003056:	b089      	sub	sp, #36	; 0x24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10a      	bne.n	8003080 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003072:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800307a:	4313      	orrs	r3, r2
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	e00a      	b.n	8003096 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003088:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800308e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003090:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003094:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80030a0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80030a6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80030ac:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80030b2:	4313      	orrs	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	4613      	mov	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	4413      	add	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	440b      	add	r3, r1
 80030c6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	69fa      	ldr	r2, [r7, #28]
 80030cc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	3304      	adds	r3, #4
 80030d2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	3304      	adds	r3, #4
 80030de:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	e020      	b.n	8003128 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	3303      	adds	r3, #3
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	4413      	add	r3, r2
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	3302      	adds	r3, #2
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	440b      	add	r3, r1
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80030fe:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	3301      	adds	r3, #1
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	440b      	add	r3, r1
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800310c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	440a      	add	r2, r1
 8003114:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003116:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	3304      	adds	r3, #4
 8003120:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	3304      	adds	r3, #4
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	0c1b      	lsrs	r3, r3, #16
 800312e:	4a06      	ldr	r2, [pc, #24]	; (8003148 <FDCAN_CopyMessageToRAM+0xf4>)
 8003130:	5cd3      	ldrb	r3, [r2, r3]
 8003132:	461a      	mov	r2, r3
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	4293      	cmp	r3, r2
 8003138:	d3d5      	bcc.n	80030e6 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800313a:	bf00      	nop
 800313c:	bf00      	nop
 800313e:	3724      	adds	r7, #36	; 0x24
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	0800bd18 	.word	0x0800bd18

0800314c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003156:	2300      	movs	r3, #0
 8003158:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800315a:	e15a      	b.n	8003412 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	2101      	movs	r1, #1
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	fa01 f303 	lsl.w	r3, r1, r3
 8003168:	4013      	ands	r3, r2
 800316a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 814c 	beq.w	800340c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	2b01      	cmp	r3, #1
 800317e:	d005      	beq.n	800318c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003188:	2b02      	cmp	r3, #2
 800318a:	d130      	bne.n	80031ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	2203      	movs	r2, #3
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4013      	ands	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031c2:	2201      	movs	r2, #1
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4013      	ands	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	091b      	lsrs	r3, r3, #4
 80031d8:	f003 0201 	and.w	r2, r3, #1
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	2b03      	cmp	r3, #3
 80031f8:	d017      	beq.n	800322a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	2203      	movs	r2, #3
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4013      	ands	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d123      	bne.n	800327e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	08da      	lsrs	r2, r3, #3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3208      	adds	r2, #8
 800323e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003242:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	220f      	movs	r2, #15
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43db      	mvns	r3, r3
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4013      	ands	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	691a      	ldr	r2, [r3, #16]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	08da      	lsrs	r2, r3, #3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3208      	adds	r2, #8
 8003278:	6939      	ldr	r1, [r7, #16]
 800327a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	2203      	movs	r2, #3
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	43db      	mvns	r3, r3
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4013      	ands	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f003 0203 	and.w	r2, r3, #3
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 80a6 	beq.w	800340c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c0:	4b5b      	ldr	r3, [pc, #364]	; (8003430 <HAL_GPIO_Init+0x2e4>)
 80032c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c4:	4a5a      	ldr	r2, [pc, #360]	; (8003430 <HAL_GPIO_Init+0x2e4>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	6613      	str	r3, [r2, #96]	; 0x60
 80032cc:	4b58      	ldr	r3, [pc, #352]	; (8003430 <HAL_GPIO_Init+0x2e4>)
 80032ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032d8:	4a56      	ldr	r2, [pc, #344]	; (8003434 <HAL_GPIO_Init+0x2e8>)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	089b      	lsrs	r3, r3, #2
 80032de:	3302      	adds	r3, #2
 80032e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	220f      	movs	r2, #15
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4013      	ands	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003302:	d01f      	beq.n	8003344 <HAL_GPIO_Init+0x1f8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a4c      	ldr	r2, [pc, #304]	; (8003438 <HAL_GPIO_Init+0x2ec>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d019      	beq.n	8003340 <HAL_GPIO_Init+0x1f4>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a4b      	ldr	r2, [pc, #300]	; (800343c <HAL_GPIO_Init+0x2f0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d013      	beq.n	800333c <HAL_GPIO_Init+0x1f0>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a4a      	ldr	r2, [pc, #296]	; (8003440 <HAL_GPIO_Init+0x2f4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d00d      	beq.n	8003338 <HAL_GPIO_Init+0x1ec>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a49      	ldr	r2, [pc, #292]	; (8003444 <HAL_GPIO_Init+0x2f8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d007      	beq.n	8003334 <HAL_GPIO_Init+0x1e8>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a48      	ldr	r2, [pc, #288]	; (8003448 <HAL_GPIO_Init+0x2fc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d101      	bne.n	8003330 <HAL_GPIO_Init+0x1e4>
 800332c:	2305      	movs	r3, #5
 800332e:	e00a      	b.n	8003346 <HAL_GPIO_Init+0x1fa>
 8003330:	2306      	movs	r3, #6
 8003332:	e008      	b.n	8003346 <HAL_GPIO_Init+0x1fa>
 8003334:	2304      	movs	r3, #4
 8003336:	e006      	b.n	8003346 <HAL_GPIO_Init+0x1fa>
 8003338:	2303      	movs	r3, #3
 800333a:	e004      	b.n	8003346 <HAL_GPIO_Init+0x1fa>
 800333c:	2302      	movs	r3, #2
 800333e:	e002      	b.n	8003346 <HAL_GPIO_Init+0x1fa>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <HAL_GPIO_Init+0x1fa>
 8003344:	2300      	movs	r3, #0
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	f002 0203 	and.w	r2, r2, #3
 800334c:	0092      	lsls	r2, r2, #2
 800334e:	4093      	lsls	r3, r2
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003356:	4937      	ldr	r1, [pc, #220]	; (8003434 <HAL_GPIO_Init+0x2e8>)
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	089b      	lsrs	r3, r3, #2
 800335c:	3302      	adds	r3, #2
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003364:	4b39      	ldr	r3, [pc, #228]	; (800344c <HAL_GPIO_Init+0x300>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	43db      	mvns	r3, r3
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4013      	ands	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003388:	4a30      	ldr	r2, [pc, #192]	; (800344c <HAL_GPIO_Init+0x300>)
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800338e:	4b2f      	ldr	r3, [pc, #188]	; (800344c <HAL_GPIO_Init+0x300>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	43db      	mvns	r3, r3
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	4013      	ands	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033b2:	4a26      	ldr	r2, [pc, #152]	; (800344c <HAL_GPIO_Init+0x300>)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80033b8:	4b24      	ldr	r3, [pc, #144]	; (800344c <HAL_GPIO_Init+0x300>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4013      	ands	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033dc:	4a1b      	ldr	r2, [pc, #108]	; (800344c <HAL_GPIO_Init+0x300>)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80033e2:	4b1a      	ldr	r3, [pc, #104]	; (800344c <HAL_GPIO_Init+0x300>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	43db      	mvns	r3, r3
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4013      	ands	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003406:	4a11      	ldr	r2, [pc, #68]	; (800344c <HAL_GPIO_Init+0x300>)
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	3301      	adds	r3, #1
 8003410:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	fa22 f303 	lsr.w	r3, r2, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	f47f ae9d 	bne.w	800315c <HAL_GPIO_Init+0x10>
  }
}
 8003422:	bf00      	nop
 8003424:	bf00      	nop
 8003426:	371c      	adds	r7, #28
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	40021000 	.word	0x40021000
 8003434:	40010000 	.word	0x40010000
 8003438:	48000400 	.word	0x48000400
 800343c:	48000800 	.word	0x48000800
 8003440:	48000c00 	.word	0x48000c00
 8003444:	48001000 	.word	0x48001000
 8003448:	48001400 	.word	0x48001400
 800344c:	40010400 	.word	0x40010400

08003450 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	887b      	ldrh	r3, [r7, #2]
 8003462:	4013      	ands	r3, r2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
 800346c:	e001      	b.n	8003472 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800346e:	2300      	movs	r3, #0
 8003470:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003472:	7bfb      	ldrb	r3, [r7, #15]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	807b      	strh	r3, [r7, #2]
 800348c:	4613      	mov	r3, r2
 800348e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003490:	787b      	ldrb	r3, [r7, #1]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003496:	887a      	ldrh	r2, [r7, #2]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800349c:	e002      	b.n	80034a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800349e:	887a      	ldrh	r2, [r7, #2]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034c2:	887a      	ldrh	r2, [r7, #2]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4013      	ands	r3, r2
 80034c8:	041a      	lsls	r2, r3, #16
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	43d9      	mvns	r1, r3
 80034ce:	887b      	ldrh	r3, [r7, #2]
 80034d0:	400b      	ands	r3, r1
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	619a      	str	r2, [r3, #24]
}
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034ee:	4b08      	ldr	r3, [pc, #32]	; (8003510 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034f0:	695a      	ldr	r2, [r3, #20]
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d006      	beq.n	8003508 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034fa:	4a05      	ldr	r2, [pc, #20]	; (8003510 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034fc:	88fb      	ldrh	r3, [r7, #6]
 80034fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003500:	88fb      	ldrh	r3, [r7, #6]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fe f9b0 	bl	8001868 <HAL_GPIO_EXTI_Callback>
  }
}
 8003508:	bf00      	nop
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40010400 	.word	0x40010400

08003514 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d141      	bne.n	80035a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003522:	4b4b      	ldr	r3, [pc, #300]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800352a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352e:	d131      	bne.n	8003594 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003530:	4b47      	ldr	r3, [pc, #284]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003532:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003536:	4a46      	ldr	r2, [pc, #280]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800353c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003540:	4b43      	ldr	r3, [pc, #268]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003548:	4a41      	ldr	r2, [pc, #260]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800354a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800354e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003550:	4b40      	ldr	r3, [pc, #256]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2232      	movs	r2, #50	; 0x32
 8003556:	fb02 f303 	mul.w	r3, r2, r3
 800355a:	4a3f      	ldr	r2, [pc, #252]	; (8003658 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800355c:	fba2 2303 	umull	r2, r3, r2, r3
 8003560:	0c9b      	lsrs	r3, r3, #18
 8003562:	3301      	adds	r3, #1
 8003564:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003566:	e002      	b.n	800356e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	3b01      	subs	r3, #1
 800356c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800356e:	4b38      	ldr	r3, [pc, #224]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800357a:	d102      	bne.n	8003582 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f2      	bne.n	8003568 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003582:	4b33      	ldr	r3, [pc, #204]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800358e:	d158      	bne.n	8003642 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e057      	b.n	8003644 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003594:	4b2e      	ldr	r3, [pc, #184]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800359a:	4a2d      	ldr	r2, [pc, #180]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800359c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80035a4:	e04d      	b.n	8003642 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ac:	d141      	bne.n	8003632 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035ae:	4b28      	ldr	r3, [pc, #160]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ba:	d131      	bne.n	8003620 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035bc:	4b24      	ldr	r3, [pc, #144]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035c2:	4a23      	ldr	r2, [pc, #140]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035cc:	4b20      	ldr	r3, [pc, #128]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035d4:	4a1e      	ldr	r2, [pc, #120]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035dc:	4b1d      	ldr	r3, [pc, #116]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2232      	movs	r2, #50	; 0x32
 80035e2:	fb02 f303 	mul.w	r3, r2, r3
 80035e6:	4a1c      	ldr	r2, [pc, #112]	; (8003658 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80035e8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ec:	0c9b      	lsrs	r3, r3, #18
 80035ee:	3301      	adds	r3, #1
 80035f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035f2:	e002      	b.n	80035fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035fa:	4b15      	ldr	r3, [pc, #84]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003606:	d102      	bne.n	800360e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f2      	bne.n	80035f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800360e:	4b10      	ldr	r3, [pc, #64]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361a:	d112      	bne.n	8003642 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e011      	b.n	8003644 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003620:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003626:	4a0a      	ldr	r2, [pc, #40]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003630:	e007      	b.n	8003642 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003632:	4b07      	ldr	r3, [pc, #28]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800363a:	4a05      	ldr	r2, [pc, #20]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800363c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003640:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	40007000 	.word	0x40007000
 8003654:	20000000 	.word	0x20000000
 8003658:	431bde83 	.word	0x431bde83

0800365c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	4a04      	ldr	r2, [pc, #16]	; (8003678 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800366a:	6093      	str	r3, [r2, #8]
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40007000 	.word	0x40007000

0800367c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e308      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d075      	beq.n	8003786 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800369a:	4ba3      	ldr	r3, [pc, #652]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036a4:	4ba0      	ldr	r3, [pc, #640]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	2b0c      	cmp	r3, #12
 80036b2:	d102      	bne.n	80036ba <HAL_RCC_OscConfig+0x3e>
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d002      	beq.n	80036c0 <HAL_RCC_OscConfig+0x44>
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d10b      	bne.n	80036d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c0:	4b99      	ldr	r3, [pc, #612]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d05b      	beq.n	8003784 <HAL_RCC_OscConfig+0x108>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d157      	bne.n	8003784 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e2e3      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e0:	d106      	bne.n	80036f0 <HAL_RCC_OscConfig+0x74>
 80036e2:	4b91      	ldr	r3, [pc, #580]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a90      	ldr	r2, [pc, #576]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80036e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	e01d      	b.n	800372c <HAL_RCC_OscConfig+0xb0>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0x98>
 80036fa:	4b8b      	ldr	r3, [pc, #556]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a8a      	ldr	r2, [pc, #552]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	4b88      	ldr	r3, [pc, #544]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a87      	ldr	r2, [pc, #540]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e00b      	b.n	800372c <HAL_RCC_OscConfig+0xb0>
 8003714:	4b84      	ldr	r3, [pc, #528]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a83      	ldr	r2, [pc, #524]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 800371a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	4b81      	ldr	r3, [pc, #516]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a80      	ldr	r2, [pc, #512]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800372a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d013      	beq.n	800375c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7fe fd98 	bl	8002268 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800373c:	f7fe fd94 	bl	8002268 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	; 0x64
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e2a8      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800374e:	4b76      	ldr	r3, [pc, #472]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0xc0>
 800375a:	e014      	b.n	8003786 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375c:	f7fe fd84 	bl	8002268 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003764:	f7fe fd80 	bl	8002268 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	; 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e294      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003776:	4b6c      	ldr	r3, [pc, #432]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0xe8>
 8003782:	e000      	b.n	8003786 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d075      	beq.n	800387e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003792:	4b65      	ldr	r3, [pc, #404]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800379c:	4b62      	ldr	r3, [pc, #392]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2b0c      	cmp	r3, #12
 80037aa:	d102      	bne.n	80037b2 <HAL_RCC_OscConfig+0x136>
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d002      	beq.n	80037b8 <HAL_RCC_OscConfig+0x13c>
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	2b04      	cmp	r3, #4
 80037b6:	d11f      	bne.n	80037f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037b8:	4b5b      	ldr	r3, [pc, #364]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_RCC_OscConfig+0x154>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e267      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d0:	4b55      	ldr	r3, [pc, #340]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	061b      	lsls	r3, r3, #24
 80037de:	4952      	ldr	r1, [pc, #328]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80037e4:	4b51      	ldr	r3, [pc, #324]	; (800392c <HAL_RCC_OscConfig+0x2b0>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fe f927 	bl	8001a3c <HAL_InitTick>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d043      	beq.n	800387c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e253      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d023      	beq.n	8003848 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003800:	4b49      	ldr	r3, [pc, #292]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a48      	ldr	r2, [pc, #288]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800380a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7fe fd2c 	bl	8002268 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003814:	f7fe fd28 	bl	8002268 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e23c      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003826:	4b40      	ldr	r3, [pc, #256]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003832:	4b3d      	ldr	r3, [pc, #244]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	061b      	lsls	r3, r3, #24
 8003840:	4939      	ldr	r1, [pc, #228]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003842:	4313      	orrs	r3, r2
 8003844:	604b      	str	r3, [r1, #4]
 8003846:	e01a      	b.n	800387e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003848:	4b37      	ldr	r3, [pc, #220]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a36      	ldr	r2, [pc, #216]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 800384e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003854:	f7fe fd08 	bl	8002268 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800385c:	f7fe fd04 	bl	8002268 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e218      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800386e:	4b2e      	ldr	r3, [pc, #184]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f0      	bne.n	800385c <HAL_RCC_OscConfig+0x1e0>
 800387a:	e000      	b.n	800387e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800387c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d03c      	beq.n	8003904 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d01c      	beq.n	80038cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003892:	4b25      	ldr	r3, [pc, #148]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003898:	4a23      	ldr	r2, [pc, #140]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a2:	f7fe fce1 	bl	8002268 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038aa:	f7fe fcdd 	bl	8002268 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e1f1      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038bc:	4b1a      	ldr	r3, [pc, #104]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80038be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0ef      	beq.n	80038aa <HAL_RCC_OscConfig+0x22e>
 80038ca:	e01b      	b.n	8003904 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038cc:	4b16      	ldr	r3, [pc, #88]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80038ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038d2:	4a15      	ldr	r2, [pc, #84]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80038d4:	f023 0301 	bic.w	r3, r3, #1
 80038d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038dc:	f7fe fcc4 	bl	8002268 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e4:	f7fe fcc0 	bl	8002268 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e1d4      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038f6:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80038f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1ef      	bne.n	80038e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 80ab 	beq.w	8003a68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003912:	2300      	movs	r3, #0
 8003914:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003916:	4b04      	ldr	r3, [pc, #16]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <HAL_RCC_OscConfig+0x2b4>
 8003922:	2301      	movs	r3, #1
 8003924:	e005      	b.n	8003932 <HAL_RCC_OscConfig+0x2b6>
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000
 800392c:	20000004 	.word	0x20000004
 8003930:	2300      	movs	r3, #0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00d      	beq.n	8003952 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003936:	4baf      	ldr	r3, [pc, #700]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393a:	4aae      	ldr	r2, [pc, #696]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 800393c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003940:	6593      	str	r3, [r2, #88]	; 0x58
 8003942:	4bac      	ldr	r3, [pc, #688]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800394e:	2301      	movs	r3, #1
 8003950:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003952:	4ba9      	ldr	r3, [pc, #676]	; (8003bf8 <HAL_RCC_OscConfig+0x57c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395a:	2b00      	cmp	r3, #0
 800395c:	d118      	bne.n	8003990 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800395e:	4ba6      	ldr	r3, [pc, #664]	; (8003bf8 <HAL_RCC_OscConfig+0x57c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4aa5      	ldr	r2, [pc, #660]	; (8003bf8 <HAL_RCC_OscConfig+0x57c>)
 8003964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800396a:	f7fe fc7d 	bl	8002268 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003972:	f7fe fc79 	bl	8002268 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e18d      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003984:	4b9c      	ldr	r3, [pc, #624]	; (8003bf8 <HAL_RCC_OscConfig+0x57c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f0      	beq.n	8003972 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d108      	bne.n	80039aa <HAL_RCC_OscConfig+0x32e>
 8003998:	4b96      	ldr	r3, [pc, #600]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399e:	4a95      	ldr	r2, [pc, #596]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039a8:	e024      	b.n	80039f4 <HAL_RCC_OscConfig+0x378>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b05      	cmp	r3, #5
 80039b0:	d110      	bne.n	80039d4 <HAL_RCC_OscConfig+0x358>
 80039b2:	4b90      	ldr	r3, [pc, #576]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b8:	4a8e      	ldr	r2, [pc, #568]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 80039ba:	f043 0304 	orr.w	r3, r3, #4
 80039be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039c2:	4b8c      	ldr	r3, [pc, #560]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 80039c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c8:	4a8a      	ldr	r2, [pc, #552]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039d2:	e00f      	b.n	80039f4 <HAL_RCC_OscConfig+0x378>
 80039d4:	4b87      	ldr	r3, [pc, #540]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039da:	4a86      	ldr	r2, [pc, #536]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 80039dc:	f023 0301 	bic.w	r3, r3, #1
 80039e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039e4:	4b83      	ldr	r3, [pc, #524]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 80039e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ea:	4a82      	ldr	r2, [pc, #520]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 80039ec:	f023 0304 	bic.w	r3, r3, #4
 80039f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d016      	beq.n	8003a2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fc:	f7fe fc34 	bl	8002268 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a02:	e00a      	b.n	8003a1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a04:	f7fe fc30 	bl	8002268 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e142      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a1a:	4b76      	ldr	r3, [pc, #472]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0ed      	beq.n	8003a04 <HAL_RCC_OscConfig+0x388>
 8003a28:	e015      	b.n	8003a56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2a:	f7fe fc1d 	bl	8002268 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a30:	e00a      	b.n	8003a48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a32:	f7fe fc19 	bl	8002268 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e12b      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a48:	4b6a      	ldr	r3, [pc, #424]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1ed      	bne.n	8003a32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a56:	7ffb      	ldrb	r3, [r7, #31]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d105      	bne.n	8003a68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a5c:	4b65      	ldr	r3, [pc, #404]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a60:	4a64      	ldr	r2, [pc, #400]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003a62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d03c      	beq.n	8003aee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d01c      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a7c:	4b5d      	ldr	r3, [pc, #372]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003a7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a82:	4a5c      	ldr	r2, [pc, #368]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8c:	f7fe fbec 	bl	8002268 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a94:	f7fe fbe8 	bl	8002268 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e0fc      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003aa6:	4b53      	ldr	r3, [pc, #332]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003aa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0ef      	beq.n	8003a94 <HAL_RCC_OscConfig+0x418>
 8003ab4:	e01b      	b.n	8003aee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ab6:	4b4f      	ldr	r3, [pc, #316]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003ab8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003abc:	4a4d      	ldr	r2, [pc, #308]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac6:	f7fe fbcf 	bl	8002268 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ace:	f7fe fbcb 	bl	8002268 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e0df      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ae0:	4b44      	ldr	r3, [pc, #272]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003ae2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1ef      	bne.n	8003ace <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 80d3 	beq.w	8003c9e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003af8:	4b3e      	ldr	r3, [pc, #248]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 030c 	and.w	r3, r3, #12
 8003b00:	2b0c      	cmp	r3, #12
 8003b02:	f000 808d 	beq.w	8003c20 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d15a      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b0e:	4b39      	ldr	r3, [pc, #228]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a38      	ldr	r2, [pc, #224]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003b14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1a:	f7fe fba5 	bl	8002268 <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b22:	f7fe fba1 	bl	8002268 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e0b5      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b34:	4b2f      	ldr	r3, [pc, #188]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1f0      	bne.n	8003b22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b40:	4b2c      	ldr	r3, [pc, #176]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	4b2d      	ldr	r3, [pc, #180]	; (8003bfc <HAL_RCC_OscConfig+0x580>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6a11      	ldr	r1, [r2, #32]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b50:	3a01      	subs	r2, #1
 8003b52:	0112      	lsls	r2, r2, #4
 8003b54:	4311      	orrs	r1, r2
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003b5a:	0212      	lsls	r2, r2, #8
 8003b5c:	4311      	orrs	r1, r2
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b62:	0852      	lsrs	r2, r2, #1
 8003b64:	3a01      	subs	r2, #1
 8003b66:	0552      	lsls	r2, r2, #21
 8003b68:	4311      	orrs	r1, r2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b6e:	0852      	lsrs	r2, r2, #1
 8003b70:	3a01      	subs	r2, #1
 8003b72:	0652      	lsls	r2, r2, #25
 8003b74:	4311      	orrs	r1, r2
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b7a:	06d2      	lsls	r2, r2, #27
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	491d      	ldr	r1, [pc, #116]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b84:	4b1b      	ldr	r3, [pc, #108]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a1a      	ldr	r2, [pc, #104]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b8e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b90:	4b18      	ldr	r3, [pc, #96]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4a17      	ldr	r2, [pc, #92]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9c:	f7fe fb64 	bl	8002268 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba4:	f7fe fb60 	bl	8002268 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e074      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb6:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x528>
 8003bc2:	e06c      	b.n	8003c9e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a0a      	ldr	r2, [pc, #40]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bce:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003bd0:	4b08      	ldr	r3, [pc, #32]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4a07      	ldr	r2, [pc, #28]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003bd6:	f023 0303 	bic.w	r3, r3, #3
 8003bda:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003bdc:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	4a04      	ldr	r2, [pc, #16]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003be2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bec:	f7fe fb3c 	bl	8002268 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf2:	e00e      	b.n	8003c12 <HAL_RCC_OscConfig+0x596>
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	40007000 	.word	0x40007000
 8003bfc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c00:	f7fe fb32 	bl	8002268 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e046      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c12:	4b25      	ldr	r3, [pc, #148]	; (8003ca8 <HAL_RCC_OscConfig+0x62c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x584>
 8003c1e:	e03e      	b.n	8003c9e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e039      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003c2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ca8 <HAL_RCC_OscConfig+0x62c>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f003 0203 	and.w	r2, r3, #3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d12c      	bne.n	8003c9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d123      	bne.n	8003c9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d11b      	bne.n	8003c9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d113      	bne.n	8003c9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7c:	085b      	lsrs	r3, r3, #1
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d109      	bne.n	8003c9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c90:	085b      	lsrs	r3, r3, #1
 8003c92:	3b01      	subs	r3, #1
 8003c94:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d001      	beq.n	8003c9e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3720      	adds	r7, #32
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40021000 	.word	0x40021000

08003cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e11e      	b.n	8003f02 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cc4:	4b91      	ldr	r3, [pc, #580]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 030f 	and.w	r3, r3, #15
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d910      	bls.n	8003cf4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd2:	4b8e      	ldr	r3, [pc, #568]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 020f 	bic.w	r2, r3, #15
 8003cda:	498c      	ldr	r1, [pc, #560]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce2:	4b8a      	ldr	r3, [pc, #552]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d001      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e106      	b.n	8003f02 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d073      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d129      	bne.n	8003d5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d08:	4b81      	ldr	r3, [pc, #516]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0f4      	b.n	8003f02 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003d18:	f000 f9d0 	bl	80040bc <RCC_GetSysClockFreqFromPLLSource>
 8003d1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4a7c      	ldr	r2, [pc, #496]	; (8003f14 <HAL_RCC_ClockConfig+0x268>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d93f      	bls.n	8003da6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d26:	4b7a      	ldr	r3, [pc, #488]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d009      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d033      	beq.n	8003da6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d12f      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d46:	4b72      	ldr	r3, [pc, #456]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d4e:	4a70      	ldr	r2, [pc, #448]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d56:	2380      	movs	r3, #128	; 0x80
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	e024      	b.n	8003da6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d107      	bne.n	8003d74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d64:	4b6a      	ldr	r3, [pc, #424]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d109      	bne.n	8003d84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0c6      	b.n	8003f02 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d74:	4b66      	ldr	r3, [pc, #408]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e0be      	b.n	8003f02 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003d84:	f000 f8ce 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 8003d88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4a61      	ldr	r2, [pc, #388]	; (8003f14 <HAL_RCC_ClockConfig+0x268>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d909      	bls.n	8003da6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d92:	4b5f      	ldr	r3, [pc, #380]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d9a:	4a5d      	ldr	r2, [pc, #372]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003da2:	2380      	movs	r3, #128	; 0x80
 8003da4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003da6:	4b5a      	ldr	r3, [pc, #360]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f023 0203 	bic.w	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	4957      	ldr	r1, [pc, #348]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db8:	f7fe fa56 	bl	8002268 <HAL_GetTick>
 8003dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc0:	f7fe fa52 	bl	8002268 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e095      	b.n	8003f02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd6:	4b4e      	ldr	r3, [pc, #312]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 020c 	and.w	r2, r3, #12
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d1eb      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d023      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e00:	4b43      	ldr	r3, [pc, #268]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	4a42      	ldr	r2, [pc, #264]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003e06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d007      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003e18:	4b3d      	ldr	r3, [pc, #244]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e20:	4a3b      	ldr	r2, [pc, #236]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003e22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e28:	4b39      	ldr	r3, [pc, #228]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	4936      	ldr	r1, [pc, #216]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	608b      	str	r3, [r1, #8]
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2b80      	cmp	r3, #128	; 0x80
 8003e40:	d105      	bne.n	8003e4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003e42:	4b33      	ldr	r3, [pc, #204]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	4a32      	ldr	r2, [pc, #200]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003e48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e4e:	4b2f      	ldr	r3, [pc, #188]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d21d      	bcs.n	8003e98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5c:	4b2b      	ldr	r3, [pc, #172]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f023 020f 	bic.w	r2, r3, #15
 8003e64:	4929      	ldr	r1, [pc, #164]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e6c:	f7fe f9fc 	bl	8002268 <HAL_GetTick>
 8003e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e72:	e00a      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e74:	f7fe f9f8 	bl	8002268 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e03b      	b.n	8003f02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8a:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d1ed      	bne.n	8003e74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea4:	4b1a      	ldr	r3, [pc, #104]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	4917      	ldr	r1, [pc, #92]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d009      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ec2:	4b13      	ldr	r3, [pc, #76]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	490f      	ldr	r1, [pc, #60]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ed6:	f000 f825 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 8003eda:	4602      	mov	r2, r0
 8003edc:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	490c      	ldr	r1, [pc, #48]	; (8003f18 <HAL_RCC_ClockConfig+0x26c>)
 8003ee8:	5ccb      	ldrb	r3, [r1, r3]
 8003eea:	f003 031f 	and.w	r3, r3, #31
 8003eee:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef2:	4a0a      	ldr	r2, [pc, #40]	; (8003f1c <HAL_RCC_ClockConfig+0x270>)
 8003ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <HAL_RCC_ClockConfig+0x274>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fd fd9e 	bl	8001a3c <HAL_InitTick>
 8003f00:	4603      	mov	r3, r0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40022000 	.word	0x40022000
 8003f10:	40021000 	.word	0x40021000
 8003f14:	04c4b400 	.word	0x04c4b400
 8003f18:	0800bd00 	.word	0x0800bd00
 8003f1c:	20000000 	.word	0x20000000
 8003f20:	20000004 	.word	0x20000004

08003f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f2a:	4b2c      	ldr	r3, [pc, #176]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d102      	bne.n	8003f3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f36:	4b2a      	ldr	r3, [pc, #168]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	e047      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003f3c:	4b27      	ldr	r3, [pc, #156]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 030c 	and.w	r3, r3, #12
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d102      	bne.n	8003f4e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f48:	4b26      	ldr	r3, [pc, #152]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	e03e      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003f4e:	4b23      	ldr	r3, [pc, #140]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
 8003f56:	2b0c      	cmp	r3, #12
 8003f58:	d136      	bne.n	8003fc8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f5a:	4b20      	ldr	r3, [pc, #128]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f64:	4b1d      	ldr	r3, [pc, #116]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	3301      	adds	r3, #1
 8003f70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d10c      	bne.n	8003f92 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f78:	4a1a      	ldr	r2, [pc, #104]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f80:	4a16      	ldr	r2, [pc, #88]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f82:	68d2      	ldr	r2, [r2, #12]
 8003f84:	0a12      	lsrs	r2, r2, #8
 8003f86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	617b      	str	r3, [r7, #20]
      break;
 8003f90:	e00c      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f92:	4a13      	ldr	r2, [pc, #76]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9a:	4a10      	ldr	r2, [pc, #64]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f9c:	68d2      	ldr	r2, [r2, #12]
 8003f9e:	0a12      	lsrs	r2, r2, #8
 8003fa0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fa4:	fb02 f303 	mul.w	r3, r2, r3
 8003fa8:	617b      	str	r3, [r7, #20]
      break;
 8003faa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	0e5b      	lsrs	r3, r3, #25
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	e001      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003fcc:	693b      	ldr	r3, [r7, #16]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	00f42400 	.word	0x00f42400
 8003fe4:	007a1200 	.word	0x007a1200

08003fe8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fec:	4b03      	ldr	r3, [pc, #12]	; (8003ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	20000000 	.word	0x20000000

08004000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004004:	f7ff fff0 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 8004008:	4602      	mov	r2, r0
 800400a:	4b06      	ldr	r3, [pc, #24]	; (8004024 <HAL_RCC_GetPCLK1Freq+0x24>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	0a1b      	lsrs	r3, r3, #8
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	4904      	ldr	r1, [pc, #16]	; (8004028 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004016:	5ccb      	ldrb	r3, [r1, r3]
 8004018:	f003 031f 	and.w	r3, r3, #31
 800401c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004020:	4618      	mov	r0, r3
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40021000 	.word	0x40021000
 8004028:	0800bd10 	.word	0x0800bd10

0800402c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004030:	f7ff ffda 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 8004034:	4602      	mov	r2, r0
 8004036:	4b06      	ldr	r3, [pc, #24]	; (8004050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	0adb      	lsrs	r3, r3, #11
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	4904      	ldr	r1, [pc, #16]	; (8004054 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004042:	5ccb      	ldrb	r3, [r1, r3]
 8004044:	f003 031f 	and.w	r3, r3, #31
 8004048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800404c:	4618      	mov	r0, r3
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40021000 	.word	0x40021000
 8004054:	0800bd10 	.word	0x0800bd10

08004058 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	220f      	movs	r2, #15
 8004066:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004068:	4b12      	ldr	r3, [pc, #72]	; (80040b4 <HAL_RCC_GetClockConfig+0x5c>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 0203 	and.w	r2, r3, #3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004074:	4b0f      	ldr	r3, [pc, #60]	; (80040b4 <HAL_RCC_GetClockConfig+0x5c>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004080:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <HAL_RCC_GetClockConfig+0x5c>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800408c:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <HAL_RCC_GetClockConfig+0x5c>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	08db      	lsrs	r3, r3, #3
 8004092:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800409a:	4b07      	ldr	r3, [pc, #28]	; (80040b8 <HAL_RCC_GetClockConfig+0x60>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 020f 	and.w	r2, r3, #15
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	601a      	str	r2, [r3, #0]
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40021000 	.word	0x40021000
 80040b8:	40022000 	.word	0x40022000

080040bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040c2:	4b1e      	ldr	r3, [pc, #120]	; (800413c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040cc:	4b1b      	ldr	r3, [pc, #108]	; (800413c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	091b      	lsrs	r3, r3, #4
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	3301      	adds	r3, #1
 80040d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	2b03      	cmp	r3, #3
 80040de:	d10c      	bne.n	80040fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040e0:	4a17      	ldr	r2, [pc, #92]	; (8004140 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e8:	4a14      	ldr	r2, [pc, #80]	; (800413c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040ea:	68d2      	ldr	r2, [r2, #12]
 80040ec:	0a12      	lsrs	r2, r2, #8
 80040ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040f2:	fb02 f303 	mul.w	r3, r2, r3
 80040f6:	617b      	str	r3, [r7, #20]
    break;
 80040f8:	e00c      	b.n	8004114 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040fa:	4a12      	ldr	r2, [pc, #72]	; (8004144 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004102:	4a0e      	ldr	r2, [pc, #56]	; (800413c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004104:	68d2      	ldr	r2, [r2, #12]
 8004106:	0a12      	lsrs	r2, r2, #8
 8004108:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800410c:	fb02 f303 	mul.w	r3, r2, r3
 8004110:	617b      	str	r3, [r7, #20]
    break;
 8004112:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004114:	4b09      	ldr	r3, [pc, #36]	; (800413c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	0e5b      	lsrs	r3, r3, #25
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	3301      	adds	r3, #1
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	fbb2 f3f3 	udiv	r3, r2, r3
 800412c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800412e:	687b      	ldr	r3, [r7, #4]
}
 8004130:	4618      	mov	r0, r3
 8004132:	371c      	adds	r7, #28
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	40021000 	.word	0x40021000
 8004140:	007a1200 	.word	0x007a1200
 8004144:	00f42400 	.word	0x00f42400

08004148 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004150:	2300      	movs	r3, #0
 8004152:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004154:	2300      	movs	r3, #0
 8004156:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 8098 	beq.w	8004296 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004166:	2300      	movs	r3, #0
 8004168:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800416a:	4b43      	ldr	r3, [pc, #268]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800416c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10d      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004176:	4b40      	ldr	r3, [pc, #256]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417a:	4a3f      	ldr	r2, [pc, #252]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800417c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004180:	6593      	str	r3, [r2, #88]	; 0x58
 8004182:	4b3d      	ldr	r3, [pc, #244]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418a:	60bb      	str	r3, [r7, #8]
 800418c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800418e:	2301      	movs	r3, #1
 8004190:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004192:	4b3a      	ldr	r3, [pc, #232]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a39      	ldr	r2, [pc, #228]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800419e:	f7fe f863 	bl	8002268 <HAL_GetTick>
 80041a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041a4:	e009      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a6:	f7fe f85f 	bl	8002268 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d902      	bls.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	74fb      	strb	r3, [r7, #19]
        break;
 80041b8:	e005      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041ba:	4b30      	ldr	r3, [pc, #192]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0ef      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80041c6:	7cfb      	ldrb	r3, [r7, #19]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d159      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041cc:	4b2a      	ldr	r3, [pc, #168]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d01e      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d019      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041e8:	4b23      	ldr	r3, [pc, #140]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041f4:	4b20      	ldr	r3, [pc, #128]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fa:	4a1f      	ldr	r2, [pc, #124]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004204:	4b1c      	ldr	r3, [pc, #112]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420a:	4a1b      	ldr	r2, [pc, #108]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800420c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004214:	4a18      	ldr	r2, [pc, #96]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d016      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004226:	f7fe f81f 	bl	8002268 <HAL_GetTick>
 800422a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800422c:	e00b      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800422e:	f7fe f81b 	bl	8002268 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	f241 3288 	movw	r2, #5000	; 0x1388
 800423c:	4293      	cmp	r3, r2
 800423e:	d902      	bls.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	74fb      	strb	r3, [r7, #19]
            break;
 8004244:	e006      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004246:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0ec      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004254:	7cfb      	ldrb	r3, [r7, #19]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10b      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800425a:	4b07      	ldr	r3, [pc, #28]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800425c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004260:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	4903      	ldr	r1, [pc, #12]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004270:	e008      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004272:	7cfb      	ldrb	r3, [r7, #19]
 8004274:	74bb      	strb	r3, [r7, #18]
 8004276:	e005      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004278:	40021000 	.word	0x40021000
 800427c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004280:	7cfb      	ldrb	r3, [r7, #19]
 8004282:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004284:	7c7b      	ldrb	r3, [r7, #17]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d105      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800428a:	4ba6      	ldr	r3, [pc, #664]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800428c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428e:	4aa5      	ldr	r2, [pc, #660]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004294:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042a2:	4ba0      	ldr	r3, [pc, #640]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a8:	f023 0203 	bic.w	r2, r3, #3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	499c      	ldr	r1, [pc, #624]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042c4:	4b97      	ldr	r3, [pc, #604]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ca:	f023 020c 	bic.w	r2, r3, #12
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	4994      	ldr	r1, [pc, #592]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042e6:	4b8f      	ldr	r3, [pc, #572]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	498b      	ldr	r1, [pc, #556]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004308:	4b86      	ldr	r3, [pc, #536]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	4983      	ldr	r1, [pc, #524]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800432a:	4b7e      	ldr	r3, [pc, #504]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004330:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	497a      	ldr	r1, [pc, #488]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800434c:	4b75      	ldr	r3, [pc, #468]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004352:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	4972      	ldr	r1, [pc, #456]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800436e:	4b6d      	ldr	r3, [pc, #436]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004374:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	4969      	ldr	r1, [pc, #420]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004390:	4b64      	ldr	r3, [pc, #400]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004396:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	4961      	ldr	r1, [pc, #388]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043b2:	4b5c      	ldr	r3, [pc, #368]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	4958      	ldr	r1, [pc, #352]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d015      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043d4:	4b53      	ldr	r3, [pc, #332]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e2:	4950      	ldr	r1, [pc, #320]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043f2:	d105      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043f4:	4b4b      	ldr	r3, [pc, #300]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	4a4a      	ldr	r2, [pc, #296]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004408:	2b00      	cmp	r3, #0
 800440a:	d015      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800440c:	4b45      	ldr	r3, [pc, #276]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004412:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	4942      	ldr	r1, [pc, #264]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800442a:	d105      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800442c:	4b3d      	ldr	r3, [pc, #244]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	4a3c      	ldr	r2, [pc, #240]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004436:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d015      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004444:	4b37      	ldr	r3, [pc, #220]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	4934      	ldr	r1, [pc, #208]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004462:	d105      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004464:	4b2f      	ldr	r3, [pc, #188]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	4a2e      	ldr	r2, [pc, #184]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800446a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800446e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d015      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800447c:	4b29      	ldr	r3, [pc, #164]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004482:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448a:	4926      	ldr	r1, [pc, #152]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800449a:	d105      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800449c:	4b21      	ldr	r3, [pc, #132]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4a20      	ldr	r2, [pc, #128]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d015      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044b4:	4b1b      	ldr	r3, [pc, #108]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	4918      	ldr	r1, [pc, #96]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044d2:	d105      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044d4:	4b13      	ldr	r3, [pc, #76]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	4a12      	ldr	r2, [pc, #72]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d015      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80044ec:	4b0d      	ldr	r3, [pc, #52]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fa:	490a      	ldr	r1, [pc, #40]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004506:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800450a:	d105      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800450c:	4b05      	ldr	r3, [pc, #20]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4a04      	ldr	r2, [pc, #16]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004516:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004518:	7cbb      	ldrb	r3, [r7, #18]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40021000 	.word	0x40021000

08004528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e049      	b.n	80045ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fd fd10 	bl	8001f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3304      	adds	r3, #4
 8004564:	4619      	mov	r1, r3
 8004566:	4610      	mov	r0, r2
 8004568:	f000 fba4 	bl	8004cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d001      	beq.n	80045f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e042      	b.n	8004676 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a21      	ldr	r2, [pc, #132]	; (8004684 <HAL_TIM_Base_Start+0xac>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d018      	beq.n	8004634 <HAL_TIM_Base_Start+0x5c>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800460a:	d013      	beq.n	8004634 <HAL_TIM_Base_Start+0x5c>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a1d      	ldr	r2, [pc, #116]	; (8004688 <HAL_TIM_Base_Start+0xb0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00e      	beq.n	8004634 <HAL_TIM_Base_Start+0x5c>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a1c      	ldr	r2, [pc, #112]	; (800468c <HAL_TIM_Base_Start+0xb4>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d009      	beq.n	8004634 <HAL_TIM_Base_Start+0x5c>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a1a      	ldr	r2, [pc, #104]	; (8004690 <HAL_TIM_Base_Start+0xb8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d004      	beq.n	8004634 <HAL_TIM_Base_Start+0x5c>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a19      	ldr	r2, [pc, #100]	; (8004694 <HAL_TIM_Base_Start+0xbc>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d115      	bne.n	8004660 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	4b17      	ldr	r3, [pc, #92]	; (8004698 <HAL_TIM_Base_Start+0xc0>)
 800463c:	4013      	ands	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b06      	cmp	r3, #6
 8004644:	d015      	beq.n	8004672 <HAL_TIM_Base_Start+0x9a>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800464c:	d011      	beq.n	8004672 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0201 	orr.w	r2, r2, #1
 800465c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465e:	e008      	b.n	8004672 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 0201 	orr.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	e000      	b.n	8004674 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004672:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40012c00 	.word	0x40012c00
 8004688:	40000400 	.word	0x40000400
 800468c:	40000800 	.word	0x40000800
 8004690:	40013400 	.word	0x40013400
 8004694:	40014000 	.word	0x40014000
 8004698:	00010007 	.word	0x00010007

0800469c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d001      	beq.n	80046b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e04a      	b.n	800474a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0201 	orr.w	r2, r2, #1
 80046ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a21      	ldr	r2, [pc, #132]	; (8004758 <HAL_TIM_Base_Start_IT+0xbc>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d018      	beq.n	8004708 <HAL_TIM_Base_Start_IT+0x6c>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046de:	d013      	beq.n	8004708 <HAL_TIM_Base_Start_IT+0x6c>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1d      	ldr	r2, [pc, #116]	; (800475c <HAL_TIM_Base_Start_IT+0xc0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00e      	beq.n	8004708 <HAL_TIM_Base_Start_IT+0x6c>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1c      	ldr	r2, [pc, #112]	; (8004760 <HAL_TIM_Base_Start_IT+0xc4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d009      	beq.n	8004708 <HAL_TIM_Base_Start_IT+0x6c>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1a      	ldr	r2, [pc, #104]	; (8004764 <HAL_TIM_Base_Start_IT+0xc8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d004      	beq.n	8004708 <HAL_TIM_Base_Start_IT+0x6c>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a19      	ldr	r2, [pc, #100]	; (8004768 <HAL_TIM_Base_Start_IT+0xcc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d115      	bne.n	8004734 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	4b17      	ldr	r3, [pc, #92]	; (800476c <HAL_TIM_Base_Start_IT+0xd0>)
 8004710:	4013      	ands	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b06      	cmp	r3, #6
 8004718:	d015      	beq.n	8004746 <HAL_TIM_Base_Start_IT+0xaa>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004720:	d011      	beq.n	8004746 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0201 	orr.w	r2, r2, #1
 8004730:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004732:	e008      	b.n	8004746 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0201 	orr.w	r2, r2, #1
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	e000      	b.n	8004748 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004746:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	40012c00 	.word	0x40012c00
 800475c:	40000400 	.word	0x40000400
 8004760:	40000800 	.word	0x40000800
 8004764:	40013400 	.word	0x40013400
 8004768:	40014000 	.word	0x40014000
 800476c:	00010007 	.word	0x00010007

08004770 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b02      	cmp	r3, #2
 8004784:	d122      	bne.n	80047cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b02      	cmp	r3, #2
 8004792:	d11b      	bne.n	80047cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f06f 0202 	mvn.w	r2, #2
 800479c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fa60 	bl	8004c78 <HAL_TIM_IC_CaptureCallback>
 80047b8:	e005      	b.n	80047c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fa52 	bl	8004c64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fa63 	bl	8004c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d122      	bne.n	8004820 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d11b      	bne.n	8004820 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0204 	mvn.w	r2, #4
 80047f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2202      	movs	r2, #2
 80047f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fa36 	bl	8004c78 <HAL_TIM_IC_CaptureCallback>
 800480c:	e005      	b.n	800481a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fa28 	bl	8004c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fa39 	bl	8004c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b08      	cmp	r3, #8
 800482c:	d122      	bne.n	8004874 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b08      	cmp	r3, #8
 800483a:	d11b      	bne.n	8004874 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0208 	mvn.w	r2, #8
 8004844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2204      	movs	r2, #4
 800484a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fa0c 	bl	8004c78 <HAL_TIM_IC_CaptureCallback>
 8004860:	e005      	b.n	800486e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f9fe 	bl	8004c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fa0f 	bl	8004c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	2b10      	cmp	r3, #16
 8004880:	d122      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b10      	cmp	r3, #16
 800488e:	d11b      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0210 	mvn.w	r2, #16
 8004898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2208      	movs	r2, #8
 800489e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f9e2 	bl	8004c78 <HAL_TIM_IC_CaptureCallback>
 80048b4:	e005      	b.n	80048c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f9d4 	bl	8004c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f9e5 	bl	8004c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d10e      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d107      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0201 	mvn.w	r2, #1
 80048ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fd f862 	bl	80019b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fe:	2b80      	cmp	r3, #128	; 0x80
 8004900:	d10e      	bne.n	8004920 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490c:	2b80      	cmp	r3, #128	; 0x80
 800490e:	d107      	bne.n	8004920 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fb82 	bl	8005024 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800492e:	d10e      	bne.n	800494e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493a:	2b80      	cmp	r3, #128	; 0x80
 800493c:	d107      	bne.n	800494e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fb75 	bl	8005038 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004958:	2b40      	cmp	r3, #64	; 0x40
 800495a:	d10e      	bne.n	800497a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004966:	2b40      	cmp	r3, #64	; 0x40
 8004968:	d107      	bne.n	800497a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f993 	bl	8004ca0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b20      	cmp	r3, #32
 8004986:	d10e      	bne.n	80049a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f003 0320 	and.w	r3, r3, #32
 8004992:	2b20      	cmp	r3, #32
 8004994:	d107      	bne.n	80049a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f06f 0220 	mvn.w	r2, #32
 800499e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 fb35 	bl	8005010 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049b4:	d10f      	bne.n	80049d6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049c4:	d107      	bne.n	80049d6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80049ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fb3b 	bl	800504c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049e4:	d10f      	bne.n	8004a06 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049f4:	d107      	bne.n	8004a06 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80049fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 fb2d 	bl	8005060 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a14:	d10f      	bne.n	8004a36 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a24:	d107      	bne.n	8004a36 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 fb1f 	bl	8005074 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a44:	d10f      	bne.n	8004a66 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a54:	d107      	bne.n	8004a66 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fb11 	bl	8005088 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a66:	bf00      	nop
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
	...

08004a70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_TIM_ConfigClockSource+0x1c>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e0de      	b.n	8004c4a <HAL_TIM_ConfigClockSource+0x1da>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004aaa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ab6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a63      	ldr	r2, [pc, #396]	; (8004c54 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	f000 80a9 	beq.w	8004c1e <HAL_TIM_ConfigClockSource+0x1ae>
 8004acc:	4a61      	ldr	r2, [pc, #388]	; (8004c54 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	f200 80ae 	bhi.w	8004c30 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ad4:	4a60      	ldr	r2, [pc, #384]	; (8004c58 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	f000 80a1 	beq.w	8004c1e <HAL_TIM_ConfigClockSource+0x1ae>
 8004adc:	4a5e      	ldr	r2, [pc, #376]	; (8004c58 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	f200 80a6 	bhi.w	8004c30 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ae4:	4a5d      	ldr	r2, [pc, #372]	; (8004c5c <HAL_TIM_ConfigClockSource+0x1ec>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	f000 8099 	beq.w	8004c1e <HAL_TIM_ConfigClockSource+0x1ae>
 8004aec:	4a5b      	ldr	r2, [pc, #364]	; (8004c5c <HAL_TIM_ConfigClockSource+0x1ec>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	f200 809e 	bhi.w	8004c30 <HAL_TIM_ConfigClockSource+0x1c0>
 8004af4:	4a5a      	ldr	r2, [pc, #360]	; (8004c60 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	f000 8091 	beq.w	8004c1e <HAL_TIM_ConfigClockSource+0x1ae>
 8004afc:	4a58      	ldr	r2, [pc, #352]	; (8004c60 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	f200 8096 	bhi.w	8004c30 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004b08:	f000 8089 	beq.w	8004c1e <HAL_TIM_ConfigClockSource+0x1ae>
 8004b0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004b10:	f200 808e 	bhi.w	8004c30 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b18:	d03e      	beq.n	8004b98 <HAL_TIM_ConfigClockSource+0x128>
 8004b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b1e:	f200 8087 	bhi.w	8004c30 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b26:	f000 8086 	beq.w	8004c36 <HAL_TIM_ConfigClockSource+0x1c6>
 8004b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b2e:	d87f      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b30:	2b70      	cmp	r3, #112	; 0x70
 8004b32:	d01a      	beq.n	8004b6a <HAL_TIM_ConfigClockSource+0xfa>
 8004b34:	2b70      	cmp	r3, #112	; 0x70
 8004b36:	d87b      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b38:	2b60      	cmp	r3, #96	; 0x60
 8004b3a:	d050      	beq.n	8004bde <HAL_TIM_ConfigClockSource+0x16e>
 8004b3c:	2b60      	cmp	r3, #96	; 0x60
 8004b3e:	d877      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b40:	2b50      	cmp	r3, #80	; 0x50
 8004b42:	d03c      	beq.n	8004bbe <HAL_TIM_ConfigClockSource+0x14e>
 8004b44:	2b50      	cmp	r3, #80	; 0x50
 8004b46:	d873      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b48:	2b40      	cmp	r3, #64	; 0x40
 8004b4a:	d058      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x18e>
 8004b4c:	2b40      	cmp	r3, #64	; 0x40
 8004b4e:	d86f      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b50:	2b30      	cmp	r3, #48	; 0x30
 8004b52:	d064      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x1ae>
 8004b54:	2b30      	cmp	r3, #48	; 0x30
 8004b56:	d86b      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d060      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x1ae>
 8004b5c:	2b20      	cmp	r3, #32
 8004b5e:	d867      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d05c      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x1ae>
 8004b64:	2b10      	cmp	r3, #16
 8004b66:	d05a      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x1ae>
 8004b68:	e062      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6818      	ldr	r0, [r3, #0]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	6899      	ldr	r1, [r3, #8]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f000 f9a7 	bl	8004ecc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	609a      	str	r2, [r3, #8]
      break;
 8004b96:	e04f      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6818      	ldr	r0, [r3, #0]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	6899      	ldr	r1, [r3, #8]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f000 f990 	bl	8004ecc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bba:	609a      	str	r2, [r3, #8]
      break;
 8004bbc:	e03c      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6818      	ldr	r0, [r3, #0]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6859      	ldr	r1, [r3, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f000 f902 	bl	8004dd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2150      	movs	r1, #80	; 0x50
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 f95b 	bl	8004e92 <TIM_ITRx_SetConfig>
      break;
 8004bdc:	e02c      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6859      	ldr	r1, [r3, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	461a      	mov	r2, r3
 8004bec:	f000 f921 	bl	8004e32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2160      	movs	r1, #96	; 0x60
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 f94b 	bl	8004e92 <TIM_ITRx_SetConfig>
      break;
 8004bfc:	e01c      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6818      	ldr	r0, [r3, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	6859      	ldr	r1, [r3, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f000 f8e2 	bl	8004dd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2140      	movs	r1, #64	; 0x40
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 f93b 	bl	8004e92 <TIM_ITRx_SetConfig>
      break;
 8004c1c:	e00c      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4619      	mov	r1, r3
 8004c28:	4610      	mov	r0, r2
 8004c2a:	f000 f932 	bl	8004e92 <TIM_ITRx_SetConfig>
      break;
 8004c2e:	e003      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
      break;
 8004c34:	e000      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004c36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	00100070 	.word	0x00100070
 8004c58:	00100040 	.word	0x00100040
 8004c5c:	00100030 	.word	0x00100030
 8004c60:	00100020 	.word	0x00100020

08004c64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a3c      	ldr	r2, [pc, #240]	; (8004db8 <TIM_Base_SetConfig+0x104>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00f      	beq.n	8004cec <TIM_Base_SetConfig+0x38>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd2:	d00b      	beq.n	8004cec <TIM_Base_SetConfig+0x38>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a39      	ldr	r2, [pc, #228]	; (8004dbc <TIM_Base_SetConfig+0x108>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d007      	beq.n	8004cec <TIM_Base_SetConfig+0x38>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a38      	ldr	r2, [pc, #224]	; (8004dc0 <TIM_Base_SetConfig+0x10c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d003      	beq.n	8004cec <TIM_Base_SetConfig+0x38>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a37      	ldr	r2, [pc, #220]	; (8004dc4 <TIM_Base_SetConfig+0x110>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d108      	bne.n	8004cfe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a2d      	ldr	r2, [pc, #180]	; (8004db8 <TIM_Base_SetConfig+0x104>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d01b      	beq.n	8004d3e <TIM_Base_SetConfig+0x8a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0c:	d017      	beq.n	8004d3e <TIM_Base_SetConfig+0x8a>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a2a      	ldr	r2, [pc, #168]	; (8004dbc <TIM_Base_SetConfig+0x108>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d013      	beq.n	8004d3e <TIM_Base_SetConfig+0x8a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a29      	ldr	r2, [pc, #164]	; (8004dc0 <TIM_Base_SetConfig+0x10c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d00f      	beq.n	8004d3e <TIM_Base_SetConfig+0x8a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a28      	ldr	r2, [pc, #160]	; (8004dc4 <TIM_Base_SetConfig+0x110>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d00b      	beq.n	8004d3e <TIM_Base_SetConfig+0x8a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a27      	ldr	r2, [pc, #156]	; (8004dc8 <TIM_Base_SetConfig+0x114>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d007      	beq.n	8004d3e <TIM_Base_SetConfig+0x8a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a26      	ldr	r2, [pc, #152]	; (8004dcc <TIM_Base_SetConfig+0x118>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d003      	beq.n	8004d3e <TIM_Base_SetConfig+0x8a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a25      	ldr	r2, [pc, #148]	; (8004dd0 <TIM_Base_SetConfig+0x11c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d108      	bne.n	8004d50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a10      	ldr	r2, [pc, #64]	; (8004db8 <TIM_Base_SetConfig+0x104>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00f      	beq.n	8004d9c <TIM_Base_SetConfig+0xe8>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a11      	ldr	r2, [pc, #68]	; (8004dc4 <TIM_Base_SetConfig+0x110>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00b      	beq.n	8004d9c <TIM_Base_SetConfig+0xe8>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a10      	ldr	r2, [pc, #64]	; (8004dc8 <TIM_Base_SetConfig+0x114>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d007      	beq.n	8004d9c <TIM_Base_SetConfig+0xe8>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a0f      	ldr	r2, [pc, #60]	; (8004dcc <TIM_Base_SetConfig+0x118>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d003      	beq.n	8004d9c <TIM_Base_SetConfig+0xe8>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a0e      	ldr	r2, [pc, #56]	; (8004dd0 <TIM_Base_SetConfig+0x11c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d103      	bne.n	8004da4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	615a      	str	r2, [r3, #20]
}
 8004daa:	bf00      	nop
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	40012c00 	.word	0x40012c00
 8004dbc:	40000400 	.word	0x40000400
 8004dc0:	40000800 	.word	0x40000800
 8004dc4:	40013400 	.word	0x40013400
 8004dc8:	40014000 	.word	0x40014000
 8004dcc:	40014400 	.word	0x40014400
 8004dd0:	40014800 	.word	0x40014800

08004dd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	f023 0201 	bic.w	r2, r3, #1
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f023 030a 	bic.w	r3, r3, #10
 8004e10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	621a      	str	r2, [r3, #32]
}
 8004e26:	bf00      	nop
 8004e28:	371c      	adds	r7, #28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b087      	sub	sp, #28
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	60f8      	str	r0, [r7, #12]
 8004e3a:	60b9      	str	r1, [r7, #8]
 8004e3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	f023 0210 	bic.w	r2, r3, #16
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	031b      	lsls	r3, r3, #12
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	011b      	lsls	r3, r3, #4
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	621a      	str	r2, [r3, #32]
}
 8004e86:	bf00      	nop
 8004e88:	371c      	adds	r7, #28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b085      	sub	sp, #20
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f043 0307 	orr.w	r3, r3, #7
 8004eb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	609a      	str	r2, [r3, #8]
}
 8004ec0:	bf00      	nop
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ee6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	021a      	lsls	r2, r3, #8
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	609a      	str	r2, [r3, #8]
}
 8004f00:	bf00      	nop
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f20:	2302      	movs	r3, #2
 8004f22:	e065      	b.n	8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a2c      	ldr	r2, [pc, #176]	; (8004ffc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d004      	beq.n	8004f58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a2b      	ldr	r2, [pc, #172]	; (8005000 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d108      	bne.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1b      	ldr	r2, [pc, #108]	; (8004ffc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d018      	beq.n	8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f9a:	d013      	beq.n	8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a18      	ldr	r2, [pc, #96]	; (8005004 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00e      	beq.n	8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a17      	ldr	r2, [pc, #92]	; (8005008 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d009      	beq.n	8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a12      	ldr	r2, [pc, #72]	; (8005000 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d004      	beq.n	8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a13      	ldr	r2, [pc, #76]	; (800500c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d10c      	bne.n	8004fde <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	40012c00 	.word	0x40012c00
 8005000:	40013400 	.word	0x40013400
 8005004:	40000400 	.word	0x40000400
 8005008:	40000800 	.word	0x40000800
 800500c:	40014000 	.word	0x40014000

08005010 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e042      	b.n	8005134 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d106      	bne.n	80050c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7fd f825 	bl	8002110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2224      	movs	r2, #36	; 0x24
 80050ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0201 	bic.w	r2, r2, #1
 80050dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f8c2 	bl	8005268 <UART_SetConfig>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d101      	bne.n	80050ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e022      	b.n	8005134 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fb52 	bl	80057a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800510a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800511a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0201 	orr.w	r2, r2, #1
 800512a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 fbd9 	bl	80058e4 <UART_CheckIdleState>
 8005132:	4603      	mov	r3, r0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08a      	sub	sp, #40	; 0x28
 8005140:	af02      	add	r7, sp, #8
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	603b      	str	r3, [r7, #0]
 8005148:	4613      	mov	r3, r2
 800514a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005152:	2b20      	cmp	r3, #32
 8005154:	f040 8083 	bne.w	800525e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <HAL_UART_Transmit+0x28>
 800515e:	88fb      	ldrh	r3, [r7, #6]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e07b      	b.n	8005260 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800516e:	2b01      	cmp	r3, #1
 8005170:	d101      	bne.n	8005176 <HAL_UART_Transmit+0x3a>
 8005172:	2302      	movs	r3, #2
 8005174:	e074      	b.n	8005260 <HAL_UART_Transmit+0x124>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2221      	movs	r2, #33	; 0x21
 800518a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800518e:	f7fd f86b 	bl	8002268 <HAL_GetTick>
 8005192:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	88fa      	ldrh	r2, [r7, #6]
 8005198:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	88fa      	ldrh	r2, [r7, #6]
 80051a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ac:	d108      	bne.n	80051c0 <HAL_UART_Transmit+0x84>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d104      	bne.n	80051c0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80051b6:	2300      	movs	r3, #0
 80051b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	e003      	b.n	80051c8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80051d0:	e02c      	b.n	800522c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2200      	movs	r2, #0
 80051da:	2180      	movs	r1, #128	; 0x80
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 fbcc 	bl	800597a <UART_WaitOnFlagUntilTimeout>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e039      	b.n	8005260 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10b      	bne.n	800520a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	461a      	mov	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005200:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	3302      	adds	r3, #2
 8005206:	61bb      	str	r3, [r7, #24]
 8005208:	e007      	b.n	800521a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	781a      	ldrb	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	3301      	adds	r3, #1
 8005218:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005232:	b29b      	uxth	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1cc      	bne.n	80051d2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2200      	movs	r2, #0
 8005240:	2140      	movs	r1, #64	; 0x40
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 fb99 	bl	800597a <UART_WaitOnFlagUntilTimeout>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e006      	b.n	8005260 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2220      	movs	r2, #32
 8005256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	e000      	b.n	8005260 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800525e:	2302      	movs	r3, #2
  }
}
 8005260:	4618      	mov	r0, r3
 8005262:	3720      	adds	r7, #32
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005268:	b5b0      	push	{r4, r5, r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005270:	2300      	movs	r3, #0
 8005272:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	431a      	orrs	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	4313      	orrs	r3, r2
 800528a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	4baf      	ldr	r3, [pc, #700]	; (8005550 <UART_SetConfig+0x2e8>)
 8005294:	4013      	ands	r3, r2
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6812      	ldr	r2, [r2, #0]
 800529a:	69f9      	ldr	r1, [r7, #28]
 800529c:	430b      	orrs	r3, r1
 800529e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4aa4      	ldr	r2, [pc, #656]	; (8005554 <UART_SetConfig+0x2ec>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d004      	beq.n	80052d0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	69fa      	ldr	r2, [r7, #28]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80052da:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6812      	ldr	r2, [r2, #0]
 80052e2:	69f9      	ldr	r1, [r7, #28]
 80052e4:	430b      	orrs	r3, r1
 80052e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ee:	f023 010f 	bic.w	r1, r3, #15
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a95      	ldr	r2, [pc, #596]	; (8005558 <UART_SetConfig+0x2f0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d120      	bne.n	800534a <UART_SetConfig+0xe2>
 8005308:	4b94      	ldr	r3, [pc, #592]	; (800555c <UART_SetConfig+0x2f4>)
 800530a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530e:	f003 0303 	and.w	r3, r3, #3
 8005312:	2b03      	cmp	r3, #3
 8005314:	d816      	bhi.n	8005344 <UART_SetConfig+0xdc>
 8005316:	a201      	add	r2, pc, #4	; (adr r2, 800531c <UART_SetConfig+0xb4>)
 8005318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531c:	0800532d 	.word	0x0800532d
 8005320:	08005339 	.word	0x08005339
 8005324:	08005333 	.word	0x08005333
 8005328:	0800533f 	.word	0x0800533f
 800532c:	2301      	movs	r3, #1
 800532e:	76fb      	strb	r3, [r7, #27]
 8005330:	e0bc      	b.n	80054ac <UART_SetConfig+0x244>
 8005332:	2302      	movs	r3, #2
 8005334:	76fb      	strb	r3, [r7, #27]
 8005336:	e0b9      	b.n	80054ac <UART_SetConfig+0x244>
 8005338:	2304      	movs	r3, #4
 800533a:	76fb      	strb	r3, [r7, #27]
 800533c:	e0b6      	b.n	80054ac <UART_SetConfig+0x244>
 800533e:	2308      	movs	r3, #8
 8005340:	76fb      	strb	r3, [r7, #27]
 8005342:	e0b3      	b.n	80054ac <UART_SetConfig+0x244>
 8005344:	2310      	movs	r3, #16
 8005346:	76fb      	strb	r3, [r7, #27]
 8005348:	e0b0      	b.n	80054ac <UART_SetConfig+0x244>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a84      	ldr	r2, [pc, #528]	; (8005560 <UART_SetConfig+0x2f8>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d132      	bne.n	80053ba <UART_SetConfig+0x152>
 8005354:	4b81      	ldr	r3, [pc, #516]	; (800555c <UART_SetConfig+0x2f4>)
 8005356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535a:	f003 030c 	and.w	r3, r3, #12
 800535e:	2b0c      	cmp	r3, #12
 8005360:	d828      	bhi.n	80053b4 <UART_SetConfig+0x14c>
 8005362:	a201      	add	r2, pc, #4	; (adr r2, 8005368 <UART_SetConfig+0x100>)
 8005364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005368:	0800539d 	.word	0x0800539d
 800536c:	080053b5 	.word	0x080053b5
 8005370:	080053b5 	.word	0x080053b5
 8005374:	080053b5 	.word	0x080053b5
 8005378:	080053a9 	.word	0x080053a9
 800537c:	080053b5 	.word	0x080053b5
 8005380:	080053b5 	.word	0x080053b5
 8005384:	080053b5 	.word	0x080053b5
 8005388:	080053a3 	.word	0x080053a3
 800538c:	080053b5 	.word	0x080053b5
 8005390:	080053b5 	.word	0x080053b5
 8005394:	080053b5 	.word	0x080053b5
 8005398:	080053af 	.word	0x080053af
 800539c:	2300      	movs	r3, #0
 800539e:	76fb      	strb	r3, [r7, #27]
 80053a0:	e084      	b.n	80054ac <UART_SetConfig+0x244>
 80053a2:	2302      	movs	r3, #2
 80053a4:	76fb      	strb	r3, [r7, #27]
 80053a6:	e081      	b.n	80054ac <UART_SetConfig+0x244>
 80053a8:	2304      	movs	r3, #4
 80053aa:	76fb      	strb	r3, [r7, #27]
 80053ac:	e07e      	b.n	80054ac <UART_SetConfig+0x244>
 80053ae:	2308      	movs	r3, #8
 80053b0:	76fb      	strb	r3, [r7, #27]
 80053b2:	e07b      	b.n	80054ac <UART_SetConfig+0x244>
 80053b4:	2310      	movs	r3, #16
 80053b6:	76fb      	strb	r3, [r7, #27]
 80053b8:	e078      	b.n	80054ac <UART_SetConfig+0x244>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a69      	ldr	r2, [pc, #420]	; (8005564 <UART_SetConfig+0x2fc>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d120      	bne.n	8005406 <UART_SetConfig+0x19e>
 80053c4:	4b65      	ldr	r3, [pc, #404]	; (800555c <UART_SetConfig+0x2f4>)
 80053c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053ce:	2b30      	cmp	r3, #48	; 0x30
 80053d0:	d013      	beq.n	80053fa <UART_SetConfig+0x192>
 80053d2:	2b30      	cmp	r3, #48	; 0x30
 80053d4:	d814      	bhi.n	8005400 <UART_SetConfig+0x198>
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	d009      	beq.n	80053ee <UART_SetConfig+0x186>
 80053da:	2b20      	cmp	r3, #32
 80053dc:	d810      	bhi.n	8005400 <UART_SetConfig+0x198>
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <UART_SetConfig+0x180>
 80053e2:	2b10      	cmp	r3, #16
 80053e4:	d006      	beq.n	80053f4 <UART_SetConfig+0x18c>
 80053e6:	e00b      	b.n	8005400 <UART_SetConfig+0x198>
 80053e8:	2300      	movs	r3, #0
 80053ea:	76fb      	strb	r3, [r7, #27]
 80053ec:	e05e      	b.n	80054ac <UART_SetConfig+0x244>
 80053ee:	2302      	movs	r3, #2
 80053f0:	76fb      	strb	r3, [r7, #27]
 80053f2:	e05b      	b.n	80054ac <UART_SetConfig+0x244>
 80053f4:	2304      	movs	r3, #4
 80053f6:	76fb      	strb	r3, [r7, #27]
 80053f8:	e058      	b.n	80054ac <UART_SetConfig+0x244>
 80053fa:	2308      	movs	r3, #8
 80053fc:	76fb      	strb	r3, [r7, #27]
 80053fe:	e055      	b.n	80054ac <UART_SetConfig+0x244>
 8005400:	2310      	movs	r3, #16
 8005402:	76fb      	strb	r3, [r7, #27]
 8005404:	e052      	b.n	80054ac <UART_SetConfig+0x244>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a57      	ldr	r2, [pc, #348]	; (8005568 <UART_SetConfig+0x300>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d120      	bne.n	8005452 <UART_SetConfig+0x1ea>
 8005410:	4b52      	ldr	r3, [pc, #328]	; (800555c <UART_SetConfig+0x2f4>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005416:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800541a:	2bc0      	cmp	r3, #192	; 0xc0
 800541c:	d013      	beq.n	8005446 <UART_SetConfig+0x1de>
 800541e:	2bc0      	cmp	r3, #192	; 0xc0
 8005420:	d814      	bhi.n	800544c <UART_SetConfig+0x1e4>
 8005422:	2b80      	cmp	r3, #128	; 0x80
 8005424:	d009      	beq.n	800543a <UART_SetConfig+0x1d2>
 8005426:	2b80      	cmp	r3, #128	; 0x80
 8005428:	d810      	bhi.n	800544c <UART_SetConfig+0x1e4>
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <UART_SetConfig+0x1cc>
 800542e:	2b40      	cmp	r3, #64	; 0x40
 8005430:	d006      	beq.n	8005440 <UART_SetConfig+0x1d8>
 8005432:	e00b      	b.n	800544c <UART_SetConfig+0x1e4>
 8005434:	2300      	movs	r3, #0
 8005436:	76fb      	strb	r3, [r7, #27]
 8005438:	e038      	b.n	80054ac <UART_SetConfig+0x244>
 800543a:	2302      	movs	r3, #2
 800543c:	76fb      	strb	r3, [r7, #27]
 800543e:	e035      	b.n	80054ac <UART_SetConfig+0x244>
 8005440:	2304      	movs	r3, #4
 8005442:	76fb      	strb	r3, [r7, #27]
 8005444:	e032      	b.n	80054ac <UART_SetConfig+0x244>
 8005446:	2308      	movs	r3, #8
 8005448:	76fb      	strb	r3, [r7, #27]
 800544a:	e02f      	b.n	80054ac <UART_SetConfig+0x244>
 800544c:	2310      	movs	r3, #16
 800544e:	76fb      	strb	r3, [r7, #27]
 8005450:	e02c      	b.n	80054ac <UART_SetConfig+0x244>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a3f      	ldr	r2, [pc, #252]	; (8005554 <UART_SetConfig+0x2ec>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d125      	bne.n	80054a8 <UART_SetConfig+0x240>
 800545c:	4b3f      	ldr	r3, [pc, #252]	; (800555c <UART_SetConfig+0x2f4>)
 800545e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005462:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005466:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800546a:	d017      	beq.n	800549c <UART_SetConfig+0x234>
 800546c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005470:	d817      	bhi.n	80054a2 <UART_SetConfig+0x23a>
 8005472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005476:	d00b      	beq.n	8005490 <UART_SetConfig+0x228>
 8005478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800547c:	d811      	bhi.n	80054a2 <UART_SetConfig+0x23a>
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <UART_SetConfig+0x222>
 8005482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005486:	d006      	beq.n	8005496 <UART_SetConfig+0x22e>
 8005488:	e00b      	b.n	80054a2 <UART_SetConfig+0x23a>
 800548a:	2300      	movs	r3, #0
 800548c:	76fb      	strb	r3, [r7, #27]
 800548e:	e00d      	b.n	80054ac <UART_SetConfig+0x244>
 8005490:	2302      	movs	r3, #2
 8005492:	76fb      	strb	r3, [r7, #27]
 8005494:	e00a      	b.n	80054ac <UART_SetConfig+0x244>
 8005496:	2304      	movs	r3, #4
 8005498:	76fb      	strb	r3, [r7, #27]
 800549a:	e007      	b.n	80054ac <UART_SetConfig+0x244>
 800549c:	2308      	movs	r3, #8
 800549e:	76fb      	strb	r3, [r7, #27]
 80054a0:	e004      	b.n	80054ac <UART_SetConfig+0x244>
 80054a2:	2310      	movs	r3, #16
 80054a4:	76fb      	strb	r3, [r7, #27]
 80054a6:	e001      	b.n	80054ac <UART_SetConfig+0x244>
 80054a8:	2310      	movs	r3, #16
 80054aa:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a28      	ldr	r2, [pc, #160]	; (8005554 <UART_SetConfig+0x2ec>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	f040 809e 	bne.w	80055f4 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054b8:	7efb      	ldrb	r3, [r7, #27]
 80054ba:	2b08      	cmp	r3, #8
 80054bc:	d823      	bhi.n	8005506 <UART_SetConfig+0x29e>
 80054be:	a201      	add	r2, pc, #4	; (adr r2, 80054c4 <UART_SetConfig+0x25c>)
 80054c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c4:	080054e9 	.word	0x080054e9
 80054c8:	08005507 	.word	0x08005507
 80054cc:	080054f1 	.word	0x080054f1
 80054d0:	08005507 	.word	0x08005507
 80054d4:	080054f7 	.word	0x080054f7
 80054d8:	08005507 	.word	0x08005507
 80054dc:	08005507 	.word	0x08005507
 80054e0:	08005507 	.word	0x08005507
 80054e4:	080054ff 	.word	0x080054ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054e8:	f7fe fd8a 	bl	8004000 <HAL_RCC_GetPCLK1Freq>
 80054ec:	6178      	str	r0, [r7, #20]
        break;
 80054ee:	e00f      	b.n	8005510 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054f0:	4b1e      	ldr	r3, [pc, #120]	; (800556c <UART_SetConfig+0x304>)
 80054f2:	617b      	str	r3, [r7, #20]
        break;
 80054f4:	e00c      	b.n	8005510 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054f6:	f7fe fd15 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 80054fa:	6178      	str	r0, [r7, #20]
        break;
 80054fc:	e008      	b.n	8005510 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005502:	617b      	str	r3, [r7, #20]
        break;
 8005504:	e004      	b.n	8005510 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	76bb      	strb	r3, [r7, #26]
        break;
 800550e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 812c 	beq.w	8005770 <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	4a14      	ldr	r2, [pc, #80]	; (8005570 <UART_SetConfig+0x308>)
 800551e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005522:	461a      	mov	r2, r3
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	fbb3 f3f2 	udiv	r3, r3, r2
 800552a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	4613      	mov	r3, r2
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	4413      	add	r3, r2
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	429a      	cmp	r2, r3
 800553a:	d305      	bcc.n	8005548 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	429a      	cmp	r2, r3
 8005546:	d915      	bls.n	8005574 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	76bb      	strb	r3, [r7, #26]
 800554c:	e110      	b.n	8005770 <UART_SetConfig+0x508>
 800554e:	bf00      	nop
 8005550:	cfff69f3 	.word	0xcfff69f3
 8005554:	40008000 	.word	0x40008000
 8005558:	40013800 	.word	0x40013800
 800555c:	40021000 	.word	0x40021000
 8005560:	40004400 	.word	0x40004400
 8005564:	40004800 	.word	0x40004800
 8005568:	40004c00 	.word	0x40004c00
 800556c:	00f42400 	.word	0x00f42400
 8005570:	0800bd28 	.word	0x0800bd28
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	4618      	mov	r0, r3
 8005578:	f04f 0100 	mov.w	r1, #0
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	4a85      	ldr	r2, [pc, #532]	; (8005798 <UART_SetConfig+0x530>)
 8005582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005586:	b29a      	uxth	r2, r3
 8005588:	f04f 0300 	mov.w	r3, #0
 800558c:	f7fb fb84 	bl	8000c98 <__aeabi_uldivmod>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4610      	mov	r0, r2
 8005596:	4619      	mov	r1, r3
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	020b      	lsls	r3, r1, #8
 80055a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055a6:	0202      	lsls	r2, r0, #8
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	6849      	ldr	r1, [r1, #4]
 80055ac:	0849      	lsrs	r1, r1, #1
 80055ae:	4608      	mov	r0, r1
 80055b0:	f04f 0100 	mov.w	r1, #0
 80055b4:	1814      	adds	r4, r2, r0
 80055b6:	eb43 0501 	adc.w	r5, r3, r1
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	461a      	mov	r2, r3
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	4620      	mov	r0, r4
 80055c6:	4629      	mov	r1, r5
 80055c8:	f7fb fb66 	bl	8000c98 <__aeabi_uldivmod>
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	4613      	mov	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055da:	d308      	bcc.n	80055ee <UART_SetConfig+0x386>
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055e2:	d204      	bcs.n	80055ee <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	60da      	str	r2, [r3, #12]
 80055ec:	e0c0      	b.n	8005770 <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	76bb      	strb	r3, [r7, #26]
 80055f2:	e0bd      	b.n	8005770 <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055fc:	d164      	bne.n	80056c8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80055fe:	7efb      	ldrb	r3, [r7, #27]
 8005600:	2b08      	cmp	r3, #8
 8005602:	d828      	bhi.n	8005656 <UART_SetConfig+0x3ee>
 8005604:	a201      	add	r2, pc, #4	; (adr r2, 800560c <UART_SetConfig+0x3a4>)
 8005606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560a:	bf00      	nop
 800560c:	08005631 	.word	0x08005631
 8005610:	08005639 	.word	0x08005639
 8005614:	08005641 	.word	0x08005641
 8005618:	08005657 	.word	0x08005657
 800561c:	08005647 	.word	0x08005647
 8005620:	08005657 	.word	0x08005657
 8005624:	08005657 	.word	0x08005657
 8005628:	08005657 	.word	0x08005657
 800562c:	0800564f 	.word	0x0800564f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005630:	f7fe fce6 	bl	8004000 <HAL_RCC_GetPCLK1Freq>
 8005634:	6178      	str	r0, [r7, #20]
        break;
 8005636:	e013      	b.n	8005660 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005638:	f7fe fcf8 	bl	800402c <HAL_RCC_GetPCLK2Freq>
 800563c:	6178      	str	r0, [r7, #20]
        break;
 800563e:	e00f      	b.n	8005660 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005640:	4b56      	ldr	r3, [pc, #344]	; (800579c <UART_SetConfig+0x534>)
 8005642:	617b      	str	r3, [r7, #20]
        break;
 8005644:	e00c      	b.n	8005660 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005646:	f7fe fc6d 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 800564a:	6178      	str	r0, [r7, #20]
        break;
 800564c:	e008      	b.n	8005660 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800564e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005652:	617b      	str	r3, [r7, #20]
        break;
 8005654:	e004      	b.n	8005660 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	76bb      	strb	r3, [r7, #26]
        break;
 800565e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 8084 	beq.w	8005770 <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	4a4a      	ldr	r2, [pc, #296]	; (8005798 <UART_SetConfig+0x530>)
 800566e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005672:	461a      	mov	r2, r3
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	fbb3 f3f2 	udiv	r3, r3, r2
 800567a:	005a      	lsls	r2, r3, #1
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	085b      	lsrs	r3, r3, #1
 8005682:	441a      	add	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	fbb2 f3f3 	udiv	r3, r2, r3
 800568c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	2b0f      	cmp	r3, #15
 8005692:	d916      	bls.n	80056c2 <UART_SetConfig+0x45a>
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800569a:	d212      	bcs.n	80056c2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	b29b      	uxth	r3, r3
 80056a0:	f023 030f 	bic.w	r3, r3, #15
 80056a4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	085b      	lsrs	r3, r3, #1
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	89fb      	ldrh	r3, [r7, #14]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	89fa      	ldrh	r2, [r7, #14]
 80056be:	60da      	str	r2, [r3, #12]
 80056c0:	e056      	b.n	8005770 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	76bb      	strb	r3, [r7, #26]
 80056c6:	e053      	b.n	8005770 <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056c8:	7efb      	ldrb	r3, [r7, #27]
 80056ca:	2b08      	cmp	r3, #8
 80056cc:	d827      	bhi.n	800571e <UART_SetConfig+0x4b6>
 80056ce:	a201      	add	r2, pc, #4	; (adr r2, 80056d4 <UART_SetConfig+0x46c>)
 80056d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d4:	080056f9 	.word	0x080056f9
 80056d8:	08005701 	.word	0x08005701
 80056dc:	08005709 	.word	0x08005709
 80056e0:	0800571f 	.word	0x0800571f
 80056e4:	0800570f 	.word	0x0800570f
 80056e8:	0800571f 	.word	0x0800571f
 80056ec:	0800571f 	.word	0x0800571f
 80056f0:	0800571f 	.word	0x0800571f
 80056f4:	08005717 	.word	0x08005717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056f8:	f7fe fc82 	bl	8004000 <HAL_RCC_GetPCLK1Freq>
 80056fc:	6178      	str	r0, [r7, #20]
        break;
 80056fe:	e013      	b.n	8005728 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005700:	f7fe fc94 	bl	800402c <HAL_RCC_GetPCLK2Freq>
 8005704:	6178      	str	r0, [r7, #20]
        break;
 8005706:	e00f      	b.n	8005728 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005708:	4b24      	ldr	r3, [pc, #144]	; (800579c <UART_SetConfig+0x534>)
 800570a:	617b      	str	r3, [r7, #20]
        break;
 800570c:	e00c      	b.n	8005728 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800570e:	f7fe fc09 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 8005712:	6178      	str	r0, [r7, #20]
        break;
 8005714:	e008      	b.n	8005728 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800571a:	617b      	str	r3, [r7, #20]
        break;
 800571c:	e004      	b.n	8005728 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	76bb      	strb	r3, [r7, #26]
        break;
 8005726:	bf00      	nop
    }

    if (pclk != 0U)
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d020      	beq.n	8005770 <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	4a19      	ldr	r2, [pc, #100]	; (8005798 <UART_SetConfig+0x530>)
 8005734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005738:	461a      	mov	r2, r3
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	085b      	lsrs	r3, r3, #1
 8005746:	441a      	add	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005750:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b0f      	cmp	r3, #15
 8005756:	d909      	bls.n	800576c <UART_SetConfig+0x504>
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800575e:	d205      	bcs.n	800576c <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	b29a      	uxth	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	60da      	str	r2, [r3, #12]
 800576a:	e001      	b.n	8005770 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800578c:	7ebb      	ldrb	r3, [r7, #26]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3720      	adds	r7, #32
 8005792:	46bd      	mov	sp, r7
 8005794:	bdb0      	pop	{r4, r5, r7, pc}
 8005796:	bf00      	nop
 8005798:	0800bd28 	.word	0x0800bd28
 800579c:	00f42400 	.word	0x00f42400

080057a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00a      	beq.n	80057ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f0:	f003 0304 	and.w	r3, r3, #4
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00a      	beq.n	800580e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00a      	beq.n	8005830 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005834:	f003 0310 	and.w	r3, r3, #16
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00a      	beq.n	8005852 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005856:	f003 0320 	and.w	r3, r3, #32
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587c:	2b00      	cmp	r3, #0
 800587e:	d01a      	beq.n	80058b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800589e:	d10a      	bne.n	80058b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	605a      	str	r2, [r3, #4]
  }
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af02      	add	r7, sp, #8
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058f4:	f7fc fcb8 	bl	8002268 <HAL_GetTick>
 80058f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0308 	and.w	r3, r3, #8
 8005904:	2b08      	cmp	r3, #8
 8005906:	d10e      	bne.n	8005926 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005908:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f82f 	bl	800597a <UART_WaitOnFlagUntilTimeout>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e025      	b.n	8005972 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b04      	cmp	r3, #4
 8005932:	d10e      	bne.n	8005952 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005934:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f819 	bl	800597a <UART_WaitOnFlagUntilTimeout>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e00f      	b.n	8005972 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2220      	movs	r2, #32
 8005956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b09c      	sub	sp, #112	; 0x70
 800597e:	af00      	add	r7, sp, #0
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	603b      	str	r3, [r7, #0]
 8005986:	4613      	mov	r3, r2
 8005988:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800598a:	e0a9      	b.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800598c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800598e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005992:	f000 80a5 	beq.w	8005ae0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005996:	f7fc fc67 	bl	8002268 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d302      	bcc.n	80059ac <UART_WaitOnFlagUntilTimeout+0x32>
 80059a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d140      	bne.n	8005a2e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059b4:	e853 3f00 	ldrex	r3, [r3]
 80059b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059c0:	667b      	str	r3, [r7, #100]	; 0x64
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1e6      	bne.n	80059ac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3308      	adds	r3, #8
 80059e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f0:	f023 0301 	bic.w	r3, r3, #1
 80059f4:	663b      	str	r3, [r7, #96]	; 0x60
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3308      	adds	r3, #8
 80059fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e5      	bne.n	80059de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2220      	movs	r2, #32
 8005a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e069      	b.n	8005b02 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d051      	beq.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a4a:	d149      	bne.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5e:	e853 3f00 	ldrex	r3, [r3]
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	461a      	mov	r2, r3
 8005a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a74:	637b      	str	r3, [r7, #52]	; 0x34
 8005a76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a7c:	e841 2300 	strex	r3, r2, [r1]
 8005a80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1e6      	bne.n	8005a56 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	e853 3f00 	ldrex	r3, [r3]
 8005a96:	613b      	str	r3, [r7, #16]
   return(result);
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f023 0301 	bic.w	r3, r3, #1
 8005a9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3308      	adds	r3, #8
 8005aa6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005aa8:	623a      	str	r2, [r7, #32]
 8005aaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aac:	69f9      	ldr	r1, [r7, #28]
 8005aae:	6a3a      	ldr	r2, [r7, #32]
 8005ab0:	e841 2300 	strex	r3, r2, [r1]
 8005ab4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1e5      	bne.n	8005a88 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e010      	b.n	8005b02 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	69da      	ldr	r2, [r3, #28]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	bf0c      	ite	eq
 8005af0:	2301      	moveq	r3, #1
 8005af2:	2300      	movne	r3, #0
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	461a      	mov	r2, r3
 8005af8:	79fb      	ldrb	r3, [r7, #7]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	f43f af46 	beq.w	800598c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3770      	adds	r7, #112	; 0x70
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b085      	sub	sp, #20
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d101      	bne.n	8005b20 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	e027      	b.n	8005b70 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2224      	movs	r2, #36	; 0x24
 8005b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0201 	bic.w	r2, r2, #1
 8005b46:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b4e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2220      	movs	r2, #32
 8005b62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d101      	bne.n	8005b94 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b90:	2302      	movs	r3, #2
 8005b92:	e02d      	b.n	8005bf0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2224      	movs	r2, #36	; 0x24
 8005ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 0201 	bic.w	r2, r2, #1
 8005bba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f84f 	bl	8005c74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2220      	movs	r2, #32
 8005be2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e02d      	b.n	8005c6c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2224      	movs	r2, #36	; 0x24
 8005c1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 0201 	bic.w	r2, r2, #1
 8005c36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f811 	bl	8005c74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d108      	bne.n	8005c96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c94:	e031      	b.n	8005cfa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c96:	2308      	movs	r3, #8
 8005c98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c9a:	2308      	movs	r3, #8
 8005c9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	0e5b      	lsrs	r3, r3, #25
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	0f5b      	lsrs	r3, r3, #29
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	f003 0307 	and.w	r3, r3, #7
 8005cbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cbe:	7bbb      	ldrb	r3, [r7, #14]
 8005cc0:	7b3a      	ldrb	r2, [r7, #12]
 8005cc2:	4911      	ldr	r1, [pc, #68]	; (8005d08 <UARTEx_SetNbDataToProcess+0x94>)
 8005cc4:	5c8a      	ldrb	r2, [r1, r2]
 8005cc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005cca:	7b3a      	ldrb	r2, [r7, #12]
 8005ccc:	490f      	ldr	r1, [pc, #60]	; (8005d0c <UARTEx_SetNbDataToProcess+0x98>)
 8005cce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	7b7a      	ldrb	r2, [r7, #13]
 8005ce0:	4909      	ldr	r1, [pc, #36]	; (8005d08 <UARTEx_SetNbDataToProcess+0x94>)
 8005ce2:	5c8a      	ldrb	r2, [r1, r2]
 8005ce4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ce8:	7b7a      	ldrb	r2, [r7, #13]
 8005cea:	4908      	ldr	r1, [pc, #32]	; (8005d0c <UARTEx_SetNbDataToProcess+0x98>)
 8005cec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cee:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005cfa:	bf00      	nop
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	0800bd40 	.word	0x0800bd40
 8005d0c:	0800bd48 	.word	0x0800bd48

08005d10 <__NVIC_SetPriority>:
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	4603      	mov	r3, r0
 8005d18:	6039      	str	r1, [r7, #0]
 8005d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	db0a      	blt.n	8005d3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	490c      	ldr	r1, [pc, #48]	; (8005d5c <__NVIC_SetPriority+0x4c>)
 8005d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d2e:	0112      	lsls	r2, r2, #4
 8005d30:	b2d2      	uxtb	r2, r2
 8005d32:	440b      	add	r3, r1
 8005d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005d38:	e00a      	b.n	8005d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	4908      	ldr	r1, [pc, #32]	; (8005d60 <__NVIC_SetPriority+0x50>)
 8005d40:	79fb      	ldrb	r3, [r7, #7]
 8005d42:	f003 030f 	and.w	r3, r3, #15
 8005d46:	3b04      	subs	r3, #4
 8005d48:	0112      	lsls	r2, r2, #4
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	440b      	add	r3, r1
 8005d4e:	761a      	strb	r2, [r3, #24]
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	e000e100 	.word	0xe000e100
 8005d60:	e000ed00 	.word	0xe000ed00

08005d64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005d64:	b580      	push	{r7, lr}
 8005d66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005d68:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <SysTick_Handler+0x1c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005d6c:	f001 fd8a 	bl	8007884 <xTaskGetSchedulerState>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d001      	beq.n	8005d7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005d76:	f002 fd77 	bl	8008868 <xPortSysTickHandler>
  }
}
 8005d7a:	bf00      	nop
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	e000e010 	.word	0xe000e010

08005d84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005d84:	b580      	push	{r7, lr}
 8005d86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005d88:	2100      	movs	r1, #0
 8005d8a:	f06f 0004 	mvn.w	r0, #4
 8005d8e:	f7ff ffbf 	bl	8005d10 <__NVIC_SetPriority>
#endif
}
 8005d92:	bf00      	nop
 8005d94:	bd80      	pop	{r7, pc}
	...

08005d98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d9e:	f3ef 8305 	mrs	r3, IPSR
 8005da2:	603b      	str	r3, [r7, #0]
  return(result);
 8005da4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005daa:	f06f 0305 	mvn.w	r3, #5
 8005dae:	607b      	str	r3, [r7, #4]
 8005db0:	e00c      	b.n	8005dcc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005db2:	4b0a      	ldr	r3, [pc, #40]	; (8005ddc <osKernelInitialize+0x44>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d105      	bne.n	8005dc6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005dba:	4b08      	ldr	r3, [pc, #32]	; (8005ddc <osKernelInitialize+0x44>)
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	607b      	str	r3, [r7, #4]
 8005dc4:	e002      	b.n	8005dcc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005dcc:	687b      	ldr	r3, [r7, #4]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	20000200 	.word	0x20000200

08005de0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005de6:	f3ef 8305 	mrs	r3, IPSR
 8005dea:	603b      	str	r3, [r7, #0]
  return(result);
 8005dec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <osKernelStart+0x1a>
    stat = osErrorISR;
 8005df2:	f06f 0305 	mvn.w	r3, #5
 8005df6:	607b      	str	r3, [r7, #4]
 8005df8:	e010      	b.n	8005e1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005dfa:	4b0b      	ldr	r3, [pc, #44]	; (8005e28 <osKernelStart+0x48>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d109      	bne.n	8005e16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005e02:	f7ff ffbf 	bl	8005d84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005e06:	4b08      	ldr	r3, [pc, #32]	; (8005e28 <osKernelStart+0x48>)
 8005e08:	2202      	movs	r2, #2
 8005e0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005e0c:	f001 f8de 	bl	8006fcc <vTaskStartScheduler>
      stat = osOK;
 8005e10:	2300      	movs	r3, #0
 8005e12:	607b      	str	r3, [r7, #4]
 8005e14:	e002      	b.n	8005e1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005e16:	f04f 33ff 	mov.w	r3, #4294967295
 8005e1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e1c:	687b      	ldr	r3, [r7, #4]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20000200 	.word	0x20000200

08005e2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b08e      	sub	sp, #56	; 0x38
 8005e30:	af04      	add	r7, sp, #16
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e3c:	f3ef 8305 	mrs	r3, IPSR
 8005e40:	617b      	str	r3, [r7, #20]
  return(result);
 8005e42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d17e      	bne.n	8005f46 <osThreadNew+0x11a>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d07b      	beq.n	8005f46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005e4e:	2380      	movs	r3, #128	; 0x80
 8005e50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005e52:	2318      	movs	r3, #24
 8005e54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d045      	beq.n	8005ef2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <osThreadNew+0x48>
        name = attr->name;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d008      	beq.n	8005e9a <osThreadNew+0x6e>
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	2b38      	cmp	r3, #56	; 0x38
 8005e8c:	d805      	bhi.n	8005e9a <osThreadNew+0x6e>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <osThreadNew+0x72>
        return (NULL);
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	e054      	b.n	8005f48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	089b      	lsrs	r3, r3, #2
 8005eac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00e      	beq.n	8005ed4 <osThreadNew+0xa8>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	2bbb      	cmp	r3, #187	; 0xbb
 8005ebc:	d90a      	bls.n	8005ed4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d006      	beq.n	8005ed4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <osThreadNew+0xa8>
        mem = 1;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	61bb      	str	r3, [r7, #24]
 8005ed2:	e010      	b.n	8005ef6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10c      	bne.n	8005ef6 <osThreadNew+0xca>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d108      	bne.n	8005ef6 <osThreadNew+0xca>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d104      	bne.n	8005ef6 <osThreadNew+0xca>
          mem = 0;
 8005eec:	2300      	movs	r3, #0
 8005eee:	61bb      	str	r3, [r7, #24]
 8005ef0:	e001      	b.n	8005ef6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d110      	bne.n	8005f1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f04:	9202      	str	r2, [sp, #8]
 8005f06:	9301      	str	r3, [sp, #4]
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	6a3a      	ldr	r2, [r7, #32]
 8005f10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 fdf0 	bl	8006af8 <xTaskCreateStatic>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	613b      	str	r3, [r7, #16]
 8005f1c:	e013      	b.n	8005f46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d110      	bne.n	8005f46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	f107 0310 	add.w	r3, r7, #16
 8005f2c:	9301      	str	r3, [sp, #4]
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 fe3b 	bl	8006bb2 <xTaskCreate>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d001      	beq.n	8005f46 <osThreadNew+0x11a>
            hTask = NULL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f46:	693b      	ldr	r3, [r7, #16]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3728      	adds	r7, #40	; 0x28
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4a07      	ldr	r2, [pc, #28]	; (8005f7c <vApplicationGetIdleTaskMemory+0x2c>)
 8005f60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	4a06      	ldr	r2, [pc, #24]	; (8005f80 <vApplicationGetIdleTaskMemory+0x30>)
 8005f66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2280      	movs	r2, #128	; 0x80
 8005f6c:	601a      	str	r2, [r3, #0]
}
 8005f6e:	bf00      	nop
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	20000204 	.word	0x20000204
 8005f80:	200002c0 	.word	0x200002c0

08005f84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4a07      	ldr	r2, [pc, #28]	; (8005fb0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005f94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	4a06      	ldr	r2, [pc, #24]	; (8005fb4 <vApplicationGetTimerTaskMemory+0x30>)
 8005f9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fa2:	601a      	str	r2, [r3, #0]
}
 8005fa4:	bf00      	nop
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	200004c0 	.word	0x200004c0
 8005fb4:	2000057c 	.word	0x2000057c

08005fb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f103 0208 	add.w	r2, r3, #8
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f103 0208 	add.w	r2, r3, #8
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f103 0208 	add.w	r2, r3, #8
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006012:	b480      	push	{r7}
 8006014:	b085      	sub	sp, #20
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	601a      	str	r2, [r3, #0]
}
 800604e:	bf00      	nop
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800605a:	b480      	push	{r7}
 800605c:	b085      	sub	sp, #20
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
 8006062:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006070:	d103      	bne.n	800607a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	60fb      	str	r3, [r7, #12]
 8006078:	e00c      	b.n	8006094 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	3308      	adds	r3, #8
 800607e:	60fb      	str	r3, [r7, #12]
 8006080:	e002      	b.n	8006088 <vListInsert+0x2e>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	429a      	cmp	r2, r3
 8006092:	d2f6      	bcs.n	8006082 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	601a      	str	r2, [r3, #0]
}
 80060c0:	bf00      	nop
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	6892      	ldr	r2, [r2, #8]
 80060e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	6852      	ldr	r2, [r2, #4]
 80060ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d103      	bne.n	8006100 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689a      	ldr	r2, [r3, #8]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	1e5a      	subs	r2, r3, #1
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10a      	bne.n	800614a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006146:	bf00      	nop
 8006148:	e7fe      	b.n	8006148 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800614a:	f002 fafb 	bl	8008744 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006156:	68f9      	ldr	r1, [r7, #12]
 8006158:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800615a:	fb01 f303 	mul.w	r3, r1, r3
 800615e:	441a      	add	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617a:	3b01      	subs	r3, #1
 800617c:	68f9      	ldr	r1, [r7, #12]
 800617e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006180:	fb01 f303 	mul.w	r3, r1, r3
 8006184:	441a      	add	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	22ff      	movs	r2, #255	; 0xff
 800618e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	22ff      	movs	r2, #255	; 0xff
 8006196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d114      	bne.n	80061ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d01a      	beq.n	80061de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3310      	adds	r3, #16
 80061ac:	4618      	mov	r0, r3
 80061ae:	f001 f9a7 	bl	8007500 <xTaskRemoveFromEventList>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d012      	beq.n	80061de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80061b8:	4b0c      	ldr	r3, [pc, #48]	; (80061ec <xQueueGenericReset+0xcc>)
 80061ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	e009      	b.n	80061de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	3310      	adds	r3, #16
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7ff fef2 	bl	8005fb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	3324      	adds	r3, #36	; 0x24
 80061d8:	4618      	mov	r0, r3
 80061da:	f7ff feed 	bl	8005fb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80061de:	f002 fae1 	bl	80087a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80061e2:	2301      	movs	r3, #1
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	e000ed04 	.word	0xe000ed04

080061f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08e      	sub	sp, #56	; 0x38
 80061f4:	af02      	add	r7, sp, #8
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10a      	bne.n	800621a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006216:	bf00      	nop
 8006218:	e7fe      	b.n	8006218 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10a      	bne.n	8006236 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <xQueueGenericCreateStatic+0x52>
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <xQueueGenericCreateStatic+0x56>
 8006242:	2301      	movs	r3, #1
 8006244:	e000      	b.n	8006248 <xQueueGenericCreateStatic+0x58>
 8006246:	2300      	movs	r3, #0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10a      	bne.n	8006262 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	623b      	str	r3, [r7, #32]
}
 800625e:	bf00      	nop
 8006260:	e7fe      	b.n	8006260 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d102      	bne.n	800626e <xQueueGenericCreateStatic+0x7e>
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <xQueueGenericCreateStatic+0x82>
 800626e:	2301      	movs	r3, #1
 8006270:	e000      	b.n	8006274 <xQueueGenericCreateStatic+0x84>
 8006272:	2300      	movs	r3, #0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10a      	bne.n	800628e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	61fb      	str	r3, [r7, #28]
}
 800628a:	bf00      	nop
 800628c:	e7fe      	b.n	800628c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800628e:	2350      	movs	r3, #80	; 0x50
 8006290:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2b50      	cmp	r3, #80	; 0x50
 8006296:	d00a      	beq.n	80062ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	61bb      	str	r3, [r7, #24]
}
 80062aa:	bf00      	nop
 80062ac:	e7fe      	b.n	80062ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80062ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80062b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00d      	beq.n	80062d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80062ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80062c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	4613      	mov	r3, r2
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	68b9      	ldr	r1, [r7, #8]
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f000 f805 	bl	80062e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80062d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80062d8:	4618      	mov	r0, r3
 80062da:	3730      	adds	r7, #48	; 0x30
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d103      	bne.n	80062fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	601a      	str	r2, [r3, #0]
 80062fa:	e002      	b.n	8006302 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800630e:	2101      	movs	r1, #1
 8006310:	69b8      	ldr	r0, [r7, #24]
 8006312:	f7ff ff05 	bl	8006120 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	78fa      	ldrb	r2, [r7, #3]
 800631a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800631e:	bf00      	nop
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b08e      	sub	sp, #56	; 0x38
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006336:	2300      	movs	r3, #0
 8006338:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800633e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10a      	bne.n	800635a <xQueueGenericSend+0x32>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006356:	bf00      	nop
 8006358:	e7fe      	b.n	8006358 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d103      	bne.n	8006368 <xQueueGenericSend+0x40>
 8006360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <xQueueGenericSend+0x44>
 8006368:	2301      	movs	r3, #1
 800636a:	e000      	b.n	800636e <xQueueGenericSend+0x46>
 800636c:	2300      	movs	r3, #0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10a      	bne.n	8006388 <xQueueGenericSend+0x60>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006384:	bf00      	nop
 8006386:	e7fe      	b.n	8006386 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b02      	cmp	r3, #2
 800638c:	d103      	bne.n	8006396 <xQueueGenericSend+0x6e>
 800638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006392:	2b01      	cmp	r3, #1
 8006394:	d101      	bne.n	800639a <xQueueGenericSend+0x72>
 8006396:	2301      	movs	r3, #1
 8006398:	e000      	b.n	800639c <xQueueGenericSend+0x74>
 800639a:	2300      	movs	r3, #0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10a      	bne.n	80063b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	623b      	str	r3, [r7, #32]
}
 80063b2:	bf00      	nop
 80063b4:	e7fe      	b.n	80063b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063b6:	f001 fa65 	bl	8007884 <xTaskGetSchedulerState>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d102      	bne.n	80063c6 <xQueueGenericSend+0x9e>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <xQueueGenericSend+0xa2>
 80063c6:	2301      	movs	r3, #1
 80063c8:	e000      	b.n	80063cc <xQueueGenericSend+0xa4>
 80063ca:	2300      	movs	r3, #0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	61fb      	str	r3, [r7, #28]
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063e6:	f002 f9ad 	bl	8008744 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d302      	bcc.n	80063fc <xQueueGenericSend+0xd4>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d129      	bne.n	8006450 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	68b9      	ldr	r1, [r7, #8]
 8006400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006402:	f000 fa0b 	bl	800681c <prvCopyDataToQueue>
 8006406:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	2b00      	cmp	r3, #0
 800640e:	d010      	beq.n	8006432 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006412:	3324      	adds	r3, #36	; 0x24
 8006414:	4618      	mov	r0, r3
 8006416:	f001 f873 	bl	8007500 <xTaskRemoveFromEventList>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d013      	beq.n	8006448 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006420:	4b3f      	ldr	r3, [pc, #252]	; (8006520 <xQueueGenericSend+0x1f8>)
 8006422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	e00a      	b.n	8006448 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006434:	2b00      	cmp	r3, #0
 8006436:	d007      	beq.n	8006448 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006438:	4b39      	ldr	r3, [pc, #228]	; (8006520 <xQueueGenericSend+0x1f8>)
 800643a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006448:	f002 f9ac 	bl	80087a4 <vPortExitCritical>
				return pdPASS;
 800644c:	2301      	movs	r3, #1
 800644e:	e063      	b.n	8006518 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d103      	bne.n	800645e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006456:	f002 f9a5 	bl	80087a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800645a:	2300      	movs	r3, #0
 800645c:	e05c      	b.n	8006518 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800645e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006460:	2b00      	cmp	r3, #0
 8006462:	d106      	bne.n	8006472 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006464:	f107 0314 	add.w	r3, r7, #20
 8006468:	4618      	mov	r0, r3
 800646a:	f001 f8ad 	bl	80075c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800646e:	2301      	movs	r3, #1
 8006470:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006472:	f002 f997 	bl	80087a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006476:	f000 fe19 	bl	80070ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800647a:	f002 f963 	bl	8008744 <vPortEnterCritical>
 800647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006480:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006484:	b25b      	sxtb	r3, r3
 8006486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648a:	d103      	bne.n	8006494 <xQueueGenericSend+0x16c>
 800648c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006496:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800649a:	b25b      	sxtb	r3, r3
 800649c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a0:	d103      	bne.n	80064aa <xQueueGenericSend+0x182>
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064aa:	f002 f97b 	bl	80087a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064ae:	1d3a      	adds	r2, r7, #4
 80064b0:	f107 0314 	add.w	r3, r7, #20
 80064b4:	4611      	mov	r1, r2
 80064b6:	4618      	mov	r0, r3
 80064b8:	f001 f89c 	bl	80075f4 <xTaskCheckForTimeOut>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d124      	bne.n	800650c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064c4:	f000 faa2 	bl	8006a0c <prvIsQueueFull>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d018      	beq.n	8006500 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80064ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d0:	3310      	adds	r3, #16
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	4611      	mov	r1, r2
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 ffc2 	bl	8007460 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80064dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064de:	f000 fa2d 	bl	800693c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80064e2:	f000 fdf1 	bl	80070c8 <xTaskResumeAll>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f47f af7c 	bne.w	80063e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80064ee:	4b0c      	ldr	r3, [pc, #48]	; (8006520 <xQueueGenericSend+0x1f8>)
 80064f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	e772      	b.n	80063e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006502:	f000 fa1b 	bl	800693c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006506:	f000 fddf 	bl	80070c8 <xTaskResumeAll>
 800650a:	e76c      	b.n	80063e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800650c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800650e:	f000 fa15 	bl	800693c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006512:	f000 fdd9 	bl	80070c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006516:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006518:	4618      	mov	r0, r3
 800651a:	3738      	adds	r7, #56	; 0x38
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	e000ed04 	.word	0xe000ed04

08006524 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b090      	sub	sp, #64	; 0x40
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10a      	bne.n	8006552 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800653c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800654e:	bf00      	nop
 8006550:	e7fe      	b.n	8006550 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d103      	bne.n	8006560 <xQueueGenericSendFromISR+0x3c>
 8006558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <xQueueGenericSendFromISR+0x40>
 8006560:	2301      	movs	r3, #1
 8006562:	e000      	b.n	8006566 <xQueueGenericSendFromISR+0x42>
 8006564:	2300      	movs	r3, #0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10a      	bne.n	8006580 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800657c:	bf00      	nop
 800657e:	e7fe      	b.n	800657e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	2b02      	cmp	r3, #2
 8006584:	d103      	bne.n	800658e <xQueueGenericSendFromISR+0x6a>
 8006586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800658a:	2b01      	cmp	r3, #1
 800658c:	d101      	bne.n	8006592 <xQueueGenericSendFromISR+0x6e>
 800658e:	2301      	movs	r3, #1
 8006590:	e000      	b.n	8006594 <xQueueGenericSendFromISR+0x70>
 8006592:	2300      	movs	r3, #0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10a      	bne.n	80065ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	623b      	str	r3, [r7, #32]
}
 80065aa:	bf00      	nop
 80065ac:	e7fe      	b.n	80065ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065ae:	f002 f9ab 	bl	8008908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80065b2:	f3ef 8211 	mrs	r2, BASEPRI
 80065b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	61fa      	str	r2, [r7, #28]
 80065c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80065ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d302      	bcc.n	80065e0 <xQueueGenericSendFromISR+0xbc>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d12f      	bne.n	8006640 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80065e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	68b9      	ldr	r1, [r7, #8]
 80065f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065f6:	f000 f911 	bl	800681c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80065fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80065fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006602:	d112      	bne.n	800662a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	2b00      	cmp	r3, #0
 800660a:	d016      	beq.n	800663a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800660c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660e:	3324      	adds	r3, #36	; 0x24
 8006610:	4618      	mov	r0, r3
 8006612:	f000 ff75 	bl	8007500 <xTaskRemoveFromEventList>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00e      	beq.n	800663a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00b      	beq.n	800663a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	e007      	b.n	800663a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800662a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800662e:	3301      	adds	r3, #1
 8006630:	b2db      	uxtb	r3, r3
 8006632:	b25a      	sxtb	r2, r3
 8006634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800663a:	2301      	movs	r3, #1
 800663c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800663e:	e001      	b.n	8006644 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006640:	2300      	movs	r3, #0
 8006642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006646:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800664e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006652:	4618      	mov	r0, r3
 8006654:	3740      	adds	r7, #64	; 0x40
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
	...

0800665c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b08c      	sub	sp, #48	; 0x30
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006668:	2300      	movs	r3, #0
 800666a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10a      	bne.n	800668c <xQueueReceive+0x30>
	__asm volatile
 8006676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	623b      	str	r3, [r7, #32]
}
 8006688:	bf00      	nop
 800668a:	e7fe      	b.n	800668a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d103      	bne.n	800669a <xQueueReceive+0x3e>
 8006692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <xQueueReceive+0x42>
 800669a:	2301      	movs	r3, #1
 800669c:	e000      	b.n	80066a0 <xQueueReceive+0x44>
 800669e:	2300      	movs	r3, #0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10a      	bne.n	80066ba <xQueueReceive+0x5e>
	__asm volatile
 80066a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	61fb      	str	r3, [r7, #28]
}
 80066b6:	bf00      	nop
 80066b8:	e7fe      	b.n	80066b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066ba:	f001 f8e3 	bl	8007884 <xTaskGetSchedulerState>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d102      	bne.n	80066ca <xQueueReceive+0x6e>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <xQueueReceive+0x72>
 80066ca:	2301      	movs	r3, #1
 80066cc:	e000      	b.n	80066d0 <xQueueReceive+0x74>
 80066ce:	2300      	movs	r3, #0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10a      	bne.n	80066ea <xQueueReceive+0x8e>
	__asm volatile
 80066d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	61bb      	str	r3, [r7, #24]
}
 80066e6:	bf00      	nop
 80066e8:	e7fe      	b.n	80066e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066ea:	f002 f82b 	bl	8008744 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d01f      	beq.n	800673a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066fa:	68b9      	ldr	r1, [r7, #8]
 80066fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066fe:	f000 f8f7 	bl	80068f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006704:	1e5a      	subs	r2, r3, #1
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800670a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00f      	beq.n	8006732 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006714:	3310      	adds	r3, #16
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fef2 	bl	8007500 <xTaskRemoveFromEventList>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d007      	beq.n	8006732 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006722:	4b3d      	ldr	r3, [pc, #244]	; (8006818 <xQueueReceive+0x1bc>)
 8006724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006732:	f002 f837 	bl	80087a4 <vPortExitCritical>
				return pdPASS;
 8006736:	2301      	movs	r3, #1
 8006738:	e069      	b.n	800680e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d103      	bne.n	8006748 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006740:	f002 f830 	bl	80087a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006744:	2300      	movs	r3, #0
 8006746:	e062      	b.n	800680e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674a:	2b00      	cmp	r3, #0
 800674c:	d106      	bne.n	800675c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800674e:	f107 0310 	add.w	r3, r7, #16
 8006752:	4618      	mov	r0, r3
 8006754:	f000 ff38 	bl	80075c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006758:	2301      	movs	r3, #1
 800675a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800675c:	f002 f822 	bl	80087a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006760:	f000 fca4 	bl	80070ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006764:	f001 ffee 	bl	8008744 <vPortEnterCritical>
 8006768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800676e:	b25b      	sxtb	r3, r3
 8006770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006774:	d103      	bne.n	800677e <xQueueReceive+0x122>
 8006776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800677e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006780:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006784:	b25b      	sxtb	r3, r3
 8006786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678a:	d103      	bne.n	8006794 <xQueueReceive+0x138>
 800678c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006794:	f002 f806 	bl	80087a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006798:	1d3a      	adds	r2, r7, #4
 800679a:	f107 0310 	add.w	r3, r7, #16
 800679e:	4611      	mov	r1, r2
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 ff27 	bl	80075f4 <xTaskCheckForTimeOut>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d123      	bne.n	80067f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ae:	f000 f917 	bl	80069e0 <prvIsQueueEmpty>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d017      	beq.n	80067e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ba:	3324      	adds	r3, #36	; 0x24
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	4611      	mov	r1, r2
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 fe4d 	bl	8007460 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067c8:	f000 f8b8 	bl	800693c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067cc:	f000 fc7c 	bl	80070c8 <xTaskResumeAll>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d189      	bne.n	80066ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80067d6:	4b10      	ldr	r3, [pc, #64]	; (8006818 <xQueueReceive+0x1bc>)
 80067d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	e780      	b.n	80066ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80067e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ea:	f000 f8a7 	bl	800693c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067ee:	f000 fc6b 	bl	80070c8 <xTaskResumeAll>
 80067f2:	e77a      	b.n	80066ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80067f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067f6:	f000 f8a1 	bl	800693c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067fa:	f000 fc65 	bl	80070c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006800:	f000 f8ee 	bl	80069e0 <prvIsQueueEmpty>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	f43f af6f 	beq.w	80066ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800680c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800680e:	4618      	mov	r0, r3
 8006810:	3730      	adds	r7, #48	; 0x30
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	e000ed04 	.word	0xe000ed04

0800681c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006828:	2300      	movs	r3, #0
 800682a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006830:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10d      	bne.n	8006856 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d14d      	bne.n	80068de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	4618      	mov	r0, r3
 8006848:	f001 f83a 	bl	80078c0 <xTaskPriorityDisinherit>
 800684c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	609a      	str	r2, [r3, #8]
 8006854:	e043      	b.n	80068de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d119      	bne.n	8006890 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6858      	ldr	r0, [r3, #4]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006864:	461a      	mov	r2, r3
 8006866:	68b9      	ldr	r1, [r7, #8]
 8006868:	f002 fb9b 	bl	8008fa2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006874:	441a      	add	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	429a      	cmp	r2, r3
 8006884:	d32b      	bcc.n	80068de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	605a      	str	r2, [r3, #4]
 800688e:	e026      	b.n	80068de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	68d8      	ldr	r0, [r3, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006898:	461a      	mov	r2, r3
 800689a:	68b9      	ldr	r1, [r7, #8]
 800689c:	f002 fb81 	bl	8008fa2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a8:	425b      	negs	r3, r3
 80068aa:	441a      	add	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d207      	bcs.n	80068cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c4:	425b      	negs	r3, r3
 80068c6:	441a      	add	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d105      	bne.n	80068de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	3b01      	subs	r3, #1
 80068dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80068e6:	697b      	ldr	r3, [r7, #20]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d018      	beq.n	8006934 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68da      	ldr	r2, [r3, #12]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	441a      	add	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68da      	ldr	r2, [r3, #12]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	429a      	cmp	r2, r3
 800691a:	d303      	bcc.n	8006924 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68d9      	ldr	r1, [r3, #12]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692c:	461a      	mov	r2, r3
 800692e:	6838      	ldr	r0, [r7, #0]
 8006930:	f002 fb37 	bl	8008fa2 <memcpy>
	}
}
 8006934:	bf00      	nop
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006944:	f001 fefe 	bl	8008744 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800694e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006950:	e011      	b.n	8006976 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006956:	2b00      	cmp	r3, #0
 8006958:	d012      	beq.n	8006980 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3324      	adds	r3, #36	; 0x24
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fdce 	bl	8007500 <xTaskRemoveFromEventList>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800696a:	f000 fea5 	bl	80076b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800696e:	7bfb      	ldrb	r3, [r7, #15]
 8006970:	3b01      	subs	r3, #1
 8006972:	b2db      	uxtb	r3, r3
 8006974:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800697a:	2b00      	cmp	r3, #0
 800697c:	dce9      	bgt.n	8006952 <prvUnlockQueue+0x16>
 800697e:	e000      	b.n	8006982 <prvUnlockQueue+0x46>
					break;
 8006980:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	22ff      	movs	r2, #255	; 0xff
 8006986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800698a:	f001 ff0b 	bl	80087a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800698e:	f001 fed9 	bl	8008744 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006998:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800699a:	e011      	b.n	80069c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d012      	beq.n	80069ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	3310      	adds	r3, #16
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 fda9 	bl	8007500 <xTaskRemoveFromEventList>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069b4:	f000 fe80 	bl	80076b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80069b8:	7bbb      	ldrb	r3, [r7, #14]
 80069ba:	3b01      	subs	r3, #1
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	dce9      	bgt.n	800699c <prvUnlockQueue+0x60>
 80069c8:	e000      	b.n	80069cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80069ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	22ff      	movs	r2, #255	; 0xff
 80069d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80069d4:	f001 fee6 	bl	80087a4 <vPortExitCritical>
}
 80069d8:	bf00      	nop
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069e8:	f001 feac 	bl	8008744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d102      	bne.n	80069fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80069f4:	2301      	movs	r3, #1
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	e001      	b.n	80069fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80069fa:	2300      	movs	r3, #0
 80069fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069fe:	f001 fed1 	bl	80087a4 <vPortExitCritical>

	return xReturn;
 8006a02:	68fb      	ldr	r3, [r7, #12]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a14:	f001 fe96 	bl	8008744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d102      	bne.n	8006a2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a24:	2301      	movs	r3, #1
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	e001      	b.n	8006a2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a2e:	f001 feb9 	bl	80087a4 <vPortExitCritical>

	return xReturn;
 8006a32:	68fb      	ldr	r3, [r7, #12]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a46:	2300      	movs	r3, #0
 8006a48:	60fb      	str	r3, [r7, #12]
 8006a4a:	e014      	b.n	8006a76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a4c:	4a0f      	ldr	r2, [pc, #60]	; (8006a8c <vQueueAddToRegistry+0x50>)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10b      	bne.n	8006a70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a58:	490c      	ldr	r1, [pc, #48]	; (8006a8c <vQueueAddToRegistry+0x50>)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a62:	4a0a      	ldr	r2, [pc, #40]	; (8006a8c <vQueueAddToRegistry+0x50>)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	00db      	lsls	r3, r3, #3
 8006a68:	4413      	add	r3, r2
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a6e:	e006      	b.n	8006a7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	3301      	adds	r3, #1
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2b07      	cmp	r3, #7
 8006a7a:	d9e7      	bls.n	8006a4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006a7c:	bf00      	nop
 8006a7e:	bf00      	nop
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	200032b4 	.word	0x200032b4

08006a90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006aa0:	f001 fe50 	bl	8008744 <vPortEnterCritical>
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006aaa:	b25b      	sxtb	r3, r3
 8006aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab0:	d103      	bne.n	8006aba <vQueueWaitForMessageRestricted+0x2a>
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ac0:	b25b      	sxtb	r3, r3
 8006ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac6:	d103      	bne.n	8006ad0 <vQueueWaitForMessageRestricted+0x40>
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ad0:	f001 fe68 	bl	80087a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d106      	bne.n	8006aea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	3324      	adds	r3, #36	; 0x24
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	68b9      	ldr	r1, [r7, #8]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 fcdf 	bl	80074a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006aea:	6978      	ldr	r0, [r7, #20]
 8006aec:	f7ff ff26 	bl	800693c <prvUnlockQueue>
	}
 8006af0:	bf00      	nop
 8006af2:	3718      	adds	r7, #24
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08e      	sub	sp, #56	; 0x38
 8006afc:	af04      	add	r7, sp, #16
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10a      	bne.n	8006b22 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	623b      	str	r3, [r7, #32]
}
 8006b1e:	bf00      	nop
 8006b20:	e7fe      	b.n	8006b20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10a      	bne.n	8006b3e <xTaskCreateStatic+0x46>
	__asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	61fb      	str	r3, [r7, #28]
}
 8006b3a:	bf00      	nop
 8006b3c:	e7fe      	b.n	8006b3c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b3e:	23bc      	movs	r3, #188	; 0xbc
 8006b40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	2bbc      	cmp	r3, #188	; 0xbc
 8006b46:	d00a      	beq.n	8006b5e <xTaskCreateStatic+0x66>
	__asm volatile
 8006b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	61bb      	str	r3, [r7, #24]
}
 8006b5a:	bf00      	nop
 8006b5c:	e7fe      	b.n	8006b5c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d01e      	beq.n	8006ba4 <xTaskCreateStatic+0xac>
 8006b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d01b      	beq.n	8006ba4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	2202      	movs	r2, #2
 8006b7a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b7e:	2300      	movs	r3, #0
 8006b80:	9303      	str	r3, [sp, #12]
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	9302      	str	r3, [sp, #8]
 8006b86:	f107 0314 	add.w	r3, r7, #20
 8006b8a:	9301      	str	r3, [sp, #4]
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	68b9      	ldr	r1, [r7, #8]
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f000 f850 	bl	8006c3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b9e:	f000 f8f3 	bl	8006d88 <prvAddNewTaskToReadyList>
 8006ba2:	e001      	b.n	8006ba8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ba8:	697b      	ldr	r3, [r7, #20]
	}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3728      	adds	r7, #40	; 0x28
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b08c      	sub	sp, #48	; 0x30
 8006bb6:	af04      	add	r7, sp, #16
 8006bb8:	60f8      	str	r0, [r7, #12]
 8006bba:	60b9      	str	r1, [r7, #8]
 8006bbc:	603b      	str	r3, [r7, #0]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006bc2:	88fb      	ldrh	r3, [r7, #6]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f001 fede 	bl	8008988 <pvPortMalloc>
 8006bcc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00e      	beq.n	8006bf2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006bd4:	20bc      	movs	r0, #188	; 0xbc
 8006bd6:	f001 fed7 	bl	8008988 <pvPortMalloc>
 8006bda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	631a      	str	r2, [r3, #48]	; 0x30
 8006be8:	e005      	b.n	8006bf6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006bea:	6978      	ldr	r0, [r7, #20]
 8006bec:	f001 ff98 	bl	8008b20 <vPortFree>
 8006bf0:	e001      	b.n	8006bf6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d017      	beq.n	8006c2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c04:	88fa      	ldrh	r2, [r7, #6]
 8006c06:	2300      	movs	r3, #0
 8006c08:	9303      	str	r3, [sp, #12]
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	9302      	str	r3, [sp, #8]
 8006c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c10:	9301      	str	r3, [sp, #4]
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	68b9      	ldr	r1, [r7, #8]
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f000 f80e 	bl	8006c3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c20:	69f8      	ldr	r0, [r7, #28]
 8006c22:	f000 f8b1 	bl	8006d88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c26:	2301      	movs	r3, #1
 8006c28:	61bb      	str	r3, [r7, #24]
 8006c2a:	e002      	b.n	8006c32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c32:	69bb      	ldr	r3, [r7, #24]
	}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3720      	adds	r7, #32
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b088      	sub	sp, #32
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
 8006c48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	461a      	mov	r2, r3
 8006c54:	21a5      	movs	r1, #165	; 0xa5
 8006c56:	f002 f9b2 	bl	8008fbe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c64:	3b01      	subs	r3, #1
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	f023 0307 	bic.w	r3, r3, #7
 8006c72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	f003 0307 	and.w	r3, r3, #7
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	617b      	str	r3, [r7, #20]
}
 8006c90:	bf00      	nop
 8006c92:	e7fe      	b.n	8006c92 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d01f      	beq.n	8006cda <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	61fb      	str	r3, [r7, #28]
 8006c9e:	e012      	b.n	8006cc6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	7819      	ldrb	r1, [r3, #0]
 8006ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	4413      	add	r3, r2
 8006cae:	3334      	adds	r3, #52	; 0x34
 8006cb0:	460a      	mov	r2, r1
 8006cb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	4413      	add	r3, r2
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d006      	beq.n	8006cce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	61fb      	str	r3, [r7, #28]
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	2b0f      	cmp	r3, #15
 8006cca:	d9e9      	bls.n	8006ca0 <prvInitialiseNewTask+0x64>
 8006ccc:	e000      	b.n	8006cd0 <prvInitialiseNewTask+0x94>
			{
				break;
 8006cce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cd8:	e003      	b.n	8006ce2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce4:	2b37      	cmp	r3, #55	; 0x37
 8006ce6:	d901      	bls.n	8006cec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ce8:	2337      	movs	r3, #55	; 0x37
 8006cea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cf0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cf6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d00:	3304      	adds	r3, #4
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7ff f978 	bl	8005ff8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0a:	3318      	adds	r3, #24
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7ff f973 	bl	8005ff8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3a:	3354      	adds	r3, #84	; 0x54
 8006d3c:	2260      	movs	r2, #96	; 0x60
 8006d3e:	2100      	movs	r1, #0
 8006d40:	4618      	mov	r0, r3
 8006d42:	f002 f93c 	bl	8008fbe <memset>
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	4a0c      	ldr	r2, [pc, #48]	; (8006d7c <prvInitialiseNewTask+0x140>)
 8006d4a:	659a      	str	r2, [r3, #88]	; 0x58
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4e:	4a0c      	ldr	r2, [pc, #48]	; (8006d80 <prvInitialiseNewTask+0x144>)
 8006d50:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d54:	4a0b      	ldr	r2, [pc, #44]	; (8006d84 <prvInitialiseNewTask+0x148>)
 8006d56:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	68f9      	ldr	r1, [r7, #12]
 8006d5c:	69b8      	ldr	r0, [r7, #24]
 8006d5e:	f001 fbc1 	bl	80084e4 <pxPortInitialiseStack>
 8006d62:	4602      	mov	r2, r0
 8006d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d66:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d74:	bf00      	nop
 8006d76:	3720      	adds	r7, #32
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	0800bd70 	.word	0x0800bd70
 8006d80:	0800bd90 	.word	0x0800bd90
 8006d84:	0800bd50 	.word	0x0800bd50

08006d88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d90:	f001 fcd8 	bl	8008744 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d94:	4b2d      	ldr	r3, [pc, #180]	; (8006e4c <prvAddNewTaskToReadyList+0xc4>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	4a2c      	ldr	r2, [pc, #176]	; (8006e4c <prvAddNewTaskToReadyList+0xc4>)
 8006d9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d9e:	4b2c      	ldr	r3, [pc, #176]	; (8006e50 <prvAddNewTaskToReadyList+0xc8>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d109      	bne.n	8006dba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006da6:	4a2a      	ldr	r2, [pc, #168]	; (8006e50 <prvAddNewTaskToReadyList+0xc8>)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006dac:	4b27      	ldr	r3, [pc, #156]	; (8006e4c <prvAddNewTaskToReadyList+0xc4>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d110      	bne.n	8006dd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006db4:	f000 fca4 	bl	8007700 <prvInitialiseTaskLists>
 8006db8:	e00d      	b.n	8006dd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006dba:	4b26      	ldr	r3, [pc, #152]	; (8006e54 <prvAddNewTaskToReadyList+0xcc>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d109      	bne.n	8006dd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dc2:	4b23      	ldr	r3, [pc, #140]	; (8006e50 <prvAddNewTaskToReadyList+0xc8>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d802      	bhi.n	8006dd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006dd0:	4a1f      	ldr	r2, [pc, #124]	; (8006e50 <prvAddNewTaskToReadyList+0xc8>)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dd6:	4b20      	ldr	r3, [pc, #128]	; (8006e58 <prvAddNewTaskToReadyList+0xd0>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	4a1e      	ldr	r2, [pc, #120]	; (8006e58 <prvAddNewTaskToReadyList+0xd0>)
 8006dde:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006de0:	4b1d      	ldr	r3, [pc, #116]	; (8006e58 <prvAddNewTaskToReadyList+0xd0>)
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dec:	4b1b      	ldr	r3, [pc, #108]	; (8006e5c <prvAddNewTaskToReadyList+0xd4>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d903      	bls.n	8006dfc <prvAddNewTaskToReadyList+0x74>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df8:	4a18      	ldr	r2, [pc, #96]	; (8006e5c <prvAddNewTaskToReadyList+0xd4>)
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e00:	4613      	mov	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4a15      	ldr	r2, [pc, #84]	; (8006e60 <prvAddNewTaskToReadyList+0xd8>)
 8006e0a:	441a      	add	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	3304      	adds	r3, #4
 8006e10:	4619      	mov	r1, r3
 8006e12:	4610      	mov	r0, r2
 8006e14:	f7ff f8fd 	bl	8006012 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e18:	f001 fcc4 	bl	80087a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e1c:	4b0d      	ldr	r3, [pc, #52]	; (8006e54 <prvAddNewTaskToReadyList+0xcc>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00e      	beq.n	8006e42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e24:	4b0a      	ldr	r3, [pc, #40]	; (8006e50 <prvAddNewTaskToReadyList+0xc8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d207      	bcs.n	8006e42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e32:	4b0c      	ldr	r3, [pc, #48]	; (8006e64 <prvAddNewTaskToReadyList+0xdc>)
 8006e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e42:	bf00      	nop
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20000e50 	.word	0x20000e50
 8006e50:	2000097c 	.word	0x2000097c
 8006e54:	20000e5c 	.word	0x20000e5c
 8006e58:	20000e6c 	.word	0x20000e6c
 8006e5c:	20000e58 	.word	0x20000e58
 8006e60:	20000980 	.word	0x20000980
 8006e64:	e000ed04 	.word	0xe000ed04

08006e68 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b08a      	sub	sp, #40	; 0x28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006e72:	2300      	movs	r3, #0
 8006e74:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10a      	bne.n	8006e92 <vTaskDelayUntil+0x2a>
	__asm volatile
 8006e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	617b      	str	r3, [r7, #20]
}
 8006e8e:	bf00      	nop
 8006e90:	e7fe      	b.n	8006e90 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10a      	bne.n	8006eae <vTaskDelayUntil+0x46>
	__asm volatile
 8006e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	613b      	str	r3, [r7, #16]
}
 8006eaa:	bf00      	nop
 8006eac:	e7fe      	b.n	8006eac <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8006eae:	4b2a      	ldr	r3, [pc, #168]	; (8006f58 <vTaskDelayUntil+0xf0>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00a      	beq.n	8006ecc <vTaskDelayUntil+0x64>
	__asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	60fb      	str	r3, [r7, #12]
}
 8006ec8:	bf00      	nop
 8006eca:	e7fe      	b.n	8006eca <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8006ecc:	f000 f8ee 	bl	80070ac <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006ed0:	4b22      	ldr	r3, [pc, #136]	; (8006f5c <vTaskDelayUntil+0xf4>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	4413      	add	r3, r2
 8006ede:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6a3a      	ldr	r2, [r7, #32]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d20b      	bcs.n	8006f02 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	69fa      	ldr	r2, [r7, #28]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d211      	bcs.n	8006f18 <vTaskDelayUntil+0xb0>
 8006ef4:	69fa      	ldr	r2, [r7, #28]
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d90d      	bls.n	8006f18 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006efc:	2301      	movs	r3, #1
 8006efe:	627b      	str	r3, [r7, #36]	; 0x24
 8006f00:	e00a      	b.n	8006f18 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	69fa      	ldr	r2, [r7, #28]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d303      	bcc.n	8006f14 <vTaskDelayUntil+0xac>
 8006f0c:	69fa      	ldr	r2, [r7, #28]
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d901      	bls.n	8006f18 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006f14:	2301      	movs	r3, #1
 8006f16:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	69fa      	ldr	r2, [r7, #28]
 8006f1c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d006      	beq.n	8006f32 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006f24:	69fa      	ldr	r2, [r7, #28]
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 ff37 	bl	8007da0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006f32:	f000 f8c9 	bl	80070c8 <xTaskResumeAll>
 8006f36:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d107      	bne.n	8006f4e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8006f3e:	4b08      	ldr	r3, [pc, #32]	; (8006f60 <vTaskDelayUntil+0xf8>)
 8006f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f4e:	bf00      	nop
 8006f50:	3728      	adds	r7, #40	; 0x28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	20000e78 	.word	0x20000e78
 8006f5c:	20000e54 	.word	0x20000e54
 8006f60:	e000ed04 	.word	0xe000ed04

08006f64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d017      	beq.n	8006fa6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f76:	4b13      	ldr	r3, [pc, #76]	; (8006fc4 <vTaskDelay+0x60>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00a      	beq.n	8006f94 <vTaskDelay+0x30>
	__asm volatile
 8006f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	60bb      	str	r3, [r7, #8]
}
 8006f90:	bf00      	nop
 8006f92:	e7fe      	b.n	8006f92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f94:	f000 f88a 	bl	80070ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f98:	2100      	movs	r1, #0
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 ff00 	bl	8007da0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006fa0:	f000 f892 	bl	80070c8 <xTaskResumeAll>
 8006fa4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d107      	bne.n	8006fbc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006fac:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <vTaskDelay+0x64>)
 8006fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006fbc:	bf00      	nop
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	20000e78 	.word	0x20000e78
 8006fc8:	e000ed04 	.word	0xe000ed04

08006fcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08a      	sub	sp, #40	; 0x28
 8006fd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006fda:	463a      	mov	r2, r7
 8006fdc:	1d39      	adds	r1, r7, #4
 8006fde:	f107 0308 	add.w	r3, r7, #8
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7fe ffb4 	bl	8005f50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006fe8:	6839      	ldr	r1, [r7, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	9202      	str	r2, [sp, #8]
 8006ff0:	9301      	str	r3, [sp, #4]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	460a      	mov	r2, r1
 8006ffa:	4924      	ldr	r1, [pc, #144]	; (800708c <vTaskStartScheduler+0xc0>)
 8006ffc:	4824      	ldr	r0, [pc, #144]	; (8007090 <vTaskStartScheduler+0xc4>)
 8006ffe:	f7ff fd7b 	bl	8006af8 <xTaskCreateStatic>
 8007002:	4603      	mov	r3, r0
 8007004:	4a23      	ldr	r2, [pc, #140]	; (8007094 <vTaskStartScheduler+0xc8>)
 8007006:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007008:	4b22      	ldr	r3, [pc, #136]	; (8007094 <vTaskStartScheduler+0xc8>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d002      	beq.n	8007016 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007010:	2301      	movs	r3, #1
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	e001      	b.n	800701a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007016:	2300      	movs	r3, #0
 8007018:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d102      	bne.n	8007026 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007020:	f000 ff12 	bl	8007e48 <xTimerCreateTimerTask>
 8007024:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d11b      	bne.n	8007064 <vTaskStartScheduler+0x98>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	613b      	str	r3, [r7, #16]
}
 800703e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007040:	4b15      	ldr	r3, [pc, #84]	; (8007098 <vTaskStartScheduler+0xcc>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3354      	adds	r3, #84	; 0x54
 8007046:	4a15      	ldr	r2, [pc, #84]	; (800709c <vTaskStartScheduler+0xd0>)
 8007048:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800704a:	4b15      	ldr	r3, [pc, #84]	; (80070a0 <vTaskStartScheduler+0xd4>)
 800704c:	f04f 32ff 	mov.w	r2, #4294967295
 8007050:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007052:	4b14      	ldr	r3, [pc, #80]	; (80070a4 <vTaskStartScheduler+0xd8>)
 8007054:	2201      	movs	r2, #1
 8007056:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007058:	4b13      	ldr	r3, [pc, #76]	; (80070a8 <vTaskStartScheduler+0xdc>)
 800705a:	2200      	movs	r2, #0
 800705c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800705e:	f001 facf 	bl	8008600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007062:	e00e      	b.n	8007082 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706a:	d10a      	bne.n	8007082 <vTaskStartScheduler+0xb6>
	__asm volatile
 800706c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007070:	f383 8811 	msr	BASEPRI, r3
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	60fb      	str	r3, [r7, #12]
}
 800707e:	bf00      	nop
 8007080:	e7fe      	b.n	8007080 <vTaskStartScheduler+0xb4>
}
 8007082:	bf00      	nop
 8007084:	3718      	adds	r7, #24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	0800bc34 	.word	0x0800bc34
 8007090:	080076d1 	.word	0x080076d1
 8007094:	20000e74 	.word	0x20000e74
 8007098:	2000097c 	.word	0x2000097c
 800709c:	20000010 	.word	0x20000010
 80070a0:	20000e70 	.word	0x20000e70
 80070a4:	20000e5c 	.word	0x20000e5c
 80070a8:	20000e54 	.word	0x20000e54

080070ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80070ac:	b480      	push	{r7}
 80070ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80070b0:	4b04      	ldr	r3, [pc, #16]	; (80070c4 <vTaskSuspendAll+0x18>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3301      	adds	r3, #1
 80070b6:	4a03      	ldr	r2, [pc, #12]	; (80070c4 <vTaskSuspendAll+0x18>)
 80070b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80070ba:	bf00      	nop
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	20000e78 	.word	0x20000e78

080070c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80070ce:	2300      	movs	r3, #0
 80070d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80070d2:	2300      	movs	r3, #0
 80070d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80070d6:	4b42      	ldr	r3, [pc, #264]	; (80071e0 <xTaskResumeAll+0x118>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10a      	bne.n	80070f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80070de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	603b      	str	r3, [r7, #0]
}
 80070f0:	bf00      	nop
 80070f2:	e7fe      	b.n	80070f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80070f4:	f001 fb26 	bl	8008744 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80070f8:	4b39      	ldr	r3, [pc, #228]	; (80071e0 <xTaskResumeAll+0x118>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3b01      	subs	r3, #1
 80070fe:	4a38      	ldr	r2, [pc, #224]	; (80071e0 <xTaskResumeAll+0x118>)
 8007100:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007102:	4b37      	ldr	r3, [pc, #220]	; (80071e0 <xTaskResumeAll+0x118>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d162      	bne.n	80071d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800710a:	4b36      	ldr	r3, [pc, #216]	; (80071e4 <xTaskResumeAll+0x11c>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d05e      	beq.n	80071d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007112:	e02f      	b.n	8007174 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007114:	4b34      	ldr	r3, [pc, #208]	; (80071e8 <xTaskResumeAll+0x120>)
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	3318      	adds	r3, #24
 8007120:	4618      	mov	r0, r3
 8007122:	f7fe ffd3 	bl	80060cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	3304      	adds	r3, #4
 800712a:	4618      	mov	r0, r3
 800712c:	f7fe ffce 	bl	80060cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007134:	4b2d      	ldr	r3, [pc, #180]	; (80071ec <xTaskResumeAll+0x124>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	429a      	cmp	r2, r3
 800713a:	d903      	bls.n	8007144 <xTaskResumeAll+0x7c>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007140:	4a2a      	ldr	r2, [pc, #168]	; (80071ec <xTaskResumeAll+0x124>)
 8007142:	6013      	str	r3, [r2, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007148:	4613      	mov	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4413      	add	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4a27      	ldr	r2, [pc, #156]	; (80071f0 <xTaskResumeAll+0x128>)
 8007152:	441a      	add	r2, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	3304      	adds	r3, #4
 8007158:	4619      	mov	r1, r3
 800715a:	4610      	mov	r0, r2
 800715c:	f7fe ff59 	bl	8006012 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007164:	4b23      	ldr	r3, [pc, #140]	; (80071f4 <xTaskResumeAll+0x12c>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716a:	429a      	cmp	r2, r3
 800716c:	d302      	bcc.n	8007174 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800716e:	4b22      	ldr	r3, [pc, #136]	; (80071f8 <xTaskResumeAll+0x130>)
 8007170:	2201      	movs	r2, #1
 8007172:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007174:	4b1c      	ldr	r3, [pc, #112]	; (80071e8 <xTaskResumeAll+0x120>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1cb      	bne.n	8007114 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007182:	f000 fb5f 	bl	8007844 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007186:	4b1d      	ldr	r3, [pc, #116]	; (80071fc <xTaskResumeAll+0x134>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d010      	beq.n	80071b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007192:	f000 f847 	bl	8007224 <xTaskIncrementTick>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d002      	beq.n	80071a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800719c:	4b16      	ldr	r3, [pc, #88]	; (80071f8 <xTaskResumeAll+0x130>)
 800719e:	2201      	movs	r2, #1
 80071a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	3b01      	subs	r3, #1
 80071a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1f1      	bne.n	8007192 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80071ae:	4b13      	ldr	r3, [pc, #76]	; (80071fc <xTaskResumeAll+0x134>)
 80071b0:	2200      	movs	r2, #0
 80071b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80071b4:	4b10      	ldr	r3, [pc, #64]	; (80071f8 <xTaskResumeAll+0x130>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d009      	beq.n	80071d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80071bc:	2301      	movs	r3, #1
 80071be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80071c0:	4b0f      	ldr	r3, [pc, #60]	; (8007200 <xTaskResumeAll+0x138>)
 80071c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071c6:	601a      	str	r2, [r3, #0]
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071d0:	f001 fae8 	bl	80087a4 <vPortExitCritical>

	return xAlreadyYielded;
 80071d4:	68bb      	ldr	r3, [r7, #8]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	20000e78 	.word	0x20000e78
 80071e4:	20000e50 	.word	0x20000e50
 80071e8:	20000e10 	.word	0x20000e10
 80071ec:	20000e58 	.word	0x20000e58
 80071f0:	20000980 	.word	0x20000980
 80071f4:	2000097c 	.word	0x2000097c
 80071f8:	20000e64 	.word	0x20000e64
 80071fc:	20000e60 	.word	0x20000e60
 8007200:	e000ed04 	.word	0xe000ed04

08007204 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800720a:	4b05      	ldr	r3, [pc, #20]	; (8007220 <xTaskGetTickCount+0x1c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007210:	687b      	ldr	r3, [r7, #4]
}
 8007212:	4618      	mov	r0, r3
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	20000e54 	.word	0x20000e54

08007224 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800722a:	2300      	movs	r3, #0
 800722c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800722e:	4b4f      	ldr	r3, [pc, #316]	; (800736c <xTaskIncrementTick+0x148>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	f040 808f 	bne.w	8007356 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007238:	4b4d      	ldr	r3, [pc, #308]	; (8007370 <xTaskIncrementTick+0x14c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3301      	adds	r3, #1
 800723e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007240:	4a4b      	ldr	r2, [pc, #300]	; (8007370 <xTaskIncrementTick+0x14c>)
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d120      	bne.n	800728e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800724c:	4b49      	ldr	r3, [pc, #292]	; (8007374 <xTaskIncrementTick+0x150>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <xTaskIncrementTick+0x48>
	__asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	603b      	str	r3, [r7, #0]
}
 8007268:	bf00      	nop
 800726a:	e7fe      	b.n	800726a <xTaskIncrementTick+0x46>
 800726c:	4b41      	ldr	r3, [pc, #260]	; (8007374 <xTaskIncrementTick+0x150>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	60fb      	str	r3, [r7, #12]
 8007272:	4b41      	ldr	r3, [pc, #260]	; (8007378 <xTaskIncrementTick+0x154>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a3f      	ldr	r2, [pc, #252]	; (8007374 <xTaskIncrementTick+0x150>)
 8007278:	6013      	str	r3, [r2, #0]
 800727a:	4a3f      	ldr	r2, [pc, #252]	; (8007378 <xTaskIncrementTick+0x154>)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6013      	str	r3, [r2, #0]
 8007280:	4b3e      	ldr	r3, [pc, #248]	; (800737c <xTaskIncrementTick+0x158>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3301      	adds	r3, #1
 8007286:	4a3d      	ldr	r2, [pc, #244]	; (800737c <xTaskIncrementTick+0x158>)
 8007288:	6013      	str	r3, [r2, #0]
 800728a:	f000 fadb 	bl	8007844 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800728e:	4b3c      	ldr	r3, [pc, #240]	; (8007380 <xTaskIncrementTick+0x15c>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	429a      	cmp	r2, r3
 8007296:	d349      	bcc.n	800732c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007298:	4b36      	ldr	r3, [pc, #216]	; (8007374 <xTaskIncrementTick+0x150>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d104      	bne.n	80072ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072a2:	4b37      	ldr	r3, [pc, #220]	; (8007380 <xTaskIncrementTick+0x15c>)
 80072a4:	f04f 32ff 	mov.w	r2, #4294967295
 80072a8:	601a      	str	r2, [r3, #0]
					break;
 80072aa:	e03f      	b.n	800732c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072ac:	4b31      	ldr	r3, [pc, #196]	; (8007374 <xTaskIncrementTick+0x150>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d203      	bcs.n	80072cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80072c4:	4a2e      	ldr	r2, [pc, #184]	; (8007380 <xTaskIncrementTick+0x15c>)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80072ca:	e02f      	b.n	800732c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	3304      	adds	r3, #4
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fe fefb 	bl	80060cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d004      	beq.n	80072e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	3318      	adds	r3, #24
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7fe fef2 	bl	80060cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ec:	4b25      	ldr	r3, [pc, #148]	; (8007384 <xTaskIncrementTick+0x160>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d903      	bls.n	80072fc <xTaskIncrementTick+0xd8>
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f8:	4a22      	ldr	r2, [pc, #136]	; (8007384 <xTaskIncrementTick+0x160>)
 80072fa:	6013      	str	r3, [r2, #0]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007300:	4613      	mov	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4a1f      	ldr	r2, [pc, #124]	; (8007388 <xTaskIncrementTick+0x164>)
 800730a:	441a      	add	r2, r3
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	3304      	adds	r3, #4
 8007310:	4619      	mov	r1, r3
 8007312:	4610      	mov	r0, r2
 8007314:	f7fe fe7d 	bl	8006012 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731c:	4b1b      	ldr	r3, [pc, #108]	; (800738c <xTaskIncrementTick+0x168>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007322:	429a      	cmp	r2, r3
 8007324:	d3b8      	bcc.n	8007298 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007326:	2301      	movs	r3, #1
 8007328:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800732a:	e7b5      	b.n	8007298 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800732c:	4b17      	ldr	r3, [pc, #92]	; (800738c <xTaskIncrementTick+0x168>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007332:	4915      	ldr	r1, [pc, #84]	; (8007388 <xTaskIncrementTick+0x164>)
 8007334:	4613      	mov	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	440b      	add	r3, r1
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d901      	bls.n	8007348 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007344:	2301      	movs	r3, #1
 8007346:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007348:	4b11      	ldr	r3, [pc, #68]	; (8007390 <xTaskIncrementTick+0x16c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d007      	beq.n	8007360 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007350:	2301      	movs	r3, #1
 8007352:	617b      	str	r3, [r7, #20]
 8007354:	e004      	b.n	8007360 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007356:	4b0f      	ldr	r3, [pc, #60]	; (8007394 <xTaskIncrementTick+0x170>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	3301      	adds	r3, #1
 800735c:	4a0d      	ldr	r2, [pc, #52]	; (8007394 <xTaskIncrementTick+0x170>)
 800735e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007360:	697b      	ldr	r3, [r7, #20]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	20000e78 	.word	0x20000e78
 8007370:	20000e54 	.word	0x20000e54
 8007374:	20000e08 	.word	0x20000e08
 8007378:	20000e0c 	.word	0x20000e0c
 800737c:	20000e68 	.word	0x20000e68
 8007380:	20000e70 	.word	0x20000e70
 8007384:	20000e58 	.word	0x20000e58
 8007388:	20000980 	.word	0x20000980
 800738c:	2000097c 	.word	0x2000097c
 8007390:	20000e64 	.word	0x20000e64
 8007394:	20000e60 	.word	0x20000e60

08007398 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800739e:	4b2a      	ldr	r3, [pc, #168]	; (8007448 <vTaskSwitchContext+0xb0>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d003      	beq.n	80073ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80073a6:	4b29      	ldr	r3, [pc, #164]	; (800744c <vTaskSwitchContext+0xb4>)
 80073a8:	2201      	movs	r2, #1
 80073aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80073ac:	e046      	b.n	800743c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80073ae:	4b27      	ldr	r3, [pc, #156]	; (800744c <vTaskSwitchContext+0xb4>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073b4:	4b26      	ldr	r3, [pc, #152]	; (8007450 <vTaskSwitchContext+0xb8>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	60fb      	str	r3, [r7, #12]
 80073ba:	e010      	b.n	80073de <vTaskSwitchContext+0x46>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10a      	bne.n	80073d8 <vTaskSwitchContext+0x40>
	__asm volatile
 80073c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c6:	f383 8811 	msr	BASEPRI, r3
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	607b      	str	r3, [r7, #4]
}
 80073d4:	bf00      	nop
 80073d6:	e7fe      	b.n	80073d6 <vTaskSwitchContext+0x3e>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	3b01      	subs	r3, #1
 80073dc:	60fb      	str	r3, [r7, #12]
 80073de:	491d      	ldr	r1, [pc, #116]	; (8007454 <vTaskSwitchContext+0xbc>)
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	4613      	mov	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	440b      	add	r3, r1
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d0e4      	beq.n	80073bc <vTaskSwitchContext+0x24>
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	4613      	mov	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4a15      	ldr	r2, [pc, #84]	; (8007454 <vTaskSwitchContext+0xbc>)
 80073fe:	4413      	add	r3, r2
 8007400:	60bb      	str	r3, [r7, #8]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	605a      	str	r2, [r3, #4]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	685a      	ldr	r2, [r3, #4]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	3308      	adds	r3, #8
 8007414:	429a      	cmp	r2, r3
 8007416:	d104      	bne.n	8007422 <vTaskSwitchContext+0x8a>
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	605a      	str	r2, [r3, #4]
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	4a0b      	ldr	r2, [pc, #44]	; (8007458 <vTaskSwitchContext+0xc0>)
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	4a08      	ldr	r2, [pc, #32]	; (8007450 <vTaskSwitchContext+0xb8>)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007432:	4b09      	ldr	r3, [pc, #36]	; (8007458 <vTaskSwitchContext+0xc0>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3354      	adds	r3, #84	; 0x54
 8007438:	4a08      	ldr	r2, [pc, #32]	; (800745c <vTaskSwitchContext+0xc4>)
 800743a:	6013      	str	r3, [r2, #0]
}
 800743c:	bf00      	nop
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	20000e78 	.word	0x20000e78
 800744c:	20000e64 	.word	0x20000e64
 8007450:	20000e58 	.word	0x20000e58
 8007454:	20000980 	.word	0x20000980
 8007458:	2000097c 	.word	0x2000097c
 800745c:	20000010 	.word	0x20000010

08007460 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10a      	bne.n	8007486 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	60fb      	str	r3, [r7, #12]
}
 8007482:	bf00      	nop
 8007484:	e7fe      	b.n	8007484 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007486:	4b07      	ldr	r3, [pc, #28]	; (80074a4 <vTaskPlaceOnEventList+0x44>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3318      	adds	r3, #24
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7fe fde3 	bl	800605a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007494:	2101      	movs	r1, #1
 8007496:	6838      	ldr	r0, [r7, #0]
 8007498:	f000 fc82 	bl	8007da0 <prvAddCurrentTaskToDelayedList>
}
 800749c:	bf00      	nop
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	2000097c 	.word	0x2000097c

080074a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10a      	bne.n	80074d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	617b      	str	r3, [r7, #20]
}
 80074cc:	bf00      	nop
 80074ce:	e7fe      	b.n	80074ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074d0:	4b0a      	ldr	r3, [pc, #40]	; (80074fc <vTaskPlaceOnEventListRestricted+0x54>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	3318      	adds	r3, #24
 80074d6:	4619      	mov	r1, r3
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f7fe fd9a 	bl	8006012 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d002      	beq.n	80074ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80074e4:	f04f 33ff 	mov.w	r3, #4294967295
 80074e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80074ea:	6879      	ldr	r1, [r7, #4]
 80074ec:	68b8      	ldr	r0, [r7, #8]
 80074ee:	f000 fc57 	bl	8007da0 <prvAddCurrentTaskToDelayedList>
	}
 80074f2:	bf00      	nop
 80074f4:	3718      	adds	r7, #24
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	2000097c 	.word	0x2000097c

08007500 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10a      	bne.n	800752c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751a:	f383 8811 	msr	BASEPRI, r3
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	60fb      	str	r3, [r7, #12]
}
 8007528:	bf00      	nop
 800752a:	e7fe      	b.n	800752a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	3318      	adds	r3, #24
 8007530:	4618      	mov	r0, r3
 8007532:	f7fe fdcb 	bl	80060cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007536:	4b1e      	ldr	r3, [pc, #120]	; (80075b0 <xTaskRemoveFromEventList+0xb0>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d11d      	bne.n	800757a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	3304      	adds	r3, #4
 8007542:	4618      	mov	r0, r3
 8007544:	f7fe fdc2 	bl	80060cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800754c:	4b19      	ldr	r3, [pc, #100]	; (80075b4 <xTaskRemoveFromEventList+0xb4>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	429a      	cmp	r2, r3
 8007552:	d903      	bls.n	800755c <xTaskRemoveFromEventList+0x5c>
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007558:	4a16      	ldr	r2, [pc, #88]	; (80075b4 <xTaskRemoveFromEventList+0xb4>)
 800755a:	6013      	str	r3, [r2, #0]
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007560:	4613      	mov	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4a13      	ldr	r2, [pc, #76]	; (80075b8 <xTaskRemoveFromEventList+0xb8>)
 800756a:	441a      	add	r2, r3
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	3304      	adds	r3, #4
 8007570:	4619      	mov	r1, r3
 8007572:	4610      	mov	r0, r2
 8007574:	f7fe fd4d 	bl	8006012 <vListInsertEnd>
 8007578:	e005      	b.n	8007586 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	3318      	adds	r3, #24
 800757e:	4619      	mov	r1, r3
 8007580:	480e      	ldr	r0, [pc, #56]	; (80075bc <xTaskRemoveFromEventList+0xbc>)
 8007582:	f7fe fd46 	bl	8006012 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800758a:	4b0d      	ldr	r3, [pc, #52]	; (80075c0 <xTaskRemoveFromEventList+0xc0>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007590:	429a      	cmp	r2, r3
 8007592:	d905      	bls.n	80075a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007594:	2301      	movs	r3, #1
 8007596:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007598:	4b0a      	ldr	r3, [pc, #40]	; (80075c4 <xTaskRemoveFromEventList+0xc4>)
 800759a:	2201      	movs	r2, #1
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	e001      	b.n	80075a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80075a0:	2300      	movs	r3, #0
 80075a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80075a4:	697b      	ldr	r3, [r7, #20]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20000e78 	.word	0x20000e78
 80075b4:	20000e58 	.word	0x20000e58
 80075b8:	20000980 	.word	0x20000980
 80075bc:	20000e10 	.word	0x20000e10
 80075c0:	2000097c 	.word	0x2000097c
 80075c4:	20000e64 	.word	0x20000e64

080075c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80075d0:	4b06      	ldr	r3, [pc, #24]	; (80075ec <vTaskInternalSetTimeOutState+0x24>)
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80075d8:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <vTaskInternalSetTimeOutState+0x28>)
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	605a      	str	r2, [r3, #4]
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	20000e68 	.word	0x20000e68
 80075f0:	20000e54 	.word	0x20000e54

080075f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b088      	sub	sp, #32
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10a      	bne.n	800761a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	613b      	str	r3, [r7, #16]
}
 8007616:	bf00      	nop
 8007618:	e7fe      	b.n	8007618 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10a      	bne.n	8007636 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	60fb      	str	r3, [r7, #12]
}
 8007632:	bf00      	nop
 8007634:	e7fe      	b.n	8007634 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007636:	f001 f885 	bl	8008744 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800763a:	4b1d      	ldr	r3, [pc, #116]	; (80076b0 <xTaskCheckForTimeOut+0xbc>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007652:	d102      	bne.n	800765a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007654:	2300      	movs	r3, #0
 8007656:	61fb      	str	r3, [r7, #28]
 8007658:	e023      	b.n	80076a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	4b15      	ldr	r3, [pc, #84]	; (80076b4 <xTaskCheckForTimeOut+0xc0>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	429a      	cmp	r2, r3
 8007664:	d007      	beq.n	8007676 <xTaskCheckForTimeOut+0x82>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	429a      	cmp	r2, r3
 800766e:	d302      	bcc.n	8007676 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007670:	2301      	movs	r3, #1
 8007672:	61fb      	str	r3, [r7, #28]
 8007674:	e015      	b.n	80076a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	429a      	cmp	r2, r3
 800767e:	d20b      	bcs.n	8007698 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	1ad2      	subs	r2, r2, r3
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7ff ff9b 	bl	80075c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007692:	2300      	movs	r3, #0
 8007694:	61fb      	str	r3, [r7, #28]
 8007696:	e004      	b.n	80076a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2200      	movs	r2, #0
 800769c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800769e:	2301      	movs	r3, #1
 80076a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80076a2:	f001 f87f 	bl	80087a4 <vPortExitCritical>

	return xReturn;
 80076a6:	69fb      	ldr	r3, [r7, #28]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3720      	adds	r7, #32
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	20000e54 	.word	0x20000e54
 80076b4:	20000e68 	.word	0x20000e68

080076b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80076b8:	b480      	push	{r7}
 80076ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80076bc:	4b03      	ldr	r3, [pc, #12]	; (80076cc <vTaskMissedYield+0x14>)
 80076be:	2201      	movs	r2, #1
 80076c0:	601a      	str	r2, [r3, #0]
}
 80076c2:	bf00      	nop
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	20000e64 	.word	0x20000e64

080076d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80076d8:	f000 f852 	bl	8007780 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80076dc:	4b06      	ldr	r3, [pc, #24]	; (80076f8 <prvIdleTask+0x28>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d9f9      	bls.n	80076d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80076e4:	4b05      	ldr	r3, [pc, #20]	; (80076fc <prvIdleTask+0x2c>)
 80076e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ea:	601a      	str	r2, [r3, #0]
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80076f4:	e7f0      	b.n	80076d8 <prvIdleTask+0x8>
 80076f6:	bf00      	nop
 80076f8:	20000980 	.word	0x20000980
 80076fc:	e000ed04 	.word	0xe000ed04

08007700 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007706:	2300      	movs	r3, #0
 8007708:	607b      	str	r3, [r7, #4]
 800770a:	e00c      	b.n	8007726 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	4613      	mov	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4a12      	ldr	r2, [pc, #72]	; (8007760 <prvInitialiseTaskLists+0x60>)
 8007718:	4413      	add	r3, r2
 800771a:	4618      	mov	r0, r3
 800771c:	f7fe fc4c 	bl	8005fb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	3301      	adds	r3, #1
 8007724:	607b      	str	r3, [r7, #4]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b37      	cmp	r3, #55	; 0x37
 800772a:	d9ef      	bls.n	800770c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800772c:	480d      	ldr	r0, [pc, #52]	; (8007764 <prvInitialiseTaskLists+0x64>)
 800772e:	f7fe fc43 	bl	8005fb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007732:	480d      	ldr	r0, [pc, #52]	; (8007768 <prvInitialiseTaskLists+0x68>)
 8007734:	f7fe fc40 	bl	8005fb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007738:	480c      	ldr	r0, [pc, #48]	; (800776c <prvInitialiseTaskLists+0x6c>)
 800773a:	f7fe fc3d 	bl	8005fb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800773e:	480c      	ldr	r0, [pc, #48]	; (8007770 <prvInitialiseTaskLists+0x70>)
 8007740:	f7fe fc3a 	bl	8005fb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007744:	480b      	ldr	r0, [pc, #44]	; (8007774 <prvInitialiseTaskLists+0x74>)
 8007746:	f7fe fc37 	bl	8005fb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800774a:	4b0b      	ldr	r3, [pc, #44]	; (8007778 <prvInitialiseTaskLists+0x78>)
 800774c:	4a05      	ldr	r2, [pc, #20]	; (8007764 <prvInitialiseTaskLists+0x64>)
 800774e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007750:	4b0a      	ldr	r3, [pc, #40]	; (800777c <prvInitialiseTaskLists+0x7c>)
 8007752:	4a05      	ldr	r2, [pc, #20]	; (8007768 <prvInitialiseTaskLists+0x68>)
 8007754:	601a      	str	r2, [r3, #0]
}
 8007756:	bf00      	nop
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	20000980 	.word	0x20000980
 8007764:	20000de0 	.word	0x20000de0
 8007768:	20000df4 	.word	0x20000df4
 800776c:	20000e10 	.word	0x20000e10
 8007770:	20000e24 	.word	0x20000e24
 8007774:	20000e3c 	.word	0x20000e3c
 8007778:	20000e08 	.word	0x20000e08
 800777c:	20000e0c 	.word	0x20000e0c

08007780 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007786:	e019      	b.n	80077bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007788:	f000 ffdc 	bl	8008744 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800778c:	4b10      	ldr	r3, [pc, #64]	; (80077d0 <prvCheckTasksWaitingTermination+0x50>)
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3304      	adds	r3, #4
 8007798:	4618      	mov	r0, r3
 800779a:	f7fe fc97 	bl	80060cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800779e:	4b0d      	ldr	r3, [pc, #52]	; (80077d4 <prvCheckTasksWaitingTermination+0x54>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	3b01      	subs	r3, #1
 80077a4:	4a0b      	ldr	r2, [pc, #44]	; (80077d4 <prvCheckTasksWaitingTermination+0x54>)
 80077a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077a8:	4b0b      	ldr	r3, [pc, #44]	; (80077d8 <prvCheckTasksWaitingTermination+0x58>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3b01      	subs	r3, #1
 80077ae:	4a0a      	ldr	r2, [pc, #40]	; (80077d8 <prvCheckTasksWaitingTermination+0x58>)
 80077b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80077b2:	f000 fff7 	bl	80087a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f810 	bl	80077dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077bc:	4b06      	ldr	r3, [pc, #24]	; (80077d8 <prvCheckTasksWaitingTermination+0x58>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1e1      	bne.n	8007788 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80077c4:	bf00      	nop
 80077c6:	bf00      	nop
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	20000e24 	.word	0x20000e24
 80077d4:	20000e50 	.word	0x20000e50
 80077d8:	20000e38 	.word	0x20000e38

080077dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3354      	adds	r3, #84	; 0x54
 80077e8:	4618      	mov	r0, r3
 80077ea:	f002 f8c3 	bl	8009974 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d108      	bne.n	800780a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fc:	4618      	mov	r0, r3
 80077fe:	f001 f98f 	bl	8008b20 <vPortFree>
				vPortFree( pxTCB );
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f001 f98c 	bl	8008b20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007808:	e018      	b.n	800783c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007810:	2b01      	cmp	r3, #1
 8007812:	d103      	bne.n	800781c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f001 f983 	bl	8008b20 <vPortFree>
	}
 800781a:	e00f      	b.n	800783c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007822:	2b02      	cmp	r3, #2
 8007824:	d00a      	beq.n	800783c <prvDeleteTCB+0x60>
	__asm volatile
 8007826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	60fb      	str	r3, [r7, #12]
}
 8007838:	bf00      	nop
 800783a:	e7fe      	b.n	800783a <prvDeleteTCB+0x5e>
	}
 800783c:	bf00      	nop
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800784a:	4b0c      	ldr	r3, [pc, #48]	; (800787c <prvResetNextTaskUnblockTime+0x38>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d104      	bne.n	800785e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007854:	4b0a      	ldr	r3, [pc, #40]	; (8007880 <prvResetNextTaskUnblockTime+0x3c>)
 8007856:	f04f 32ff 	mov.w	r2, #4294967295
 800785a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800785c:	e008      	b.n	8007870 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800785e:	4b07      	ldr	r3, [pc, #28]	; (800787c <prvResetNextTaskUnblockTime+0x38>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	4a04      	ldr	r2, [pc, #16]	; (8007880 <prvResetNextTaskUnblockTime+0x3c>)
 800786e:	6013      	str	r3, [r2, #0]
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	20000e08 	.word	0x20000e08
 8007880:	20000e70 	.word	0x20000e70

08007884 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800788a:	4b0b      	ldr	r3, [pc, #44]	; (80078b8 <xTaskGetSchedulerState+0x34>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d102      	bne.n	8007898 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007892:	2301      	movs	r3, #1
 8007894:	607b      	str	r3, [r7, #4]
 8007896:	e008      	b.n	80078aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007898:	4b08      	ldr	r3, [pc, #32]	; (80078bc <xTaskGetSchedulerState+0x38>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d102      	bne.n	80078a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80078a0:	2302      	movs	r3, #2
 80078a2:	607b      	str	r3, [r7, #4]
 80078a4:	e001      	b.n	80078aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80078a6:	2300      	movs	r3, #0
 80078a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80078aa:	687b      	ldr	r3, [r7, #4]
	}
 80078ac:	4618      	mov	r0, r3
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr
 80078b8:	20000e5c 	.word	0x20000e5c
 80078bc:	20000e78 	.word	0x20000e78

080078c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80078cc:	2300      	movs	r3, #0
 80078ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d056      	beq.n	8007984 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80078d6:	4b2e      	ldr	r3, [pc, #184]	; (8007990 <xTaskPriorityDisinherit+0xd0>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d00a      	beq.n	80078f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80078e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	60fb      	str	r3, [r7, #12]
}
 80078f2:	bf00      	nop
 80078f4:	e7fe      	b.n	80078f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10a      	bne.n	8007914 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	60bb      	str	r3, [r7, #8]
}
 8007910:	bf00      	nop
 8007912:	e7fe      	b.n	8007912 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007918:	1e5a      	subs	r2, r3, #1
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007926:	429a      	cmp	r2, r3
 8007928:	d02c      	beq.n	8007984 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800792e:	2b00      	cmp	r3, #0
 8007930:	d128      	bne.n	8007984 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	3304      	adds	r3, #4
 8007936:	4618      	mov	r0, r3
 8007938:	f7fe fbc8 	bl	80060cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007948:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007954:	4b0f      	ldr	r3, [pc, #60]	; (8007994 <xTaskPriorityDisinherit+0xd4>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	429a      	cmp	r2, r3
 800795a:	d903      	bls.n	8007964 <xTaskPriorityDisinherit+0xa4>
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007960:	4a0c      	ldr	r2, [pc, #48]	; (8007994 <xTaskPriorityDisinherit+0xd4>)
 8007962:	6013      	str	r3, [r2, #0]
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007968:	4613      	mov	r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4413      	add	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4a09      	ldr	r2, [pc, #36]	; (8007998 <xTaskPriorityDisinherit+0xd8>)
 8007972:	441a      	add	r2, r3
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	3304      	adds	r3, #4
 8007978:	4619      	mov	r1, r3
 800797a:	4610      	mov	r0, r2
 800797c:	f7fe fb49 	bl	8006012 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007980:	2301      	movs	r3, #1
 8007982:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007984:	697b      	ldr	r3, [r7, #20]
	}
 8007986:	4618      	mov	r0, r3
 8007988:	3718      	adds	r7, #24
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	2000097c 	.word	0x2000097c
 8007994:	20000e58 	.word	0x20000e58
 8007998:	20000980 	.word	0x20000980

0800799c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
 80079a8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80079aa:	f000 fecb 	bl	8008744 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80079ae:	4b29      	ldr	r3, [pc, #164]	; (8007a54 <xTaskNotifyWait+0xb8>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d01c      	beq.n	80079f6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80079bc:	4b25      	ldr	r3, [pc, #148]	; (8007a54 <xTaskNotifyWait+0xb8>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	43d2      	mvns	r2, r2
 80079c8:	400a      	ands	r2, r1
 80079ca:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80079ce:	4b21      	ldr	r3, [pc, #132]	; (8007a54 <xTaskNotifyWait+0xb8>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00b      	beq.n	80079f6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80079de:	2101      	movs	r1, #1
 80079e0:	6838      	ldr	r0, [r7, #0]
 80079e2:	f000 f9dd 	bl	8007da0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80079e6:	4b1c      	ldr	r3, [pc, #112]	; (8007a58 <xTaskNotifyWait+0xbc>)
 80079e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ec:	601a      	str	r2, [r3, #0]
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80079f6:	f000 fed5 	bl	80087a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80079fa:	f000 fea3 	bl	8008744 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d005      	beq.n	8007a10 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007a04:	4b13      	ldr	r3, [pc, #76]	; (8007a54 <xTaskNotifyWait+0xb8>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007a10:	4b10      	ldr	r3, [pc, #64]	; (8007a54 <xTaskNotifyWait+0xb8>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d002      	beq.n	8007a24 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	617b      	str	r3, [r7, #20]
 8007a22:	e00a      	b.n	8007a3a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007a24:	4b0b      	ldr	r3, [pc, #44]	; (8007a54 <xTaskNotifyWait+0xb8>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	43d2      	mvns	r2, r2
 8007a30:	400a      	ands	r2, r1
 8007a32:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8007a36:	2301      	movs	r3, #1
 8007a38:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a3a:	4b06      	ldr	r3, [pc, #24]	; (8007a54 <xTaskNotifyWait+0xb8>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8007a44:	f000 feae 	bl	80087a4 <vPortExitCritical>

		return xReturn;
 8007a48:	697b      	ldr	r3, [r7, #20]
	}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	2000097c 	.word	0x2000097c
 8007a58:	e000ed04 	.word	0xe000ed04

08007a5c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b08a      	sub	sp, #40	; 0x28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	603b      	str	r3, [r7, #0]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10a      	bne.n	8007a8c <xTaskGenericNotify+0x30>
	__asm volatile
 8007a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	61bb      	str	r3, [r7, #24]
}
 8007a88:	bf00      	nop
 8007a8a:	e7fe      	b.n	8007a8a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007a90:	f000 fe58 	bl	8008744 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d004      	beq.n	8007aa4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8007aaa:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	2202      	movs	r2, #2
 8007ab0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8007ab4:	79fb      	ldrb	r3, [r7, #7]
 8007ab6:	2b04      	cmp	r3, #4
 8007ab8:	d82d      	bhi.n	8007b16 <xTaskGenericNotify+0xba>
 8007aba:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <xTaskGenericNotify+0x64>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007b39 	.word	0x08007b39
 8007ac4:	08007ad5 	.word	0x08007ad5
 8007ac8:	08007ae7 	.word	0x08007ae7
 8007acc:	08007af7 	.word	0x08007af7
 8007ad0:	08007b01 	.word	0x08007b01
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	431a      	orrs	r2, r3
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8007ae4:	e02b      	b.n	8007b3e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007aec:	1c5a      	adds	r2, r3, #1
 8007aee:	6a3b      	ldr	r3, [r7, #32]
 8007af0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8007af4:	e023      	b.n	8007b3e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8007afe:	e01e      	b.n	8007b3e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007b00:	7ffb      	ldrb	r3, [r7, #31]
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d004      	beq.n	8007b10 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007b06:	6a3b      	ldr	r3, [r7, #32]
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007b0e:	e016      	b.n	8007b3e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8007b10:	2300      	movs	r3, #0
 8007b12:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8007b14:	e013      	b.n	8007b3e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b20:	d00c      	beq.n	8007b3c <xTaskGenericNotify+0xe0>
	__asm volatile
 8007b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b26:	f383 8811 	msr	BASEPRI, r3
 8007b2a:	f3bf 8f6f 	isb	sy
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	617b      	str	r3, [r7, #20]
}
 8007b34:	bf00      	nop
 8007b36:	e7fe      	b.n	8007b36 <xTaskGenericNotify+0xda>
					break;
 8007b38:	bf00      	nop
 8007b3a:	e000      	b.n	8007b3e <xTaskGenericNotify+0xe2>

					break;
 8007b3c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007b3e:	7ffb      	ldrb	r3, [r7, #31]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d13a      	bne.n	8007bba <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	3304      	adds	r3, #4
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fe fabf 	bl	80060cc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007b4e:	6a3b      	ldr	r3, [r7, #32]
 8007b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b52:	4b1d      	ldr	r3, [pc, #116]	; (8007bc8 <xTaskGenericNotify+0x16c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d903      	bls.n	8007b62 <xTaskGenericNotify+0x106>
 8007b5a:	6a3b      	ldr	r3, [r7, #32]
 8007b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5e:	4a1a      	ldr	r2, [pc, #104]	; (8007bc8 <xTaskGenericNotify+0x16c>)
 8007b60:	6013      	str	r3, [r2, #0]
 8007b62:	6a3b      	ldr	r3, [r7, #32]
 8007b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b66:	4613      	mov	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4a17      	ldr	r2, [pc, #92]	; (8007bcc <xTaskGenericNotify+0x170>)
 8007b70:	441a      	add	r2, r3
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	3304      	adds	r3, #4
 8007b76:	4619      	mov	r1, r3
 8007b78:	4610      	mov	r0, r2
 8007b7a:	f7fe fa4a 	bl	8006012 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00a      	beq.n	8007b9c <xTaskGenericNotify+0x140>
	__asm volatile
 8007b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8a:	f383 8811 	msr	BASEPRI, r3
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f3bf 8f4f 	dsb	sy
 8007b96:	613b      	str	r3, [r7, #16]
}
 8007b98:	bf00      	nop
 8007b9a:	e7fe      	b.n	8007b9a <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b9c:	6a3b      	ldr	r3, [r7, #32]
 8007b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba0:	4b0b      	ldr	r3, [pc, #44]	; (8007bd0 <xTaskGenericNotify+0x174>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d907      	bls.n	8007bba <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007baa:	4b0a      	ldr	r3, [pc, #40]	; (8007bd4 <xTaskGenericNotify+0x178>)
 8007bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bb0:	601a      	str	r2, [r3, #0]
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007bba:	f000 fdf3 	bl	80087a4 <vPortExitCritical>

		return xReturn;
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3728      	adds	r7, #40	; 0x28
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	20000e58 	.word	0x20000e58
 8007bcc:	20000980 	.word	0x20000980
 8007bd0:	2000097c 	.word	0x2000097c
 8007bd4:	e000ed04 	.word	0xe000ed04

08007bd8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b08e      	sub	sp, #56	; 0x38
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	603b      	str	r3, [r7, #0]
 8007be4:	4613      	mov	r3, r2
 8007be6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007be8:	2301      	movs	r3, #1
 8007bea:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10a      	bne.n	8007c08 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c04:	bf00      	nop
 8007c06:	e7fe      	b.n	8007c06 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c08:	f000 fe7e 	bl	8008908 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8007c10:	f3ef 8211 	mrs	r2, BASEPRI
 8007c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	623a      	str	r2, [r7, #32]
 8007c26:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007c28:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d004      	beq.n	8007c3c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c34:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8007c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c48:	2202      	movs	r2, #2
 8007c4a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8007c4e:	79fb      	ldrb	r3, [r7, #7]
 8007c50:	2b04      	cmp	r3, #4
 8007c52:	d82f      	bhi.n	8007cb4 <xTaskGenericNotifyFromISR+0xdc>
 8007c54:	a201      	add	r2, pc, #4	; (adr r2, 8007c5c <xTaskGenericNotifyFromISR+0x84>)
 8007c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5a:	bf00      	nop
 8007c5c:	08007cd7 	.word	0x08007cd7
 8007c60:	08007c71 	.word	0x08007c71
 8007c64:	08007c83 	.word	0x08007c83
 8007c68:	08007c93 	.word	0x08007c93
 8007c6c:	08007c9d 	.word	0x08007c9d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c72:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	431a      	orrs	r2, r3
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8007c80:	e02c      	b.n	8007cdc <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007c88:	1c5a      	adds	r2, r3, #1
 8007c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8007c90:	e024      	b.n	8007cdc <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8007c9a:	e01f      	b.n	8007cdc <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007c9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d004      	beq.n	8007cae <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007cac:	e016      	b.n	8007cdc <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8007cb2:	e013      	b.n	8007cdc <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cbe:	d00c      	beq.n	8007cda <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8007cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	61bb      	str	r3, [r7, #24]
}
 8007cd2:	bf00      	nop
 8007cd4:	e7fe      	b.n	8007cd4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8007cd6:	bf00      	nop
 8007cd8:	e000      	b.n	8007cdc <xTaskGenericNotifyFromISR+0x104>
					break;
 8007cda:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007cdc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d146      	bne.n	8007d72 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00a      	beq.n	8007d02 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8007cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	617b      	str	r3, [r7, #20]
}
 8007cfe:	bf00      	nop
 8007d00:	e7fe      	b.n	8007d00 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d02:	4b21      	ldr	r3, [pc, #132]	; (8007d88 <xTaskGenericNotifyFromISR+0x1b0>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d11d      	bne.n	8007d46 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fe f9dc 	bl	80060cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d18:	4b1c      	ldr	r3, [pc, #112]	; (8007d8c <xTaskGenericNotifyFromISR+0x1b4>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d903      	bls.n	8007d28 <xTaskGenericNotifyFromISR+0x150>
 8007d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d24:	4a19      	ldr	r2, [pc, #100]	; (8007d8c <xTaskGenericNotifyFromISR+0x1b4>)
 8007d26:	6013      	str	r3, [r2, #0]
 8007d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4a16      	ldr	r2, [pc, #88]	; (8007d90 <xTaskGenericNotifyFromISR+0x1b8>)
 8007d36:	441a      	add	r2, r3
 8007d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	4610      	mov	r0, r2
 8007d40:	f7fe f967 	bl	8006012 <vListInsertEnd>
 8007d44:	e005      	b.n	8007d52 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d48:	3318      	adds	r3, #24
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	4811      	ldr	r0, [pc, #68]	; (8007d94 <xTaskGenericNotifyFromISR+0x1bc>)
 8007d4e:	f7fe f960 	bl	8006012 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d56:	4b10      	ldr	r3, [pc, #64]	; (8007d98 <xTaskGenericNotifyFromISR+0x1c0>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d908      	bls.n	8007d72 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d68:	2201      	movs	r2, #1
 8007d6a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007d6c:	4b0b      	ldr	r3, [pc, #44]	; (8007d9c <xTaskGenericNotifyFromISR+0x1c4>)
 8007d6e:	2201      	movs	r2, #1
 8007d70:	601a      	str	r2, [r3, #0]
 8007d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d74:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	f383 8811 	msr	BASEPRI, r3
}
 8007d7c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3738      	adds	r7, #56	; 0x38
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	20000e78 	.word	0x20000e78
 8007d8c:	20000e58 	.word	0x20000e58
 8007d90:	20000980 	.word	0x20000980
 8007d94:	20000e10 	.word	0x20000e10
 8007d98:	2000097c 	.word	0x2000097c
 8007d9c:	20000e64 	.word	0x20000e64

08007da0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007daa:	4b21      	ldr	r3, [pc, #132]	; (8007e30 <prvAddCurrentTaskToDelayedList+0x90>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007db0:	4b20      	ldr	r3, [pc, #128]	; (8007e34 <prvAddCurrentTaskToDelayedList+0x94>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3304      	adds	r3, #4
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fe f988 	bl	80060cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc2:	d10a      	bne.n	8007dda <prvAddCurrentTaskToDelayedList+0x3a>
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d007      	beq.n	8007dda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dca:	4b1a      	ldr	r3, [pc, #104]	; (8007e34 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3304      	adds	r3, #4
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	4819      	ldr	r0, [pc, #100]	; (8007e38 <prvAddCurrentTaskToDelayedList+0x98>)
 8007dd4:	f7fe f91d 	bl	8006012 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007dd8:	e026      	b.n	8007e28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4413      	add	r3, r2
 8007de0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007de2:	4b14      	ldr	r3, [pc, #80]	; (8007e34 <prvAddCurrentTaskToDelayedList+0x94>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d209      	bcs.n	8007e06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007df2:	4b12      	ldr	r3, [pc, #72]	; (8007e3c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	4b0f      	ldr	r3, [pc, #60]	; (8007e34 <prvAddCurrentTaskToDelayedList+0x94>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3304      	adds	r3, #4
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	4610      	mov	r0, r2
 8007e00:	f7fe f92b 	bl	800605a <vListInsert>
}
 8007e04:	e010      	b.n	8007e28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e06:	4b0e      	ldr	r3, [pc, #56]	; (8007e40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3304      	adds	r3, #4
 8007e10:	4619      	mov	r1, r3
 8007e12:	4610      	mov	r0, r2
 8007e14:	f7fe f921 	bl	800605a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e18:	4b0a      	ldr	r3, [pc, #40]	; (8007e44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d202      	bcs.n	8007e28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007e22:	4a08      	ldr	r2, [pc, #32]	; (8007e44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	6013      	str	r3, [r2, #0]
}
 8007e28:	bf00      	nop
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	20000e54 	.word	0x20000e54
 8007e34:	2000097c 	.word	0x2000097c
 8007e38:	20000e3c 	.word	0x20000e3c
 8007e3c:	20000e0c 	.word	0x20000e0c
 8007e40:	20000e08 	.word	0x20000e08
 8007e44:	20000e70 	.word	0x20000e70

08007e48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b08a      	sub	sp, #40	; 0x28
 8007e4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e52:	f000 fb07 	bl	8008464 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e56:	4b1c      	ldr	r3, [pc, #112]	; (8007ec8 <xTimerCreateTimerTask+0x80>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d021      	beq.n	8007ea2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e62:	2300      	movs	r3, #0
 8007e64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e66:	1d3a      	adds	r2, r7, #4
 8007e68:	f107 0108 	add.w	r1, r7, #8
 8007e6c:	f107 030c 	add.w	r3, r7, #12
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7fe f887 	bl	8005f84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e76:	6879      	ldr	r1, [r7, #4]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	9202      	str	r2, [sp, #8]
 8007e7e:	9301      	str	r3, [sp, #4]
 8007e80:	2302      	movs	r3, #2
 8007e82:	9300      	str	r3, [sp, #0]
 8007e84:	2300      	movs	r3, #0
 8007e86:	460a      	mov	r2, r1
 8007e88:	4910      	ldr	r1, [pc, #64]	; (8007ecc <xTimerCreateTimerTask+0x84>)
 8007e8a:	4811      	ldr	r0, [pc, #68]	; (8007ed0 <xTimerCreateTimerTask+0x88>)
 8007e8c:	f7fe fe34 	bl	8006af8 <xTaskCreateStatic>
 8007e90:	4603      	mov	r3, r0
 8007e92:	4a10      	ldr	r2, [pc, #64]	; (8007ed4 <xTimerCreateTimerTask+0x8c>)
 8007e94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e96:	4b0f      	ldr	r3, [pc, #60]	; (8007ed4 <xTimerCreateTimerTask+0x8c>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d001      	beq.n	8007ea2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10a      	bne.n	8007ebe <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eac:	f383 8811 	msr	BASEPRI, r3
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	613b      	str	r3, [r7, #16]
}
 8007eba:	bf00      	nop
 8007ebc:	e7fe      	b.n	8007ebc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007ebe:	697b      	ldr	r3, [r7, #20]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3718      	adds	r7, #24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	20000eac 	.word	0x20000eac
 8007ecc:	0800bc3c 	.word	0x0800bc3c
 8007ed0:	0800800d 	.word	0x0800800d
 8007ed4:	20000eb0 	.word	0x20000eb0

08007ed8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b08a      	sub	sp, #40	; 0x28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
 8007ee4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10a      	bne.n	8007f06 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	623b      	str	r3, [r7, #32]
}
 8007f02:	bf00      	nop
 8007f04:	e7fe      	b.n	8007f04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f06:	4b1a      	ldr	r3, [pc, #104]	; (8007f70 <xTimerGenericCommand+0x98>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d02a      	beq.n	8007f64 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	2b05      	cmp	r3, #5
 8007f1e:	dc18      	bgt.n	8007f52 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f20:	f7ff fcb0 	bl	8007884 <xTaskGetSchedulerState>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d109      	bne.n	8007f3e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f2a:	4b11      	ldr	r3, [pc, #68]	; (8007f70 <xTimerGenericCommand+0x98>)
 8007f2c:	6818      	ldr	r0, [r3, #0]
 8007f2e:	f107 0110 	add.w	r1, r7, #16
 8007f32:	2300      	movs	r3, #0
 8007f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f36:	f7fe f9f7 	bl	8006328 <xQueueGenericSend>
 8007f3a:	6278      	str	r0, [r7, #36]	; 0x24
 8007f3c:	e012      	b.n	8007f64 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f3e:	4b0c      	ldr	r3, [pc, #48]	; (8007f70 <xTimerGenericCommand+0x98>)
 8007f40:	6818      	ldr	r0, [r3, #0]
 8007f42:	f107 0110 	add.w	r1, r7, #16
 8007f46:	2300      	movs	r3, #0
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f7fe f9ed 	bl	8006328 <xQueueGenericSend>
 8007f4e:	6278      	str	r0, [r7, #36]	; 0x24
 8007f50:	e008      	b.n	8007f64 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f52:	4b07      	ldr	r3, [pc, #28]	; (8007f70 <xTimerGenericCommand+0x98>)
 8007f54:	6818      	ldr	r0, [r3, #0]
 8007f56:	f107 0110 	add.w	r1, r7, #16
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	683a      	ldr	r2, [r7, #0]
 8007f5e:	f7fe fae1 	bl	8006524 <xQueueGenericSendFromISR>
 8007f62:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3728      	adds	r7, #40	; 0x28
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	20000eac 	.word	0x20000eac

08007f74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b088      	sub	sp, #32
 8007f78:	af02      	add	r7, sp, #8
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f7e:	4b22      	ldr	r3, [pc, #136]	; (8008008 <prvProcessExpiredTimer+0x94>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7fe f89d 	bl	80060cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f98:	f003 0304 	and.w	r3, r3, #4
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d022      	beq.n	8007fe6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	699a      	ldr	r2, [r3, #24]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	18d1      	adds	r1, r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	6978      	ldr	r0, [r7, #20]
 8007fae:	f000 f8d1 	bl	8008154 <prvInsertTimerInActiveList>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d01f      	beq.n	8007ff8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fb8:	2300      	movs	r3, #0
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	6978      	ldr	r0, [r7, #20]
 8007fc4:	f7ff ff88 	bl	8007ed8 <xTimerGenericCommand>
 8007fc8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d113      	bne.n	8007ff8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	60fb      	str	r3, [r7, #12]
}
 8007fe2:	bf00      	nop
 8007fe4:	e7fe      	b.n	8007fe4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fec:	f023 0301 	bic.w	r3, r3, #1
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	6a1b      	ldr	r3, [r3, #32]
 8007ffc:	6978      	ldr	r0, [r7, #20]
 8007ffe:	4798      	blx	r3
}
 8008000:	bf00      	nop
 8008002:	3718      	adds	r7, #24
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	20000ea4 	.word	0x20000ea4

0800800c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008014:	f107 0308 	add.w	r3, r7, #8
 8008018:	4618      	mov	r0, r3
 800801a:	f000 f857 	bl	80080cc <prvGetNextExpireTime>
 800801e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	4619      	mov	r1, r3
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f000 f803 	bl	8008030 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800802a:	f000 f8d5 	bl	80081d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800802e:	e7f1      	b.n	8008014 <prvTimerTask+0x8>

08008030 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800803a:	f7ff f837 	bl	80070ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800803e:	f107 0308 	add.w	r3, r7, #8
 8008042:	4618      	mov	r0, r3
 8008044:	f000 f866 	bl	8008114 <prvSampleTimeNow>
 8008048:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d130      	bne.n	80080b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10a      	bne.n	800806c <prvProcessTimerOrBlockTask+0x3c>
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	429a      	cmp	r2, r3
 800805c:	d806      	bhi.n	800806c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800805e:	f7ff f833 	bl	80070c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008062:	68f9      	ldr	r1, [r7, #12]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7ff ff85 	bl	8007f74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800806a:	e024      	b.n	80080b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d008      	beq.n	8008084 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008072:	4b13      	ldr	r3, [pc, #76]	; (80080c0 <prvProcessTimerOrBlockTask+0x90>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d101      	bne.n	8008080 <prvProcessTimerOrBlockTask+0x50>
 800807c:	2301      	movs	r3, #1
 800807e:	e000      	b.n	8008082 <prvProcessTimerOrBlockTask+0x52>
 8008080:	2300      	movs	r3, #0
 8008082:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008084:	4b0f      	ldr	r3, [pc, #60]	; (80080c4 <prvProcessTimerOrBlockTask+0x94>)
 8008086:	6818      	ldr	r0, [r3, #0]
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	4619      	mov	r1, r3
 8008092:	f7fe fcfd 	bl	8006a90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008096:	f7ff f817 	bl	80070c8 <xTaskResumeAll>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10a      	bne.n	80080b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80080a0:	4b09      	ldr	r3, [pc, #36]	; (80080c8 <prvProcessTimerOrBlockTask+0x98>)
 80080a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080a6:	601a      	str	r2, [r3, #0]
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	f3bf 8f6f 	isb	sy
}
 80080b0:	e001      	b.n	80080b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80080b2:	f7ff f809 	bl	80070c8 <xTaskResumeAll>
}
 80080b6:	bf00      	nop
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	20000ea8 	.word	0x20000ea8
 80080c4:	20000eac 	.word	0x20000eac
 80080c8:	e000ed04 	.word	0xe000ed04

080080cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80080d4:	4b0e      	ldr	r3, [pc, #56]	; (8008110 <prvGetNextExpireTime+0x44>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <prvGetNextExpireTime+0x16>
 80080de:	2201      	movs	r2, #1
 80080e0:	e000      	b.n	80080e4 <prvGetNextExpireTime+0x18>
 80080e2:	2200      	movs	r2, #0
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d105      	bne.n	80080fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080f0:	4b07      	ldr	r3, [pc, #28]	; (8008110 <prvGetNextExpireTime+0x44>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	60fb      	str	r3, [r7, #12]
 80080fa:	e001      	b.n	8008100 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80080fc:	2300      	movs	r3, #0
 80080fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008100:	68fb      	ldr	r3, [r7, #12]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3714      	adds	r7, #20
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	20000ea4 	.word	0x20000ea4

08008114 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800811c:	f7ff f872 	bl	8007204 <xTaskGetTickCount>
 8008120:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008122:	4b0b      	ldr	r3, [pc, #44]	; (8008150 <prvSampleTimeNow+0x3c>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	429a      	cmp	r2, r3
 800812a:	d205      	bcs.n	8008138 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800812c:	f000 f936 	bl	800839c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	e002      	b.n	800813e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800813e:	4a04      	ldr	r2, [pc, #16]	; (8008150 <prvSampleTimeNow+0x3c>)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008144:	68fb      	ldr	r3, [r7, #12]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	20000eb4 	.word	0x20000eb4

08008154 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
 8008160:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008162:	2300      	movs	r3, #0
 8008164:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	429a      	cmp	r2, r3
 8008178:	d812      	bhi.n	80081a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	1ad2      	subs	r2, r2, r3
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	429a      	cmp	r2, r3
 8008186:	d302      	bcc.n	800818e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008188:	2301      	movs	r3, #1
 800818a:	617b      	str	r3, [r7, #20]
 800818c:	e01b      	b.n	80081c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800818e:	4b10      	ldr	r3, [pc, #64]	; (80081d0 <prvInsertTimerInActiveList+0x7c>)
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	3304      	adds	r3, #4
 8008196:	4619      	mov	r1, r3
 8008198:	4610      	mov	r0, r2
 800819a:	f7fd ff5e 	bl	800605a <vListInsert>
 800819e:	e012      	b.n	80081c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d206      	bcs.n	80081b6 <prvInsertTimerInActiveList+0x62>
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d302      	bcc.n	80081b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80081b0:	2301      	movs	r3, #1
 80081b2:	617b      	str	r3, [r7, #20]
 80081b4:	e007      	b.n	80081c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081b6:	4b07      	ldr	r3, [pc, #28]	; (80081d4 <prvInsertTimerInActiveList+0x80>)
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	3304      	adds	r3, #4
 80081be:	4619      	mov	r1, r3
 80081c0:	4610      	mov	r0, r2
 80081c2:	f7fd ff4a 	bl	800605a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80081c6:	697b      	ldr	r3, [r7, #20]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3718      	adds	r7, #24
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	20000ea8 	.word	0x20000ea8
 80081d4:	20000ea4 	.word	0x20000ea4

080081d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b08e      	sub	sp, #56	; 0x38
 80081dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081de:	e0ca      	b.n	8008376 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	da18      	bge.n	8008218 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80081e6:	1d3b      	adds	r3, r7, #4
 80081e8:	3304      	adds	r3, #4
 80081ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80081ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d10a      	bne.n	8008208 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80081f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f6:	f383 8811 	msr	BASEPRI, r3
 80081fa:	f3bf 8f6f 	isb	sy
 80081fe:	f3bf 8f4f 	dsb	sy
 8008202:	61fb      	str	r3, [r7, #28]
}
 8008204:	bf00      	nop
 8008206:	e7fe      	b.n	8008206 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800820e:	6850      	ldr	r0, [r2, #4]
 8008210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008212:	6892      	ldr	r2, [r2, #8]
 8008214:	4611      	mov	r1, r2
 8008216:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	f2c0 80aa 	blt.w	8008374 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d004      	beq.n	8008236 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800822c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822e:	3304      	adds	r3, #4
 8008230:	4618      	mov	r0, r3
 8008232:	f7fd ff4b 	bl	80060cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008236:	463b      	mov	r3, r7
 8008238:	4618      	mov	r0, r3
 800823a:	f7ff ff6b 	bl	8008114 <prvSampleTimeNow>
 800823e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b09      	cmp	r3, #9
 8008244:	f200 8097 	bhi.w	8008376 <prvProcessReceivedCommands+0x19e>
 8008248:	a201      	add	r2, pc, #4	; (adr r2, 8008250 <prvProcessReceivedCommands+0x78>)
 800824a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824e:	bf00      	nop
 8008250:	08008279 	.word	0x08008279
 8008254:	08008279 	.word	0x08008279
 8008258:	08008279 	.word	0x08008279
 800825c:	080082ed 	.word	0x080082ed
 8008260:	08008301 	.word	0x08008301
 8008264:	0800834b 	.word	0x0800834b
 8008268:	08008279 	.word	0x08008279
 800826c:	08008279 	.word	0x08008279
 8008270:	080082ed 	.word	0x080082ed
 8008274:	08008301 	.word	0x08008301
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800827e:	f043 0301 	orr.w	r3, r3, #1
 8008282:	b2da      	uxtb	r2, r3
 8008284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008286:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828e:	699b      	ldr	r3, [r3, #24]
 8008290:	18d1      	adds	r1, r2, r3
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008296:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008298:	f7ff ff5c 	bl	8008154 <prvInsertTimerInActiveList>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d069      	beq.n	8008376 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082b0:	f003 0304 	and.w	r3, r3, #4
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d05e      	beq.n	8008376 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80082b8:	68ba      	ldr	r2, [r7, #8]
 80082ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082bc:	699b      	ldr	r3, [r3, #24]
 80082be:	441a      	add	r2, r3
 80082c0:	2300      	movs	r3, #0
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	2300      	movs	r3, #0
 80082c6:	2100      	movs	r1, #0
 80082c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082ca:	f7ff fe05 	bl	8007ed8 <xTimerGenericCommand>
 80082ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80082d0:	6a3b      	ldr	r3, [r7, #32]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d14f      	bne.n	8008376 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80082d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082da:	f383 8811 	msr	BASEPRI, r3
 80082de:	f3bf 8f6f 	isb	sy
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	61bb      	str	r3, [r7, #24]
}
 80082e8:	bf00      	nop
 80082ea:	e7fe      	b.n	80082ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082f2:	f023 0301 	bic.w	r3, r3, #1
 80082f6:	b2da      	uxtb	r2, r3
 80082f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80082fe:	e03a      	b.n	8008376 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008306:	f043 0301 	orr.w	r3, r3, #1
 800830a:	b2da      	uxtb	r2, r3
 800830c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008316:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10a      	bne.n	8008336 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	617b      	str	r3, [r7, #20]
}
 8008332:	bf00      	nop
 8008334:	e7fe      	b.n	8008334 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008338:	699a      	ldr	r2, [r3, #24]
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	18d1      	adds	r1, r2, r3
 800833e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008344:	f7ff ff06 	bl	8008154 <prvInsertTimerInActiveList>
					break;
 8008348:	e015      	b.n	8008376 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800834a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008350:	f003 0302 	and.w	r3, r3, #2
 8008354:	2b00      	cmp	r3, #0
 8008356:	d103      	bne.n	8008360 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800835a:	f000 fbe1 	bl	8008b20 <vPortFree>
 800835e:	e00a      	b.n	8008376 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008362:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008366:	f023 0301 	bic.w	r3, r3, #1
 800836a:	b2da      	uxtb	r2, r3
 800836c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008372:	e000      	b.n	8008376 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008374:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008376:	4b08      	ldr	r3, [pc, #32]	; (8008398 <prvProcessReceivedCommands+0x1c0>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	1d39      	adds	r1, r7, #4
 800837c:	2200      	movs	r2, #0
 800837e:	4618      	mov	r0, r3
 8008380:	f7fe f96c 	bl	800665c <xQueueReceive>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	f47f af2a 	bne.w	80081e0 <prvProcessReceivedCommands+0x8>
	}
}
 800838c:	bf00      	nop
 800838e:	bf00      	nop
 8008390:	3730      	adds	r7, #48	; 0x30
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	20000eac 	.word	0x20000eac

0800839c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b088      	sub	sp, #32
 80083a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083a2:	e048      	b.n	8008436 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083a4:	4b2d      	ldr	r3, [pc, #180]	; (800845c <prvSwitchTimerLists+0xc0>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ae:	4b2b      	ldr	r3, [pc, #172]	; (800845c <prvSwitchTimerLists+0xc0>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	3304      	adds	r3, #4
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fd fe85 	bl	80060cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083d0:	f003 0304 	and.w	r3, r3, #4
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d02e      	beq.n	8008436 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	4413      	add	r3, r2
 80083e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d90e      	bls.n	8008408 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083f6:	4b19      	ldr	r3, [pc, #100]	; (800845c <prvSwitchTimerLists+0xc0>)
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	3304      	adds	r3, #4
 80083fe:	4619      	mov	r1, r3
 8008400:	4610      	mov	r0, r2
 8008402:	f7fd fe2a 	bl	800605a <vListInsert>
 8008406:	e016      	b.n	8008436 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008408:	2300      	movs	r3, #0
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	2300      	movs	r3, #0
 800840e:	693a      	ldr	r2, [r7, #16]
 8008410:	2100      	movs	r1, #0
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f7ff fd60 	bl	8007ed8 <xTimerGenericCommand>
 8008418:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10a      	bne.n	8008436 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	603b      	str	r3, [r7, #0]
}
 8008432:	bf00      	nop
 8008434:	e7fe      	b.n	8008434 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008436:	4b09      	ldr	r3, [pc, #36]	; (800845c <prvSwitchTimerLists+0xc0>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1b1      	bne.n	80083a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008440:	4b06      	ldr	r3, [pc, #24]	; (800845c <prvSwitchTimerLists+0xc0>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008446:	4b06      	ldr	r3, [pc, #24]	; (8008460 <prvSwitchTimerLists+0xc4>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a04      	ldr	r2, [pc, #16]	; (800845c <prvSwitchTimerLists+0xc0>)
 800844c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800844e:	4a04      	ldr	r2, [pc, #16]	; (8008460 <prvSwitchTimerLists+0xc4>)
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	6013      	str	r3, [r2, #0]
}
 8008454:	bf00      	nop
 8008456:	3718      	adds	r7, #24
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	20000ea4 	.word	0x20000ea4
 8008460:	20000ea8 	.word	0x20000ea8

08008464 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800846a:	f000 f96b 	bl	8008744 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800846e:	4b15      	ldr	r3, [pc, #84]	; (80084c4 <prvCheckForValidListAndQueue+0x60>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d120      	bne.n	80084b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008476:	4814      	ldr	r0, [pc, #80]	; (80084c8 <prvCheckForValidListAndQueue+0x64>)
 8008478:	f7fd fd9e 	bl	8005fb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800847c:	4813      	ldr	r0, [pc, #76]	; (80084cc <prvCheckForValidListAndQueue+0x68>)
 800847e:	f7fd fd9b 	bl	8005fb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008482:	4b13      	ldr	r3, [pc, #76]	; (80084d0 <prvCheckForValidListAndQueue+0x6c>)
 8008484:	4a10      	ldr	r2, [pc, #64]	; (80084c8 <prvCheckForValidListAndQueue+0x64>)
 8008486:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008488:	4b12      	ldr	r3, [pc, #72]	; (80084d4 <prvCheckForValidListAndQueue+0x70>)
 800848a:	4a10      	ldr	r2, [pc, #64]	; (80084cc <prvCheckForValidListAndQueue+0x68>)
 800848c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800848e:	2300      	movs	r3, #0
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	4b11      	ldr	r3, [pc, #68]	; (80084d8 <prvCheckForValidListAndQueue+0x74>)
 8008494:	4a11      	ldr	r2, [pc, #68]	; (80084dc <prvCheckForValidListAndQueue+0x78>)
 8008496:	2110      	movs	r1, #16
 8008498:	200a      	movs	r0, #10
 800849a:	f7fd fea9 	bl	80061f0 <xQueueGenericCreateStatic>
 800849e:	4603      	mov	r3, r0
 80084a0:	4a08      	ldr	r2, [pc, #32]	; (80084c4 <prvCheckForValidListAndQueue+0x60>)
 80084a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80084a4:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <prvCheckForValidListAndQueue+0x60>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d005      	beq.n	80084b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80084ac:	4b05      	ldr	r3, [pc, #20]	; (80084c4 <prvCheckForValidListAndQueue+0x60>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	490b      	ldr	r1, [pc, #44]	; (80084e0 <prvCheckForValidListAndQueue+0x7c>)
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fe fac2 	bl	8006a3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084b8:	f000 f974 	bl	80087a4 <vPortExitCritical>
}
 80084bc:	bf00      	nop
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	20000eac 	.word	0x20000eac
 80084c8:	20000e7c 	.word	0x20000e7c
 80084cc:	20000e90 	.word	0x20000e90
 80084d0:	20000ea4 	.word	0x20000ea4
 80084d4:	20000ea8 	.word	0x20000ea8
 80084d8:	20000f58 	.word	0x20000f58
 80084dc:	20000eb8 	.word	0x20000eb8
 80084e0:	0800bc44 	.word	0x0800bc44

080084e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3b04      	subs	r3, #4
 80084f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3b04      	subs	r3, #4
 8008502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f023 0201 	bic.w	r2, r3, #1
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3b04      	subs	r3, #4
 8008512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008514:	4a0c      	ldr	r2, [pc, #48]	; (8008548 <pxPortInitialiseStack+0x64>)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	3b14      	subs	r3, #20
 800851e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	3b04      	subs	r3, #4
 800852a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f06f 0202 	mvn.w	r2, #2
 8008532:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	3b20      	subs	r3, #32
 8008538:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800853a:	68fb      	ldr	r3, [r7, #12]
}
 800853c:	4618      	mov	r0, r3
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	0800854d 	.word	0x0800854d

0800854c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008552:	2300      	movs	r3, #0
 8008554:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008556:	4b12      	ldr	r3, [pc, #72]	; (80085a0 <prvTaskExitError+0x54>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855e:	d00a      	beq.n	8008576 <prvTaskExitError+0x2a>
	__asm volatile
 8008560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008564:	f383 8811 	msr	BASEPRI, r3
 8008568:	f3bf 8f6f 	isb	sy
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	60fb      	str	r3, [r7, #12]
}
 8008572:	bf00      	nop
 8008574:	e7fe      	b.n	8008574 <prvTaskExitError+0x28>
	__asm volatile
 8008576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857a:	f383 8811 	msr	BASEPRI, r3
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	60bb      	str	r3, [r7, #8]
}
 8008588:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800858a:	bf00      	nop
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d0fc      	beq.n	800858c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008592:	bf00      	nop
 8008594:	bf00      	nop
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	2000000c 	.word	0x2000000c
	...

080085b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085b0:	4b07      	ldr	r3, [pc, #28]	; (80085d0 <pxCurrentTCBConst2>)
 80085b2:	6819      	ldr	r1, [r3, #0]
 80085b4:	6808      	ldr	r0, [r1, #0]
 80085b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ba:	f380 8809 	msr	PSP, r0
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f04f 0000 	mov.w	r0, #0
 80085c6:	f380 8811 	msr	BASEPRI, r0
 80085ca:	4770      	bx	lr
 80085cc:	f3af 8000 	nop.w

080085d0 <pxCurrentTCBConst2>:
 80085d0:	2000097c 	.word	0x2000097c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80085d4:	bf00      	nop
 80085d6:	bf00      	nop

080085d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80085d8:	4808      	ldr	r0, [pc, #32]	; (80085fc <prvPortStartFirstTask+0x24>)
 80085da:	6800      	ldr	r0, [r0, #0]
 80085dc:	6800      	ldr	r0, [r0, #0]
 80085de:	f380 8808 	msr	MSP, r0
 80085e2:	f04f 0000 	mov.w	r0, #0
 80085e6:	f380 8814 	msr	CONTROL, r0
 80085ea:	b662      	cpsie	i
 80085ec:	b661      	cpsie	f
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	df00      	svc	0
 80085f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085fa:	bf00      	nop
 80085fc:	e000ed08 	.word	0xe000ed08

08008600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008606:	4b46      	ldr	r3, [pc, #280]	; (8008720 <xPortStartScheduler+0x120>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a46      	ldr	r2, [pc, #280]	; (8008724 <xPortStartScheduler+0x124>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d10a      	bne.n	8008626 <xPortStartScheduler+0x26>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	613b      	str	r3, [r7, #16]
}
 8008622:	bf00      	nop
 8008624:	e7fe      	b.n	8008624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008626:	4b3e      	ldr	r3, [pc, #248]	; (8008720 <xPortStartScheduler+0x120>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a3f      	ldr	r2, [pc, #252]	; (8008728 <xPortStartScheduler+0x128>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d10a      	bne.n	8008646 <xPortStartScheduler+0x46>
	__asm volatile
 8008630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008634:	f383 8811 	msr	BASEPRI, r3
 8008638:	f3bf 8f6f 	isb	sy
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	60fb      	str	r3, [r7, #12]
}
 8008642:	bf00      	nop
 8008644:	e7fe      	b.n	8008644 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008646:	4b39      	ldr	r3, [pc, #228]	; (800872c <xPortStartScheduler+0x12c>)
 8008648:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	b2db      	uxtb	r3, r3
 8008650:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	22ff      	movs	r2, #255	; 0xff
 8008656:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	b2db      	uxtb	r3, r3
 800865e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008660:	78fb      	ldrb	r3, [r7, #3]
 8008662:	b2db      	uxtb	r3, r3
 8008664:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008668:	b2da      	uxtb	r2, r3
 800866a:	4b31      	ldr	r3, [pc, #196]	; (8008730 <xPortStartScheduler+0x130>)
 800866c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800866e:	4b31      	ldr	r3, [pc, #196]	; (8008734 <xPortStartScheduler+0x134>)
 8008670:	2207      	movs	r2, #7
 8008672:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008674:	e009      	b.n	800868a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008676:	4b2f      	ldr	r3, [pc, #188]	; (8008734 <xPortStartScheduler+0x134>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	3b01      	subs	r3, #1
 800867c:	4a2d      	ldr	r2, [pc, #180]	; (8008734 <xPortStartScheduler+0x134>)
 800867e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008680:	78fb      	ldrb	r3, [r7, #3]
 8008682:	b2db      	uxtb	r3, r3
 8008684:	005b      	lsls	r3, r3, #1
 8008686:	b2db      	uxtb	r3, r3
 8008688:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800868a:	78fb      	ldrb	r3, [r7, #3]
 800868c:	b2db      	uxtb	r3, r3
 800868e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008692:	2b80      	cmp	r3, #128	; 0x80
 8008694:	d0ef      	beq.n	8008676 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008696:	4b27      	ldr	r3, [pc, #156]	; (8008734 <xPortStartScheduler+0x134>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f1c3 0307 	rsb	r3, r3, #7
 800869e:	2b04      	cmp	r3, #4
 80086a0:	d00a      	beq.n	80086b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80086a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a6:	f383 8811 	msr	BASEPRI, r3
 80086aa:	f3bf 8f6f 	isb	sy
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	60bb      	str	r3, [r7, #8]
}
 80086b4:	bf00      	nop
 80086b6:	e7fe      	b.n	80086b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086b8:	4b1e      	ldr	r3, [pc, #120]	; (8008734 <xPortStartScheduler+0x134>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	021b      	lsls	r3, r3, #8
 80086be:	4a1d      	ldr	r2, [pc, #116]	; (8008734 <xPortStartScheduler+0x134>)
 80086c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086c2:	4b1c      	ldr	r3, [pc, #112]	; (8008734 <xPortStartScheduler+0x134>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80086ca:	4a1a      	ldr	r2, [pc, #104]	; (8008734 <xPortStartScheduler+0x134>)
 80086cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	b2da      	uxtb	r2, r3
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086d6:	4b18      	ldr	r3, [pc, #96]	; (8008738 <xPortStartScheduler+0x138>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a17      	ldr	r2, [pc, #92]	; (8008738 <xPortStartScheduler+0x138>)
 80086dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80086e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086e2:	4b15      	ldr	r3, [pc, #84]	; (8008738 <xPortStartScheduler+0x138>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a14      	ldr	r2, [pc, #80]	; (8008738 <xPortStartScheduler+0x138>)
 80086e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80086ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086ee:	f000 f8dd 	bl	80088ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086f2:	4b12      	ldr	r3, [pc, #72]	; (800873c <xPortStartScheduler+0x13c>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80086f8:	f000 f8fc 	bl	80088f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086fc:	4b10      	ldr	r3, [pc, #64]	; (8008740 <xPortStartScheduler+0x140>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a0f      	ldr	r2, [pc, #60]	; (8008740 <xPortStartScheduler+0x140>)
 8008702:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008706:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008708:	f7ff ff66 	bl	80085d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800870c:	f7fe fe44 	bl	8007398 <vTaskSwitchContext>
	prvTaskExitError();
 8008710:	f7ff ff1c 	bl	800854c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	e000ed00 	.word	0xe000ed00
 8008724:	410fc271 	.word	0x410fc271
 8008728:	410fc270 	.word	0x410fc270
 800872c:	e000e400 	.word	0xe000e400
 8008730:	20000fa8 	.word	0x20000fa8
 8008734:	20000fac 	.word	0x20000fac
 8008738:	e000ed20 	.word	0xe000ed20
 800873c:	2000000c 	.word	0x2000000c
 8008740:	e000ef34 	.word	0xe000ef34

08008744 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
	__asm volatile
 800874a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874e:	f383 8811 	msr	BASEPRI, r3
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	607b      	str	r3, [r7, #4]
}
 800875c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800875e:	4b0f      	ldr	r3, [pc, #60]	; (800879c <vPortEnterCritical+0x58>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3301      	adds	r3, #1
 8008764:	4a0d      	ldr	r2, [pc, #52]	; (800879c <vPortEnterCritical+0x58>)
 8008766:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008768:	4b0c      	ldr	r3, [pc, #48]	; (800879c <vPortEnterCritical+0x58>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d10f      	bne.n	8008790 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008770:	4b0b      	ldr	r3, [pc, #44]	; (80087a0 <vPortEnterCritical+0x5c>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	b2db      	uxtb	r3, r3
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00a      	beq.n	8008790 <vPortEnterCritical+0x4c>
	__asm volatile
 800877a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877e:	f383 8811 	msr	BASEPRI, r3
 8008782:	f3bf 8f6f 	isb	sy
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	603b      	str	r3, [r7, #0]
}
 800878c:	bf00      	nop
 800878e:	e7fe      	b.n	800878e <vPortEnterCritical+0x4a>
	}
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	2000000c 	.word	0x2000000c
 80087a0:	e000ed04 	.word	0xe000ed04

080087a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80087aa:	4b12      	ldr	r3, [pc, #72]	; (80087f4 <vPortExitCritical+0x50>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d10a      	bne.n	80087c8 <vPortExitCritical+0x24>
	__asm volatile
 80087b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b6:	f383 8811 	msr	BASEPRI, r3
 80087ba:	f3bf 8f6f 	isb	sy
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	607b      	str	r3, [r7, #4]
}
 80087c4:	bf00      	nop
 80087c6:	e7fe      	b.n	80087c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80087c8:	4b0a      	ldr	r3, [pc, #40]	; (80087f4 <vPortExitCritical+0x50>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3b01      	subs	r3, #1
 80087ce:	4a09      	ldr	r2, [pc, #36]	; (80087f4 <vPortExitCritical+0x50>)
 80087d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087d2:	4b08      	ldr	r3, [pc, #32]	; (80087f4 <vPortExitCritical+0x50>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d105      	bne.n	80087e6 <vPortExitCritical+0x42>
 80087da:	2300      	movs	r3, #0
 80087dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	f383 8811 	msr	BASEPRI, r3
}
 80087e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	2000000c 	.word	0x2000000c
	...

08008800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008800:	f3ef 8009 	mrs	r0, PSP
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	4b15      	ldr	r3, [pc, #84]	; (8008860 <pxCurrentTCBConst>)
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	f01e 0f10 	tst.w	lr, #16
 8008810:	bf08      	it	eq
 8008812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800881a:	6010      	str	r0, [r2, #0]
 800881c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008824:	f380 8811 	msr	BASEPRI, r0
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	f7fe fdb2 	bl	8007398 <vTaskSwitchContext>
 8008834:	f04f 0000 	mov.w	r0, #0
 8008838:	f380 8811 	msr	BASEPRI, r0
 800883c:	bc09      	pop	{r0, r3}
 800883e:	6819      	ldr	r1, [r3, #0]
 8008840:	6808      	ldr	r0, [r1, #0]
 8008842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008846:	f01e 0f10 	tst.w	lr, #16
 800884a:	bf08      	it	eq
 800884c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008850:	f380 8809 	msr	PSP, r0
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	f3af 8000 	nop.w

08008860 <pxCurrentTCBConst>:
 8008860:	2000097c 	.word	0x2000097c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop

08008868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	607b      	str	r3, [r7, #4]
}
 8008880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008882:	f7fe fccf 	bl	8007224 <xTaskIncrementTick>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d003      	beq.n	8008894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800888c:	4b06      	ldr	r3, [pc, #24]	; (80088a8 <xPortSysTickHandler+0x40>)
 800888e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	2300      	movs	r3, #0
 8008896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	f383 8811 	msr	BASEPRI, r3
}
 800889e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80088a0:	bf00      	nop
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	e000ed04 	.word	0xe000ed04

080088ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80088ac:	b480      	push	{r7}
 80088ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80088b0:	4b0b      	ldr	r3, [pc, #44]	; (80088e0 <vPortSetupTimerInterrupt+0x34>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80088b6:	4b0b      	ldr	r3, [pc, #44]	; (80088e4 <vPortSetupTimerInterrupt+0x38>)
 80088b8:	2200      	movs	r2, #0
 80088ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088bc:	4b0a      	ldr	r3, [pc, #40]	; (80088e8 <vPortSetupTimerInterrupt+0x3c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a0a      	ldr	r2, [pc, #40]	; (80088ec <vPortSetupTimerInterrupt+0x40>)
 80088c2:	fba2 2303 	umull	r2, r3, r2, r3
 80088c6:	099b      	lsrs	r3, r3, #6
 80088c8:	4a09      	ldr	r2, [pc, #36]	; (80088f0 <vPortSetupTimerInterrupt+0x44>)
 80088ca:	3b01      	subs	r3, #1
 80088cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80088ce:	4b04      	ldr	r3, [pc, #16]	; (80088e0 <vPortSetupTimerInterrupt+0x34>)
 80088d0:	2207      	movs	r2, #7
 80088d2:	601a      	str	r2, [r3, #0]
}
 80088d4:	bf00      	nop
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	e000e010 	.word	0xe000e010
 80088e4:	e000e018 	.word	0xe000e018
 80088e8:	20000000 	.word	0x20000000
 80088ec:	10624dd3 	.word	0x10624dd3
 80088f0:	e000e014 	.word	0xe000e014

080088f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008904 <vPortEnableVFP+0x10>
 80088f8:	6801      	ldr	r1, [r0, #0]
 80088fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80088fe:	6001      	str	r1, [r0, #0]
 8008900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008902:	bf00      	nop
 8008904:	e000ed88 	.word	0xe000ed88

08008908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800890e:	f3ef 8305 	mrs	r3, IPSR
 8008912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2b0f      	cmp	r3, #15
 8008918:	d914      	bls.n	8008944 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800891a:	4a17      	ldr	r2, [pc, #92]	; (8008978 <vPortValidateInterruptPriority+0x70>)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	4413      	add	r3, r2
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008924:	4b15      	ldr	r3, [pc, #84]	; (800897c <vPortValidateInterruptPriority+0x74>)
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	7afa      	ldrb	r2, [r7, #11]
 800892a:	429a      	cmp	r2, r3
 800892c:	d20a      	bcs.n	8008944 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800892e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	607b      	str	r3, [r7, #4]
}
 8008940:	bf00      	nop
 8008942:	e7fe      	b.n	8008942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008944:	4b0e      	ldr	r3, [pc, #56]	; (8008980 <vPortValidateInterruptPriority+0x78>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800894c:	4b0d      	ldr	r3, [pc, #52]	; (8008984 <vPortValidateInterruptPriority+0x7c>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	429a      	cmp	r2, r3
 8008952:	d90a      	bls.n	800896a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	603b      	str	r3, [r7, #0]
}
 8008966:	bf00      	nop
 8008968:	e7fe      	b.n	8008968 <vPortValidateInterruptPriority+0x60>
	}
 800896a:	bf00      	nop
 800896c:	3714      	adds	r7, #20
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	e000e3f0 	.word	0xe000e3f0
 800897c:	20000fa8 	.word	0x20000fa8
 8008980:	e000ed0c 	.word	0xe000ed0c
 8008984:	20000fac 	.word	0x20000fac

08008988 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b08a      	sub	sp, #40	; 0x28
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008990:	2300      	movs	r3, #0
 8008992:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008994:	f7fe fb8a 	bl	80070ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008998:	4b5b      	ldr	r3, [pc, #364]	; (8008b08 <pvPortMalloc+0x180>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d101      	bne.n	80089a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80089a0:	f000 f920 	bl	8008be4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80089a4:	4b59      	ldr	r3, [pc, #356]	; (8008b0c <pvPortMalloc+0x184>)
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4013      	ands	r3, r2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f040 8093 	bne.w	8008ad8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d01d      	beq.n	80089f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80089b8:	2208      	movs	r2, #8
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4413      	add	r3, r2
 80089be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f003 0307 	and.w	r3, r3, #7
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d014      	beq.n	80089f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f023 0307 	bic.w	r3, r3, #7
 80089d0:	3308      	adds	r3, #8
 80089d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f003 0307 	and.w	r3, r3, #7
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00a      	beq.n	80089f4 <pvPortMalloc+0x6c>
	__asm volatile
 80089de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e2:	f383 8811 	msr	BASEPRI, r3
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	617b      	str	r3, [r7, #20]
}
 80089f0:	bf00      	nop
 80089f2:	e7fe      	b.n	80089f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d06e      	beq.n	8008ad8 <pvPortMalloc+0x150>
 80089fa:	4b45      	ldr	r3, [pc, #276]	; (8008b10 <pvPortMalloc+0x188>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d869      	bhi.n	8008ad8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a04:	4b43      	ldr	r3, [pc, #268]	; (8008b14 <pvPortMalloc+0x18c>)
 8008a06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a08:	4b42      	ldr	r3, [pc, #264]	; (8008b14 <pvPortMalloc+0x18c>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a0e:	e004      	b.n	8008a1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d903      	bls.n	8008a2c <pvPortMalloc+0xa4>
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1f1      	bne.n	8008a10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a2c:	4b36      	ldr	r3, [pc, #216]	; (8008b08 <pvPortMalloc+0x180>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d050      	beq.n	8008ad8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a36:	6a3b      	ldr	r3, [r7, #32]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2208      	movs	r2, #8
 8008a3c:	4413      	add	r3, r2
 8008a3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	6a3b      	ldr	r3, [r7, #32]
 8008a46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	1ad2      	subs	r2, r2, r3
 8008a50:	2308      	movs	r3, #8
 8008a52:	005b      	lsls	r3, r3, #1
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d91f      	bls.n	8008a98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	f003 0307 	and.w	r3, r3, #7
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00a      	beq.n	8008a80 <pvPortMalloc+0xf8>
	__asm volatile
 8008a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	613b      	str	r3, [r7, #16]
}
 8008a7c:	bf00      	nop
 8008a7e:	e7fe      	b.n	8008a7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a82:	685a      	ldr	r2, [r3, #4]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	1ad2      	subs	r2, r2, r3
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a92:	69b8      	ldr	r0, [r7, #24]
 8008a94:	f000 f908 	bl	8008ca8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a98:	4b1d      	ldr	r3, [pc, #116]	; (8008b10 <pvPortMalloc+0x188>)
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	4a1b      	ldr	r2, [pc, #108]	; (8008b10 <pvPortMalloc+0x188>)
 8008aa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008aa6:	4b1a      	ldr	r3, [pc, #104]	; (8008b10 <pvPortMalloc+0x188>)
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	4b1b      	ldr	r3, [pc, #108]	; (8008b18 <pvPortMalloc+0x190>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d203      	bcs.n	8008aba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ab2:	4b17      	ldr	r3, [pc, #92]	; (8008b10 <pvPortMalloc+0x188>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a18      	ldr	r2, [pc, #96]	; (8008b18 <pvPortMalloc+0x190>)
 8008ab8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	685a      	ldr	r2, [r3, #4]
 8008abe:	4b13      	ldr	r3, [pc, #76]	; (8008b0c <pvPortMalloc+0x184>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	431a      	orrs	r2, r3
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	2200      	movs	r2, #0
 8008acc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008ace:	4b13      	ldr	r3, [pc, #76]	; (8008b1c <pvPortMalloc+0x194>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	4a11      	ldr	r2, [pc, #68]	; (8008b1c <pvPortMalloc+0x194>)
 8008ad6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ad8:	f7fe faf6 	bl	80070c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	f003 0307 	and.w	r3, r3, #7
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00a      	beq.n	8008afc <pvPortMalloc+0x174>
	__asm volatile
 8008ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aea:	f383 8811 	msr	BASEPRI, r3
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	60fb      	str	r3, [r7, #12]
}
 8008af8:	bf00      	nop
 8008afa:	e7fe      	b.n	8008afa <pvPortMalloc+0x172>
	return pvReturn;
 8008afc:	69fb      	ldr	r3, [r7, #28]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3728      	adds	r7, #40	; 0x28
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	20002f40 	.word	0x20002f40
 8008b0c:	20002f54 	.word	0x20002f54
 8008b10:	20002f44 	.word	0x20002f44
 8008b14:	20002f38 	.word	0x20002f38
 8008b18:	20002f48 	.word	0x20002f48
 8008b1c:	20002f4c 	.word	0x20002f4c

08008b20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d04d      	beq.n	8008bce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b32:	2308      	movs	r3, #8
 8008b34:	425b      	negs	r3, r3
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	4413      	add	r3, r2
 8008b3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	685a      	ldr	r2, [r3, #4]
 8008b44:	4b24      	ldr	r3, [pc, #144]	; (8008bd8 <vPortFree+0xb8>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4013      	ands	r3, r2
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10a      	bne.n	8008b64 <vPortFree+0x44>
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	60fb      	str	r3, [r7, #12]
}
 8008b60:	bf00      	nop
 8008b62:	e7fe      	b.n	8008b62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00a      	beq.n	8008b82 <vPortFree+0x62>
	__asm volatile
 8008b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b70:	f383 8811 	msr	BASEPRI, r3
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	60bb      	str	r3, [r7, #8]
}
 8008b7e:	bf00      	nop
 8008b80:	e7fe      	b.n	8008b80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	4b14      	ldr	r3, [pc, #80]	; (8008bd8 <vPortFree+0xb8>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d01e      	beq.n	8008bce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d11a      	bne.n	8008bce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	685a      	ldr	r2, [r3, #4]
 8008b9c:	4b0e      	ldr	r3, [pc, #56]	; (8008bd8 <vPortFree+0xb8>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	43db      	mvns	r3, r3
 8008ba2:	401a      	ands	r2, r3
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ba8:	f7fe fa80 	bl	80070ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	685a      	ldr	r2, [r3, #4]
 8008bb0:	4b0a      	ldr	r3, [pc, #40]	; (8008bdc <vPortFree+0xbc>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	4a09      	ldr	r2, [pc, #36]	; (8008bdc <vPortFree+0xbc>)
 8008bb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008bba:	6938      	ldr	r0, [r7, #16]
 8008bbc:	f000 f874 	bl	8008ca8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008bc0:	4b07      	ldr	r3, [pc, #28]	; (8008be0 <vPortFree+0xc0>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	4a06      	ldr	r2, [pc, #24]	; (8008be0 <vPortFree+0xc0>)
 8008bc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008bca:	f7fe fa7d 	bl	80070c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008bce:	bf00      	nop
 8008bd0:	3718      	adds	r7, #24
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	20002f54 	.word	0x20002f54
 8008bdc:	20002f44 	.word	0x20002f44
 8008be0:	20002f50 	.word	0x20002f50

08008be4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008bea:	f641 7388 	movw	r3, #8072	; 0x1f88
 8008bee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008bf0:	4b27      	ldr	r3, [pc, #156]	; (8008c90 <prvHeapInit+0xac>)
 8008bf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f003 0307 	and.w	r3, r3, #7
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00c      	beq.n	8008c18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	3307      	adds	r3, #7
 8008c02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f023 0307 	bic.w	r3, r3, #7
 8008c0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	4a1f      	ldr	r2, [pc, #124]	; (8008c90 <prvHeapInit+0xac>)
 8008c14:	4413      	add	r3, r2
 8008c16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c1c:	4a1d      	ldr	r2, [pc, #116]	; (8008c94 <prvHeapInit+0xb0>)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c22:	4b1c      	ldr	r3, [pc, #112]	; (8008c94 <prvHeapInit+0xb0>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c30:	2208      	movs	r2, #8
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	1a9b      	subs	r3, r3, r2
 8008c36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f023 0307 	bic.w	r3, r3, #7
 8008c3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	4a15      	ldr	r2, [pc, #84]	; (8008c98 <prvHeapInit+0xb4>)
 8008c44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c46:	4b14      	ldr	r3, [pc, #80]	; (8008c98 <prvHeapInit+0xb4>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c4e:	4b12      	ldr	r3, [pc, #72]	; (8008c98 <prvHeapInit+0xb4>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2200      	movs	r2, #0
 8008c54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	1ad2      	subs	r2, r2, r3
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c64:	4b0c      	ldr	r3, [pc, #48]	; (8008c98 <prvHeapInit+0xb4>)
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	4a0a      	ldr	r2, [pc, #40]	; (8008c9c <prvHeapInit+0xb8>)
 8008c72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	4a09      	ldr	r2, [pc, #36]	; (8008ca0 <prvHeapInit+0xbc>)
 8008c7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c7c:	4b09      	ldr	r3, [pc, #36]	; (8008ca4 <prvHeapInit+0xc0>)
 8008c7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c82:	601a      	str	r2, [r3, #0]
}
 8008c84:	bf00      	nop
 8008c86:	3714      	adds	r7, #20
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr
 8008c90:	20000fb0 	.word	0x20000fb0
 8008c94:	20002f38 	.word	0x20002f38
 8008c98:	20002f40 	.word	0x20002f40
 8008c9c:	20002f48 	.word	0x20002f48
 8008ca0:	20002f44 	.word	0x20002f44
 8008ca4:	20002f54 	.word	0x20002f54

08008ca8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008cb0:	4b28      	ldr	r3, [pc, #160]	; (8008d54 <prvInsertBlockIntoFreeList+0xac>)
 8008cb2:	60fb      	str	r3, [r7, #12]
 8008cb4:	e002      	b.n	8008cbc <prvInsertBlockIntoFreeList+0x14>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	60fb      	str	r3, [r7, #12]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d8f7      	bhi.n	8008cb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d108      	bne.n	8008cea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	685a      	ldr	r2, [r3, #4]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	441a      	add	r2, r3
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	68ba      	ldr	r2, [r7, #8]
 8008cf4:	441a      	add	r2, r3
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d118      	bne.n	8008d30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	4b15      	ldr	r3, [pc, #84]	; (8008d58 <prvInsertBlockIntoFreeList+0xb0>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d00d      	beq.n	8008d26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	685a      	ldr	r2, [r3, #4]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	441a      	add	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	601a      	str	r2, [r3, #0]
 8008d24:	e008      	b.n	8008d38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d26:	4b0c      	ldr	r3, [pc, #48]	; (8008d58 <prvInsertBlockIntoFreeList+0xb0>)
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	e003      	b.n	8008d38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d002      	beq.n	8008d46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d46:	bf00      	nop
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	20002f38 	.word	0x20002f38
 8008d58:	20002f40 	.word	0x20002f40

08008d5c <__errno>:
 8008d5c:	4b01      	ldr	r3, [pc, #4]	; (8008d64 <__errno+0x8>)
 8008d5e:	6818      	ldr	r0, [r3, #0]
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	20000010 	.word	0x20000010

08008d68 <std>:
 8008d68:	2300      	movs	r3, #0
 8008d6a:	b510      	push	{r4, lr}
 8008d6c:	4604      	mov	r4, r0
 8008d6e:	e9c0 3300 	strd	r3, r3, [r0]
 8008d72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d76:	6083      	str	r3, [r0, #8]
 8008d78:	8181      	strh	r1, [r0, #12]
 8008d7a:	6643      	str	r3, [r0, #100]	; 0x64
 8008d7c:	81c2      	strh	r2, [r0, #14]
 8008d7e:	6183      	str	r3, [r0, #24]
 8008d80:	4619      	mov	r1, r3
 8008d82:	2208      	movs	r2, #8
 8008d84:	305c      	adds	r0, #92	; 0x5c
 8008d86:	f000 f91a 	bl	8008fbe <memset>
 8008d8a:	4b05      	ldr	r3, [pc, #20]	; (8008da0 <std+0x38>)
 8008d8c:	6263      	str	r3, [r4, #36]	; 0x24
 8008d8e:	4b05      	ldr	r3, [pc, #20]	; (8008da4 <std+0x3c>)
 8008d90:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d92:	4b05      	ldr	r3, [pc, #20]	; (8008da8 <std+0x40>)
 8008d94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d96:	4b05      	ldr	r3, [pc, #20]	; (8008dac <std+0x44>)
 8008d98:	6224      	str	r4, [r4, #32]
 8008d9a:	6323      	str	r3, [r4, #48]	; 0x30
 8008d9c:	bd10      	pop	{r4, pc}
 8008d9e:	bf00      	nop
 8008da0:	08009a8d 	.word	0x08009a8d
 8008da4:	08009aaf 	.word	0x08009aaf
 8008da8:	08009ae7 	.word	0x08009ae7
 8008dac:	08009b0b 	.word	0x08009b0b

08008db0 <_cleanup_r>:
 8008db0:	4901      	ldr	r1, [pc, #4]	; (8008db8 <_cleanup_r+0x8>)
 8008db2:	f000 b8af 	b.w	8008f14 <_fwalk_reent>
 8008db6:	bf00      	nop
 8008db8:	0800a965 	.word	0x0800a965

08008dbc <__sfmoreglue>:
 8008dbc:	b570      	push	{r4, r5, r6, lr}
 8008dbe:	1e4a      	subs	r2, r1, #1
 8008dc0:	2568      	movs	r5, #104	; 0x68
 8008dc2:	4355      	muls	r5, r2
 8008dc4:	460e      	mov	r6, r1
 8008dc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008dca:	f000 f901 	bl	8008fd0 <_malloc_r>
 8008dce:	4604      	mov	r4, r0
 8008dd0:	b140      	cbz	r0, 8008de4 <__sfmoreglue+0x28>
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	e9c0 1600 	strd	r1, r6, [r0]
 8008dd8:	300c      	adds	r0, #12
 8008dda:	60a0      	str	r0, [r4, #8]
 8008ddc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008de0:	f000 f8ed 	bl	8008fbe <memset>
 8008de4:	4620      	mov	r0, r4
 8008de6:	bd70      	pop	{r4, r5, r6, pc}

08008de8 <__sfp_lock_acquire>:
 8008de8:	4801      	ldr	r0, [pc, #4]	; (8008df0 <__sfp_lock_acquire+0x8>)
 8008dea:	f000 b8d8 	b.w	8008f9e <__retarget_lock_acquire_recursive>
 8008dee:	bf00      	nop
 8008df0:	200032fc 	.word	0x200032fc

08008df4 <__sfp_lock_release>:
 8008df4:	4801      	ldr	r0, [pc, #4]	; (8008dfc <__sfp_lock_release+0x8>)
 8008df6:	f000 b8d3 	b.w	8008fa0 <__retarget_lock_release_recursive>
 8008dfa:	bf00      	nop
 8008dfc:	200032fc 	.word	0x200032fc

08008e00 <__sinit_lock_acquire>:
 8008e00:	4801      	ldr	r0, [pc, #4]	; (8008e08 <__sinit_lock_acquire+0x8>)
 8008e02:	f000 b8cc 	b.w	8008f9e <__retarget_lock_acquire_recursive>
 8008e06:	bf00      	nop
 8008e08:	200032f7 	.word	0x200032f7

08008e0c <__sinit_lock_release>:
 8008e0c:	4801      	ldr	r0, [pc, #4]	; (8008e14 <__sinit_lock_release+0x8>)
 8008e0e:	f000 b8c7 	b.w	8008fa0 <__retarget_lock_release_recursive>
 8008e12:	bf00      	nop
 8008e14:	200032f7 	.word	0x200032f7

08008e18 <__sinit>:
 8008e18:	b510      	push	{r4, lr}
 8008e1a:	4604      	mov	r4, r0
 8008e1c:	f7ff fff0 	bl	8008e00 <__sinit_lock_acquire>
 8008e20:	69a3      	ldr	r3, [r4, #24]
 8008e22:	b11b      	cbz	r3, 8008e2c <__sinit+0x14>
 8008e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e28:	f7ff bff0 	b.w	8008e0c <__sinit_lock_release>
 8008e2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e30:	6523      	str	r3, [r4, #80]	; 0x50
 8008e32:	4b13      	ldr	r3, [pc, #76]	; (8008e80 <__sinit+0x68>)
 8008e34:	4a13      	ldr	r2, [pc, #76]	; (8008e84 <__sinit+0x6c>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e3a:	42a3      	cmp	r3, r4
 8008e3c:	bf04      	itt	eq
 8008e3e:	2301      	moveq	r3, #1
 8008e40:	61a3      	streq	r3, [r4, #24]
 8008e42:	4620      	mov	r0, r4
 8008e44:	f000 f820 	bl	8008e88 <__sfp>
 8008e48:	6060      	str	r0, [r4, #4]
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f000 f81c 	bl	8008e88 <__sfp>
 8008e50:	60a0      	str	r0, [r4, #8]
 8008e52:	4620      	mov	r0, r4
 8008e54:	f000 f818 	bl	8008e88 <__sfp>
 8008e58:	2200      	movs	r2, #0
 8008e5a:	60e0      	str	r0, [r4, #12]
 8008e5c:	2104      	movs	r1, #4
 8008e5e:	6860      	ldr	r0, [r4, #4]
 8008e60:	f7ff ff82 	bl	8008d68 <std>
 8008e64:	68a0      	ldr	r0, [r4, #8]
 8008e66:	2201      	movs	r2, #1
 8008e68:	2109      	movs	r1, #9
 8008e6a:	f7ff ff7d 	bl	8008d68 <std>
 8008e6e:	68e0      	ldr	r0, [r4, #12]
 8008e70:	2202      	movs	r2, #2
 8008e72:	2112      	movs	r1, #18
 8008e74:	f7ff ff78 	bl	8008d68 <std>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	61a3      	str	r3, [r4, #24]
 8008e7c:	e7d2      	b.n	8008e24 <__sinit+0xc>
 8008e7e:	bf00      	nop
 8008e80:	0800bdb0 	.word	0x0800bdb0
 8008e84:	08008db1 	.word	0x08008db1

08008e88 <__sfp>:
 8008e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8a:	4607      	mov	r7, r0
 8008e8c:	f7ff ffac 	bl	8008de8 <__sfp_lock_acquire>
 8008e90:	4b1e      	ldr	r3, [pc, #120]	; (8008f0c <__sfp+0x84>)
 8008e92:	681e      	ldr	r6, [r3, #0]
 8008e94:	69b3      	ldr	r3, [r6, #24]
 8008e96:	b913      	cbnz	r3, 8008e9e <__sfp+0x16>
 8008e98:	4630      	mov	r0, r6
 8008e9a:	f7ff ffbd 	bl	8008e18 <__sinit>
 8008e9e:	3648      	adds	r6, #72	; 0x48
 8008ea0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	d503      	bpl.n	8008eb0 <__sfp+0x28>
 8008ea8:	6833      	ldr	r3, [r6, #0]
 8008eaa:	b30b      	cbz	r3, 8008ef0 <__sfp+0x68>
 8008eac:	6836      	ldr	r6, [r6, #0]
 8008eae:	e7f7      	b.n	8008ea0 <__sfp+0x18>
 8008eb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008eb4:	b9d5      	cbnz	r5, 8008eec <__sfp+0x64>
 8008eb6:	4b16      	ldr	r3, [pc, #88]	; (8008f10 <__sfp+0x88>)
 8008eb8:	60e3      	str	r3, [r4, #12]
 8008eba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ebe:	6665      	str	r5, [r4, #100]	; 0x64
 8008ec0:	f000 f86c 	bl	8008f9c <__retarget_lock_init_recursive>
 8008ec4:	f7ff ff96 	bl	8008df4 <__sfp_lock_release>
 8008ec8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ecc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ed0:	6025      	str	r5, [r4, #0]
 8008ed2:	61a5      	str	r5, [r4, #24]
 8008ed4:	2208      	movs	r2, #8
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008edc:	f000 f86f 	bl	8008fbe <memset>
 8008ee0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ee4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ee8:	4620      	mov	r0, r4
 8008eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eec:	3468      	adds	r4, #104	; 0x68
 8008eee:	e7d9      	b.n	8008ea4 <__sfp+0x1c>
 8008ef0:	2104      	movs	r1, #4
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	f7ff ff62 	bl	8008dbc <__sfmoreglue>
 8008ef8:	4604      	mov	r4, r0
 8008efa:	6030      	str	r0, [r6, #0]
 8008efc:	2800      	cmp	r0, #0
 8008efe:	d1d5      	bne.n	8008eac <__sfp+0x24>
 8008f00:	f7ff ff78 	bl	8008df4 <__sfp_lock_release>
 8008f04:	230c      	movs	r3, #12
 8008f06:	603b      	str	r3, [r7, #0]
 8008f08:	e7ee      	b.n	8008ee8 <__sfp+0x60>
 8008f0a:	bf00      	nop
 8008f0c:	0800bdb0 	.word	0x0800bdb0
 8008f10:	ffff0001 	.word	0xffff0001

08008f14 <_fwalk_reent>:
 8008f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f18:	4606      	mov	r6, r0
 8008f1a:	4688      	mov	r8, r1
 8008f1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f20:	2700      	movs	r7, #0
 8008f22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f26:	f1b9 0901 	subs.w	r9, r9, #1
 8008f2a:	d505      	bpl.n	8008f38 <_fwalk_reent+0x24>
 8008f2c:	6824      	ldr	r4, [r4, #0]
 8008f2e:	2c00      	cmp	r4, #0
 8008f30:	d1f7      	bne.n	8008f22 <_fwalk_reent+0xe>
 8008f32:	4638      	mov	r0, r7
 8008f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f38:	89ab      	ldrh	r3, [r5, #12]
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d907      	bls.n	8008f4e <_fwalk_reent+0x3a>
 8008f3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f42:	3301      	adds	r3, #1
 8008f44:	d003      	beq.n	8008f4e <_fwalk_reent+0x3a>
 8008f46:	4629      	mov	r1, r5
 8008f48:	4630      	mov	r0, r6
 8008f4a:	47c0      	blx	r8
 8008f4c:	4307      	orrs	r7, r0
 8008f4e:	3568      	adds	r5, #104	; 0x68
 8008f50:	e7e9      	b.n	8008f26 <_fwalk_reent+0x12>
	...

08008f54 <__libc_init_array>:
 8008f54:	b570      	push	{r4, r5, r6, lr}
 8008f56:	4d0d      	ldr	r5, [pc, #52]	; (8008f8c <__libc_init_array+0x38>)
 8008f58:	4c0d      	ldr	r4, [pc, #52]	; (8008f90 <__libc_init_array+0x3c>)
 8008f5a:	1b64      	subs	r4, r4, r5
 8008f5c:	10a4      	asrs	r4, r4, #2
 8008f5e:	2600      	movs	r6, #0
 8008f60:	42a6      	cmp	r6, r4
 8008f62:	d109      	bne.n	8008f78 <__libc_init_array+0x24>
 8008f64:	4d0b      	ldr	r5, [pc, #44]	; (8008f94 <__libc_init_array+0x40>)
 8008f66:	4c0c      	ldr	r4, [pc, #48]	; (8008f98 <__libc_init_array+0x44>)
 8008f68:	f002 fe32 	bl	800bbd0 <_init>
 8008f6c:	1b64      	subs	r4, r4, r5
 8008f6e:	10a4      	asrs	r4, r4, #2
 8008f70:	2600      	movs	r6, #0
 8008f72:	42a6      	cmp	r6, r4
 8008f74:	d105      	bne.n	8008f82 <__libc_init_array+0x2e>
 8008f76:	bd70      	pop	{r4, r5, r6, pc}
 8008f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f7c:	4798      	blx	r3
 8008f7e:	3601      	adds	r6, #1
 8008f80:	e7ee      	b.n	8008f60 <__libc_init_array+0xc>
 8008f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f86:	4798      	blx	r3
 8008f88:	3601      	adds	r6, #1
 8008f8a:	e7f2      	b.n	8008f72 <__libc_init_array+0x1e>
 8008f8c:	0800c13c 	.word	0x0800c13c
 8008f90:	0800c13c 	.word	0x0800c13c
 8008f94:	0800c13c 	.word	0x0800c13c
 8008f98:	0800c140 	.word	0x0800c140

08008f9c <__retarget_lock_init_recursive>:
 8008f9c:	4770      	bx	lr

08008f9e <__retarget_lock_acquire_recursive>:
 8008f9e:	4770      	bx	lr

08008fa0 <__retarget_lock_release_recursive>:
 8008fa0:	4770      	bx	lr

08008fa2 <memcpy>:
 8008fa2:	440a      	add	r2, r1
 8008fa4:	4291      	cmp	r1, r2
 8008fa6:	f100 33ff 	add.w	r3, r0, #4294967295
 8008faa:	d100      	bne.n	8008fae <memcpy+0xc>
 8008fac:	4770      	bx	lr
 8008fae:	b510      	push	{r4, lr}
 8008fb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fb8:	4291      	cmp	r1, r2
 8008fba:	d1f9      	bne.n	8008fb0 <memcpy+0xe>
 8008fbc:	bd10      	pop	{r4, pc}

08008fbe <memset>:
 8008fbe:	4402      	add	r2, r0
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d100      	bne.n	8008fc8 <memset+0xa>
 8008fc6:	4770      	bx	lr
 8008fc8:	f803 1b01 	strb.w	r1, [r3], #1
 8008fcc:	e7f9      	b.n	8008fc2 <memset+0x4>
	...

08008fd0 <_malloc_r>:
 8008fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd2:	1ccd      	adds	r5, r1, #3
 8008fd4:	f025 0503 	bic.w	r5, r5, #3
 8008fd8:	3508      	adds	r5, #8
 8008fda:	2d0c      	cmp	r5, #12
 8008fdc:	bf38      	it	cc
 8008fde:	250c      	movcc	r5, #12
 8008fe0:	2d00      	cmp	r5, #0
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	db01      	blt.n	8008fea <_malloc_r+0x1a>
 8008fe6:	42a9      	cmp	r1, r5
 8008fe8:	d903      	bls.n	8008ff2 <_malloc_r+0x22>
 8008fea:	230c      	movs	r3, #12
 8008fec:	6033      	str	r3, [r6, #0]
 8008fee:	2000      	movs	r0, #0
 8008ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ff2:	f001 fd11 	bl	800aa18 <__malloc_lock>
 8008ff6:	4921      	ldr	r1, [pc, #132]	; (800907c <_malloc_r+0xac>)
 8008ff8:	680a      	ldr	r2, [r1, #0]
 8008ffa:	4614      	mov	r4, r2
 8008ffc:	b99c      	cbnz	r4, 8009026 <_malloc_r+0x56>
 8008ffe:	4f20      	ldr	r7, [pc, #128]	; (8009080 <_malloc_r+0xb0>)
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	b923      	cbnz	r3, 800900e <_malloc_r+0x3e>
 8009004:	4621      	mov	r1, r4
 8009006:	4630      	mov	r0, r6
 8009008:	f000 fd10 	bl	8009a2c <_sbrk_r>
 800900c:	6038      	str	r0, [r7, #0]
 800900e:	4629      	mov	r1, r5
 8009010:	4630      	mov	r0, r6
 8009012:	f000 fd0b 	bl	8009a2c <_sbrk_r>
 8009016:	1c43      	adds	r3, r0, #1
 8009018:	d123      	bne.n	8009062 <_malloc_r+0x92>
 800901a:	230c      	movs	r3, #12
 800901c:	6033      	str	r3, [r6, #0]
 800901e:	4630      	mov	r0, r6
 8009020:	f001 fd00 	bl	800aa24 <__malloc_unlock>
 8009024:	e7e3      	b.n	8008fee <_malloc_r+0x1e>
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	1b5b      	subs	r3, r3, r5
 800902a:	d417      	bmi.n	800905c <_malloc_r+0x8c>
 800902c:	2b0b      	cmp	r3, #11
 800902e:	d903      	bls.n	8009038 <_malloc_r+0x68>
 8009030:	6023      	str	r3, [r4, #0]
 8009032:	441c      	add	r4, r3
 8009034:	6025      	str	r5, [r4, #0]
 8009036:	e004      	b.n	8009042 <_malloc_r+0x72>
 8009038:	6863      	ldr	r3, [r4, #4]
 800903a:	42a2      	cmp	r2, r4
 800903c:	bf0c      	ite	eq
 800903e:	600b      	streq	r3, [r1, #0]
 8009040:	6053      	strne	r3, [r2, #4]
 8009042:	4630      	mov	r0, r6
 8009044:	f001 fcee 	bl	800aa24 <__malloc_unlock>
 8009048:	f104 000b 	add.w	r0, r4, #11
 800904c:	1d23      	adds	r3, r4, #4
 800904e:	f020 0007 	bic.w	r0, r0, #7
 8009052:	1ac2      	subs	r2, r0, r3
 8009054:	d0cc      	beq.n	8008ff0 <_malloc_r+0x20>
 8009056:	1a1b      	subs	r3, r3, r0
 8009058:	50a3      	str	r3, [r4, r2]
 800905a:	e7c9      	b.n	8008ff0 <_malloc_r+0x20>
 800905c:	4622      	mov	r2, r4
 800905e:	6864      	ldr	r4, [r4, #4]
 8009060:	e7cc      	b.n	8008ffc <_malloc_r+0x2c>
 8009062:	1cc4      	adds	r4, r0, #3
 8009064:	f024 0403 	bic.w	r4, r4, #3
 8009068:	42a0      	cmp	r0, r4
 800906a:	d0e3      	beq.n	8009034 <_malloc_r+0x64>
 800906c:	1a21      	subs	r1, r4, r0
 800906e:	4630      	mov	r0, r6
 8009070:	f000 fcdc 	bl	8009a2c <_sbrk_r>
 8009074:	3001      	adds	r0, #1
 8009076:	d1dd      	bne.n	8009034 <_malloc_r+0x64>
 8009078:	e7cf      	b.n	800901a <_malloc_r+0x4a>
 800907a:	bf00      	nop
 800907c:	20002f58 	.word	0x20002f58
 8009080:	20002f5c 	.word	0x20002f5c

08009084 <__cvt>:
 8009084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009088:	ec55 4b10 	vmov	r4, r5, d0
 800908c:	2d00      	cmp	r5, #0
 800908e:	460e      	mov	r6, r1
 8009090:	4619      	mov	r1, r3
 8009092:	462b      	mov	r3, r5
 8009094:	bfbb      	ittet	lt
 8009096:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800909a:	461d      	movlt	r5, r3
 800909c:	2300      	movge	r3, #0
 800909e:	232d      	movlt	r3, #45	; 0x2d
 80090a0:	700b      	strb	r3, [r1, #0]
 80090a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80090a8:	4691      	mov	r9, r2
 80090aa:	f023 0820 	bic.w	r8, r3, #32
 80090ae:	bfbc      	itt	lt
 80090b0:	4622      	movlt	r2, r4
 80090b2:	4614      	movlt	r4, r2
 80090b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80090b8:	d005      	beq.n	80090c6 <__cvt+0x42>
 80090ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80090be:	d100      	bne.n	80090c2 <__cvt+0x3e>
 80090c0:	3601      	adds	r6, #1
 80090c2:	2102      	movs	r1, #2
 80090c4:	e000      	b.n	80090c8 <__cvt+0x44>
 80090c6:	2103      	movs	r1, #3
 80090c8:	ab03      	add	r3, sp, #12
 80090ca:	9301      	str	r3, [sp, #4]
 80090cc:	ab02      	add	r3, sp, #8
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	ec45 4b10 	vmov	d0, r4, r5
 80090d4:	4653      	mov	r3, sl
 80090d6:	4632      	mov	r2, r6
 80090d8:	f000 fdd2 	bl	8009c80 <_dtoa_r>
 80090dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80090e0:	4607      	mov	r7, r0
 80090e2:	d102      	bne.n	80090ea <__cvt+0x66>
 80090e4:	f019 0f01 	tst.w	r9, #1
 80090e8:	d022      	beq.n	8009130 <__cvt+0xac>
 80090ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80090ee:	eb07 0906 	add.w	r9, r7, r6
 80090f2:	d110      	bne.n	8009116 <__cvt+0x92>
 80090f4:	783b      	ldrb	r3, [r7, #0]
 80090f6:	2b30      	cmp	r3, #48	; 0x30
 80090f8:	d10a      	bne.n	8009110 <__cvt+0x8c>
 80090fa:	2200      	movs	r2, #0
 80090fc:	2300      	movs	r3, #0
 80090fe:	4620      	mov	r0, r4
 8009100:	4629      	mov	r1, r5
 8009102:	f7f7 fd09 	bl	8000b18 <__aeabi_dcmpeq>
 8009106:	b918      	cbnz	r0, 8009110 <__cvt+0x8c>
 8009108:	f1c6 0601 	rsb	r6, r6, #1
 800910c:	f8ca 6000 	str.w	r6, [sl]
 8009110:	f8da 3000 	ldr.w	r3, [sl]
 8009114:	4499      	add	r9, r3
 8009116:	2200      	movs	r2, #0
 8009118:	2300      	movs	r3, #0
 800911a:	4620      	mov	r0, r4
 800911c:	4629      	mov	r1, r5
 800911e:	f7f7 fcfb 	bl	8000b18 <__aeabi_dcmpeq>
 8009122:	b108      	cbz	r0, 8009128 <__cvt+0xa4>
 8009124:	f8cd 900c 	str.w	r9, [sp, #12]
 8009128:	2230      	movs	r2, #48	; 0x30
 800912a:	9b03      	ldr	r3, [sp, #12]
 800912c:	454b      	cmp	r3, r9
 800912e:	d307      	bcc.n	8009140 <__cvt+0xbc>
 8009130:	9b03      	ldr	r3, [sp, #12]
 8009132:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009134:	1bdb      	subs	r3, r3, r7
 8009136:	4638      	mov	r0, r7
 8009138:	6013      	str	r3, [r2, #0]
 800913a:	b004      	add	sp, #16
 800913c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009140:	1c59      	adds	r1, r3, #1
 8009142:	9103      	str	r1, [sp, #12]
 8009144:	701a      	strb	r2, [r3, #0]
 8009146:	e7f0      	b.n	800912a <__cvt+0xa6>

08009148 <__exponent>:
 8009148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800914a:	4603      	mov	r3, r0
 800914c:	2900      	cmp	r1, #0
 800914e:	bfb8      	it	lt
 8009150:	4249      	neglt	r1, r1
 8009152:	f803 2b02 	strb.w	r2, [r3], #2
 8009156:	bfb4      	ite	lt
 8009158:	222d      	movlt	r2, #45	; 0x2d
 800915a:	222b      	movge	r2, #43	; 0x2b
 800915c:	2909      	cmp	r1, #9
 800915e:	7042      	strb	r2, [r0, #1]
 8009160:	dd2a      	ble.n	80091b8 <__exponent+0x70>
 8009162:	f10d 0407 	add.w	r4, sp, #7
 8009166:	46a4      	mov	ip, r4
 8009168:	270a      	movs	r7, #10
 800916a:	46a6      	mov	lr, r4
 800916c:	460a      	mov	r2, r1
 800916e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009172:	fb07 1516 	mls	r5, r7, r6, r1
 8009176:	3530      	adds	r5, #48	; 0x30
 8009178:	2a63      	cmp	r2, #99	; 0x63
 800917a:	f104 34ff 	add.w	r4, r4, #4294967295
 800917e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009182:	4631      	mov	r1, r6
 8009184:	dcf1      	bgt.n	800916a <__exponent+0x22>
 8009186:	3130      	adds	r1, #48	; 0x30
 8009188:	f1ae 0502 	sub.w	r5, lr, #2
 800918c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009190:	1c44      	adds	r4, r0, #1
 8009192:	4629      	mov	r1, r5
 8009194:	4561      	cmp	r1, ip
 8009196:	d30a      	bcc.n	80091ae <__exponent+0x66>
 8009198:	f10d 0209 	add.w	r2, sp, #9
 800919c:	eba2 020e 	sub.w	r2, r2, lr
 80091a0:	4565      	cmp	r5, ip
 80091a2:	bf88      	it	hi
 80091a4:	2200      	movhi	r2, #0
 80091a6:	4413      	add	r3, r2
 80091a8:	1a18      	subs	r0, r3, r0
 80091aa:	b003      	add	sp, #12
 80091ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80091b6:	e7ed      	b.n	8009194 <__exponent+0x4c>
 80091b8:	2330      	movs	r3, #48	; 0x30
 80091ba:	3130      	adds	r1, #48	; 0x30
 80091bc:	7083      	strb	r3, [r0, #2]
 80091be:	70c1      	strb	r1, [r0, #3]
 80091c0:	1d03      	adds	r3, r0, #4
 80091c2:	e7f1      	b.n	80091a8 <__exponent+0x60>

080091c4 <_printf_float>:
 80091c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c8:	ed2d 8b02 	vpush	{d8}
 80091cc:	b08d      	sub	sp, #52	; 0x34
 80091ce:	460c      	mov	r4, r1
 80091d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80091d4:	4616      	mov	r6, r2
 80091d6:	461f      	mov	r7, r3
 80091d8:	4605      	mov	r5, r0
 80091da:	f001 fbff 	bl	800a9dc <_localeconv_r>
 80091de:	f8d0 a000 	ldr.w	sl, [r0]
 80091e2:	4650      	mov	r0, sl
 80091e4:	f7f7 f81c 	bl	8000220 <strlen>
 80091e8:	2300      	movs	r3, #0
 80091ea:	930a      	str	r3, [sp, #40]	; 0x28
 80091ec:	6823      	ldr	r3, [r4, #0]
 80091ee:	9305      	str	r3, [sp, #20]
 80091f0:	f8d8 3000 	ldr.w	r3, [r8]
 80091f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80091f8:	3307      	adds	r3, #7
 80091fa:	f023 0307 	bic.w	r3, r3, #7
 80091fe:	f103 0208 	add.w	r2, r3, #8
 8009202:	f8c8 2000 	str.w	r2, [r8]
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800920e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009212:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009216:	9307      	str	r3, [sp, #28]
 8009218:	f8cd 8018 	str.w	r8, [sp, #24]
 800921c:	ee08 0a10 	vmov	s16, r0
 8009220:	4b9f      	ldr	r3, [pc, #636]	; (80094a0 <_printf_float+0x2dc>)
 8009222:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009226:	f04f 32ff 	mov.w	r2, #4294967295
 800922a:	f7f7 fca7 	bl	8000b7c <__aeabi_dcmpun>
 800922e:	bb88      	cbnz	r0, 8009294 <_printf_float+0xd0>
 8009230:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009234:	4b9a      	ldr	r3, [pc, #616]	; (80094a0 <_printf_float+0x2dc>)
 8009236:	f04f 32ff 	mov.w	r2, #4294967295
 800923a:	f7f7 fc81 	bl	8000b40 <__aeabi_dcmple>
 800923e:	bb48      	cbnz	r0, 8009294 <_printf_float+0xd0>
 8009240:	2200      	movs	r2, #0
 8009242:	2300      	movs	r3, #0
 8009244:	4640      	mov	r0, r8
 8009246:	4649      	mov	r1, r9
 8009248:	f7f7 fc70 	bl	8000b2c <__aeabi_dcmplt>
 800924c:	b110      	cbz	r0, 8009254 <_printf_float+0x90>
 800924e:	232d      	movs	r3, #45	; 0x2d
 8009250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009254:	4b93      	ldr	r3, [pc, #588]	; (80094a4 <_printf_float+0x2e0>)
 8009256:	4894      	ldr	r0, [pc, #592]	; (80094a8 <_printf_float+0x2e4>)
 8009258:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800925c:	bf94      	ite	ls
 800925e:	4698      	movls	r8, r3
 8009260:	4680      	movhi	r8, r0
 8009262:	2303      	movs	r3, #3
 8009264:	6123      	str	r3, [r4, #16]
 8009266:	9b05      	ldr	r3, [sp, #20]
 8009268:	f023 0204 	bic.w	r2, r3, #4
 800926c:	6022      	str	r2, [r4, #0]
 800926e:	f04f 0900 	mov.w	r9, #0
 8009272:	9700      	str	r7, [sp, #0]
 8009274:	4633      	mov	r3, r6
 8009276:	aa0b      	add	r2, sp, #44	; 0x2c
 8009278:	4621      	mov	r1, r4
 800927a:	4628      	mov	r0, r5
 800927c:	f000 f9d8 	bl	8009630 <_printf_common>
 8009280:	3001      	adds	r0, #1
 8009282:	f040 8090 	bne.w	80093a6 <_printf_float+0x1e2>
 8009286:	f04f 30ff 	mov.w	r0, #4294967295
 800928a:	b00d      	add	sp, #52	; 0x34
 800928c:	ecbd 8b02 	vpop	{d8}
 8009290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009294:	4642      	mov	r2, r8
 8009296:	464b      	mov	r3, r9
 8009298:	4640      	mov	r0, r8
 800929a:	4649      	mov	r1, r9
 800929c:	f7f7 fc6e 	bl	8000b7c <__aeabi_dcmpun>
 80092a0:	b140      	cbz	r0, 80092b4 <_printf_float+0xf0>
 80092a2:	464b      	mov	r3, r9
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	bfbc      	itt	lt
 80092a8:	232d      	movlt	r3, #45	; 0x2d
 80092aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80092ae:	487f      	ldr	r0, [pc, #508]	; (80094ac <_printf_float+0x2e8>)
 80092b0:	4b7f      	ldr	r3, [pc, #508]	; (80094b0 <_printf_float+0x2ec>)
 80092b2:	e7d1      	b.n	8009258 <_printf_float+0x94>
 80092b4:	6863      	ldr	r3, [r4, #4]
 80092b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80092ba:	9206      	str	r2, [sp, #24]
 80092bc:	1c5a      	adds	r2, r3, #1
 80092be:	d13f      	bne.n	8009340 <_printf_float+0x17c>
 80092c0:	2306      	movs	r3, #6
 80092c2:	6063      	str	r3, [r4, #4]
 80092c4:	9b05      	ldr	r3, [sp, #20]
 80092c6:	6861      	ldr	r1, [r4, #4]
 80092c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80092cc:	2300      	movs	r3, #0
 80092ce:	9303      	str	r3, [sp, #12]
 80092d0:	ab0a      	add	r3, sp, #40	; 0x28
 80092d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80092d6:	ab09      	add	r3, sp, #36	; 0x24
 80092d8:	ec49 8b10 	vmov	d0, r8, r9
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	6022      	str	r2, [r4, #0]
 80092e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80092e4:	4628      	mov	r0, r5
 80092e6:	f7ff fecd 	bl	8009084 <__cvt>
 80092ea:	9b06      	ldr	r3, [sp, #24]
 80092ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092ee:	2b47      	cmp	r3, #71	; 0x47
 80092f0:	4680      	mov	r8, r0
 80092f2:	d108      	bne.n	8009306 <_printf_float+0x142>
 80092f4:	1cc8      	adds	r0, r1, #3
 80092f6:	db02      	blt.n	80092fe <_printf_float+0x13a>
 80092f8:	6863      	ldr	r3, [r4, #4]
 80092fa:	4299      	cmp	r1, r3
 80092fc:	dd41      	ble.n	8009382 <_printf_float+0x1be>
 80092fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8009302:	fa5f fb8b 	uxtb.w	fp, fp
 8009306:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800930a:	d820      	bhi.n	800934e <_printf_float+0x18a>
 800930c:	3901      	subs	r1, #1
 800930e:	465a      	mov	r2, fp
 8009310:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009314:	9109      	str	r1, [sp, #36]	; 0x24
 8009316:	f7ff ff17 	bl	8009148 <__exponent>
 800931a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800931c:	1813      	adds	r3, r2, r0
 800931e:	2a01      	cmp	r2, #1
 8009320:	4681      	mov	r9, r0
 8009322:	6123      	str	r3, [r4, #16]
 8009324:	dc02      	bgt.n	800932c <_printf_float+0x168>
 8009326:	6822      	ldr	r2, [r4, #0]
 8009328:	07d2      	lsls	r2, r2, #31
 800932a:	d501      	bpl.n	8009330 <_printf_float+0x16c>
 800932c:	3301      	adds	r3, #1
 800932e:	6123      	str	r3, [r4, #16]
 8009330:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009334:	2b00      	cmp	r3, #0
 8009336:	d09c      	beq.n	8009272 <_printf_float+0xae>
 8009338:	232d      	movs	r3, #45	; 0x2d
 800933a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800933e:	e798      	b.n	8009272 <_printf_float+0xae>
 8009340:	9a06      	ldr	r2, [sp, #24]
 8009342:	2a47      	cmp	r2, #71	; 0x47
 8009344:	d1be      	bne.n	80092c4 <_printf_float+0x100>
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1bc      	bne.n	80092c4 <_printf_float+0x100>
 800934a:	2301      	movs	r3, #1
 800934c:	e7b9      	b.n	80092c2 <_printf_float+0xfe>
 800934e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009352:	d118      	bne.n	8009386 <_printf_float+0x1c2>
 8009354:	2900      	cmp	r1, #0
 8009356:	6863      	ldr	r3, [r4, #4]
 8009358:	dd0b      	ble.n	8009372 <_printf_float+0x1ae>
 800935a:	6121      	str	r1, [r4, #16]
 800935c:	b913      	cbnz	r3, 8009364 <_printf_float+0x1a0>
 800935e:	6822      	ldr	r2, [r4, #0]
 8009360:	07d0      	lsls	r0, r2, #31
 8009362:	d502      	bpl.n	800936a <_printf_float+0x1a6>
 8009364:	3301      	adds	r3, #1
 8009366:	440b      	add	r3, r1
 8009368:	6123      	str	r3, [r4, #16]
 800936a:	65a1      	str	r1, [r4, #88]	; 0x58
 800936c:	f04f 0900 	mov.w	r9, #0
 8009370:	e7de      	b.n	8009330 <_printf_float+0x16c>
 8009372:	b913      	cbnz	r3, 800937a <_printf_float+0x1b6>
 8009374:	6822      	ldr	r2, [r4, #0]
 8009376:	07d2      	lsls	r2, r2, #31
 8009378:	d501      	bpl.n	800937e <_printf_float+0x1ba>
 800937a:	3302      	adds	r3, #2
 800937c:	e7f4      	b.n	8009368 <_printf_float+0x1a4>
 800937e:	2301      	movs	r3, #1
 8009380:	e7f2      	b.n	8009368 <_printf_float+0x1a4>
 8009382:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009388:	4299      	cmp	r1, r3
 800938a:	db05      	blt.n	8009398 <_printf_float+0x1d4>
 800938c:	6823      	ldr	r3, [r4, #0]
 800938e:	6121      	str	r1, [r4, #16]
 8009390:	07d8      	lsls	r0, r3, #31
 8009392:	d5ea      	bpl.n	800936a <_printf_float+0x1a6>
 8009394:	1c4b      	adds	r3, r1, #1
 8009396:	e7e7      	b.n	8009368 <_printf_float+0x1a4>
 8009398:	2900      	cmp	r1, #0
 800939a:	bfd4      	ite	le
 800939c:	f1c1 0202 	rsble	r2, r1, #2
 80093a0:	2201      	movgt	r2, #1
 80093a2:	4413      	add	r3, r2
 80093a4:	e7e0      	b.n	8009368 <_printf_float+0x1a4>
 80093a6:	6823      	ldr	r3, [r4, #0]
 80093a8:	055a      	lsls	r2, r3, #21
 80093aa:	d407      	bmi.n	80093bc <_printf_float+0x1f8>
 80093ac:	6923      	ldr	r3, [r4, #16]
 80093ae:	4642      	mov	r2, r8
 80093b0:	4631      	mov	r1, r6
 80093b2:	4628      	mov	r0, r5
 80093b4:	47b8      	blx	r7
 80093b6:	3001      	adds	r0, #1
 80093b8:	d12c      	bne.n	8009414 <_printf_float+0x250>
 80093ba:	e764      	b.n	8009286 <_printf_float+0xc2>
 80093bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80093c0:	f240 80e0 	bls.w	8009584 <_printf_float+0x3c0>
 80093c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093c8:	2200      	movs	r2, #0
 80093ca:	2300      	movs	r3, #0
 80093cc:	f7f7 fba4 	bl	8000b18 <__aeabi_dcmpeq>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	d034      	beq.n	800943e <_printf_float+0x27a>
 80093d4:	4a37      	ldr	r2, [pc, #220]	; (80094b4 <_printf_float+0x2f0>)
 80093d6:	2301      	movs	r3, #1
 80093d8:	4631      	mov	r1, r6
 80093da:	4628      	mov	r0, r5
 80093dc:	47b8      	blx	r7
 80093de:	3001      	adds	r0, #1
 80093e0:	f43f af51 	beq.w	8009286 <_printf_float+0xc2>
 80093e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093e8:	429a      	cmp	r2, r3
 80093ea:	db02      	blt.n	80093f2 <_printf_float+0x22e>
 80093ec:	6823      	ldr	r3, [r4, #0]
 80093ee:	07d8      	lsls	r0, r3, #31
 80093f0:	d510      	bpl.n	8009414 <_printf_float+0x250>
 80093f2:	ee18 3a10 	vmov	r3, s16
 80093f6:	4652      	mov	r2, sl
 80093f8:	4631      	mov	r1, r6
 80093fa:	4628      	mov	r0, r5
 80093fc:	47b8      	blx	r7
 80093fe:	3001      	adds	r0, #1
 8009400:	f43f af41 	beq.w	8009286 <_printf_float+0xc2>
 8009404:	f04f 0800 	mov.w	r8, #0
 8009408:	f104 091a 	add.w	r9, r4, #26
 800940c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800940e:	3b01      	subs	r3, #1
 8009410:	4543      	cmp	r3, r8
 8009412:	dc09      	bgt.n	8009428 <_printf_float+0x264>
 8009414:	6823      	ldr	r3, [r4, #0]
 8009416:	079b      	lsls	r3, r3, #30
 8009418:	f100 8105 	bmi.w	8009626 <_printf_float+0x462>
 800941c:	68e0      	ldr	r0, [r4, #12]
 800941e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009420:	4298      	cmp	r0, r3
 8009422:	bfb8      	it	lt
 8009424:	4618      	movlt	r0, r3
 8009426:	e730      	b.n	800928a <_printf_float+0xc6>
 8009428:	2301      	movs	r3, #1
 800942a:	464a      	mov	r2, r9
 800942c:	4631      	mov	r1, r6
 800942e:	4628      	mov	r0, r5
 8009430:	47b8      	blx	r7
 8009432:	3001      	adds	r0, #1
 8009434:	f43f af27 	beq.w	8009286 <_printf_float+0xc2>
 8009438:	f108 0801 	add.w	r8, r8, #1
 800943c:	e7e6      	b.n	800940c <_printf_float+0x248>
 800943e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009440:	2b00      	cmp	r3, #0
 8009442:	dc39      	bgt.n	80094b8 <_printf_float+0x2f4>
 8009444:	4a1b      	ldr	r2, [pc, #108]	; (80094b4 <_printf_float+0x2f0>)
 8009446:	2301      	movs	r3, #1
 8009448:	4631      	mov	r1, r6
 800944a:	4628      	mov	r0, r5
 800944c:	47b8      	blx	r7
 800944e:	3001      	adds	r0, #1
 8009450:	f43f af19 	beq.w	8009286 <_printf_float+0xc2>
 8009454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009458:	4313      	orrs	r3, r2
 800945a:	d102      	bne.n	8009462 <_printf_float+0x29e>
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	07d9      	lsls	r1, r3, #31
 8009460:	d5d8      	bpl.n	8009414 <_printf_float+0x250>
 8009462:	ee18 3a10 	vmov	r3, s16
 8009466:	4652      	mov	r2, sl
 8009468:	4631      	mov	r1, r6
 800946a:	4628      	mov	r0, r5
 800946c:	47b8      	blx	r7
 800946e:	3001      	adds	r0, #1
 8009470:	f43f af09 	beq.w	8009286 <_printf_float+0xc2>
 8009474:	f04f 0900 	mov.w	r9, #0
 8009478:	f104 0a1a 	add.w	sl, r4, #26
 800947c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800947e:	425b      	negs	r3, r3
 8009480:	454b      	cmp	r3, r9
 8009482:	dc01      	bgt.n	8009488 <_printf_float+0x2c4>
 8009484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009486:	e792      	b.n	80093ae <_printf_float+0x1ea>
 8009488:	2301      	movs	r3, #1
 800948a:	4652      	mov	r2, sl
 800948c:	4631      	mov	r1, r6
 800948e:	4628      	mov	r0, r5
 8009490:	47b8      	blx	r7
 8009492:	3001      	adds	r0, #1
 8009494:	f43f aef7 	beq.w	8009286 <_printf_float+0xc2>
 8009498:	f109 0901 	add.w	r9, r9, #1
 800949c:	e7ee      	b.n	800947c <_printf_float+0x2b8>
 800949e:	bf00      	nop
 80094a0:	7fefffff 	.word	0x7fefffff
 80094a4:	0800bdb4 	.word	0x0800bdb4
 80094a8:	0800bdb8 	.word	0x0800bdb8
 80094ac:	0800bdc0 	.word	0x0800bdc0
 80094b0:	0800bdbc 	.word	0x0800bdbc
 80094b4:	0800bdc4 	.word	0x0800bdc4
 80094b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094bc:	429a      	cmp	r2, r3
 80094be:	bfa8      	it	ge
 80094c0:	461a      	movge	r2, r3
 80094c2:	2a00      	cmp	r2, #0
 80094c4:	4691      	mov	r9, r2
 80094c6:	dc37      	bgt.n	8009538 <_printf_float+0x374>
 80094c8:	f04f 0b00 	mov.w	fp, #0
 80094cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094d0:	f104 021a 	add.w	r2, r4, #26
 80094d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094d6:	9305      	str	r3, [sp, #20]
 80094d8:	eba3 0309 	sub.w	r3, r3, r9
 80094dc:	455b      	cmp	r3, fp
 80094de:	dc33      	bgt.n	8009548 <_printf_float+0x384>
 80094e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094e4:	429a      	cmp	r2, r3
 80094e6:	db3b      	blt.n	8009560 <_printf_float+0x39c>
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	07da      	lsls	r2, r3, #31
 80094ec:	d438      	bmi.n	8009560 <_printf_float+0x39c>
 80094ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094f0:	9b05      	ldr	r3, [sp, #20]
 80094f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094f4:	1ad3      	subs	r3, r2, r3
 80094f6:	eba2 0901 	sub.w	r9, r2, r1
 80094fa:	4599      	cmp	r9, r3
 80094fc:	bfa8      	it	ge
 80094fe:	4699      	movge	r9, r3
 8009500:	f1b9 0f00 	cmp.w	r9, #0
 8009504:	dc35      	bgt.n	8009572 <_printf_float+0x3ae>
 8009506:	f04f 0800 	mov.w	r8, #0
 800950a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800950e:	f104 0a1a 	add.w	sl, r4, #26
 8009512:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009516:	1a9b      	subs	r3, r3, r2
 8009518:	eba3 0309 	sub.w	r3, r3, r9
 800951c:	4543      	cmp	r3, r8
 800951e:	f77f af79 	ble.w	8009414 <_printf_float+0x250>
 8009522:	2301      	movs	r3, #1
 8009524:	4652      	mov	r2, sl
 8009526:	4631      	mov	r1, r6
 8009528:	4628      	mov	r0, r5
 800952a:	47b8      	blx	r7
 800952c:	3001      	adds	r0, #1
 800952e:	f43f aeaa 	beq.w	8009286 <_printf_float+0xc2>
 8009532:	f108 0801 	add.w	r8, r8, #1
 8009536:	e7ec      	b.n	8009512 <_printf_float+0x34e>
 8009538:	4613      	mov	r3, r2
 800953a:	4631      	mov	r1, r6
 800953c:	4642      	mov	r2, r8
 800953e:	4628      	mov	r0, r5
 8009540:	47b8      	blx	r7
 8009542:	3001      	adds	r0, #1
 8009544:	d1c0      	bne.n	80094c8 <_printf_float+0x304>
 8009546:	e69e      	b.n	8009286 <_printf_float+0xc2>
 8009548:	2301      	movs	r3, #1
 800954a:	4631      	mov	r1, r6
 800954c:	4628      	mov	r0, r5
 800954e:	9205      	str	r2, [sp, #20]
 8009550:	47b8      	blx	r7
 8009552:	3001      	adds	r0, #1
 8009554:	f43f ae97 	beq.w	8009286 <_printf_float+0xc2>
 8009558:	9a05      	ldr	r2, [sp, #20]
 800955a:	f10b 0b01 	add.w	fp, fp, #1
 800955e:	e7b9      	b.n	80094d4 <_printf_float+0x310>
 8009560:	ee18 3a10 	vmov	r3, s16
 8009564:	4652      	mov	r2, sl
 8009566:	4631      	mov	r1, r6
 8009568:	4628      	mov	r0, r5
 800956a:	47b8      	blx	r7
 800956c:	3001      	adds	r0, #1
 800956e:	d1be      	bne.n	80094ee <_printf_float+0x32a>
 8009570:	e689      	b.n	8009286 <_printf_float+0xc2>
 8009572:	9a05      	ldr	r2, [sp, #20]
 8009574:	464b      	mov	r3, r9
 8009576:	4442      	add	r2, r8
 8009578:	4631      	mov	r1, r6
 800957a:	4628      	mov	r0, r5
 800957c:	47b8      	blx	r7
 800957e:	3001      	adds	r0, #1
 8009580:	d1c1      	bne.n	8009506 <_printf_float+0x342>
 8009582:	e680      	b.n	8009286 <_printf_float+0xc2>
 8009584:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009586:	2a01      	cmp	r2, #1
 8009588:	dc01      	bgt.n	800958e <_printf_float+0x3ca>
 800958a:	07db      	lsls	r3, r3, #31
 800958c:	d538      	bpl.n	8009600 <_printf_float+0x43c>
 800958e:	2301      	movs	r3, #1
 8009590:	4642      	mov	r2, r8
 8009592:	4631      	mov	r1, r6
 8009594:	4628      	mov	r0, r5
 8009596:	47b8      	blx	r7
 8009598:	3001      	adds	r0, #1
 800959a:	f43f ae74 	beq.w	8009286 <_printf_float+0xc2>
 800959e:	ee18 3a10 	vmov	r3, s16
 80095a2:	4652      	mov	r2, sl
 80095a4:	4631      	mov	r1, r6
 80095a6:	4628      	mov	r0, r5
 80095a8:	47b8      	blx	r7
 80095aa:	3001      	adds	r0, #1
 80095ac:	f43f ae6b 	beq.w	8009286 <_printf_float+0xc2>
 80095b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095b4:	2200      	movs	r2, #0
 80095b6:	2300      	movs	r3, #0
 80095b8:	f7f7 faae 	bl	8000b18 <__aeabi_dcmpeq>
 80095bc:	b9d8      	cbnz	r0, 80095f6 <_printf_float+0x432>
 80095be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095c0:	f108 0201 	add.w	r2, r8, #1
 80095c4:	3b01      	subs	r3, #1
 80095c6:	4631      	mov	r1, r6
 80095c8:	4628      	mov	r0, r5
 80095ca:	47b8      	blx	r7
 80095cc:	3001      	adds	r0, #1
 80095ce:	d10e      	bne.n	80095ee <_printf_float+0x42a>
 80095d0:	e659      	b.n	8009286 <_printf_float+0xc2>
 80095d2:	2301      	movs	r3, #1
 80095d4:	4652      	mov	r2, sl
 80095d6:	4631      	mov	r1, r6
 80095d8:	4628      	mov	r0, r5
 80095da:	47b8      	blx	r7
 80095dc:	3001      	adds	r0, #1
 80095de:	f43f ae52 	beq.w	8009286 <_printf_float+0xc2>
 80095e2:	f108 0801 	add.w	r8, r8, #1
 80095e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095e8:	3b01      	subs	r3, #1
 80095ea:	4543      	cmp	r3, r8
 80095ec:	dcf1      	bgt.n	80095d2 <_printf_float+0x40e>
 80095ee:	464b      	mov	r3, r9
 80095f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80095f4:	e6dc      	b.n	80093b0 <_printf_float+0x1ec>
 80095f6:	f04f 0800 	mov.w	r8, #0
 80095fa:	f104 0a1a 	add.w	sl, r4, #26
 80095fe:	e7f2      	b.n	80095e6 <_printf_float+0x422>
 8009600:	2301      	movs	r3, #1
 8009602:	4642      	mov	r2, r8
 8009604:	e7df      	b.n	80095c6 <_printf_float+0x402>
 8009606:	2301      	movs	r3, #1
 8009608:	464a      	mov	r2, r9
 800960a:	4631      	mov	r1, r6
 800960c:	4628      	mov	r0, r5
 800960e:	47b8      	blx	r7
 8009610:	3001      	adds	r0, #1
 8009612:	f43f ae38 	beq.w	8009286 <_printf_float+0xc2>
 8009616:	f108 0801 	add.w	r8, r8, #1
 800961a:	68e3      	ldr	r3, [r4, #12]
 800961c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800961e:	1a5b      	subs	r3, r3, r1
 8009620:	4543      	cmp	r3, r8
 8009622:	dcf0      	bgt.n	8009606 <_printf_float+0x442>
 8009624:	e6fa      	b.n	800941c <_printf_float+0x258>
 8009626:	f04f 0800 	mov.w	r8, #0
 800962a:	f104 0919 	add.w	r9, r4, #25
 800962e:	e7f4      	b.n	800961a <_printf_float+0x456>

08009630 <_printf_common>:
 8009630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009634:	4616      	mov	r6, r2
 8009636:	4699      	mov	r9, r3
 8009638:	688a      	ldr	r2, [r1, #8]
 800963a:	690b      	ldr	r3, [r1, #16]
 800963c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009640:	4293      	cmp	r3, r2
 8009642:	bfb8      	it	lt
 8009644:	4613      	movlt	r3, r2
 8009646:	6033      	str	r3, [r6, #0]
 8009648:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800964c:	4607      	mov	r7, r0
 800964e:	460c      	mov	r4, r1
 8009650:	b10a      	cbz	r2, 8009656 <_printf_common+0x26>
 8009652:	3301      	adds	r3, #1
 8009654:	6033      	str	r3, [r6, #0]
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	0699      	lsls	r1, r3, #26
 800965a:	bf42      	ittt	mi
 800965c:	6833      	ldrmi	r3, [r6, #0]
 800965e:	3302      	addmi	r3, #2
 8009660:	6033      	strmi	r3, [r6, #0]
 8009662:	6825      	ldr	r5, [r4, #0]
 8009664:	f015 0506 	ands.w	r5, r5, #6
 8009668:	d106      	bne.n	8009678 <_printf_common+0x48>
 800966a:	f104 0a19 	add.w	sl, r4, #25
 800966e:	68e3      	ldr	r3, [r4, #12]
 8009670:	6832      	ldr	r2, [r6, #0]
 8009672:	1a9b      	subs	r3, r3, r2
 8009674:	42ab      	cmp	r3, r5
 8009676:	dc26      	bgt.n	80096c6 <_printf_common+0x96>
 8009678:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800967c:	1e13      	subs	r3, r2, #0
 800967e:	6822      	ldr	r2, [r4, #0]
 8009680:	bf18      	it	ne
 8009682:	2301      	movne	r3, #1
 8009684:	0692      	lsls	r2, r2, #26
 8009686:	d42b      	bmi.n	80096e0 <_printf_common+0xb0>
 8009688:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800968c:	4649      	mov	r1, r9
 800968e:	4638      	mov	r0, r7
 8009690:	47c0      	blx	r8
 8009692:	3001      	adds	r0, #1
 8009694:	d01e      	beq.n	80096d4 <_printf_common+0xa4>
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	68e5      	ldr	r5, [r4, #12]
 800969a:	6832      	ldr	r2, [r6, #0]
 800969c:	f003 0306 	and.w	r3, r3, #6
 80096a0:	2b04      	cmp	r3, #4
 80096a2:	bf08      	it	eq
 80096a4:	1aad      	subeq	r5, r5, r2
 80096a6:	68a3      	ldr	r3, [r4, #8]
 80096a8:	6922      	ldr	r2, [r4, #16]
 80096aa:	bf0c      	ite	eq
 80096ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096b0:	2500      	movne	r5, #0
 80096b2:	4293      	cmp	r3, r2
 80096b4:	bfc4      	itt	gt
 80096b6:	1a9b      	subgt	r3, r3, r2
 80096b8:	18ed      	addgt	r5, r5, r3
 80096ba:	2600      	movs	r6, #0
 80096bc:	341a      	adds	r4, #26
 80096be:	42b5      	cmp	r5, r6
 80096c0:	d11a      	bne.n	80096f8 <_printf_common+0xc8>
 80096c2:	2000      	movs	r0, #0
 80096c4:	e008      	b.n	80096d8 <_printf_common+0xa8>
 80096c6:	2301      	movs	r3, #1
 80096c8:	4652      	mov	r2, sl
 80096ca:	4649      	mov	r1, r9
 80096cc:	4638      	mov	r0, r7
 80096ce:	47c0      	blx	r8
 80096d0:	3001      	adds	r0, #1
 80096d2:	d103      	bne.n	80096dc <_printf_common+0xac>
 80096d4:	f04f 30ff 	mov.w	r0, #4294967295
 80096d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096dc:	3501      	adds	r5, #1
 80096de:	e7c6      	b.n	800966e <_printf_common+0x3e>
 80096e0:	18e1      	adds	r1, r4, r3
 80096e2:	1c5a      	adds	r2, r3, #1
 80096e4:	2030      	movs	r0, #48	; 0x30
 80096e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80096ea:	4422      	add	r2, r4
 80096ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096f4:	3302      	adds	r3, #2
 80096f6:	e7c7      	b.n	8009688 <_printf_common+0x58>
 80096f8:	2301      	movs	r3, #1
 80096fa:	4622      	mov	r2, r4
 80096fc:	4649      	mov	r1, r9
 80096fe:	4638      	mov	r0, r7
 8009700:	47c0      	blx	r8
 8009702:	3001      	adds	r0, #1
 8009704:	d0e6      	beq.n	80096d4 <_printf_common+0xa4>
 8009706:	3601      	adds	r6, #1
 8009708:	e7d9      	b.n	80096be <_printf_common+0x8e>
	...

0800970c <_printf_i>:
 800970c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009710:	460c      	mov	r4, r1
 8009712:	4691      	mov	r9, r2
 8009714:	7e27      	ldrb	r7, [r4, #24]
 8009716:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009718:	2f78      	cmp	r7, #120	; 0x78
 800971a:	4680      	mov	r8, r0
 800971c:	469a      	mov	sl, r3
 800971e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009722:	d807      	bhi.n	8009734 <_printf_i+0x28>
 8009724:	2f62      	cmp	r7, #98	; 0x62
 8009726:	d80a      	bhi.n	800973e <_printf_i+0x32>
 8009728:	2f00      	cmp	r7, #0
 800972a:	f000 80d8 	beq.w	80098de <_printf_i+0x1d2>
 800972e:	2f58      	cmp	r7, #88	; 0x58
 8009730:	f000 80a3 	beq.w	800987a <_printf_i+0x16e>
 8009734:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009738:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800973c:	e03a      	b.n	80097b4 <_printf_i+0xa8>
 800973e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009742:	2b15      	cmp	r3, #21
 8009744:	d8f6      	bhi.n	8009734 <_printf_i+0x28>
 8009746:	a001      	add	r0, pc, #4	; (adr r0, 800974c <_printf_i+0x40>)
 8009748:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800974c:	080097a5 	.word	0x080097a5
 8009750:	080097b9 	.word	0x080097b9
 8009754:	08009735 	.word	0x08009735
 8009758:	08009735 	.word	0x08009735
 800975c:	08009735 	.word	0x08009735
 8009760:	08009735 	.word	0x08009735
 8009764:	080097b9 	.word	0x080097b9
 8009768:	08009735 	.word	0x08009735
 800976c:	08009735 	.word	0x08009735
 8009770:	08009735 	.word	0x08009735
 8009774:	08009735 	.word	0x08009735
 8009778:	080098c5 	.word	0x080098c5
 800977c:	080097e9 	.word	0x080097e9
 8009780:	080098a7 	.word	0x080098a7
 8009784:	08009735 	.word	0x08009735
 8009788:	08009735 	.word	0x08009735
 800978c:	080098e7 	.word	0x080098e7
 8009790:	08009735 	.word	0x08009735
 8009794:	080097e9 	.word	0x080097e9
 8009798:	08009735 	.word	0x08009735
 800979c:	08009735 	.word	0x08009735
 80097a0:	080098af 	.word	0x080098af
 80097a4:	680b      	ldr	r3, [r1, #0]
 80097a6:	1d1a      	adds	r2, r3, #4
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	600a      	str	r2, [r1, #0]
 80097ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80097b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097b4:	2301      	movs	r3, #1
 80097b6:	e0a3      	b.n	8009900 <_printf_i+0x1f4>
 80097b8:	6825      	ldr	r5, [r4, #0]
 80097ba:	6808      	ldr	r0, [r1, #0]
 80097bc:	062e      	lsls	r6, r5, #24
 80097be:	f100 0304 	add.w	r3, r0, #4
 80097c2:	d50a      	bpl.n	80097da <_printf_i+0xce>
 80097c4:	6805      	ldr	r5, [r0, #0]
 80097c6:	600b      	str	r3, [r1, #0]
 80097c8:	2d00      	cmp	r5, #0
 80097ca:	da03      	bge.n	80097d4 <_printf_i+0xc8>
 80097cc:	232d      	movs	r3, #45	; 0x2d
 80097ce:	426d      	negs	r5, r5
 80097d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097d4:	485e      	ldr	r0, [pc, #376]	; (8009950 <_printf_i+0x244>)
 80097d6:	230a      	movs	r3, #10
 80097d8:	e019      	b.n	800980e <_printf_i+0x102>
 80097da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80097de:	6805      	ldr	r5, [r0, #0]
 80097e0:	600b      	str	r3, [r1, #0]
 80097e2:	bf18      	it	ne
 80097e4:	b22d      	sxthne	r5, r5
 80097e6:	e7ef      	b.n	80097c8 <_printf_i+0xbc>
 80097e8:	680b      	ldr	r3, [r1, #0]
 80097ea:	6825      	ldr	r5, [r4, #0]
 80097ec:	1d18      	adds	r0, r3, #4
 80097ee:	6008      	str	r0, [r1, #0]
 80097f0:	0628      	lsls	r0, r5, #24
 80097f2:	d501      	bpl.n	80097f8 <_printf_i+0xec>
 80097f4:	681d      	ldr	r5, [r3, #0]
 80097f6:	e002      	b.n	80097fe <_printf_i+0xf2>
 80097f8:	0669      	lsls	r1, r5, #25
 80097fa:	d5fb      	bpl.n	80097f4 <_printf_i+0xe8>
 80097fc:	881d      	ldrh	r5, [r3, #0]
 80097fe:	4854      	ldr	r0, [pc, #336]	; (8009950 <_printf_i+0x244>)
 8009800:	2f6f      	cmp	r7, #111	; 0x6f
 8009802:	bf0c      	ite	eq
 8009804:	2308      	moveq	r3, #8
 8009806:	230a      	movne	r3, #10
 8009808:	2100      	movs	r1, #0
 800980a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800980e:	6866      	ldr	r6, [r4, #4]
 8009810:	60a6      	str	r6, [r4, #8]
 8009812:	2e00      	cmp	r6, #0
 8009814:	bfa2      	ittt	ge
 8009816:	6821      	ldrge	r1, [r4, #0]
 8009818:	f021 0104 	bicge.w	r1, r1, #4
 800981c:	6021      	strge	r1, [r4, #0]
 800981e:	b90d      	cbnz	r5, 8009824 <_printf_i+0x118>
 8009820:	2e00      	cmp	r6, #0
 8009822:	d04d      	beq.n	80098c0 <_printf_i+0x1b4>
 8009824:	4616      	mov	r6, r2
 8009826:	fbb5 f1f3 	udiv	r1, r5, r3
 800982a:	fb03 5711 	mls	r7, r3, r1, r5
 800982e:	5dc7      	ldrb	r7, [r0, r7]
 8009830:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009834:	462f      	mov	r7, r5
 8009836:	42bb      	cmp	r3, r7
 8009838:	460d      	mov	r5, r1
 800983a:	d9f4      	bls.n	8009826 <_printf_i+0x11a>
 800983c:	2b08      	cmp	r3, #8
 800983e:	d10b      	bne.n	8009858 <_printf_i+0x14c>
 8009840:	6823      	ldr	r3, [r4, #0]
 8009842:	07df      	lsls	r7, r3, #31
 8009844:	d508      	bpl.n	8009858 <_printf_i+0x14c>
 8009846:	6923      	ldr	r3, [r4, #16]
 8009848:	6861      	ldr	r1, [r4, #4]
 800984a:	4299      	cmp	r1, r3
 800984c:	bfde      	ittt	le
 800984e:	2330      	movle	r3, #48	; 0x30
 8009850:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009854:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009858:	1b92      	subs	r2, r2, r6
 800985a:	6122      	str	r2, [r4, #16]
 800985c:	f8cd a000 	str.w	sl, [sp]
 8009860:	464b      	mov	r3, r9
 8009862:	aa03      	add	r2, sp, #12
 8009864:	4621      	mov	r1, r4
 8009866:	4640      	mov	r0, r8
 8009868:	f7ff fee2 	bl	8009630 <_printf_common>
 800986c:	3001      	adds	r0, #1
 800986e:	d14c      	bne.n	800990a <_printf_i+0x1fe>
 8009870:	f04f 30ff 	mov.w	r0, #4294967295
 8009874:	b004      	add	sp, #16
 8009876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800987a:	4835      	ldr	r0, [pc, #212]	; (8009950 <_printf_i+0x244>)
 800987c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009880:	6823      	ldr	r3, [r4, #0]
 8009882:	680e      	ldr	r6, [r1, #0]
 8009884:	061f      	lsls	r7, r3, #24
 8009886:	f856 5b04 	ldr.w	r5, [r6], #4
 800988a:	600e      	str	r6, [r1, #0]
 800988c:	d514      	bpl.n	80098b8 <_printf_i+0x1ac>
 800988e:	07d9      	lsls	r1, r3, #31
 8009890:	bf44      	itt	mi
 8009892:	f043 0320 	orrmi.w	r3, r3, #32
 8009896:	6023      	strmi	r3, [r4, #0]
 8009898:	b91d      	cbnz	r5, 80098a2 <_printf_i+0x196>
 800989a:	6823      	ldr	r3, [r4, #0]
 800989c:	f023 0320 	bic.w	r3, r3, #32
 80098a0:	6023      	str	r3, [r4, #0]
 80098a2:	2310      	movs	r3, #16
 80098a4:	e7b0      	b.n	8009808 <_printf_i+0xfc>
 80098a6:	6823      	ldr	r3, [r4, #0]
 80098a8:	f043 0320 	orr.w	r3, r3, #32
 80098ac:	6023      	str	r3, [r4, #0]
 80098ae:	2378      	movs	r3, #120	; 0x78
 80098b0:	4828      	ldr	r0, [pc, #160]	; (8009954 <_printf_i+0x248>)
 80098b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098b6:	e7e3      	b.n	8009880 <_printf_i+0x174>
 80098b8:	065e      	lsls	r6, r3, #25
 80098ba:	bf48      	it	mi
 80098bc:	b2ad      	uxthmi	r5, r5
 80098be:	e7e6      	b.n	800988e <_printf_i+0x182>
 80098c0:	4616      	mov	r6, r2
 80098c2:	e7bb      	b.n	800983c <_printf_i+0x130>
 80098c4:	680b      	ldr	r3, [r1, #0]
 80098c6:	6826      	ldr	r6, [r4, #0]
 80098c8:	6960      	ldr	r0, [r4, #20]
 80098ca:	1d1d      	adds	r5, r3, #4
 80098cc:	600d      	str	r5, [r1, #0]
 80098ce:	0635      	lsls	r5, r6, #24
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	d501      	bpl.n	80098d8 <_printf_i+0x1cc>
 80098d4:	6018      	str	r0, [r3, #0]
 80098d6:	e002      	b.n	80098de <_printf_i+0x1d2>
 80098d8:	0671      	lsls	r1, r6, #25
 80098da:	d5fb      	bpl.n	80098d4 <_printf_i+0x1c8>
 80098dc:	8018      	strh	r0, [r3, #0]
 80098de:	2300      	movs	r3, #0
 80098e0:	6123      	str	r3, [r4, #16]
 80098e2:	4616      	mov	r6, r2
 80098e4:	e7ba      	b.n	800985c <_printf_i+0x150>
 80098e6:	680b      	ldr	r3, [r1, #0]
 80098e8:	1d1a      	adds	r2, r3, #4
 80098ea:	600a      	str	r2, [r1, #0]
 80098ec:	681e      	ldr	r6, [r3, #0]
 80098ee:	6862      	ldr	r2, [r4, #4]
 80098f0:	2100      	movs	r1, #0
 80098f2:	4630      	mov	r0, r6
 80098f4:	f7f6 fc9c 	bl	8000230 <memchr>
 80098f8:	b108      	cbz	r0, 80098fe <_printf_i+0x1f2>
 80098fa:	1b80      	subs	r0, r0, r6
 80098fc:	6060      	str	r0, [r4, #4]
 80098fe:	6863      	ldr	r3, [r4, #4]
 8009900:	6123      	str	r3, [r4, #16]
 8009902:	2300      	movs	r3, #0
 8009904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009908:	e7a8      	b.n	800985c <_printf_i+0x150>
 800990a:	6923      	ldr	r3, [r4, #16]
 800990c:	4632      	mov	r2, r6
 800990e:	4649      	mov	r1, r9
 8009910:	4640      	mov	r0, r8
 8009912:	47d0      	blx	sl
 8009914:	3001      	adds	r0, #1
 8009916:	d0ab      	beq.n	8009870 <_printf_i+0x164>
 8009918:	6823      	ldr	r3, [r4, #0]
 800991a:	079b      	lsls	r3, r3, #30
 800991c:	d413      	bmi.n	8009946 <_printf_i+0x23a>
 800991e:	68e0      	ldr	r0, [r4, #12]
 8009920:	9b03      	ldr	r3, [sp, #12]
 8009922:	4298      	cmp	r0, r3
 8009924:	bfb8      	it	lt
 8009926:	4618      	movlt	r0, r3
 8009928:	e7a4      	b.n	8009874 <_printf_i+0x168>
 800992a:	2301      	movs	r3, #1
 800992c:	4632      	mov	r2, r6
 800992e:	4649      	mov	r1, r9
 8009930:	4640      	mov	r0, r8
 8009932:	47d0      	blx	sl
 8009934:	3001      	adds	r0, #1
 8009936:	d09b      	beq.n	8009870 <_printf_i+0x164>
 8009938:	3501      	adds	r5, #1
 800993a:	68e3      	ldr	r3, [r4, #12]
 800993c:	9903      	ldr	r1, [sp, #12]
 800993e:	1a5b      	subs	r3, r3, r1
 8009940:	42ab      	cmp	r3, r5
 8009942:	dcf2      	bgt.n	800992a <_printf_i+0x21e>
 8009944:	e7eb      	b.n	800991e <_printf_i+0x212>
 8009946:	2500      	movs	r5, #0
 8009948:	f104 0619 	add.w	r6, r4, #25
 800994c:	e7f5      	b.n	800993a <_printf_i+0x22e>
 800994e:	bf00      	nop
 8009950:	0800bdc6 	.word	0x0800bdc6
 8009954:	0800bdd7 	.word	0x0800bdd7

08009958 <cleanup_glue>:
 8009958:	b538      	push	{r3, r4, r5, lr}
 800995a:	460c      	mov	r4, r1
 800995c:	6809      	ldr	r1, [r1, #0]
 800995e:	4605      	mov	r5, r0
 8009960:	b109      	cbz	r1, 8009966 <cleanup_glue+0xe>
 8009962:	f7ff fff9 	bl	8009958 <cleanup_glue>
 8009966:	4621      	mov	r1, r4
 8009968:	4628      	mov	r0, r5
 800996a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800996e:	f001 bbed 	b.w	800b14c <_free_r>
	...

08009974 <_reclaim_reent>:
 8009974:	4b2c      	ldr	r3, [pc, #176]	; (8009a28 <_reclaim_reent+0xb4>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4283      	cmp	r3, r0
 800997a:	b570      	push	{r4, r5, r6, lr}
 800997c:	4604      	mov	r4, r0
 800997e:	d051      	beq.n	8009a24 <_reclaim_reent+0xb0>
 8009980:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009982:	b143      	cbz	r3, 8009996 <_reclaim_reent+0x22>
 8009984:	68db      	ldr	r3, [r3, #12]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d14a      	bne.n	8009a20 <_reclaim_reent+0xac>
 800998a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800998c:	6819      	ldr	r1, [r3, #0]
 800998e:	b111      	cbz	r1, 8009996 <_reclaim_reent+0x22>
 8009990:	4620      	mov	r0, r4
 8009992:	f001 fbdb 	bl	800b14c <_free_r>
 8009996:	6961      	ldr	r1, [r4, #20]
 8009998:	b111      	cbz	r1, 80099a0 <_reclaim_reent+0x2c>
 800999a:	4620      	mov	r0, r4
 800999c:	f001 fbd6 	bl	800b14c <_free_r>
 80099a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80099a2:	b111      	cbz	r1, 80099aa <_reclaim_reent+0x36>
 80099a4:	4620      	mov	r0, r4
 80099a6:	f001 fbd1 	bl	800b14c <_free_r>
 80099aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80099ac:	b111      	cbz	r1, 80099b4 <_reclaim_reent+0x40>
 80099ae:	4620      	mov	r0, r4
 80099b0:	f001 fbcc 	bl	800b14c <_free_r>
 80099b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80099b6:	b111      	cbz	r1, 80099be <_reclaim_reent+0x4a>
 80099b8:	4620      	mov	r0, r4
 80099ba:	f001 fbc7 	bl	800b14c <_free_r>
 80099be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80099c0:	b111      	cbz	r1, 80099c8 <_reclaim_reent+0x54>
 80099c2:	4620      	mov	r0, r4
 80099c4:	f001 fbc2 	bl	800b14c <_free_r>
 80099c8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80099ca:	b111      	cbz	r1, 80099d2 <_reclaim_reent+0x5e>
 80099cc:	4620      	mov	r0, r4
 80099ce:	f001 fbbd 	bl	800b14c <_free_r>
 80099d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80099d4:	b111      	cbz	r1, 80099dc <_reclaim_reent+0x68>
 80099d6:	4620      	mov	r0, r4
 80099d8:	f001 fbb8 	bl	800b14c <_free_r>
 80099dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099de:	b111      	cbz	r1, 80099e6 <_reclaim_reent+0x72>
 80099e0:	4620      	mov	r0, r4
 80099e2:	f001 fbb3 	bl	800b14c <_free_r>
 80099e6:	69a3      	ldr	r3, [r4, #24]
 80099e8:	b1e3      	cbz	r3, 8009a24 <_reclaim_reent+0xb0>
 80099ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80099ec:	4620      	mov	r0, r4
 80099ee:	4798      	blx	r3
 80099f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80099f2:	b1b9      	cbz	r1, 8009a24 <_reclaim_reent+0xb0>
 80099f4:	4620      	mov	r0, r4
 80099f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80099fa:	f7ff bfad 	b.w	8009958 <cleanup_glue>
 80099fe:	5949      	ldr	r1, [r1, r5]
 8009a00:	b941      	cbnz	r1, 8009a14 <_reclaim_reent+0xa0>
 8009a02:	3504      	adds	r5, #4
 8009a04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a06:	2d80      	cmp	r5, #128	; 0x80
 8009a08:	68d9      	ldr	r1, [r3, #12]
 8009a0a:	d1f8      	bne.n	80099fe <_reclaim_reent+0x8a>
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	f001 fb9d 	bl	800b14c <_free_r>
 8009a12:	e7ba      	b.n	800998a <_reclaim_reent+0x16>
 8009a14:	680e      	ldr	r6, [r1, #0]
 8009a16:	4620      	mov	r0, r4
 8009a18:	f001 fb98 	bl	800b14c <_free_r>
 8009a1c:	4631      	mov	r1, r6
 8009a1e:	e7ef      	b.n	8009a00 <_reclaim_reent+0x8c>
 8009a20:	2500      	movs	r5, #0
 8009a22:	e7ef      	b.n	8009a04 <_reclaim_reent+0x90>
 8009a24:	bd70      	pop	{r4, r5, r6, pc}
 8009a26:	bf00      	nop
 8009a28:	20000010 	.word	0x20000010

08009a2c <_sbrk_r>:
 8009a2c:	b538      	push	{r3, r4, r5, lr}
 8009a2e:	4d06      	ldr	r5, [pc, #24]	; (8009a48 <_sbrk_r+0x1c>)
 8009a30:	2300      	movs	r3, #0
 8009a32:	4604      	mov	r4, r0
 8009a34:	4608      	mov	r0, r1
 8009a36:	602b      	str	r3, [r5, #0]
 8009a38:	f7f8 f946 	bl	8001cc8 <_sbrk>
 8009a3c:	1c43      	adds	r3, r0, #1
 8009a3e:	d102      	bne.n	8009a46 <_sbrk_r+0x1a>
 8009a40:	682b      	ldr	r3, [r5, #0]
 8009a42:	b103      	cbz	r3, 8009a46 <_sbrk_r+0x1a>
 8009a44:	6023      	str	r3, [r4, #0]
 8009a46:	bd38      	pop	{r3, r4, r5, pc}
 8009a48:	20003300 	.word	0x20003300

08009a4c <siprintf>:
 8009a4c:	b40e      	push	{r1, r2, r3}
 8009a4e:	b500      	push	{lr}
 8009a50:	b09c      	sub	sp, #112	; 0x70
 8009a52:	ab1d      	add	r3, sp, #116	; 0x74
 8009a54:	9002      	str	r0, [sp, #8]
 8009a56:	9006      	str	r0, [sp, #24]
 8009a58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a5c:	4809      	ldr	r0, [pc, #36]	; (8009a84 <siprintf+0x38>)
 8009a5e:	9107      	str	r1, [sp, #28]
 8009a60:	9104      	str	r1, [sp, #16]
 8009a62:	4909      	ldr	r1, [pc, #36]	; (8009a88 <siprintf+0x3c>)
 8009a64:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a68:	9105      	str	r1, [sp, #20]
 8009a6a:	6800      	ldr	r0, [r0, #0]
 8009a6c:	9301      	str	r3, [sp, #4]
 8009a6e:	a902      	add	r1, sp, #8
 8009a70:	f001 fc18 	bl	800b2a4 <_svfiprintf_r>
 8009a74:	9b02      	ldr	r3, [sp, #8]
 8009a76:	2200      	movs	r2, #0
 8009a78:	701a      	strb	r2, [r3, #0]
 8009a7a:	b01c      	add	sp, #112	; 0x70
 8009a7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a80:	b003      	add	sp, #12
 8009a82:	4770      	bx	lr
 8009a84:	20000010 	.word	0x20000010
 8009a88:	ffff0208 	.word	0xffff0208

08009a8c <__sread>:
 8009a8c:	b510      	push	{r4, lr}
 8009a8e:	460c      	mov	r4, r1
 8009a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a94:	f001 fd06 	bl	800b4a4 <_read_r>
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	bfab      	itete	ge
 8009a9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a9e:	89a3      	ldrhlt	r3, [r4, #12]
 8009aa0:	181b      	addge	r3, r3, r0
 8009aa2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009aa6:	bfac      	ite	ge
 8009aa8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009aaa:	81a3      	strhlt	r3, [r4, #12]
 8009aac:	bd10      	pop	{r4, pc}

08009aae <__swrite>:
 8009aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab2:	461f      	mov	r7, r3
 8009ab4:	898b      	ldrh	r3, [r1, #12]
 8009ab6:	05db      	lsls	r3, r3, #23
 8009ab8:	4605      	mov	r5, r0
 8009aba:	460c      	mov	r4, r1
 8009abc:	4616      	mov	r6, r2
 8009abe:	d505      	bpl.n	8009acc <__swrite+0x1e>
 8009ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f000 ff8c 	bl	800a9e4 <_lseek_r>
 8009acc:	89a3      	ldrh	r3, [r4, #12]
 8009ace:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ad2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ad6:	81a3      	strh	r3, [r4, #12]
 8009ad8:	4632      	mov	r2, r6
 8009ada:	463b      	mov	r3, r7
 8009adc:	4628      	mov	r0, r5
 8009ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ae2:	f000 b81f 	b.w	8009b24 <_write_r>

08009ae6 <__sseek>:
 8009ae6:	b510      	push	{r4, lr}
 8009ae8:	460c      	mov	r4, r1
 8009aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aee:	f000 ff79 	bl	800a9e4 <_lseek_r>
 8009af2:	1c43      	adds	r3, r0, #1
 8009af4:	89a3      	ldrh	r3, [r4, #12]
 8009af6:	bf15      	itete	ne
 8009af8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009afa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009afe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b02:	81a3      	strheq	r3, [r4, #12]
 8009b04:	bf18      	it	ne
 8009b06:	81a3      	strhne	r3, [r4, #12]
 8009b08:	bd10      	pop	{r4, pc}

08009b0a <__sclose>:
 8009b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b0e:	f000 b81b 	b.w	8009b48 <_close_r>

08009b12 <strcpy>:
 8009b12:	4603      	mov	r3, r0
 8009b14:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b18:	f803 2b01 	strb.w	r2, [r3], #1
 8009b1c:	2a00      	cmp	r2, #0
 8009b1e:	d1f9      	bne.n	8009b14 <strcpy+0x2>
 8009b20:	4770      	bx	lr
	...

08009b24 <_write_r>:
 8009b24:	b538      	push	{r3, r4, r5, lr}
 8009b26:	4d07      	ldr	r5, [pc, #28]	; (8009b44 <_write_r+0x20>)
 8009b28:	4604      	mov	r4, r0
 8009b2a:	4608      	mov	r0, r1
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	2200      	movs	r2, #0
 8009b30:	602a      	str	r2, [r5, #0]
 8009b32:	461a      	mov	r2, r3
 8009b34:	f7f8 f877 	bl	8001c26 <_write>
 8009b38:	1c43      	adds	r3, r0, #1
 8009b3a:	d102      	bne.n	8009b42 <_write_r+0x1e>
 8009b3c:	682b      	ldr	r3, [r5, #0]
 8009b3e:	b103      	cbz	r3, 8009b42 <_write_r+0x1e>
 8009b40:	6023      	str	r3, [r4, #0]
 8009b42:	bd38      	pop	{r3, r4, r5, pc}
 8009b44:	20003300 	.word	0x20003300

08009b48 <_close_r>:
 8009b48:	b538      	push	{r3, r4, r5, lr}
 8009b4a:	4d06      	ldr	r5, [pc, #24]	; (8009b64 <_close_r+0x1c>)
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	4604      	mov	r4, r0
 8009b50:	4608      	mov	r0, r1
 8009b52:	602b      	str	r3, [r5, #0]
 8009b54:	f7f8 f883 	bl	8001c5e <_close>
 8009b58:	1c43      	adds	r3, r0, #1
 8009b5a:	d102      	bne.n	8009b62 <_close_r+0x1a>
 8009b5c:	682b      	ldr	r3, [r5, #0]
 8009b5e:	b103      	cbz	r3, 8009b62 <_close_r+0x1a>
 8009b60:	6023      	str	r3, [r4, #0]
 8009b62:	bd38      	pop	{r3, r4, r5, pc}
 8009b64:	20003300 	.word	0x20003300

08009b68 <quorem>:
 8009b68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b6c:	6903      	ldr	r3, [r0, #16]
 8009b6e:	690c      	ldr	r4, [r1, #16]
 8009b70:	42a3      	cmp	r3, r4
 8009b72:	4607      	mov	r7, r0
 8009b74:	f2c0 8081 	blt.w	8009c7a <quorem+0x112>
 8009b78:	3c01      	subs	r4, #1
 8009b7a:	f101 0814 	add.w	r8, r1, #20
 8009b7e:	f100 0514 	add.w	r5, r0, #20
 8009b82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b86:	9301      	str	r3, [sp, #4]
 8009b88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b90:	3301      	adds	r3, #1
 8009b92:	429a      	cmp	r2, r3
 8009b94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009b98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ba0:	d331      	bcc.n	8009c06 <quorem+0x9e>
 8009ba2:	f04f 0e00 	mov.w	lr, #0
 8009ba6:	4640      	mov	r0, r8
 8009ba8:	46ac      	mov	ip, r5
 8009baa:	46f2      	mov	sl, lr
 8009bac:	f850 2b04 	ldr.w	r2, [r0], #4
 8009bb0:	b293      	uxth	r3, r2
 8009bb2:	fb06 e303 	mla	r3, r6, r3, lr
 8009bb6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	ebaa 0303 	sub.w	r3, sl, r3
 8009bc0:	0c12      	lsrs	r2, r2, #16
 8009bc2:	f8dc a000 	ldr.w	sl, [ip]
 8009bc6:	fb06 e202 	mla	r2, r6, r2, lr
 8009bca:	fa13 f38a 	uxtah	r3, r3, sl
 8009bce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009bd2:	fa1f fa82 	uxth.w	sl, r2
 8009bd6:	f8dc 2000 	ldr.w	r2, [ip]
 8009bda:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009bde:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009be8:	4581      	cmp	r9, r0
 8009bea:	f84c 3b04 	str.w	r3, [ip], #4
 8009bee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009bf2:	d2db      	bcs.n	8009bac <quorem+0x44>
 8009bf4:	f855 300b 	ldr.w	r3, [r5, fp]
 8009bf8:	b92b      	cbnz	r3, 8009c06 <quorem+0x9e>
 8009bfa:	9b01      	ldr	r3, [sp, #4]
 8009bfc:	3b04      	subs	r3, #4
 8009bfe:	429d      	cmp	r5, r3
 8009c00:	461a      	mov	r2, r3
 8009c02:	d32e      	bcc.n	8009c62 <quorem+0xfa>
 8009c04:	613c      	str	r4, [r7, #16]
 8009c06:	4638      	mov	r0, r7
 8009c08:	f001 f990 	bl	800af2c <__mcmp>
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	db24      	blt.n	8009c5a <quorem+0xf2>
 8009c10:	3601      	adds	r6, #1
 8009c12:	4628      	mov	r0, r5
 8009c14:	f04f 0c00 	mov.w	ip, #0
 8009c18:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c1c:	f8d0 e000 	ldr.w	lr, [r0]
 8009c20:	b293      	uxth	r3, r2
 8009c22:	ebac 0303 	sub.w	r3, ip, r3
 8009c26:	0c12      	lsrs	r2, r2, #16
 8009c28:	fa13 f38e 	uxtah	r3, r3, lr
 8009c2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009c30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c3a:	45c1      	cmp	r9, r8
 8009c3c:	f840 3b04 	str.w	r3, [r0], #4
 8009c40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009c44:	d2e8      	bcs.n	8009c18 <quorem+0xb0>
 8009c46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c4e:	b922      	cbnz	r2, 8009c5a <quorem+0xf2>
 8009c50:	3b04      	subs	r3, #4
 8009c52:	429d      	cmp	r5, r3
 8009c54:	461a      	mov	r2, r3
 8009c56:	d30a      	bcc.n	8009c6e <quorem+0x106>
 8009c58:	613c      	str	r4, [r7, #16]
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	b003      	add	sp, #12
 8009c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c62:	6812      	ldr	r2, [r2, #0]
 8009c64:	3b04      	subs	r3, #4
 8009c66:	2a00      	cmp	r2, #0
 8009c68:	d1cc      	bne.n	8009c04 <quorem+0x9c>
 8009c6a:	3c01      	subs	r4, #1
 8009c6c:	e7c7      	b.n	8009bfe <quorem+0x96>
 8009c6e:	6812      	ldr	r2, [r2, #0]
 8009c70:	3b04      	subs	r3, #4
 8009c72:	2a00      	cmp	r2, #0
 8009c74:	d1f0      	bne.n	8009c58 <quorem+0xf0>
 8009c76:	3c01      	subs	r4, #1
 8009c78:	e7eb      	b.n	8009c52 <quorem+0xea>
 8009c7a:	2000      	movs	r0, #0
 8009c7c:	e7ee      	b.n	8009c5c <quorem+0xf4>
	...

08009c80 <_dtoa_r>:
 8009c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c84:	ed2d 8b02 	vpush	{d8}
 8009c88:	ec57 6b10 	vmov	r6, r7, d0
 8009c8c:	b095      	sub	sp, #84	; 0x54
 8009c8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009c94:	9105      	str	r1, [sp, #20]
 8009c96:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009c9a:	4604      	mov	r4, r0
 8009c9c:	9209      	str	r2, [sp, #36]	; 0x24
 8009c9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ca0:	b975      	cbnz	r5, 8009cc0 <_dtoa_r+0x40>
 8009ca2:	2010      	movs	r0, #16
 8009ca4:	f000 feb0 	bl	800aa08 <malloc>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	6260      	str	r0, [r4, #36]	; 0x24
 8009cac:	b920      	cbnz	r0, 8009cb8 <_dtoa_r+0x38>
 8009cae:	4bb2      	ldr	r3, [pc, #712]	; (8009f78 <_dtoa_r+0x2f8>)
 8009cb0:	21ea      	movs	r1, #234	; 0xea
 8009cb2:	48b2      	ldr	r0, [pc, #712]	; (8009f7c <_dtoa_r+0x2fc>)
 8009cb4:	f001 fc08 	bl	800b4c8 <__assert_func>
 8009cb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009cbc:	6005      	str	r5, [r0, #0]
 8009cbe:	60c5      	str	r5, [r0, #12]
 8009cc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cc2:	6819      	ldr	r1, [r3, #0]
 8009cc4:	b151      	cbz	r1, 8009cdc <_dtoa_r+0x5c>
 8009cc6:	685a      	ldr	r2, [r3, #4]
 8009cc8:	604a      	str	r2, [r1, #4]
 8009cca:	2301      	movs	r3, #1
 8009ccc:	4093      	lsls	r3, r2
 8009cce:	608b      	str	r3, [r1, #8]
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f000 feed 	bl	800aab0 <_Bfree>
 8009cd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cd8:	2200      	movs	r2, #0
 8009cda:	601a      	str	r2, [r3, #0]
 8009cdc:	1e3b      	subs	r3, r7, #0
 8009cde:	bfb9      	ittee	lt
 8009ce0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009ce4:	9303      	strlt	r3, [sp, #12]
 8009ce6:	2300      	movge	r3, #0
 8009ce8:	f8c8 3000 	strge.w	r3, [r8]
 8009cec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009cf0:	4ba3      	ldr	r3, [pc, #652]	; (8009f80 <_dtoa_r+0x300>)
 8009cf2:	bfbc      	itt	lt
 8009cf4:	2201      	movlt	r2, #1
 8009cf6:	f8c8 2000 	strlt.w	r2, [r8]
 8009cfa:	ea33 0309 	bics.w	r3, r3, r9
 8009cfe:	d11b      	bne.n	8009d38 <_dtoa_r+0xb8>
 8009d00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d02:	f242 730f 	movw	r3, #9999	; 0x270f
 8009d06:	6013      	str	r3, [r2, #0]
 8009d08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d0c:	4333      	orrs	r3, r6
 8009d0e:	f000 857a 	beq.w	800a806 <_dtoa_r+0xb86>
 8009d12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d14:	b963      	cbnz	r3, 8009d30 <_dtoa_r+0xb0>
 8009d16:	4b9b      	ldr	r3, [pc, #620]	; (8009f84 <_dtoa_r+0x304>)
 8009d18:	e024      	b.n	8009d64 <_dtoa_r+0xe4>
 8009d1a:	4b9b      	ldr	r3, [pc, #620]	; (8009f88 <_dtoa_r+0x308>)
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	3308      	adds	r3, #8
 8009d20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009d22:	6013      	str	r3, [r2, #0]
 8009d24:	9800      	ldr	r0, [sp, #0]
 8009d26:	b015      	add	sp, #84	; 0x54
 8009d28:	ecbd 8b02 	vpop	{d8}
 8009d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d30:	4b94      	ldr	r3, [pc, #592]	; (8009f84 <_dtoa_r+0x304>)
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	3303      	adds	r3, #3
 8009d36:	e7f3      	b.n	8009d20 <_dtoa_r+0xa0>
 8009d38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	ec51 0b17 	vmov	r0, r1, d7
 8009d42:	2300      	movs	r3, #0
 8009d44:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009d48:	f7f6 fee6 	bl	8000b18 <__aeabi_dcmpeq>
 8009d4c:	4680      	mov	r8, r0
 8009d4e:	b158      	cbz	r0, 8009d68 <_dtoa_r+0xe8>
 8009d50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d52:	2301      	movs	r3, #1
 8009d54:	6013      	str	r3, [r2, #0]
 8009d56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f000 8551 	beq.w	800a800 <_dtoa_r+0xb80>
 8009d5e:	488b      	ldr	r0, [pc, #556]	; (8009f8c <_dtoa_r+0x30c>)
 8009d60:	6018      	str	r0, [r3, #0]
 8009d62:	1e43      	subs	r3, r0, #1
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	e7dd      	b.n	8009d24 <_dtoa_r+0xa4>
 8009d68:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009d6c:	aa12      	add	r2, sp, #72	; 0x48
 8009d6e:	a913      	add	r1, sp, #76	; 0x4c
 8009d70:	4620      	mov	r0, r4
 8009d72:	f001 f97f 	bl	800b074 <__d2b>
 8009d76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d7a:	4683      	mov	fp, r0
 8009d7c:	2d00      	cmp	r5, #0
 8009d7e:	d07c      	beq.n	8009e7a <_dtoa_r+0x1fa>
 8009d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d82:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009d86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d8a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009d8e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009d92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009d96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009d9a:	4b7d      	ldr	r3, [pc, #500]	; (8009f90 <_dtoa_r+0x310>)
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	4630      	mov	r0, r6
 8009da0:	4639      	mov	r1, r7
 8009da2:	f7f6 fa99 	bl	80002d8 <__aeabi_dsub>
 8009da6:	a36e      	add	r3, pc, #440	; (adr r3, 8009f60 <_dtoa_r+0x2e0>)
 8009da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dac:	f7f6 fc4c 	bl	8000648 <__aeabi_dmul>
 8009db0:	a36d      	add	r3, pc, #436	; (adr r3, 8009f68 <_dtoa_r+0x2e8>)
 8009db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db6:	f7f6 fa91 	bl	80002dc <__adddf3>
 8009dba:	4606      	mov	r6, r0
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	460f      	mov	r7, r1
 8009dc0:	f7f6 fbd8 	bl	8000574 <__aeabi_i2d>
 8009dc4:	a36a      	add	r3, pc, #424	; (adr r3, 8009f70 <_dtoa_r+0x2f0>)
 8009dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dca:	f7f6 fc3d 	bl	8000648 <__aeabi_dmul>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	4639      	mov	r1, r7
 8009dd6:	f7f6 fa81 	bl	80002dc <__adddf3>
 8009dda:	4606      	mov	r6, r0
 8009ddc:	460f      	mov	r7, r1
 8009dde:	f7f6 fee3 	bl	8000ba8 <__aeabi_d2iz>
 8009de2:	2200      	movs	r2, #0
 8009de4:	4682      	mov	sl, r0
 8009de6:	2300      	movs	r3, #0
 8009de8:	4630      	mov	r0, r6
 8009dea:	4639      	mov	r1, r7
 8009dec:	f7f6 fe9e 	bl	8000b2c <__aeabi_dcmplt>
 8009df0:	b148      	cbz	r0, 8009e06 <_dtoa_r+0x186>
 8009df2:	4650      	mov	r0, sl
 8009df4:	f7f6 fbbe 	bl	8000574 <__aeabi_i2d>
 8009df8:	4632      	mov	r2, r6
 8009dfa:	463b      	mov	r3, r7
 8009dfc:	f7f6 fe8c 	bl	8000b18 <__aeabi_dcmpeq>
 8009e00:	b908      	cbnz	r0, 8009e06 <_dtoa_r+0x186>
 8009e02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e06:	f1ba 0f16 	cmp.w	sl, #22
 8009e0a:	d854      	bhi.n	8009eb6 <_dtoa_r+0x236>
 8009e0c:	4b61      	ldr	r3, [pc, #388]	; (8009f94 <_dtoa_r+0x314>)
 8009e0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e1a:	f7f6 fe87 	bl	8000b2c <__aeabi_dcmplt>
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	d04b      	beq.n	8009eba <_dtoa_r+0x23a>
 8009e22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e26:	2300      	movs	r3, #0
 8009e28:	930e      	str	r3, [sp, #56]	; 0x38
 8009e2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e2c:	1b5d      	subs	r5, r3, r5
 8009e2e:	1e6b      	subs	r3, r5, #1
 8009e30:	9304      	str	r3, [sp, #16]
 8009e32:	bf43      	ittte	mi
 8009e34:	2300      	movmi	r3, #0
 8009e36:	f1c5 0801 	rsbmi	r8, r5, #1
 8009e3a:	9304      	strmi	r3, [sp, #16]
 8009e3c:	f04f 0800 	movpl.w	r8, #0
 8009e40:	f1ba 0f00 	cmp.w	sl, #0
 8009e44:	db3b      	blt.n	8009ebe <_dtoa_r+0x23e>
 8009e46:	9b04      	ldr	r3, [sp, #16]
 8009e48:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009e4c:	4453      	add	r3, sl
 8009e4e:	9304      	str	r3, [sp, #16]
 8009e50:	2300      	movs	r3, #0
 8009e52:	9306      	str	r3, [sp, #24]
 8009e54:	9b05      	ldr	r3, [sp, #20]
 8009e56:	2b09      	cmp	r3, #9
 8009e58:	d869      	bhi.n	8009f2e <_dtoa_r+0x2ae>
 8009e5a:	2b05      	cmp	r3, #5
 8009e5c:	bfc4      	itt	gt
 8009e5e:	3b04      	subgt	r3, #4
 8009e60:	9305      	strgt	r3, [sp, #20]
 8009e62:	9b05      	ldr	r3, [sp, #20]
 8009e64:	f1a3 0302 	sub.w	r3, r3, #2
 8009e68:	bfcc      	ite	gt
 8009e6a:	2500      	movgt	r5, #0
 8009e6c:	2501      	movle	r5, #1
 8009e6e:	2b03      	cmp	r3, #3
 8009e70:	d869      	bhi.n	8009f46 <_dtoa_r+0x2c6>
 8009e72:	e8df f003 	tbb	[pc, r3]
 8009e76:	4e2c      	.short	0x4e2c
 8009e78:	5a4c      	.short	0x5a4c
 8009e7a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009e7e:	441d      	add	r5, r3
 8009e80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009e84:	2b20      	cmp	r3, #32
 8009e86:	bfc1      	itttt	gt
 8009e88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009e8c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009e90:	fa09 f303 	lslgt.w	r3, r9, r3
 8009e94:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009e98:	bfda      	itte	le
 8009e9a:	f1c3 0320 	rsble	r3, r3, #32
 8009e9e:	fa06 f003 	lslle.w	r0, r6, r3
 8009ea2:	4318      	orrgt	r0, r3
 8009ea4:	f7f6 fb56 	bl	8000554 <__aeabi_ui2d>
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	4606      	mov	r6, r0
 8009eac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009eb0:	3d01      	subs	r5, #1
 8009eb2:	9310      	str	r3, [sp, #64]	; 0x40
 8009eb4:	e771      	b.n	8009d9a <_dtoa_r+0x11a>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e7b6      	b.n	8009e28 <_dtoa_r+0x1a8>
 8009eba:	900e      	str	r0, [sp, #56]	; 0x38
 8009ebc:	e7b5      	b.n	8009e2a <_dtoa_r+0x1aa>
 8009ebe:	f1ca 0300 	rsb	r3, sl, #0
 8009ec2:	9306      	str	r3, [sp, #24]
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	eba8 080a 	sub.w	r8, r8, sl
 8009eca:	930d      	str	r3, [sp, #52]	; 0x34
 8009ecc:	e7c2      	b.n	8009e54 <_dtoa_r+0x1d4>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	9308      	str	r3, [sp, #32]
 8009ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	dc39      	bgt.n	8009f4c <_dtoa_r+0x2cc>
 8009ed8:	f04f 0901 	mov.w	r9, #1
 8009edc:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ee0:	464b      	mov	r3, r9
 8009ee2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009ee6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009ee8:	2200      	movs	r2, #0
 8009eea:	6042      	str	r2, [r0, #4]
 8009eec:	2204      	movs	r2, #4
 8009eee:	f102 0614 	add.w	r6, r2, #20
 8009ef2:	429e      	cmp	r6, r3
 8009ef4:	6841      	ldr	r1, [r0, #4]
 8009ef6:	d92f      	bls.n	8009f58 <_dtoa_r+0x2d8>
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f000 fd99 	bl	800aa30 <_Balloc>
 8009efe:	9000      	str	r0, [sp, #0]
 8009f00:	2800      	cmp	r0, #0
 8009f02:	d14b      	bne.n	8009f9c <_dtoa_r+0x31c>
 8009f04:	4b24      	ldr	r3, [pc, #144]	; (8009f98 <_dtoa_r+0x318>)
 8009f06:	4602      	mov	r2, r0
 8009f08:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009f0c:	e6d1      	b.n	8009cb2 <_dtoa_r+0x32>
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e7de      	b.n	8009ed0 <_dtoa_r+0x250>
 8009f12:	2300      	movs	r3, #0
 8009f14:	9308      	str	r3, [sp, #32]
 8009f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f18:	eb0a 0903 	add.w	r9, sl, r3
 8009f1c:	f109 0301 	add.w	r3, r9, #1
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	9301      	str	r3, [sp, #4]
 8009f24:	bfb8      	it	lt
 8009f26:	2301      	movlt	r3, #1
 8009f28:	e7dd      	b.n	8009ee6 <_dtoa_r+0x266>
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e7f2      	b.n	8009f14 <_dtoa_r+0x294>
 8009f2e:	2501      	movs	r5, #1
 8009f30:	2300      	movs	r3, #0
 8009f32:	9305      	str	r3, [sp, #20]
 8009f34:	9508      	str	r5, [sp, #32]
 8009f36:	f04f 39ff 	mov.w	r9, #4294967295
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009f40:	2312      	movs	r3, #18
 8009f42:	9209      	str	r2, [sp, #36]	; 0x24
 8009f44:	e7cf      	b.n	8009ee6 <_dtoa_r+0x266>
 8009f46:	2301      	movs	r3, #1
 8009f48:	9308      	str	r3, [sp, #32]
 8009f4a:	e7f4      	b.n	8009f36 <_dtoa_r+0x2b6>
 8009f4c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009f50:	f8cd 9004 	str.w	r9, [sp, #4]
 8009f54:	464b      	mov	r3, r9
 8009f56:	e7c6      	b.n	8009ee6 <_dtoa_r+0x266>
 8009f58:	3101      	adds	r1, #1
 8009f5a:	6041      	str	r1, [r0, #4]
 8009f5c:	0052      	lsls	r2, r2, #1
 8009f5e:	e7c6      	b.n	8009eee <_dtoa_r+0x26e>
 8009f60:	636f4361 	.word	0x636f4361
 8009f64:	3fd287a7 	.word	0x3fd287a7
 8009f68:	8b60c8b3 	.word	0x8b60c8b3
 8009f6c:	3fc68a28 	.word	0x3fc68a28
 8009f70:	509f79fb 	.word	0x509f79fb
 8009f74:	3fd34413 	.word	0x3fd34413
 8009f78:	0800bdf5 	.word	0x0800bdf5
 8009f7c:	0800be0c 	.word	0x0800be0c
 8009f80:	7ff00000 	.word	0x7ff00000
 8009f84:	0800bdf1 	.word	0x0800bdf1
 8009f88:	0800bde8 	.word	0x0800bde8
 8009f8c:	0800bdc5 	.word	0x0800bdc5
 8009f90:	3ff80000 	.word	0x3ff80000
 8009f94:	0800bf08 	.word	0x0800bf08
 8009f98:	0800be6b 	.word	0x0800be6b
 8009f9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f9e:	9a00      	ldr	r2, [sp, #0]
 8009fa0:	601a      	str	r2, [r3, #0]
 8009fa2:	9b01      	ldr	r3, [sp, #4]
 8009fa4:	2b0e      	cmp	r3, #14
 8009fa6:	f200 80ad 	bhi.w	800a104 <_dtoa_r+0x484>
 8009faa:	2d00      	cmp	r5, #0
 8009fac:	f000 80aa 	beq.w	800a104 <_dtoa_r+0x484>
 8009fb0:	f1ba 0f00 	cmp.w	sl, #0
 8009fb4:	dd36      	ble.n	800a024 <_dtoa_r+0x3a4>
 8009fb6:	4ac3      	ldr	r2, [pc, #780]	; (800a2c4 <_dtoa_r+0x644>)
 8009fb8:	f00a 030f 	and.w	r3, sl, #15
 8009fbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009fc0:	ed93 7b00 	vldr	d7, [r3]
 8009fc4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009fc8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009fcc:	eeb0 8a47 	vmov.f32	s16, s14
 8009fd0:	eef0 8a67 	vmov.f32	s17, s15
 8009fd4:	d016      	beq.n	800a004 <_dtoa_r+0x384>
 8009fd6:	4bbc      	ldr	r3, [pc, #752]	; (800a2c8 <_dtoa_r+0x648>)
 8009fd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009fdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009fe0:	f7f6 fc5c 	bl	800089c <__aeabi_ddiv>
 8009fe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fe8:	f007 070f 	and.w	r7, r7, #15
 8009fec:	2503      	movs	r5, #3
 8009fee:	4eb6      	ldr	r6, [pc, #728]	; (800a2c8 <_dtoa_r+0x648>)
 8009ff0:	b957      	cbnz	r7, 800a008 <_dtoa_r+0x388>
 8009ff2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ff6:	ec53 2b18 	vmov	r2, r3, d8
 8009ffa:	f7f6 fc4f 	bl	800089c <__aeabi_ddiv>
 8009ffe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a002:	e029      	b.n	800a058 <_dtoa_r+0x3d8>
 800a004:	2502      	movs	r5, #2
 800a006:	e7f2      	b.n	8009fee <_dtoa_r+0x36e>
 800a008:	07f9      	lsls	r1, r7, #31
 800a00a:	d508      	bpl.n	800a01e <_dtoa_r+0x39e>
 800a00c:	ec51 0b18 	vmov	r0, r1, d8
 800a010:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a014:	f7f6 fb18 	bl	8000648 <__aeabi_dmul>
 800a018:	ec41 0b18 	vmov	d8, r0, r1
 800a01c:	3501      	adds	r5, #1
 800a01e:	107f      	asrs	r7, r7, #1
 800a020:	3608      	adds	r6, #8
 800a022:	e7e5      	b.n	8009ff0 <_dtoa_r+0x370>
 800a024:	f000 80a6 	beq.w	800a174 <_dtoa_r+0x4f4>
 800a028:	f1ca 0600 	rsb	r6, sl, #0
 800a02c:	4ba5      	ldr	r3, [pc, #660]	; (800a2c4 <_dtoa_r+0x644>)
 800a02e:	4fa6      	ldr	r7, [pc, #664]	; (800a2c8 <_dtoa_r+0x648>)
 800a030:	f006 020f 	and.w	r2, r6, #15
 800a034:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a040:	f7f6 fb02 	bl	8000648 <__aeabi_dmul>
 800a044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a048:	1136      	asrs	r6, r6, #4
 800a04a:	2300      	movs	r3, #0
 800a04c:	2502      	movs	r5, #2
 800a04e:	2e00      	cmp	r6, #0
 800a050:	f040 8085 	bne.w	800a15e <_dtoa_r+0x4de>
 800a054:	2b00      	cmp	r3, #0
 800a056:	d1d2      	bne.n	8009ffe <_dtoa_r+0x37e>
 800a058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f000 808c 	beq.w	800a178 <_dtoa_r+0x4f8>
 800a060:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a064:	4b99      	ldr	r3, [pc, #612]	; (800a2cc <_dtoa_r+0x64c>)
 800a066:	2200      	movs	r2, #0
 800a068:	4630      	mov	r0, r6
 800a06a:	4639      	mov	r1, r7
 800a06c:	f7f6 fd5e 	bl	8000b2c <__aeabi_dcmplt>
 800a070:	2800      	cmp	r0, #0
 800a072:	f000 8081 	beq.w	800a178 <_dtoa_r+0x4f8>
 800a076:	9b01      	ldr	r3, [sp, #4]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d07d      	beq.n	800a178 <_dtoa_r+0x4f8>
 800a07c:	f1b9 0f00 	cmp.w	r9, #0
 800a080:	dd3c      	ble.n	800a0fc <_dtoa_r+0x47c>
 800a082:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a086:	9307      	str	r3, [sp, #28]
 800a088:	2200      	movs	r2, #0
 800a08a:	4b91      	ldr	r3, [pc, #580]	; (800a2d0 <_dtoa_r+0x650>)
 800a08c:	4630      	mov	r0, r6
 800a08e:	4639      	mov	r1, r7
 800a090:	f7f6 fada 	bl	8000648 <__aeabi_dmul>
 800a094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a098:	3501      	adds	r5, #1
 800a09a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a09e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	f7f6 fa66 	bl	8000574 <__aeabi_i2d>
 800a0a8:	4632      	mov	r2, r6
 800a0aa:	463b      	mov	r3, r7
 800a0ac:	f7f6 facc 	bl	8000648 <__aeabi_dmul>
 800a0b0:	4b88      	ldr	r3, [pc, #544]	; (800a2d4 <_dtoa_r+0x654>)
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f7f6 f912 	bl	80002dc <__adddf3>
 800a0b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a0bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0c0:	9303      	str	r3, [sp, #12]
 800a0c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d15c      	bne.n	800a182 <_dtoa_r+0x502>
 800a0c8:	4b83      	ldr	r3, [pc, #524]	; (800a2d8 <_dtoa_r+0x658>)
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	4639      	mov	r1, r7
 800a0d0:	f7f6 f902 	bl	80002d8 <__aeabi_dsub>
 800a0d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0d8:	4606      	mov	r6, r0
 800a0da:	460f      	mov	r7, r1
 800a0dc:	f7f6 fd44 	bl	8000b68 <__aeabi_dcmpgt>
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	f040 8296 	bne.w	800a612 <_dtoa_r+0x992>
 800a0e6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0f0:	4639      	mov	r1, r7
 800a0f2:	f7f6 fd1b 	bl	8000b2c <__aeabi_dcmplt>
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	f040 8288 	bne.w	800a60c <_dtoa_r+0x98c>
 800a0fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a100:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a104:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a106:	2b00      	cmp	r3, #0
 800a108:	f2c0 8158 	blt.w	800a3bc <_dtoa_r+0x73c>
 800a10c:	f1ba 0f0e 	cmp.w	sl, #14
 800a110:	f300 8154 	bgt.w	800a3bc <_dtoa_r+0x73c>
 800a114:	4b6b      	ldr	r3, [pc, #428]	; (800a2c4 <_dtoa_r+0x644>)
 800a116:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a11a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a11e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a120:	2b00      	cmp	r3, #0
 800a122:	f280 80e3 	bge.w	800a2ec <_dtoa_r+0x66c>
 800a126:	9b01      	ldr	r3, [sp, #4]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f300 80df 	bgt.w	800a2ec <_dtoa_r+0x66c>
 800a12e:	f040 826d 	bne.w	800a60c <_dtoa_r+0x98c>
 800a132:	4b69      	ldr	r3, [pc, #420]	; (800a2d8 <_dtoa_r+0x658>)
 800a134:	2200      	movs	r2, #0
 800a136:	4640      	mov	r0, r8
 800a138:	4649      	mov	r1, r9
 800a13a:	f7f6 fa85 	bl	8000648 <__aeabi_dmul>
 800a13e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a142:	f7f6 fd07 	bl	8000b54 <__aeabi_dcmpge>
 800a146:	9e01      	ldr	r6, [sp, #4]
 800a148:	4637      	mov	r7, r6
 800a14a:	2800      	cmp	r0, #0
 800a14c:	f040 8243 	bne.w	800a5d6 <_dtoa_r+0x956>
 800a150:	9d00      	ldr	r5, [sp, #0]
 800a152:	2331      	movs	r3, #49	; 0x31
 800a154:	f805 3b01 	strb.w	r3, [r5], #1
 800a158:	f10a 0a01 	add.w	sl, sl, #1
 800a15c:	e23f      	b.n	800a5de <_dtoa_r+0x95e>
 800a15e:	07f2      	lsls	r2, r6, #31
 800a160:	d505      	bpl.n	800a16e <_dtoa_r+0x4ee>
 800a162:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a166:	f7f6 fa6f 	bl	8000648 <__aeabi_dmul>
 800a16a:	3501      	adds	r5, #1
 800a16c:	2301      	movs	r3, #1
 800a16e:	1076      	asrs	r6, r6, #1
 800a170:	3708      	adds	r7, #8
 800a172:	e76c      	b.n	800a04e <_dtoa_r+0x3ce>
 800a174:	2502      	movs	r5, #2
 800a176:	e76f      	b.n	800a058 <_dtoa_r+0x3d8>
 800a178:	9b01      	ldr	r3, [sp, #4]
 800a17a:	f8cd a01c 	str.w	sl, [sp, #28]
 800a17e:	930c      	str	r3, [sp, #48]	; 0x30
 800a180:	e78d      	b.n	800a09e <_dtoa_r+0x41e>
 800a182:	9900      	ldr	r1, [sp, #0]
 800a184:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a186:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a188:	4b4e      	ldr	r3, [pc, #312]	; (800a2c4 <_dtoa_r+0x644>)
 800a18a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a18e:	4401      	add	r1, r0
 800a190:	9102      	str	r1, [sp, #8]
 800a192:	9908      	ldr	r1, [sp, #32]
 800a194:	eeb0 8a47 	vmov.f32	s16, s14
 800a198:	eef0 8a67 	vmov.f32	s17, s15
 800a19c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a1a4:	2900      	cmp	r1, #0
 800a1a6:	d045      	beq.n	800a234 <_dtoa_r+0x5b4>
 800a1a8:	494c      	ldr	r1, [pc, #304]	; (800a2dc <_dtoa_r+0x65c>)
 800a1aa:	2000      	movs	r0, #0
 800a1ac:	f7f6 fb76 	bl	800089c <__aeabi_ddiv>
 800a1b0:	ec53 2b18 	vmov	r2, r3, d8
 800a1b4:	f7f6 f890 	bl	80002d8 <__aeabi_dsub>
 800a1b8:	9d00      	ldr	r5, [sp, #0]
 800a1ba:	ec41 0b18 	vmov	d8, r0, r1
 800a1be:	4639      	mov	r1, r7
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	f7f6 fcf1 	bl	8000ba8 <__aeabi_d2iz>
 800a1c6:	900c      	str	r0, [sp, #48]	; 0x30
 800a1c8:	f7f6 f9d4 	bl	8000574 <__aeabi_i2d>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	4630      	mov	r0, r6
 800a1d2:	4639      	mov	r1, r7
 800a1d4:	f7f6 f880 	bl	80002d8 <__aeabi_dsub>
 800a1d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1da:	3330      	adds	r3, #48	; 0x30
 800a1dc:	f805 3b01 	strb.w	r3, [r5], #1
 800a1e0:	ec53 2b18 	vmov	r2, r3, d8
 800a1e4:	4606      	mov	r6, r0
 800a1e6:	460f      	mov	r7, r1
 800a1e8:	f7f6 fca0 	bl	8000b2c <__aeabi_dcmplt>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	d165      	bne.n	800a2bc <_dtoa_r+0x63c>
 800a1f0:	4632      	mov	r2, r6
 800a1f2:	463b      	mov	r3, r7
 800a1f4:	4935      	ldr	r1, [pc, #212]	; (800a2cc <_dtoa_r+0x64c>)
 800a1f6:	2000      	movs	r0, #0
 800a1f8:	f7f6 f86e 	bl	80002d8 <__aeabi_dsub>
 800a1fc:	ec53 2b18 	vmov	r2, r3, d8
 800a200:	f7f6 fc94 	bl	8000b2c <__aeabi_dcmplt>
 800a204:	2800      	cmp	r0, #0
 800a206:	f040 80b9 	bne.w	800a37c <_dtoa_r+0x6fc>
 800a20a:	9b02      	ldr	r3, [sp, #8]
 800a20c:	429d      	cmp	r5, r3
 800a20e:	f43f af75 	beq.w	800a0fc <_dtoa_r+0x47c>
 800a212:	4b2f      	ldr	r3, [pc, #188]	; (800a2d0 <_dtoa_r+0x650>)
 800a214:	ec51 0b18 	vmov	r0, r1, d8
 800a218:	2200      	movs	r2, #0
 800a21a:	f7f6 fa15 	bl	8000648 <__aeabi_dmul>
 800a21e:	4b2c      	ldr	r3, [pc, #176]	; (800a2d0 <_dtoa_r+0x650>)
 800a220:	ec41 0b18 	vmov	d8, r0, r1
 800a224:	2200      	movs	r2, #0
 800a226:	4630      	mov	r0, r6
 800a228:	4639      	mov	r1, r7
 800a22a:	f7f6 fa0d 	bl	8000648 <__aeabi_dmul>
 800a22e:	4606      	mov	r6, r0
 800a230:	460f      	mov	r7, r1
 800a232:	e7c4      	b.n	800a1be <_dtoa_r+0x53e>
 800a234:	ec51 0b17 	vmov	r0, r1, d7
 800a238:	f7f6 fa06 	bl	8000648 <__aeabi_dmul>
 800a23c:	9b02      	ldr	r3, [sp, #8]
 800a23e:	9d00      	ldr	r5, [sp, #0]
 800a240:	930c      	str	r3, [sp, #48]	; 0x30
 800a242:	ec41 0b18 	vmov	d8, r0, r1
 800a246:	4639      	mov	r1, r7
 800a248:	4630      	mov	r0, r6
 800a24a:	f7f6 fcad 	bl	8000ba8 <__aeabi_d2iz>
 800a24e:	9011      	str	r0, [sp, #68]	; 0x44
 800a250:	f7f6 f990 	bl	8000574 <__aeabi_i2d>
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	4630      	mov	r0, r6
 800a25a:	4639      	mov	r1, r7
 800a25c:	f7f6 f83c 	bl	80002d8 <__aeabi_dsub>
 800a260:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a262:	3330      	adds	r3, #48	; 0x30
 800a264:	f805 3b01 	strb.w	r3, [r5], #1
 800a268:	9b02      	ldr	r3, [sp, #8]
 800a26a:	429d      	cmp	r5, r3
 800a26c:	4606      	mov	r6, r0
 800a26e:	460f      	mov	r7, r1
 800a270:	f04f 0200 	mov.w	r2, #0
 800a274:	d134      	bne.n	800a2e0 <_dtoa_r+0x660>
 800a276:	4b19      	ldr	r3, [pc, #100]	; (800a2dc <_dtoa_r+0x65c>)
 800a278:	ec51 0b18 	vmov	r0, r1, d8
 800a27c:	f7f6 f82e 	bl	80002dc <__adddf3>
 800a280:	4602      	mov	r2, r0
 800a282:	460b      	mov	r3, r1
 800a284:	4630      	mov	r0, r6
 800a286:	4639      	mov	r1, r7
 800a288:	f7f6 fc6e 	bl	8000b68 <__aeabi_dcmpgt>
 800a28c:	2800      	cmp	r0, #0
 800a28e:	d175      	bne.n	800a37c <_dtoa_r+0x6fc>
 800a290:	ec53 2b18 	vmov	r2, r3, d8
 800a294:	4911      	ldr	r1, [pc, #68]	; (800a2dc <_dtoa_r+0x65c>)
 800a296:	2000      	movs	r0, #0
 800a298:	f7f6 f81e 	bl	80002d8 <__aeabi_dsub>
 800a29c:	4602      	mov	r2, r0
 800a29e:	460b      	mov	r3, r1
 800a2a0:	4630      	mov	r0, r6
 800a2a2:	4639      	mov	r1, r7
 800a2a4:	f7f6 fc42 	bl	8000b2c <__aeabi_dcmplt>
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	f43f af27 	beq.w	800a0fc <_dtoa_r+0x47c>
 800a2ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a2b0:	1e6b      	subs	r3, r5, #1
 800a2b2:	930c      	str	r3, [sp, #48]	; 0x30
 800a2b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a2b8:	2b30      	cmp	r3, #48	; 0x30
 800a2ba:	d0f8      	beq.n	800a2ae <_dtoa_r+0x62e>
 800a2bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a2c0:	e04a      	b.n	800a358 <_dtoa_r+0x6d8>
 800a2c2:	bf00      	nop
 800a2c4:	0800bf08 	.word	0x0800bf08
 800a2c8:	0800bee0 	.word	0x0800bee0
 800a2cc:	3ff00000 	.word	0x3ff00000
 800a2d0:	40240000 	.word	0x40240000
 800a2d4:	401c0000 	.word	0x401c0000
 800a2d8:	40140000 	.word	0x40140000
 800a2dc:	3fe00000 	.word	0x3fe00000
 800a2e0:	4baf      	ldr	r3, [pc, #700]	; (800a5a0 <_dtoa_r+0x920>)
 800a2e2:	f7f6 f9b1 	bl	8000648 <__aeabi_dmul>
 800a2e6:	4606      	mov	r6, r0
 800a2e8:	460f      	mov	r7, r1
 800a2ea:	e7ac      	b.n	800a246 <_dtoa_r+0x5c6>
 800a2ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a2f0:	9d00      	ldr	r5, [sp, #0]
 800a2f2:	4642      	mov	r2, r8
 800a2f4:	464b      	mov	r3, r9
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	4639      	mov	r1, r7
 800a2fa:	f7f6 facf 	bl	800089c <__aeabi_ddiv>
 800a2fe:	f7f6 fc53 	bl	8000ba8 <__aeabi_d2iz>
 800a302:	9002      	str	r0, [sp, #8]
 800a304:	f7f6 f936 	bl	8000574 <__aeabi_i2d>
 800a308:	4642      	mov	r2, r8
 800a30a:	464b      	mov	r3, r9
 800a30c:	f7f6 f99c 	bl	8000648 <__aeabi_dmul>
 800a310:	4602      	mov	r2, r0
 800a312:	460b      	mov	r3, r1
 800a314:	4630      	mov	r0, r6
 800a316:	4639      	mov	r1, r7
 800a318:	f7f5 ffde 	bl	80002d8 <__aeabi_dsub>
 800a31c:	9e02      	ldr	r6, [sp, #8]
 800a31e:	9f01      	ldr	r7, [sp, #4]
 800a320:	3630      	adds	r6, #48	; 0x30
 800a322:	f805 6b01 	strb.w	r6, [r5], #1
 800a326:	9e00      	ldr	r6, [sp, #0]
 800a328:	1bae      	subs	r6, r5, r6
 800a32a:	42b7      	cmp	r7, r6
 800a32c:	4602      	mov	r2, r0
 800a32e:	460b      	mov	r3, r1
 800a330:	d137      	bne.n	800a3a2 <_dtoa_r+0x722>
 800a332:	f7f5 ffd3 	bl	80002dc <__adddf3>
 800a336:	4642      	mov	r2, r8
 800a338:	464b      	mov	r3, r9
 800a33a:	4606      	mov	r6, r0
 800a33c:	460f      	mov	r7, r1
 800a33e:	f7f6 fc13 	bl	8000b68 <__aeabi_dcmpgt>
 800a342:	b9c8      	cbnz	r0, 800a378 <_dtoa_r+0x6f8>
 800a344:	4642      	mov	r2, r8
 800a346:	464b      	mov	r3, r9
 800a348:	4630      	mov	r0, r6
 800a34a:	4639      	mov	r1, r7
 800a34c:	f7f6 fbe4 	bl	8000b18 <__aeabi_dcmpeq>
 800a350:	b110      	cbz	r0, 800a358 <_dtoa_r+0x6d8>
 800a352:	9b02      	ldr	r3, [sp, #8]
 800a354:	07d9      	lsls	r1, r3, #31
 800a356:	d40f      	bmi.n	800a378 <_dtoa_r+0x6f8>
 800a358:	4620      	mov	r0, r4
 800a35a:	4659      	mov	r1, fp
 800a35c:	f000 fba8 	bl	800aab0 <_Bfree>
 800a360:	2300      	movs	r3, #0
 800a362:	702b      	strb	r3, [r5, #0]
 800a364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a366:	f10a 0001 	add.w	r0, sl, #1
 800a36a:	6018      	str	r0, [r3, #0]
 800a36c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a36e:	2b00      	cmp	r3, #0
 800a370:	f43f acd8 	beq.w	8009d24 <_dtoa_r+0xa4>
 800a374:	601d      	str	r5, [r3, #0]
 800a376:	e4d5      	b.n	8009d24 <_dtoa_r+0xa4>
 800a378:	f8cd a01c 	str.w	sl, [sp, #28]
 800a37c:	462b      	mov	r3, r5
 800a37e:	461d      	mov	r5, r3
 800a380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a384:	2a39      	cmp	r2, #57	; 0x39
 800a386:	d108      	bne.n	800a39a <_dtoa_r+0x71a>
 800a388:	9a00      	ldr	r2, [sp, #0]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d1f7      	bne.n	800a37e <_dtoa_r+0x6fe>
 800a38e:	9a07      	ldr	r2, [sp, #28]
 800a390:	9900      	ldr	r1, [sp, #0]
 800a392:	3201      	adds	r2, #1
 800a394:	9207      	str	r2, [sp, #28]
 800a396:	2230      	movs	r2, #48	; 0x30
 800a398:	700a      	strb	r2, [r1, #0]
 800a39a:	781a      	ldrb	r2, [r3, #0]
 800a39c:	3201      	adds	r2, #1
 800a39e:	701a      	strb	r2, [r3, #0]
 800a3a0:	e78c      	b.n	800a2bc <_dtoa_r+0x63c>
 800a3a2:	4b7f      	ldr	r3, [pc, #508]	; (800a5a0 <_dtoa_r+0x920>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f7f6 f94f 	bl	8000648 <__aeabi_dmul>
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	4606      	mov	r6, r0
 800a3b0:	460f      	mov	r7, r1
 800a3b2:	f7f6 fbb1 	bl	8000b18 <__aeabi_dcmpeq>
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	d09b      	beq.n	800a2f2 <_dtoa_r+0x672>
 800a3ba:	e7cd      	b.n	800a358 <_dtoa_r+0x6d8>
 800a3bc:	9a08      	ldr	r2, [sp, #32]
 800a3be:	2a00      	cmp	r2, #0
 800a3c0:	f000 80c4 	beq.w	800a54c <_dtoa_r+0x8cc>
 800a3c4:	9a05      	ldr	r2, [sp, #20]
 800a3c6:	2a01      	cmp	r2, #1
 800a3c8:	f300 80a8 	bgt.w	800a51c <_dtoa_r+0x89c>
 800a3cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a3ce:	2a00      	cmp	r2, #0
 800a3d0:	f000 80a0 	beq.w	800a514 <_dtoa_r+0x894>
 800a3d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a3d8:	9e06      	ldr	r6, [sp, #24]
 800a3da:	4645      	mov	r5, r8
 800a3dc:	9a04      	ldr	r2, [sp, #16]
 800a3de:	2101      	movs	r1, #1
 800a3e0:	441a      	add	r2, r3
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	4498      	add	r8, r3
 800a3e6:	9204      	str	r2, [sp, #16]
 800a3e8:	f000 fc1e 	bl	800ac28 <__i2b>
 800a3ec:	4607      	mov	r7, r0
 800a3ee:	2d00      	cmp	r5, #0
 800a3f0:	dd0b      	ble.n	800a40a <_dtoa_r+0x78a>
 800a3f2:	9b04      	ldr	r3, [sp, #16]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	dd08      	ble.n	800a40a <_dtoa_r+0x78a>
 800a3f8:	42ab      	cmp	r3, r5
 800a3fa:	9a04      	ldr	r2, [sp, #16]
 800a3fc:	bfa8      	it	ge
 800a3fe:	462b      	movge	r3, r5
 800a400:	eba8 0803 	sub.w	r8, r8, r3
 800a404:	1aed      	subs	r5, r5, r3
 800a406:	1ad3      	subs	r3, r2, r3
 800a408:	9304      	str	r3, [sp, #16]
 800a40a:	9b06      	ldr	r3, [sp, #24]
 800a40c:	b1fb      	cbz	r3, 800a44e <_dtoa_r+0x7ce>
 800a40e:	9b08      	ldr	r3, [sp, #32]
 800a410:	2b00      	cmp	r3, #0
 800a412:	f000 809f 	beq.w	800a554 <_dtoa_r+0x8d4>
 800a416:	2e00      	cmp	r6, #0
 800a418:	dd11      	ble.n	800a43e <_dtoa_r+0x7be>
 800a41a:	4639      	mov	r1, r7
 800a41c:	4632      	mov	r2, r6
 800a41e:	4620      	mov	r0, r4
 800a420:	f000 fcbe 	bl	800ada0 <__pow5mult>
 800a424:	465a      	mov	r2, fp
 800a426:	4601      	mov	r1, r0
 800a428:	4607      	mov	r7, r0
 800a42a:	4620      	mov	r0, r4
 800a42c:	f000 fc12 	bl	800ac54 <__multiply>
 800a430:	4659      	mov	r1, fp
 800a432:	9007      	str	r0, [sp, #28]
 800a434:	4620      	mov	r0, r4
 800a436:	f000 fb3b 	bl	800aab0 <_Bfree>
 800a43a:	9b07      	ldr	r3, [sp, #28]
 800a43c:	469b      	mov	fp, r3
 800a43e:	9b06      	ldr	r3, [sp, #24]
 800a440:	1b9a      	subs	r2, r3, r6
 800a442:	d004      	beq.n	800a44e <_dtoa_r+0x7ce>
 800a444:	4659      	mov	r1, fp
 800a446:	4620      	mov	r0, r4
 800a448:	f000 fcaa 	bl	800ada0 <__pow5mult>
 800a44c:	4683      	mov	fp, r0
 800a44e:	2101      	movs	r1, #1
 800a450:	4620      	mov	r0, r4
 800a452:	f000 fbe9 	bl	800ac28 <__i2b>
 800a456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a458:	2b00      	cmp	r3, #0
 800a45a:	4606      	mov	r6, r0
 800a45c:	dd7c      	ble.n	800a558 <_dtoa_r+0x8d8>
 800a45e:	461a      	mov	r2, r3
 800a460:	4601      	mov	r1, r0
 800a462:	4620      	mov	r0, r4
 800a464:	f000 fc9c 	bl	800ada0 <__pow5mult>
 800a468:	9b05      	ldr	r3, [sp, #20]
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	4606      	mov	r6, r0
 800a46e:	dd76      	ble.n	800a55e <_dtoa_r+0x8de>
 800a470:	2300      	movs	r3, #0
 800a472:	9306      	str	r3, [sp, #24]
 800a474:	6933      	ldr	r3, [r6, #16]
 800a476:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a47a:	6918      	ldr	r0, [r3, #16]
 800a47c:	f000 fb84 	bl	800ab88 <__hi0bits>
 800a480:	f1c0 0020 	rsb	r0, r0, #32
 800a484:	9b04      	ldr	r3, [sp, #16]
 800a486:	4418      	add	r0, r3
 800a488:	f010 001f 	ands.w	r0, r0, #31
 800a48c:	f000 8086 	beq.w	800a59c <_dtoa_r+0x91c>
 800a490:	f1c0 0320 	rsb	r3, r0, #32
 800a494:	2b04      	cmp	r3, #4
 800a496:	dd7f      	ble.n	800a598 <_dtoa_r+0x918>
 800a498:	f1c0 001c 	rsb	r0, r0, #28
 800a49c:	9b04      	ldr	r3, [sp, #16]
 800a49e:	4403      	add	r3, r0
 800a4a0:	4480      	add	r8, r0
 800a4a2:	4405      	add	r5, r0
 800a4a4:	9304      	str	r3, [sp, #16]
 800a4a6:	f1b8 0f00 	cmp.w	r8, #0
 800a4aa:	dd05      	ble.n	800a4b8 <_dtoa_r+0x838>
 800a4ac:	4659      	mov	r1, fp
 800a4ae:	4642      	mov	r2, r8
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f000 fccf 	bl	800ae54 <__lshift>
 800a4b6:	4683      	mov	fp, r0
 800a4b8:	9b04      	ldr	r3, [sp, #16]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	dd05      	ble.n	800a4ca <_dtoa_r+0x84a>
 800a4be:	4631      	mov	r1, r6
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f000 fcc6 	bl	800ae54 <__lshift>
 800a4c8:	4606      	mov	r6, r0
 800a4ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d069      	beq.n	800a5a4 <_dtoa_r+0x924>
 800a4d0:	4631      	mov	r1, r6
 800a4d2:	4658      	mov	r0, fp
 800a4d4:	f000 fd2a 	bl	800af2c <__mcmp>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	da63      	bge.n	800a5a4 <_dtoa_r+0x924>
 800a4dc:	2300      	movs	r3, #0
 800a4de:	4659      	mov	r1, fp
 800a4e0:	220a      	movs	r2, #10
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f000 fb06 	bl	800aaf4 <__multadd>
 800a4e8:	9b08      	ldr	r3, [sp, #32]
 800a4ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4ee:	4683      	mov	fp, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	f000 818f 	beq.w	800a814 <_dtoa_r+0xb94>
 800a4f6:	4639      	mov	r1, r7
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	220a      	movs	r2, #10
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	f000 faf9 	bl	800aaf4 <__multadd>
 800a502:	f1b9 0f00 	cmp.w	r9, #0
 800a506:	4607      	mov	r7, r0
 800a508:	f300 808e 	bgt.w	800a628 <_dtoa_r+0x9a8>
 800a50c:	9b05      	ldr	r3, [sp, #20]
 800a50e:	2b02      	cmp	r3, #2
 800a510:	dc50      	bgt.n	800a5b4 <_dtoa_r+0x934>
 800a512:	e089      	b.n	800a628 <_dtoa_r+0x9a8>
 800a514:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a516:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a51a:	e75d      	b.n	800a3d8 <_dtoa_r+0x758>
 800a51c:	9b01      	ldr	r3, [sp, #4]
 800a51e:	1e5e      	subs	r6, r3, #1
 800a520:	9b06      	ldr	r3, [sp, #24]
 800a522:	42b3      	cmp	r3, r6
 800a524:	bfbf      	itttt	lt
 800a526:	9b06      	ldrlt	r3, [sp, #24]
 800a528:	9606      	strlt	r6, [sp, #24]
 800a52a:	1af2      	sublt	r2, r6, r3
 800a52c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a52e:	bfb6      	itet	lt
 800a530:	189b      	addlt	r3, r3, r2
 800a532:	1b9e      	subge	r6, r3, r6
 800a534:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a536:	9b01      	ldr	r3, [sp, #4]
 800a538:	bfb8      	it	lt
 800a53a:	2600      	movlt	r6, #0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	bfb5      	itete	lt
 800a540:	eba8 0503 	sublt.w	r5, r8, r3
 800a544:	9b01      	ldrge	r3, [sp, #4]
 800a546:	2300      	movlt	r3, #0
 800a548:	4645      	movge	r5, r8
 800a54a:	e747      	b.n	800a3dc <_dtoa_r+0x75c>
 800a54c:	9e06      	ldr	r6, [sp, #24]
 800a54e:	9f08      	ldr	r7, [sp, #32]
 800a550:	4645      	mov	r5, r8
 800a552:	e74c      	b.n	800a3ee <_dtoa_r+0x76e>
 800a554:	9a06      	ldr	r2, [sp, #24]
 800a556:	e775      	b.n	800a444 <_dtoa_r+0x7c4>
 800a558:	9b05      	ldr	r3, [sp, #20]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	dc18      	bgt.n	800a590 <_dtoa_r+0x910>
 800a55e:	9b02      	ldr	r3, [sp, #8]
 800a560:	b9b3      	cbnz	r3, 800a590 <_dtoa_r+0x910>
 800a562:	9b03      	ldr	r3, [sp, #12]
 800a564:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a568:	b9a3      	cbnz	r3, 800a594 <_dtoa_r+0x914>
 800a56a:	9b03      	ldr	r3, [sp, #12]
 800a56c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a570:	0d1b      	lsrs	r3, r3, #20
 800a572:	051b      	lsls	r3, r3, #20
 800a574:	b12b      	cbz	r3, 800a582 <_dtoa_r+0x902>
 800a576:	9b04      	ldr	r3, [sp, #16]
 800a578:	3301      	adds	r3, #1
 800a57a:	9304      	str	r3, [sp, #16]
 800a57c:	f108 0801 	add.w	r8, r8, #1
 800a580:	2301      	movs	r3, #1
 800a582:	9306      	str	r3, [sp, #24]
 800a584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a586:	2b00      	cmp	r3, #0
 800a588:	f47f af74 	bne.w	800a474 <_dtoa_r+0x7f4>
 800a58c:	2001      	movs	r0, #1
 800a58e:	e779      	b.n	800a484 <_dtoa_r+0x804>
 800a590:	2300      	movs	r3, #0
 800a592:	e7f6      	b.n	800a582 <_dtoa_r+0x902>
 800a594:	9b02      	ldr	r3, [sp, #8]
 800a596:	e7f4      	b.n	800a582 <_dtoa_r+0x902>
 800a598:	d085      	beq.n	800a4a6 <_dtoa_r+0x826>
 800a59a:	4618      	mov	r0, r3
 800a59c:	301c      	adds	r0, #28
 800a59e:	e77d      	b.n	800a49c <_dtoa_r+0x81c>
 800a5a0:	40240000 	.word	0x40240000
 800a5a4:	9b01      	ldr	r3, [sp, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	dc38      	bgt.n	800a61c <_dtoa_r+0x99c>
 800a5aa:	9b05      	ldr	r3, [sp, #20]
 800a5ac:	2b02      	cmp	r3, #2
 800a5ae:	dd35      	ble.n	800a61c <_dtoa_r+0x99c>
 800a5b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a5b4:	f1b9 0f00 	cmp.w	r9, #0
 800a5b8:	d10d      	bne.n	800a5d6 <_dtoa_r+0x956>
 800a5ba:	4631      	mov	r1, r6
 800a5bc:	464b      	mov	r3, r9
 800a5be:	2205      	movs	r2, #5
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f000 fa97 	bl	800aaf4 <__multadd>
 800a5c6:	4601      	mov	r1, r0
 800a5c8:	4606      	mov	r6, r0
 800a5ca:	4658      	mov	r0, fp
 800a5cc:	f000 fcae 	bl	800af2c <__mcmp>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	f73f adbd 	bgt.w	800a150 <_dtoa_r+0x4d0>
 800a5d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5d8:	9d00      	ldr	r5, [sp, #0]
 800a5da:	ea6f 0a03 	mvn.w	sl, r3
 800a5de:	f04f 0800 	mov.w	r8, #0
 800a5e2:	4631      	mov	r1, r6
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	f000 fa63 	bl	800aab0 <_Bfree>
 800a5ea:	2f00      	cmp	r7, #0
 800a5ec:	f43f aeb4 	beq.w	800a358 <_dtoa_r+0x6d8>
 800a5f0:	f1b8 0f00 	cmp.w	r8, #0
 800a5f4:	d005      	beq.n	800a602 <_dtoa_r+0x982>
 800a5f6:	45b8      	cmp	r8, r7
 800a5f8:	d003      	beq.n	800a602 <_dtoa_r+0x982>
 800a5fa:	4641      	mov	r1, r8
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	f000 fa57 	bl	800aab0 <_Bfree>
 800a602:	4639      	mov	r1, r7
 800a604:	4620      	mov	r0, r4
 800a606:	f000 fa53 	bl	800aab0 <_Bfree>
 800a60a:	e6a5      	b.n	800a358 <_dtoa_r+0x6d8>
 800a60c:	2600      	movs	r6, #0
 800a60e:	4637      	mov	r7, r6
 800a610:	e7e1      	b.n	800a5d6 <_dtoa_r+0x956>
 800a612:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a614:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a618:	4637      	mov	r7, r6
 800a61a:	e599      	b.n	800a150 <_dtoa_r+0x4d0>
 800a61c:	9b08      	ldr	r3, [sp, #32]
 800a61e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a622:	2b00      	cmp	r3, #0
 800a624:	f000 80fd 	beq.w	800a822 <_dtoa_r+0xba2>
 800a628:	2d00      	cmp	r5, #0
 800a62a:	dd05      	ble.n	800a638 <_dtoa_r+0x9b8>
 800a62c:	4639      	mov	r1, r7
 800a62e:	462a      	mov	r2, r5
 800a630:	4620      	mov	r0, r4
 800a632:	f000 fc0f 	bl	800ae54 <__lshift>
 800a636:	4607      	mov	r7, r0
 800a638:	9b06      	ldr	r3, [sp, #24]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d05c      	beq.n	800a6f8 <_dtoa_r+0xa78>
 800a63e:	6879      	ldr	r1, [r7, #4]
 800a640:	4620      	mov	r0, r4
 800a642:	f000 f9f5 	bl	800aa30 <_Balloc>
 800a646:	4605      	mov	r5, r0
 800a648:	b928      	cbnz	r0, 800a656 <_dtoa_r+0x9d6>
 800a64a:	4b80      	ldr	r3, [pc, #512]	; (800a84c <_dtoa_r+0xbcc>)
 800a64c:	4602      	mov	r2, r0
 800a64e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a652:	f7ff bb2e 	b.w	8009cb2 <_dtoa_r+0x32>
 800a656:	693a      	ldr	r2, [r7, #16]
 800a658:	3202      	adds	r2, #2
 800a65a:	0092      	lsls	r2, r2, #2
 800a65c:	f107 010c 	add.w	r1, r7, #12
 800a660:	300c      	adds	r0, #12
 800a662:	f7fe fc9e 	bl	8008fa2 <memcpy>
 800a666:	2201      	movs	r2, #1
 800a668:	4629      	mov	r1, r5
 800a66a:	4620      	mov	r0, r4
 800a66c:	f000 fbf2 	bl	800ae54 <__lshift>
 800a670:	9b00      	ldr	r3, [sp, #0]
 800a672:	3301      	adds	r3, #1
 800a674:	9301      	str	r3, [sp, #4]
 800a676:	9b00      	ldr	r3, [sp, #0]
 800a678:	444b      	add	r3, r9
 800a67a:	9307      	str	r3, [sp, #28]
 800a67c:	9b02      	ldr	r3, [sp, #8]
 800a67e:	f003 0301 	and.w	r3, r3, #1
 800a682:	46b8      	mov	r8, r7
 800a684:	9306      	str	r3, [sp, #24]
 800a686:	4607      	mov	r7, r0
 800a688:	9b01      	ldr	r3, [sp, #4]
 800a68a:	4631      	mov	r1, r6
 800a68c:	3b01      	subs	r3, #1
 800a68e:	4658      	mov	r0, fp
 800a690:	9302      	str	r3, [sp, #8]
 800a692:	f7ff fa69 	bl	8009b68 <quorem>
 800a696:	4603      	mov	r3, r0
 800a698:	3330      	adds	r3, #48	; 0x30
 800a69a:	9004      	str	r0, [sp, #16]
 800a69c:	4641      	mov	r1, r8
 800a69e:	4658      	mov	r0, fp
 800a6a0:	9308      	str	r3, [sp, #32]
 800a6a2:	f000 fc43 	bl	800af2c <__mcmp>
 800a6a6:	463a      	mov	r2, r7
 800a6a8:	4681      	mov	r9, r0
 800a6aa:	4631      	mov	r1, r6
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	f000 fc59 	bl	800af64 <__mdiff>
 800a6b2:	68c2      	ldr	r2, [r0, #12]
 800a6b4:	9b08      	ldr	r3, [sp, #32]
 800a6b6:	4605      	mov	r5, r0
 800a6b8:	bb02      	cbnz	r2, 800a6fc <_dtoa_r+0xa7c>
 800a6ba:	4601      	mov	r1, r0
 800a6bc:	4658      	mov	r0, fp
 800a6be:	f000 fc35 	bl	800af2c <__mcmp>
 800a6c2:	9b08      	ldr	r3, [sp, #32]
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	4629      	mov	r1, r5
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a6ce:	f000 f9ef 	bl	800aab0 <_Bfree>
 800a6d2:	9b05      	ldr	r3, [sp, #20]
 800a6d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6d6:	9d01      	ldr	r5, [sp, #4]
 800a6d8:	ea43 0102 	orr.w	r1, r3, r2
 800a6dc:	9b06      	ldr	r3, [sp, #24]
 800a6de:	430b      	orrs	r3, r1
 800a6e0:	9b08      	ldr	r3, [sp, #32]
 800a6e2:	d10d      	bne.n	800a700 <_dtoa_r+0xa80>
 800a6e4:	2b39      	cmp	r3, #57	; 0x39
 800a6e6:	d029      	beq.n	800a73c <_dtoa_r+0xabc>
 800a6e8:	f1b9 0f00 	cmp.w	r9, #0
 800a6ec:	dd01      	ble.n	800a6f2 <_dtoa_r+0xa72>
 800a6ee:	9b04      	ldr	r3, [sp, #16]
 800a6f0:	3331      	adds	r3, #49	; 0x31
 800a6f2:	9a02      	ldr	r2, [sp, #8]
 800a6f4:	7013      	strb	r3, [r2, #0]
 800a6f6:	e774      	b.n	800a5e2 <_dtoa_r+0x962>
 800a6f8:	4638      	mov	r0, r7
 800a6fa:	e7b9      	b.n	800a670 <_dtoa_r+0x9f0>
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	e7e2      	b.n	800a6c6 <_dtoa_r+0xa46>
 800a700:	f1b9 0f00 	cmp.w	r9, #0
 800a704:	db06      	blt.n	800a714 <_dtoa_r+0xa94>
 800a706:	9905      	ldr	r1, [sp, #20]
 800a708:	ea41 0909 	orr.w	r9, r1, r9
 800a70c:	9906      	ldr	r1, [sp, #24]
 800a70e:	ea59 0101 	orrs.w	r1, r9, r1
 800a712:	d120      	bne.n	800a756 <_dtoa_r+0xad6>
 800a714:	2a00      	cmp	r2, #0
 800a716:	ddec      	ble.n	800a6f2 <_dtoa_r+0xa72>
 800a718:	4659      	mov	r1, fp
 800a71a:	2201      	movs	r2, #1
 800a71c:	4620      	mov	r0, r4
 800a71e:	9301      	str	r3, [sp, #4]
 800a720:	f000 fb98 	bl	800ae54 <__lshift>
 800a724:	4631      	mov	r1, r6
 800a726:	4683      	mov	fp, r0
 800a728:	f000 fc00 	bl	800af2c <__mcmp>
 800a72c:	2800      	cmp	r0, #0
 800a72e:	9b01      	ldr	r3, [sp, #4]
 800a730:	dc02      	bgt.n	800a738 <_dtoa_r+0xab8>
 800a732:	d1de      	bne.n	800a6f2 <_dtoa_r+0xa72>
 800a734:	07da      	lsls	r2, r3, #31
 800a736:	d5dc      	bpl.n	800a6f2 <_dtoa_r+0xa72>
 800a738:	2b39      	cmp	r3, #57	; 0x39
 800a73a:	d1d8      	bne.n	800a6ee <_dtoa_r+0xa6e>
 800a73c:	9a02      	ldr	r2, [sp, #8]
 800a73e:	2339      	movs	r3, #57	; 0x39
 800a740:	7013      	strb	r3, [r2, #0]
 800a742:	462b      	mov	r3, r5
 800a744:	461d      	mov	r5, r3
 800a746:	3b01      	subs	r3, #1
 800a748:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a74c:	2a39      	cmp	r2, #57	; 0x39
 800a74e:	d050      	beq.n	800a7f2 <_dtoa_r+0xb72>
 800a750:	3201      	adds	r2, #1
 800a752:	701a      	strb	r2, [r3, #0]
 800a754:	e745      	b.n	800a5e2 <_dtoa_r+0x962>
 800a756:	2a00      	cmp	r2, #0
 800a758:	dd03      	ble.n	800a762 <_dtoa_r+0xae2>
 800a75a:	2b39      	cmp	r3, #57	; 0x39
 800a75c:	d0ee      	beq.n	800a73c <_dtoa_r+0xabc>
 800a75e:	3301      	adds	r3, #1
 800a760:	e7c7      	b.n	800a6f2 <_dtoa_r+0xa72>
 800a762:	9a01      	ldr	r2, [sp, #4]
 800a764:	9907      	ldr	r1, [sp, #28]
 800a766:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a76a:	428a      	cmp	r2, r1
 800a76c:	d02a      	beq.n	800a7c4 <_dtoa_r+0xb44>
 800a76e:	4659      	mov	r1, fp
 800a770:	2300      	movs	r3, #0
 800a772:	220a      	movs	r2, #10
 800a774:	4620      	mov	r0, r4
 800a776:	f000 f9bd 	bl	800aaf4 <__multadd>
 800a77a:	45b8      	cmp	r8, r7
 800a77c:	4683      	mov	fp, r0
 800a77e:	f04f 0300 	mov.w	r3, #0
 800a782:	f04f 020a 	mov.w	r2, #10
 800a786:	4641      	mov	r1, r8
 800a788:	4620      	mov	r0, r4
 800a78a:	d107      	bne.n	800a79c <_dtoa_r+0xb1c>
 800a78c:	f000 f9b2 	bl	800aaf4 <__multadd>
 800a790:	4680      	mov	r8, r0
 800a792:	4607      	mov	r7, r0
 800a794:	9b01      	ldr	r3, [sp, #4]
 800a796:	3301      	adds	r3, #1
 800a798:	9301      	str	r3, [sp, #4]
 800a79a:	e775      	b.n	800a688 <_dtoa_r+0xa08>
 800a79c:	f000 f9aa 	bl	800aaf4 <__multadd>
 800a7a0:	4639      	mov	r1, r7
 800a7a2:	4680      	mov	r8, r0
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	220a      	movs	r2, #10
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f000 f9a3 	bl	800aaf4 <__multadd>
 800a7ae:	4607      	mov	r7, r0
 800a7b0:	e7f0      	b.n	800a794 <_dtoa_r+0xb14>
 800a7b2:	f1b9 0f00 	cmp.w	r9, #0
 800a7b6:	9a00      	ldr	r2, [sp, #0]
 800a7b8:	bfcc      	ite	gt
 800a7ba:	464d      	movgt	r5, r9
 800a7bc:	2501      	movle	r5, #1
 800a7be:	4415      	add	r5, r2
 800a7c0:	f04f 0800 	mov.w	r8, #0
 800a7c4:	4659      	mov	r1, fp
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	9301      	str	r3, [sp, #4]
 800a7cc:	f000 fb42 	bl	800ae54 <__lshift>
 800a7d0:	4631      	mov	r1, r6
 800a7d2:	4683      	mov	fp, r0
 800a7d4:	f000 fbaa 	bl	800af2c <__mcmp>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	dcb2      	bgt.n	800a742 <_dtoa_r+0xac2>
 800a7dc:	d102      	bne.n	800a7e4 <_dtoa_r+0xb64>
 800a7de:	9b01      	ldr	r3, [sp, #4]
 800a7e0:	07db      	lsls	r3, r3, #31
 800a7e2:	d4ae      	bmi.n	800a742 <_dtoa_r+0xac2>
 800a7e4:	462b      	mov	r3, r5
 800a7e6:	461d      	mov	r5, r3
 800a7e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7ec:	2a30      	cmp	r2, #48	; 0x30
 800a7ee:	d0fa      	beq.n	800a7e6 <_dtoa_r+0xb66>
 800a7f0:	e6f7      	b.n	800a5e2 <_dtoa_r+0x962>
 800a7f2:	9a00      	ldr	r2, [sp, #0]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d1a5      	bne.n	800a744 <_dtoa_r+0xac4>
 800a7f8:	f10a 0a01 	add.w	sl, sl, #1
 800a7fc:	2331      	movs	r3, #49	; 0x31
 800a7fe:	e779      	b.n	800a6f4 <_dtoa_r+0xa74>
 800a800:	4b13      	ldr	r3, [pc, #76]	; (800a850 <_dtoa_r+0xbd0>)
 800a802:	f7ff baaf 	b.w	8009d64 <_dtoa_r+0xe4>
 800a806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a808:	2b00      	cmp	r3, #0
 800a80a:	f47f aa86 	bne.w	8009d1a <_dtoa_r+0x9a>
 800a80e:	4b11      	ldr	r3, [pc, #68]	; (800a854 <_dtoa_r+0xbd4>)
 800a810:	f7ff baa8 	b.w	8009d64 <_dtoa_r+0xe4>
 800a814:	f1b9 0f00 	cmp.w	r9, #0
 800a818:	dc03      	bgt.n	800a822 <_dtoa_r+0xba2>
 800a81a:	9b05      	ldr	r3, [sp, #20]
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	f73f aec9 	bgt.w	800a5b4 <_dtoa_r+0x934>
 800a822:	9d00      	ldr	r5, [sp, #0]
 800a824:	4631      	mov	r1, r6
 800a826:	4658      	mov	r0, fp
 800a828:	f7ff f99e 	bl	8009b68 <quorem>
 800a82c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a830:	f805 3b01 	strb.w	r3, [r5], #1
 800a834:	9a00      	ldr	r2, [sp, #0]
 800a836:	1aaa      	subs	r2, r5, r2
 800a838:	4591      	cmp	r9, r2
 800a83a:	ddba      	ble.n	800a7b2 <_dtoa_r+0xb32>
 800a83c:	4659      	mov	r1, fp
 800a83e:	2300      	movs	r3, #0
 800a840:	220a      	movs	r2, #10
 800a842:	4620      	mov	r0, r4
 800a844:	f000 f956 	bl	800aaf4 <__multadd>
 800a848:	4683      	mov	fp, r0
 800a84a:	e7eb      	b.n	800a824 <_dtoa_r+0xba4>
 800a84c:	0800be6b 	.word	0x0800be6b
 800a850:	0800bdc4 	.word	0x0800bdc4
 800a854:	0800bde8 	.word	0x0800bde8

0800a858 <__sflush_r>:
 800a858:	898a      	ldrh	r2, [r1, #12]
 800a85a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a85e:	4605      	mov	r5, r0
 800a860:	0710      	lsls	r0, r2, #28
 800a862:	460c      	mov	r4, r1
 800a864:	d458      	bmi.n	800a918 <__sflush_r+0xc0>
 800a866:	684b      	ldr	r3, [r1, #4]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	dc05      	bgt.n	800a878 <__sflush_r+0x20>
 800a86c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a86e:	2b00      	cmp	r3, #0
 800a870:	dc02      	bgt.n	800a878 <__sflush_r+0x20>
 800a872:	2000      	movs	r0, #0
 800a874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a87a:	2e00      	cmp	r6, #0
 800a87c:	d0f9      	beq.n	800a872 <__sflush_r+0x1a>
 800a87e:	2300      	movs	r3, #0
 800a880:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a884:	682f      	ldr	r7, [r5, #0]
 800a886:	602b      	str	r3, [r5, #0]
 800a888:	d032      	beq.n	800a8f0 <__sflush_r+0x98>
 800a88a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a88c:	89a3      	ldrh	r3, [r4, #12]
 800a88e:	075a      	lsls	r2, r3, #29
 800a890:	d505      	bpl.n	800a89e <__sflush_r+0x46>
 800a892:	6863      	ldr	r3, [r4, #4]
 800a894:	1ac0      	subs	r0, r0, r3
 800a896:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a898:	b10b      	cbz	r3, 800a89e <__sflush_r+0x46>
 800a89a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a89c:	1ac0      	subs	r0, r0, r3
 800a89e:	2300      	movs	r3, #0
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8a4:	6a21      	ldr	r1, [r4, #32]
 800a8a6:	4628      	mov	r0, r5
 800a8a8:	47b0      	blx	r6
 800a8aa:	1c43      	adds	r3, r0, #1
 800a8ac:	89a3      	ldrh	r3, [r4, #12]
 800a8ae:	d106      	bne.n	800a8be <__sflush_r+0x66>
 800a8b0:	6829      	ldr	r1, [r5, #0]
 800a8b2:	291d      	cmp	r1, #29
 800a8b4:	d82c      	bhi.n	800a910 <__sflush_r+0xb8>
 800a8b6:	4a2a      	ldr	r2, [pc, #168]	; (800a960 <__sflush_r+0x108>)
 800a8b8:	40ca      	lsrs	r2, r1
 800a8ba:	07d6      	lsls	r6, r2, #31
 800a8bc:	d528      	bpl.n	800a910 <__sflush_r+0xb8>
 800a8be:	2200      	movs	r2, #0
 800a8c0:	6062      	str	r2, [r4, #4]
 800a8c2:	04d9      	lsls	r1, r3, #19
 800a8c4:	6922      	ldr	r2, [r4, #16]
 800a8c6:	6022      	str	r2, [r4, #0]
 800a8c8:	d504      	bpl.n	800a8d4 <__sflush_r+0x7c>
 800a8ca:	1c42      	adds	r2, r0, #1
 800a8cc:	d101      	bne.n	800a8d2 <__sflush_r+0x7a>
 800a8ce:	682b      	ldr	r3, [r5, #0]
 800a8d0:	b903      	cbnz	r3, 800a8d4 <__sflush_r+0x7c>
 800a8d2:	6560      	str	r0, [r4, #84]	; 0x54
 800a8d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8d6:	602f      	str	r7, [r5, #0]
 800a8d8:	2900      	cmp	r1, #0
 800a8da:	d0ca      	beq.n	800a872 <__sflush_r+0x1a>
 800a8dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8e0:	4299      	cmp	r1, r3
 800a8e2:	d002      	beq.n	800a8ea <__sflush_r+0x92>
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	f000 fc31 	bl	800b14c <_free_r>
 800a8ea:	2000      	movs	r0, #0
 800a8ec:	6360      	str	r0, [r4, #52]	; 0x34
 800a8ee:	e7c1      	b.n	800a874 <__sflush_r+0x1c>
 800a8f0:	6a21      	ldr	r1, [r4, #32]
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	47b0      	blx	r6
 800a8f8:	1c41      	adds	r1, r0, #1
 800a8fa:	d1c7      	bne.n	800a88c <__sflush_r+0x34>
 800a8fc:	682b      	ldr	r3, [r5, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d0c4      	beq.n	800a88c <__sflush_r+0x34>
 800a902:	2b1d      	cmp	r3, #29
 800a904:	d001      	beq.n	800a90a <__sflush_r+0xb2>
 800a906:	2b16      	cmp	r3, #22
 800a908:	d101      	bne.n	800a90e <__sflush_r+0xb6>
 800a90a:	602f      	str	r7, [r5, #0]
 800a90c:	e7b1      	b.n	800a872 <__sflush_r+0x1a>
 800a90e:	89a3      	ldrh	r3, [r4, #12]
 800a910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a914:	81a3      	strh	r3, [r4, #12]
 800a916:	e7ad      	b.n	800a874 <__sflush_r+0x1c>
 800a918:	690f      	ldr	r7, [r1, #16]
 800a91a:	2f00      	cmp	r7, #0
 800a91c:	d0a9      	beq.n	800a872 <__sflush_r+0x1a>
 800a91e:	0793      	lsls	r3, r2, #30
 800a920:	680e      	ldr	r6, [r1, #0]
 800a922:	bf08      	it	eq
 800a924:	694b      	ldreq	r3, [r1, #20]
 800a926:	600f      	str	r7, [r1, #0]
 800a928:	bf18      	it	ne
 800a92a:	2300      	movne	r3, #0
 800a92c:	eba6 0807 	sub.w	r8, r6, r7
 800a930:	608b      	str	r3, [r1, #8]
 800a932:	f1b8 0f00 	cmp.w	r8, #0
 800a936:	dd9c      	ble.n	800a872 <__sflush_r+0x1a>
 800a938:	6a21      	ldr	r1, [r4, #32]
 800a93a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a93c:	4643      	mov	r3, r8
 800a93e:	463a      	mov	r2, r7
 800a940:	4628      	mov	r0, r5
 800a942:	47b0      	blx	r6
 800a944:	2800      	cmp	r0, #0
 800a946:	dc06      	bgt.n	800a956 <__sflush_r+0xfe>
 800a948:	89a3      	ldrh	r3, [r4, #12]
 800a94a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a94e:	81a3      	strh	r3, [r4, #12]
 800a950:	f04f 30ff 	mov.w	r0, #4294967295
 800a954:	e78e      	b.n	800a874 <__sflush_r+0x1c>
 800a956:	4407      	add	r7, r0
 800a958:	eba8 0800 	sub.w	r8, r8, r0
 800a95c:	e7e9      	b.n	800a932 <__sflush_r+0xda>
 800a95e:	bf00      	nop
 800a960:	20400001 	.word	0x20400001

0800a964 <_fflush_r>:
 800a964:	b538      	push	{r3, r4, r5, lr}
 800a966:	690b      	ldr	r3, [r1, #16]
 800a968:	4605      	mov	r5, r0
 800a96a:	460c      	mov	r4, r1
 800a96c:	b913      	cbnz	r3, 800a974 <_fflush_r+0x10>
 800a96e:	2500      	movs	r5, #0
 800a970:	4628      	mov	r0, r5
 800a972:	bd38      	pop	{r3, r4, r5, pc}
 800a974:	b118      	cbz	r0, 800a97e <_fflush_r+0x1a>
 800a976:	6983      	ldr	r3, [r0, #24]
 800a978:	b90b      	cbnz	r3, 800a97e <_fflush_r+0x1a>
 800a97a:	f7fe fa4d 	bl	8008e18 <__sinit>
 800a97e:	4b14      	ldr	r3, [pc, #80]	; (800a9d0 <_fflush_r+0x6c>)
 800a980:	429c      	cmp	r4, r3
 800a982:	d11b      	bne.n	800a9bc <_fflush_r+0x58>
 800a984:	686c      	ldr	r4, [r5, #4]
 800a986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d0ef      	beq.n	800a96e <_fflush_r+0xa>
 800a98e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a990:	07d0      	lsls	r0, r2, #31
 800a992:	d404      	bmi.n	800a99e <_fflush_r+0x3a>
 800a994:	0599      	lsls	r1, r3, #22
 800a996:	d402      	bmi.n	800a99e <_fflush_r+0x3a>
 800a998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a99a:	f7fe fb00 	bl	8008f9e <__retarget_lock_acquire_recursive>
 800a99e:	4628      	mov	r0, r5
 800a9a0:	4621      	mov	r1, r4
 800a9a2:	f7ff ff59 	bl	800a858 <__sflush_r>
 800a9a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9a8:	07da      	lsls	r2, r3, #31
 800a9aa:	4605      	mov	r5, r0
 800a9ac:	d4e0      	bmi.n	800a970 <_fflush_r+0xc>
 800a9ae:	89a3      	ldrh	r3, [r4, #12]
 800a9b0:	059b      	lsls	r3, r3, #22
 800a9b2:	d4dd      	bmi.n	800a970 <_fflush_r+0xc>
 800a9b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9b6:	f7fe faf3 	bl	8008fa0 <__retarget_lock_release_recursive>
 800a9ba:	e7d9      	b.n	800a970 <_fflush_r+0xc>
 800a9bc:	4b05      	ldr	r3, [pc, #20]	; (800a9d4 <_fflush_r+0x70>)
 800a9be:	429c      	cmp	r4, r3
 800a9c0:	d101      	bne.n	800a9c6 <_fflush_r+0x62>
 800a9c2:	68ac      	ldr	r4, [r5, #8]
 800a9c4:	e7df      	b.n	800a986 <_fflush_r+0x22>
 800a9c6:	4b04      	ldr	r3, [pc, #16]	; (800a9d8 <_fflush_r+0x74>)
 800a9c8:	429c      	cmp	r4, r3
 800a9ca:	bf08      	it	eq
 800a9cc:	68ec      	ldreq	r4, [r5, #12]
 800a9ce:	e7da      	b.n	800a986 <_fflush_r+0x22>
 800a9d0:	0800bd70 	.word	0x0800bd70
 800a9d4:	0800bd90 	.word	0x0800bd90
 800a9d8:	0800bd50 	.word	0x0800bd50

0800a9dc <_localeconv_r>:
 800a9dc:	4800      	ldr	r0, [pc, #0]	; (800a9e0 <_localeconv_r+0x4>)
 800a9de:	4770      	bx	lr
 800a9e0:	20000164 	.word	0x20000164

0800a9e4 <_lseek_r>:
 800a9e4:	b538      	push	{r3, r4, r5, lr}
 800a9e6:	4d07      	ldr	r5, [pc, #28]	; (800aa04 <_lseek_r+0x20>)
 800a9e8:	4604      	mov	r4, r0
 800a9ea:	4608      	mov	r0, r1
 800a9ec:	4611      	mov	r1, r2
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	602a      	str	r2, [r5, #0]
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	f7f7 f95a 	bl	8001cac <_lseek>
 800a9f8:	1c43      	adds	r3, r0, #1
 800a9fa:	d102      	bne.n	800aa02 <_lseek_r+0x1e>
 800a9fc:	682b      	ldr	r3, [r5, #0]
 800a9fe:	b103      	cbz	r3, 800aa02 <_lseek_r+0x1e>
 800aa00:	6023      	str	r3, [r4, #0]
 800aa02:	bd38      	pop	{r3, r4, r5, pc}
 800aa04:	20003300 	.word	0x20003300

0800aa08 <malloc>:
 800aa08:	4b02      	ldr	r3, [pc, #8]	; (800aa14 <malloc+0xc>)
 800aa0a:	4601      	mov	r1, r0
 800aa0c:	6818      	ldr	r0, [r3, #0]
 800aa0e:	f7fe badf 	b.w	8008fd0 <_malloc_r>
 800aa12:	bf00      	nop
 800aa14:	20000010 	.word	0x20000010

0800aa18 <__malloc_lock>:
 800aa18:	4801      	ldr	r0, [pc, #4]	; (800aa20 <__malloc_lock+0x8>)
 800aa1a:	f7fe bac0 	b.w	8008f9e <__retarget_lock_acquire_recursive>
 800aa1e:	bf00      	nop
 800aa20:	200032f8 	.word	0x200032f8

0800aa24 <__malloc_unlock>:
 800aa24:	4801      	ldr	r0, [pc, #4]	; (800aa2c <__malloc_unlock+0x8>)
 800aa26:	f7fe babb 	b.w	8008fa0 <__retarget_lock_release_recursive>
 800aa2a:	bf00      	nop
 800aa2c:	200032f8 	.word	0x200032f8

0800aa30 <_Balloc>:
 800aa30:	b570      	push	{r4, r5, r6, lr}
 800aa32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa34:	4604      	mov	r4, r0
 800aa36:	460d      	mov	r5, r1
 800aa38:	b976      	cbnz	r6, 800aa58 <_Balloc+0x28>
 800aa3a:	2010      	movs	r0, #16
 800aa3c:	f7ff ffe4 	bl	800aa08 <malloc>
 800aa40:	4602      	mov	r2, r0
 800aa42:	6260      	str	r0, [r4, #36]	; 0x24
 800aa44:	b920      	cbnz	r0, 800aa50 <_Balloc+0x20>
 800aa46:	4b18      	ldr	r3, [pc, #96]	; (800aaa8 <_Balloc+0x78>)
 800aa48:	4818      	ldr	r0, [pc, #96]	; (800aaac <_Balloc+0x7c>)
 800aa4a:	2166      	movs	r1, #102	; 0x66
 800aa4c:	f000 fd3c 	bl	800b4c8 <__assert_func>
 800aa50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa54:	6006      	str	r6, [r0, #0]
 800aa56:	60c6      	str	r6, [r0, #12]
 800aa58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aa5a:	68f3      	ldr	r3, [r6, #12]
 800aa5c:	b183      	cbz	r3, 800aa80 <_Balloc+0x50>
 800aa5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa66:	b9b8      	cbnz	r0, 800aa98 <_Balloc+0x68>
 800aa68:	2101      	movs	r1, #1
 800aa6a:	fa01 f605 	lsl.w	r6, r1, r5
 800aa6e:	1d72      	adds	r2, r6, #5
 800aa70:	0092      	lsls	r2, r2, #2
 800aa72:	4620      	mov	r0, r4
 800aa74:	f000 fb5a 	bl	800b12c <_calloc_r>
 800aa78:	b160      	cbz	r0, 800aa94 <_Balloc+0x64>
 800aa7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa7e:	e00e      	b.n	800aa9e <_Balloc+0x6e>
 800aa80:	2221      	movs	r2, #33	; 0x21
 800aa82:	2104      	movs	r1, #4
 800aa84:	4620      	mov	r0, r4
 800aa86:	f000 fb51 	bl	800b12c <_calloc_r>
 800aa8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa8c:	60f0      	str	r0, [r6, #12]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d1e4      	bne.n	800aa5e <_Balloc+0x2e>
 800aa94:	2000      	movs	r0, #0
 800aa96:	bd70      	pop	{r4, r5, r6, pc}
 800aa98:	6802      	ldr	r2, [r0, #0]
 800aa9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aaa4:	e7f7      	b.n	800aa96 <_Balloc+0x66>
 800aaa6:	bf00      	nop
 800aaa8:	0800bdf5 	.word	0x0800bdf5
 800aaac:	0800be7c 	.word	0x0800be7c

0800aab0 <_Bfree>:
 800aab0:	b570      	push	{r4, r5, r6, lr}
 800aab2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aab4:	4605      	mov	r5, r0
 800aab6:	460c      	mov	r4, r1
 800aab8:	b976      	cbnz	r6, 800aad8 <_Bfree+0x28>
 800aaba:	2010      	movs	r0, #16
 800aabc:	f7ff ffa4 	bl	800aa08 <malloc>
 800aac0:	4602      	mov	r2, r0
 800aac2:	6268      	str	r0, [r5, #36]	; 0x24
 800aac4:	b920      	cbnz	r0, 800aad0 <_Bfree+0x20>
 800aac6:	4b09      	ldr	r3, [pc, #36]	; (800aaec <_Bfree+0x3c>)
 800aac8:	4809      	ldr	r0, [pc, #36]	; (800aaf0 <_Bfree+0x40>)
 800aaca:	218a      	movs	r1, #138	; 0x8a
 800aacc:	f000 fcfc 	bl	800b4c8 <__assert_func>
 800aad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aad4:	6006      	str	r6, [r0, #0]
 800aad6:	60c6      	str	r6, [r0, #12]
 800aad8:	b13c      	cbz	r4, 800aaea <_Bfree+0x3a>
 800aada:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aadc:	6862      	ldr	r2, [r4, #4]
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aae4:	6021      	str	r1, [r4, #0]
 800aae6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aaea:	bd70      	pop	{r4, r5, r6, pc}
 800aaec:	0800bdf5 	.word	0x0800bdf5
 800aaf0:	0800be7c 	.word	0x0800be7c

0800aaf4 <__multadd>:
 800aaf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf8:	690e      	ldr	r6, [r1, #16]
 800aafa:	4607      	mov	r7, r0
 800aafc:	4698      	mov	r8, r3
 800aafe:	460c      	mov	r4, r1
 800ab00:	f101 0014 	add.w	r0, r1, #20
 800ab04:	2300      	movs	r3, #0
 800ab06:	6805      	ldr	r5, [r0, #0]
 800ab08:	b2a9      	uxth	r1, r5
 800ab0a:	fb02 8101 	mla	r1, r2, r1, r8
 800ab0e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ab12:	0c2d      	lsrs	r5, r5, #16
 800ab14:	fb02 c505 	mla	r5, r2, r5, ip
 800ab18:	b289      	uxth	r1, r1
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ab20:	429e      	cmp	r6, r3
 800ab22:	f840 1b04 	str.w	r1, [r0], #4
 800ab26:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ab2a:	dcec      	bgt.n	800ab06 <__multadd+0x12>
 800ab2c:	f1b8 0f00 	cmp.w	r8, #0
 800ab30:	d022      	beq.n	800ab78 <__multadd+0x84>
 800ab32:	68a3      	ldr	r3, [r4, #8]
 800ab34:	42b3      	cmp	r3, r6
 800ab36:	dc19      	bgt.n	800ab6c <__multadd+0x78>
 800ab38:	6861      	ldr	r1, [r4, #4]
 800ab3a:	4638      	mov	r0, r7
 800ab3c:	3101      	adds	r1, #1
 800ab3e:	f7ff ff77 	bl	800aa30 <_Balloc>
 800ab42:	4605      	mov	r5, r0
 800ab44:	b928      	cbnz	r0, 800ab52 <__multadd+0x5e>
 800ab46:	4602      	mov	r2, r0
 800ab48:	4b0d      	ldr	r3, [pc, #52]	; (800ab80 <__multadd+0x8c>)
 800ab4a:	480e      	ldr	r0, [pc, #56]	; (800ab84 <__multadd+0x90>)
 800ab4c:	21b5      	movs	r1, #181	; 0xb5
 800ab4e:	f000 fcbb 	bl	800b4c8 <__assert_func>
 800ab52:	6922      	ldr	r2, [r4, #16]
 800ab54:	3202      	adds	r2, #2
 800ab56:	f104 010c 	add.w	r1, r4, #12
 800ab5a:	0092      	lsls	r2, r2, #2
 800ab5c:	300c      	adds	r0, #12
 800ab5e:	f7fe fa20 	bl	8008fa2 <memcpy>
 800ab62:	4621      	mov	r1, r4
 800ab64:	4638      	mov	r0, r7
 800ab66:	f7ff ffa3 	bl	800aab0 <_Bfree>
 800ab6a:	462c      	mov	r4, r5
 800ab6c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ab70:	3601      	adds	r6, #1
 800ab72:	f8c3 8014 	str.w	r8, [r3, #20]
 800ab76:	6126      	str	r6, [r4, #16]
 800ab78:	4620      	mov	r0, r4
 800ab7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab7e:	bf00      	nop
 800ab80:	0800be6b 	.word	0x0800be6b
 800ab84:	0800be7c 	.word	0x0800be7c

0800ab88 <__hi0bits>:
 800ab88:	0c03      	lsrs	r3, r0, #16
 800ab8a:	041b      	lsls	r3, r3, #16
 800ab8c:	b9d3      	cbnz	r3, 800abc4 <__hi0bits+0x3c>
 800ab8e:	0400      	lsls	r0, r0, #16
 800ab90:	2310      	movs	r3, #16
 800ab92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ab96:	bf04      	itt	eq
 800ab98:	0200      	lsleq	r0, r0, #8
 800ab9a:	3308      	addeq	r3, #8
 800ab9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aba0:	bf04      	itt	eq
 800aba2:	0100      	lsleq	r0, r0, #4
 800aba4:	3304      	addeq	r3, #4
 800aba6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800abaa:	bf04      	itt	eq
 800abac:	0080      	lsleq	r0, r0, #2
 800abae:	3302      	addeq	r3, #2
 800abb0:	2800      	cmp	r0, #0
 800abb2:	db05      	blt.n	800abc0 <__hi0bits+0x38>
 800abb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800abb8:	f103 0301 	add.w	r3, r3, #1
 800abbc:	bf08      	it	eq
 800abbe:	2320      	moveq	r3, #32
 800abc0:	4618      	mov	r0, r3
 800abc2:	4770      	bx	lr
 800abc4:	2300      	movs	r3, #0
 800abc6:	e7e4      	b.n	800ab92 <__hi0bits+0xa>

0800abc8 <__lo0bits>:
 800abc8:	6803      	ldr	r3, [r0, #0]
 800abca:	f013 0207 	ands.w	r2, r3, #7
 800abce:	4601      	mov	r1, r0
 800abd0:	d00b      	beq.n	800abea <__lo0bits+0x22>
 800abd2:	07da      	lsls	r2, r3, #31
 800abd4:	d424      	bmi.n	800ac20 <__lo0bits+0x58>
 800abd6:	0798      	lsls	r0, r3, #30
 800abd8:	bf49      	itett	mi
 800abda:	085b      	lsrmi	r3, r3, #1
 800abdc:	089b      	lsrpl	r3, r3, #2
 800abde:	2001      	movmi	r0, #1
 800abe0:	600b      	strmi	r3, [r1, #0]
 800abe2:	bf5c      	itt	pl
 800abe4:	600b      	strpl	r3, [r1, #0]
 800abe6:	2002      	movpl	r0, #2
 800abe8:	4770      	bx	lr
 800abea:	b298      	uxth	r0, r3
 800abec:	b9b0      	cbnz	r0, 800ac1c <__lo0bits+0x54>
 800abee:	0c1b      	lsrs	r3, r3, #16
 800abf0:	2010      	movs	r0, #16
 800abf2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800abf6:	bf04      	itt	eq
 800abf8:	0a1b      	lsreq	r3, r3, #8
 800abfa:	3008      	addeq	r0, #8
 800abfc:	071a      	lsls	r2, r3, #28
 800abfe:	bf04      	itt	eq
 800ac00:	091b      	lsreq	r3, r3, #4
 800ac02:	3004      	addeq	r0, #4
 800ac04:	079a      	lsls	r2, r3, #30
 800ac06:	bf04      	itt	eq
 800ac08:	089b      	lsreq	r3, r3, #2
 800ac0a:	3002      	addeq	r0, #2
 800ac0c:	07da      	lsls	r2, r3, #31
 800ac0e:	d403      	bmi.n	800ac18 <__lo0bits+0x50>
 800ac10:	085b      	lsrs	r3, r3, #1
 800ac12:	f100 0001 	add.w	r0, r0, #1
 800ac16:	d005      	beq.n	800ac24 <__lo0bits+0x5c>
 800ac18:	600b      	str	r3, [r1, #0]
 800ac1a:	4770      	bx	lr
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	e7e8      	b.n	800abf2 <__lo0bits+0x2a>
 800ac20:	2000      	movs	r0, #0
 800ac22:	4770      	bx	lr
 800ac24:	2020      	movs	r0, #32
 800ac26:	4770      	bx	lr

0800ac28 <__i2b>:
 800ac28:	b510      	push	{r4, lr}
 800ac2a:	460c      	mov	r4, r1
 800ac2c:	2101      	movs	r1, #1
 800ac2e:	f7ff feff 	bl	800aa30 <_Balloc>
 800ac32:	4602      	mov	r2, r0
 800ac34:	b928      	cbnz	r0, 800ac42 <__i2b+0x1a>
 800ac36:	4b05      	ldr	r3, [pc, #20]	; (800ac4c <__i2b+0x24>)
 800ac38:	4805      	ldr	r0, [pc, #20]	; (800ac50 <__i2b+0x28>)
 800ac3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ac3e:	f000 fc43 	bl	800b4c8 <__assert_func>
 800ac42:	2301      	movs	r3, #1
 800ac44:	6144      	str	r4, [r0, #20]
 800ac46:	6103      	str	r3, [r0, #16]
 800ac48:	bd10      	pop	{r4, pc}
 800ac4a:	bf00      	nop
 800ac4c:	0800be6b 	.word	0x0800be6b
 800ac50:	0800be7c 	.word	0x0800be7c

0800ac54 <__multiply>:
 800ac54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac58:	4614      	mov	r4, r2
 800ac5a:	690a      	ldr	r2, [r1, #16]
 800ac5c:	6923      	ldr	r3, [r4, #16]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	bfb8      	it	lt
 800ac62:	460b      	movlt	r3, r1
 800ac64:	460d      	mov	r5, r1
 800ac66:	bfbc      	itt	lt
 800ac68:	4625      	movlt	r5, r4
 800ac6a:	461c      	movlt	r4, r3
 800ac6c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ac70:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ac74:	68ab      	ldr	r3, [r5, #8]
 800ac76:	6869      	ldr	r1, [r5, #4]
 800ac78:	eb0a 0709 	add.w	r7, sl, r9
 800ac7c:	42bb      	cmp	r3, r7
 800ac7e:	b085      	sub	sp, #20
 800ac80:	bfb8      	it	lt
 800ac82:	3101      	addlt	r1, #1
 800ac84:	f7ff fed4 	bl	800aa30 <_Balloc>
 800ac88:	b930      	cbnz	r0, 800ac98 <__multiply+0x44>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	4b42      	ldr	r3, [pc, #264]	; (800ad98 <__multiply+0x144>)
 800ac8e:	4843      	ldr	r0, [pc, #268]	; (800ad9c <__multiply+0x148>)
 800ac90:	f240 115d 	movw	r1, #349	; 0x15d
 800ac94:	f000 fc18 	bl	800b4c8 <__assert_func>
 800ac98:	f100 0614 	add.w	r6, r0, #20
 800ac9c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800aca0:	4633      	mov	r3, r6
 800aca2:	2200      	movs	r2, #0
 800aca4:	4543      	cmp	r3, r8
 800aca6:	d31e      	bcc.n	800ace6 <__multiply+0x92>
 800aca8:	f105 0c14 	add.w	ip, r5, #20
 800acac:	f104 0314 	add.w	r3, r4, #20
 800acb0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800acb4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800acb8:	9202      	str	r2, [sp, #8]
 800acba:	ebac 0205 	sub.w	r2, ip, r5
 800acbe:	3a15      	subs	r2, #21
 800acc0:	f022 0203 	bic.w	r2, r2, #3
 800acc4:	3204      	adds	r2, #4
 800acc6:	f105 0115 	add.w	r1, r5, #21
 800acca:	458c      	cmp	ip, r1
 800accc:	bf38      	it	cc
 800acce:	2204      	movcc	r2, #4
 800acd0:	9201      	str	r2, [sp, #4]
 800acd2:	9a02      	ldr	r2, [sp, #8]
 800acd4:	9303      	str	r3, [sp, #12]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d808      	bhi.n	800acec <__multiply+0x98>
 800acda:	2f00      	cmp	r7, #0
 800acdc:	dc55      	bgt.n	800ad8a <__multiply+0x136>
 800acde:	6107      	str	r7, [r0, #16]
 800ace0:	b005      	add	sp, #20
 800ace2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace6:	f843 2b04 	str.w	r2, [r3], #4
 800acea:	e7db      	b.n	800aca4 <__multiply+0x50>
 800acec:	f8b3 a000 	ldrh.w	sl, [r3]
 800acf0:	f1ba 0f00 	cmp.w	sl, #0
 800acf4:	d020      	beq.n	800ad38 <__multiply+0xe4>
 800acf6:	f105 0e14 	add.w	lr, r5, #20
 800acfa:	46b1      	mov	r9, r6
 800acfc:	2200      	movs	r2, #0
 800acfe:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ad02:	f8d9 b000 	ldr.w	fp, [r9]
 800ad06:	b2a1      	uxth	r1, r4
 800ad08:	fa1f fb8b 	uxth.w	fp, fp
 800ad0c:	fb0a b101 	mla	r1, sl, r1, fp
 800ad10:	4411      	add	r1, r2
 800ad12:	f8d9 2000 	ldr.w	r2, [r9]
 800ad16:	0c24      	lsrs	r4, r4, #16
 800ad18:	0c12      	lsrs	r2, r2, #16
 800ad1a:	fb0a 2404 	mla	r4, sl, r4, r2
 800ad1e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ad22:	b289      	uxth	r1, r1
 800ad24:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ad28:	45f4      	cmp	ip, lr
 800ad2a:	f849 1b04 	str.w	r1, [r9], #4
 800ad2e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ad32:	d8e4      	bhi.n	800acfe <__multiply+0xaa>
 800ad34:	9901      	ldr	r1, [sp, #4]
 800ad36:	5072      	str	r2, [r6, r1]
 800ad38:	9a03      	ldr	r2, [sp, #12]
 800ad3a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ad3e:	3304      	adds	r3, #4
 800ad40:	f1b9 0f00 	cmp.w	r9, #0
 800ad44:	d01f      	beq.n	800ad86 <__multiply+0x132>
 800ad46:	6834      	ldr	r4, [r6, #0]
 800ad48:	f105 0114 	add.w	r1, r5, #20
 800ad4c:	46b6      	mov	lr, r6
 800ad4e:	f04f 0a00 	mov.w	sl, #0
 800ad52:	880a      	ldrh	r2, [r1, #0]
 800ad54:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ad58:	fb09 b202 	mla	r2, r9, r2, fp
 800ad5c:	4492      	add	sl, r2
 800ad5e:	b2a4      	uxth	r4, r4
 800ad60:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ad64:	f84e 4b04 	str.w	r4, [lr], #4
 800ad68:	f851 4b04 	ldr.w	r4, [r1], #4
 800ad6c:	f8be 2000 	ldrh.w	r2, [lr]
 800ad70:	0c24      	lsrs	r4, r4, #16
 800ad72:	fb09 2404 	mla	r4, r9, r4, r2
 800ad76:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ad7a:	458c      	cmp	ip, r1
 800ad7c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ad80:	d8e7      	bhi.n	800ad52 <__multiply+0xfe>
 800ad82:	9a01      	ldr	r2, [sp, #4]
 800ad84:	50b4      	str	r4, [r6, r2]
 800ad86:	3604      	adds	r6, #4
 800ad88:	e7a3      	b.n	800acd2 <__multiply+0x7e>
 800ad8a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d1a5      	bne.n	800acde <__multiply+0x8a>
 800ad92:	3f01      	subs	r7, #1
 800ad94:	e7a1      	b.n	800acda <__multiply+0x86>
 800ad96:	bf00      	nop
 800ad98:	0800be6b 	.word	0x0800be6b
 800ad9c:	0800be7c 	.word	0x0800be7c

0800ada0 <__pow5mult>:
 800ada0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ada4:	4615      	mov	r5, r2
 800ada6:	f012 0203 	ands.w	r2, r2, #3
 800adaa:	4606      	mov	r6, r0
 800adac:	460f      	mov	r7, r1
 800adae:	d007      	beq.n	800adc0 <__pow5mult+0x20>
 800adb0:	4c25      	ldr	r4, [pc, #148]	; (800ae48 <__pow5mult+0xa8>)
 800adb2:	3a01      	subs	r2, #1
 800adb4:	2300      	movs	r3, #0
 800adb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800adba:	f7ff fe9b 	bl	800aaf4 <__multadd>
 800adbe:	4607      	mov	r7, r0
 800adc0:	10ad      	asrs	r5, r5, #2
 800adc2:	d03d      	beq.n	800ae40 <__pow5mult+0xa0>
 800adc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800adc6:	b97c      	cbnz	r4, 800ade8 <__pow5mult+0x48>
 800adc8:	2010      	movs	r0, #16
 800adca:	f7ff fe1d 	bl	800aa08 <malloc>
 800adce:	4602      	mov	r2, r0
 800add0:	6270      	str	r0, [r6, #36]	; 0x24
 800add2:	b928      	cbnz	r0, 800ade0 <__pow5mult+0x40>
 800add4:	4b1d      	ldr	r3, [pc, #116]	; (800ae4c <__pow5mult+0xac>)
 800add6:	481e      	ldr	r0, [pc, #120]	; (800ae50 <__pow5mult+0xb0>)
 800add8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800addc:	f000 fb74 	bl	800b4c8 <__assert_func>
 800ade0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ade4:	6004      	str	r4, [r0, #0]
 800ade6:	60c4      	str	r4, [r0, #12]
 800ade8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800adec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800adf0:	b94c      	cbnz	r4, 800ae06 <__pow5mult+0x66>
 800adf2:	f240 2171 	movw	r1, #625	; 0x271
 800adf6:	4630      	mov	r0, r6
 800adf8:	f7ff ff16 	bl	800ac28 <__i2b>
 800adfc:	2300      	movs	r3, #0
 800adfe:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae02:	4604      	mov	r4, r0
 800ae04:	6003      	str	r3, [r0, #0]
 800ae06:	f04f 0900 	mov.w	r9, #0
 800ae0a:	07eb      	lsls	r3, r5, #31
 800ae0c:	d50a      	bpl.n	800ae24 <__pow5mult+0x84>
 800ae0e:	4639      	mov	r1, r7
 800ae10:	4622      	mov	r2, r4
 800ae12:	4630      	mov	r0, r6
 800ae14:	f7ff ff1e 	bl	800ac54 <__multiply>
 800ae18:	4639      	mov	r1, r7
 800ae1a:	4680      	mov	r8, r0
 800ae1c:	4630      	mov	r0, r6
 800ae1e:	f7ff fe47 	bl	800aab0 <_Bfree>
 800ae22:	4647      	mov	r7, r8
 800ae24:	106d      	asrs	r5, r5, #1
 800ae26:	d00b      	beq.n	800ae40 <__pow5mult+0xa0>
 800ae28:	6820      	ldr	r0, [r4, #0]
 800ae2a:	b938      	cbnz	r0, 800ae3c <__pow5mult+0x9c>
 800ae2c:	4622      	mov	r2, r4
 800ae2e:	4621      	mov	r1, r4
 800ae30:	4630      	mov	r0, r6
 800ae32:	f7ff ff0f 	bl	800ac54 <__multiply>
 800ae36:	6020      	str	r0, [r4, #0]
 800ae38:	f8c0 9000 	str.w	r9, [r0]
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	e7e4      	b.n	800ae0a <__pow5mult+0x6a>
 800ae40:	4638      	mov	r0, r7
 800ae42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae46:	bf00      	nop
 800ae48:	0800bfd0 	.word	0x0800bfd0
 800ae4c:	0800bdf5 	.word	0x0800bdf5
 800ae50:	0800be7c 	.word	0x0800be7c

0800ae54 <__lshift>:
 800ae54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae58:	460c      	mov	r4, r1
 800ae5a:	6849      	ldr	r1, [r1, #4]
 800ae5c:	6923      	ldr	r3, [r4, #16]
 800ae5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae62:	68a3      	ldr	r3, [r4, #8]
 800ae64:	4607      	mov	r7, r0
 800ae66:	4691      	mov	r9, r2
 800ae68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae6c:	f108 0601 	add.w	r6, r8, #1
 800ae70:	42b3      	cmp	r3, r6
 800ae72:	db0b      	blt.n	800ae8c <__lshift+0x38>
 800ae74:	4638      	mov	r0, r7
 800ae76:	f7ff fddb 	bl	800aa30 <_Balloc>
 800ae7a:	4605      	mov	r5, r0
 800ae7c:	b948      	cbnz	r0, 800ae92 <__lshift+0x3e>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	4b28      	ldr	r3, [pc, #160]	; (800af24 <__lshift+0xd0>)
 800ae82:	4829      	ldr	r0, [pc, #164]	; (800af28 <__lshift+0xd4>)
 800ae84:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ae88:	f000 fb1e 	bl	800b4c8 <__assert_func>
 800ae8c:	3101      	adds	r1, #1
 800ae8e:	005b      	lsls	r3, r3, #1
 800ae90:	e7ee      	b.n	800ae70 <__lshift+0x1c>
 800ae92:	2300      	movs	r3, #0
 800ae94:	f100 0114 	add.w	r1, r0, #20
 800ae98:	f100 0210 	add.w	r2, r0, #16
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	4553      	cmp	r3, sl
 800aea0:	db33      	blt.n	800af0a <__lshift+0xb6>
 800aea2:	6920      	ldr	r0, [r4, #16]
 800aea4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aea8:	f104 0314 	add.w	r3, r4, #20
 800aeac:	f019 091f 	ands.w	r9, r9, #31
 800aeb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aeb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aeb8:	d02b      	beq.n	800af12 <__lshift+0xbe>
 800aeba:	f1c9 0e20 	rsb	lr, r9, #32
 800aebe:	468a      	mov	sl, r1
 800aec0:	2200      	movs	r2, #0
 800aec2:	6818      	ldr	r0, [r3, #0]
 800aec4:	fa00 f009 	lsl.w	r0, r0, r9
 800aec8:	4302      	orrs	r2, r0
 800aeca:	f84a 2b04 	str.w	r2, [sl], #4
 800aece:	f853 2b04 	ldr.w	r2, [r3], #4
 800aed2:	459c      	cmp	ip, r3
 800aed4:	fa22 f20e 	lsr.w	r2, r2, lr
 800aed8:	d8f3      	bhi.n	800aec2 <__lshift+0x6e>
 800aeda:	ebac 0304 	sub.w	r3, ip, r4
 800aede:	3b15      	subs	r3, #21
 800aee0:	f023 0303 	bic.w	r3, r3, #3
 800aee4:	3304      	adds	r3, #4
 800aee6:	f104 0015 	add.w	r0, r4, #21
 800aeea:	4584      	cmp	ip, r0
 800aeec:	bf38      	it	cc
 800aeee:	2304      	movcc	r3, #4
 800aef0:	50ca      	str	r2, [r1, r3]
 800aef2:	b10a      	cbz	r2, 800aef8 <__lshift+0xa4>
 800aef4:	f108 0602 	add.w	r6, r8, #2
 800aef8:	3e01      	subs	r6, #1
 800aefa:	4638      	mov	r0, r7
 800aefc:	612e      	str	r6, [r5, #16]
 800aefe:	4621      	mov	r1, r4
 800af00:	f7ff fdd6 	bl	800aab0 <_Bfree>
 800af04:	4628      	mov	r0, r5
 800af06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800af0e:	3301      	adds	r3, #1
 800af10:	e7c5      	b.n	800ae9e <__lshift+0x4a>
 800af12:	3904      	subs	r1, #4
 800af14:	f853 2b04 	ldr.w	r2, [r3], #4
 800af18:	f841 2f04 	str.w	r2, [r1, #4]!
 800af1c:	459c      	cmp	ip, r3
 800af1e:	d8f9      	bhi.n	800af14 <__lshift+0xc0>
 800af20:	e7ea      	b.n	800aef8 <__lshift+0xa4>
 800af22:	bf00      	nop
 800af24:	0800be6b 	.word	0x0800be6b
 800af28:	0800be7c 	.word	0x0800be7c

0800af2c <__mcmp>:
 800af2c:	b530      	push	{r4, r5, lr}
 800af2e:	6902      	ldr	r2, [r0, #16]
 800af30:	690c      	ldr	r4, [r1, #16]
 800af32:	1b12      	subs	r2, r2, r4
 800af34:	d10e      	bne.n	800af54 <__mcmp+0x28>
 800af36:	f100 0314 	add.w	r3, r0, #20
 800af3a:	3114      	adds	r1, #20
 800af3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800af40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800af44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800af48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800af4c:	42a5      	cmp	r5, r4
 800af4e:	d003      	beq.n	800af58 <__mcmp+0x2c>
 800af50:	d305      	bcc.n	800af5e <__mcmp+0x32>
 800af52:	2201      	movs	r2, #1
 800af54:	4610      	mov	r0, r2
 800af56:	bd30      	pop	{r4, r5, pc}
 800af58:	4283      	cmp	r3, r0
 800af5a:	d3f3      	bcc.n	800af44 <__mcmp+0x18>
 800af5c:	e7fa      	b.n	800af54 <__mcmp+0x28>
 800af5e:	f04f 32ff 	mov.w	r2, #4294967295
 800af62:	e7f7      	b.n	800af54 <__mcmp+0x28>

0800af64 <__mdiff>:
 800af64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af68:	460c      	mov	r4, r1
 800af6a:	4606      	mov	r6, r0
 800af6c:	4611      	mov	r1, r2
 800af6e:	4620      	mov	r0, r4
 800af70:	4617      	mov	r7, r2
 800af72:	f7ff ffdb 	bl	800af2c <__mcmp>
 800af76:	1e05      	subs	r5, r0, #0
 800af78:	d110      	bne.n	800af9c <__mdiff+0x38>
 800af7a:	4629      	mov	r1, r5
 800af7c:	4630      	mov	r0, r6
 800af7e:	f7ff fd57 	bl	800aa30 <_Balloc>
 800af82:	b930      	cbnz	r0, 800af92 <__mdiff+0x2e>
 800af84:	4b39      	ldr	r3, [pc, #228]	; (800b06c <__mdiff+0x108>)
 800af86:	4602      	mov	r2, r0
 800af88:	f240 2132 	movw	r1, #562	; 0x232
 800af8c:	4838      	ldr	r0, [pc, #224]	; (800b070 <__mdiff+0x10c>)
 800af8e:	f000 fa9b 	bl	800b4c8 <__assert_func>
 800af92:	2301      	movs	r3, #1
 800af94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af9c:	bfa4      	itt	ge
 800af9e:	463b      	movge	r3, r7
 800afa0:	4627      	movge	r7, r4
 800afa2:	4630      	mov	r0, r6
 800afa4:	6879      	ldr	r1, [r7, #4]
 800afa6:	bfa6      	itte	ge
 800afa8:	461c      	movge	r4, r3
 800afaa:	2500      	movge	r5, #0
 800afac:	2501      	movlt	r5, #1
 800afae:	f7ff fd3f 	bl	800aa30 <_Balloc>
 800afb2:	b920      	cbnz	r0, 800afbe <__mdiff+0x5a>
 800afb4:	4b2d      	ldr	r3, [pc, #180]	; (800b06c <__mdiff+0x108>)
 800afb6:	4602      	mov	r2, r0
 800afb8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800afbc:	e7e6      	b.n	800af8c <__mdiff+0x28>
 800afbe:	693e      	ldr	r6, [r7, #16]
 800afc0:	60c5      	str	r5, [r0, #12]
 800afc2:	6925      	ldr	r5, [r4, #16]
 800afc4:	f107 0114 	add.w	r1, r7, #20
 800afc8:	f104 0914 	add.w	r9, r4, #20
 800afcc:	f100 0e14 	add.w	lr, r0, #20
 800afd0:	f107 0210 	add.w	r2, r7, #16
 800afd4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800afd8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800afdc:	46f2      	mov	sl, lr
 800afde:	2700      	movs	r7, #0
 800afe0:	f859 3b04 	ldr.w	r3, [r9], #4
 800afe4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800afe8:	fa1f f883 	uxth.w	r8, r3
 800afec:	fa17 f78b 	uxtah	r7, r7, fp
 800aff0:	0c1b      	lsrs	r3, r3, #16
 800aff2:	eba7 0808 	sub.w	r8, r7, r8
 800aff6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800affa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800affe:	fa1f f888 	uxth.w	r8, r8
 800b002:	141f      	asrs	r7, r3, #16
 800b004:	454d      	cmp	r5, r9
 800b006:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b00a:	f84a 3b04 	str.w	r3, [sl], #4
 800b00e:	d8e7      	bhi.n	800afe0 <__mdiff+0x7c>
 800b010:	1b2b      	subs	r3, r5, r4
 800b012:	3b15      	subs	r3, #21
 800b014:	f023 0303 	bic.w	r3, r3, #3
 800b018:	3304      	adds	r3, #4
 800b01a:	3415      	adds	r4, #21
 800b01c:	42a5      	cmp	r5, r4
 800b01e:	bf38      	it	cc
 800b020:	2304      	movcc	r3, #4
 800b022:	4419      	add	r1, r3
 800b024:	4473      	add	r3, lr
 800b026:	469e      	mov	lr, r3
 800b028:	460d      	mov	r5, r1
 800b02a:	4565      	cmp	r5, ip
 800b02c:	d30e      	bcc.n	800b04c <__mdiff+0xe8>
 800b02e:	f10c 0203 	add.w	r2, ip, #3
 800b032:	1a52      	subs	r2, r2, r1
 800b034:	f022 0203 	bic.w	r2, r2, #3
 800b038:	3903      	subs	r1, #3
 800b03a:	458c      	cmp	ip, r1
 800b03c:	bf38      	it	cc
 800b03e:	2200      	movcc	r2, #0
 800b040:	441a      	add	r2, r3
 800b042:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b046:	b17b      	cbz	r3, 800b068 <__mdiff+0x104>
 800b048:	6106      	str	r6, [r0, #16]
 800b04a:	e7a5      	b.n	800af98 <__mdiff+0x34>
 800b04c:	f855 8b04 	ldr.w	r8, [r5], #4
 800b050:	fa17 f488 	uxtah	r4, r7, r8
 800b054:	1422      	asrs	r2, r4, #16
 800b056:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b05a:	b2a4      	uxth	r4, r4
 800b05c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b060:	f84e 4b04 	str.w	r4, [lr], #4
 800b064:	1417      	asrs	r7, r2, #16
 800b066:	e7e0      	b.n	800b02a <__mdiff+0xc6>
 800b068:	3e01      	subs	r6, #1
 800b06a:	e7ea      	b.n	800b042 <__mdiff+0xde>
 800b06c:	0800be6b 	.word	0x0800be6b
 800b070:	0800be7c 	.word	0x0800be7c

0800b074 <__d2b>:
 800b074:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b078:	4689      	mov	r9, r1
 800b07a:	2101      	movs	r1, #1
 800b07c:	ec57 6b10 	vmov	r6, r7, d0
 800b080:	4690      	mov	r8, r2
 800b082:	f7ff fcd5 	bl	800aa30 <_Balloc>
 800b086:	4604      	mov	r4, r0
 800b088:	b930      	cbnz	r0, 800b098 <__d2b+0x24>
 800b08a:	4602      	mov	r2, r0
 800b08c:	4b25      	ldr	r3, [pc, #148]	; (800b124 <__d2b+0xb0>)
 800b08e:	4826      	ldr	r0, [pc, #152]	; (800b128 <__d2b+0xb4>)
 800b090:	f240 310a 	movw	r1, #778	; 0x30a
 800b094:	f000 fa18 	bl	800b4c8 <__assert_func>
 800b098:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b09c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b0a0:	bb35      	cbnz	r5, 800b0f0 <__d2b+0x7c>
 800b0a2:	2e00      	cmp	r6, #0
 800b0a4:	9301      	str	r3, [sp, #4]
 800b0a6:	d028      	beq.n	800b0fa <__d2b+0x86>
 800b0a8:	4668      	mov	r0, sp
 800b0aa:	9600      	str	r6, [sp, #0]
 800b0ac:	f7ff fd8c 	bl	800abc8 <__lo0bits>
 800b0b0:	9900      	ldr	r1, [sp, #0]
 800b0b2:	b300      	cbz	r0, 800b0f6 <__d2b+0x82>
 800b0b4:	9a01      	ldr	r2, [sp, #4]
 800b0b6:	f1c0 0320 	rsb	r3, r0, #32
 800b0ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b0be:	430b      	orrs	r3, r1
 800b0c0:	40c2      	lsrs	r2, r0
 800b0c2:	6163      	str	r3, [r4, #20]
 800b0c4:	9201      	str	r2, [sp, #4]
 800b0c6:	9b01      	ldr	r3, [sp, #4]
 800b0c8:	61a3      	str	r3, [r4, #24]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	bf14      	ite	ne
 800b0ce:	2202      	movne	r2, #2
 800b0d0:	2201      	moveq	r2, #1
 800b0d2:	6122      	str	r2, [r4, #16]
 800b0d4:	b1d5      	cbz	r5, 800b10c <__d2b+0x98>
 800b0d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b0da:	4405      	add	r5, r0
 800b0dc:	f8c9 5000 	str.w	r5, [r9]
 800b0e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b0e4:	f8c8 0000 	str.w	r0, [r8]
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	b003      	add	sp, #12
 800b0ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0f4:	e7d5      	b.n	800b0a2 <__d2b+0x2e>
 800b0f6:	6161      	str	r1, [r4, #20]
 800b0f8:	e7e5      	b.n	800b0c6 <__d2b+0x52>
 800b0fa:	a801      	add	r0, sp, #4
 800b0fc:	f7ff fd64 	bl	800abc8 <__lo0bits>
 800b100:	9b01      	ldr	r3, [sp, #4]
 800b102:	6163      	str	r3, [r4, #20]
 800b104:	2201      	movs	r2, #1
 800b106:	6122      	str	r2, [r4, #16]
 800b108:	3020      	adds	r0, #32
 800b10a:	e7e3      	b.n	800b0d4 <__d2b+0x60>
 800b10c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b110:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b114:	f8c9 0000 	str.w	r0, [r9]
 800b118:	6918      	ldr	r0, [r3, #16]
 800b11a:	f7ff fd35 	bl	800ab88 <__hi0bits>
 800b11e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b122:	e7df      	b.n	800b0e4 <__d2b+0x70>
 800b124:	0800be6b 	.word	0x0800be6b
 800b128:	0800be7c 	.word	0x0800be7c

0800b12c <_calloc_r>:
 800b12c:	b513      	push	{r0, r1, r4, lr}
 800b12e:	434a      	muls	r2, r1
 800b130:	4611      	mov	r1, r2
 800b132:	9201      	str	r2, [sp, #4]
 800b134:	f7fd ff4c 	bl	8008fd0 <_malloc_r>
 800b138:	4604      	mov	r4, r0
 800b13a:	b118      	cbz	r0, 800b144 <_calloc_r+0x18>
 800b13c:	9a01      	ldr	r2, [sp, #4]
 800b13e:	2100      	movs	r1, #0
 800b140:	f7fd ff3d 	bl	8008fbe <memset>
 800b144:	4620      	mov	r0, r4
 800b146:	b002      	add	sp, #8
 800b148:	bd10      	pop	{r4, pc}
	...

0800b14c <_free_r>:
 800b14c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b14e:	2900      	cmp	r1, #0
 800b150:	d048      	beq.n	800b1e4 <_free_r+0x98>
 800b152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b156:	9001      	str	r0, [sp, #4]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	f1a1 0404 	sub.w	r4, r1, #4
 800b15e:	bfb8      	it	lt
 800b160:	18e4      	addlt	r4, r4, r3
 800b162:	f7ff fc59 	bl	800aa18 <__malloc_lock>
 800b166:	4a20      	ldr	r2, [pc, #128]	; (800b1e8 <_free_r+0x9c>)
 800b168:	9801      	ldr	r0, [sp, #4]
 800b16a:	6813      	ldr	r3, [r2, #0]
 800b16c:	4615      	mov	r5, r2
 800b16e:	b933      	cbnz	r3, 800b17e <_free_r+0x32>
 800b170:	6063      	str	r3, [r4, #4]
 800b172:	6014      	str	r4, [r2, #0]
 800b174:	b003      	add	sp, #12
 800b176:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b17a:	f7ff bc53 	b.w	800aa24 <__malloc_unlock>
 800b17e:	42a3      	cmp	r3, r4
 800b180:	d90b      	bls.n	800b19a <_free_r+0x4e>
 800b182:	6821      	ldr	r1, [r4, #0]
 800b184:	1862      	adds	r2, r4, r1
 800b186:	4293      	cmp	r3, r2
 800b188:	bf04      	itt	eq
 800b18a:	681a      	ldreq	r2, [r3, #0]
 800b18c:	685b      	ldreq	r3, [r3, #4]
 800b18e:	6063      	str	r3, [r4, #4]
 800b190:	bf04      	itt	eq
 800b192:	1852      	addeq	r2, r2, r1
 800b194:	6022      	streq	r2, [r4, #0]
 800b196:	602c      	str	r4, [r5, #0]
 800b198:	e7ec      	b.n	800b174 <_free_r+0x28>
 800b19a:	461a      	mov	r2, r3
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	b10b      	cbz	r3, 800b1a4 <_free_r+0x58>
 800b1a0:	42a3      	cmp	r3, r4
 800b1a2:	d9fa      	bls.n	800b19a <_free_r+0x4e>
 800b1a4:	6811      	ldr	r1, [r2, #0]
 800b1a6:	1855      	adds	r5, r2, r1
 800b1a8:	42a5      	cmp	r5, r4
 800b1aa:	d10b      	bne.n	800b1c4 <_free_r+0x78>
 800b1ac:	6824      	ldr	r4, [r4, #0]
 800b1ae:	4421      	add	r1, r4
 800b1b0:	1854      	adds	r4, r2, r1
 800b1b2:	42a3      	cmp	r3, r4
 800b1b4:	6011      	str	r1, [r2, #0]
 800b1b6:	d1dd      	bne.n	800b174 <_free_r+0x28>
 800b1b8:	681c      	ldr	r4, [r3, #0]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	6053      	str	r3, [r2, #4]
 800b1be:	4421      	add	r1, r4
 800b1c0:	6011      	str	r1, [r2, #0]
 800b1c2:	e7d7      	b.n	800b174 <_free_r+0x28>
 800b1c4:	d902      	bls.n	800b1cc <_free_r+0x80>
 800b1c6:	230c      	movs	r3, #12
 800b1c8:	6003      	str	r3, [r0, #0]
 800b1ca:	e7d3      	b.n	800b174 <_free_r+0x28>
 800b1cc:	6825      	ldr	r5, [r4, #0]
 800b1ce:	1961      	adds	r1, r4, r5
 800b1d0:	428b      	cmp	r3, r1
 800b1d2:	bf04      	itt	eq
 800b1d4:	6819      	ldreq	r1, [r3, #0]
 800b1d6:	685b      	ldreq	r3, [r3, #4]
 800b1d8:	6063      	str	r3, [r4, #4]
 800b1da:	bf04      	itt	eq
 800b1dc:	1949      	addeq	r1, r1, r5
 800b1de:	6021      	streq	r1, [r4, #0]
 800b1e0:	6054      	str	r4, [r2, #4]
 800b1e2:	e7c7      	b.n	800b174 <_free_r+0x28>
 800b1e4:	b003      	add	sp, #12
 800b1e6:	bd30      	pop	{r4, r5, pc}
 800b1e8:	20002f58 	.word	0x20002f58

0800b1ec <__ssputs_r>:
 800b1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1f0:	688e      	ldr	r6, [r1, #8]
 800b1f2:	429e      	cmp	r6, r3
 800b1f4:	4682      	mov	sl, r0
 800b1f6:	460c      	mov	r4, r1
 800b1f8:	4690      	mov	r8, r2
 800b1fa:	461f      	mov	r7, r3
 800b1fc:	d838      	bhi.n	800b270 <__ssputs_r+0x84>
 800b1fe:	898a      	ldrh	r2, [r1, #12]
 800b200:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b204:	d032      	beq.n	800b26c <__ssputs_r+0x80>
 800b206:	6825      	ldr	r5, [r4, #0]
 800b208:	6909      	ldr	r1, [r1, #16]
 800b20a:	eba5 0901 	sub.w	r9, r5, r1
 800b20e:	6965      	ldr	r5, [r4, #20]
 800b210:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b214:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b218:	3301      	adds	r3, #1
 800b21a:	444b      	add	r3, r9
 800b21c:	106d      	asrs	r5, r5, #1
 800b21e:	429d      	cmp	r5, r3
 800b220:	bf38      	it	cc
 800b222:	461d      	movcc	r5, r3
 800b224:	0553      	lsls	r3, r2, #21
 800b226:	d531      	bpl.n	800b28c <__ssputs_r+0xa0>
 800b228:	4629      	mov	r1, r5
 800b22a:	f7fd fed1 	bl	8008fd0 <_malloc_r>
 800b22e:	4606      	mov	r6, r0
 800b230:	b950      	cbnz	r0, 800b248 <__ssputs_r+0x5c>
 800b232:	230c      	movs	r3, #12
 800b234:	f8ca 3000 	str.w	r3, [sl]
 800b238:	89a3      	ldrh	r3, [r4, #12]
 800b23a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b23e:	81a3      	strh	r3, [r4, #12]
 800b240:	f04f 30ff 	mov.w	r0, #4294967295
 800b244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b248:	6921      	ldr	r1, [r4, #16]
 800b24a:	464a      	mov	r2, r9
 800b24c:	f7fd fea9 	bl	8008fa2 <memcpy>
 800b250:	89a3      	ldrh	r3, [r4, #12]
 800b252:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b25a:	81a3      	strh	r3, [r4, #12]
 800b25c:	6126      	str	r6, [r4, #16]
 800b25e:	6165      	str	r5, [r4, #20]
 800b260:	444e      	add	r6, r9
 800b262:	eba5 0509 	sub.w	r5, r5, r9
 800b266:	6026      	str	r6, [r4, #0]
 800b268:	60a5      	str	r5, [r4, #8]
 800b26a:	463e      	mov	r6, r7
 800b26c:	42be      	cmp	r6, r7
 800b26e:	d900      	bls.n	800b272 <__ssputs_r+0x86>
 800b270:	463e      	mov	r6, r7
 800b272:	4632      	mov	r2, r6
 800b274:	6820      	ldr	r0, [r4, #0]
 800b276:	4641      	mov	r1, r8
 800b278:	f000 f968 	bl	800b54c <memmove>
 800b27c:	68a3      	ldr	r3, [r4, #8]
 800b27e:	6822      	ldr	r2, [r4, #0]
 800b280:	1b9b      	subs	r3, r3, r6
 800b282:	4432      	add	r2, r6
 800b284:	60a3      	str	r3, [r4, #8]
 800b286:	6022      	str	r2, [r4, #0]
 800b288:	2000      	movs	r0, #0
 800b28a:	e7db      	b.n	800b244 <__ssputs_r+0x58>
 800b28c:	462a      	mov	r2, r5
 800b28e:	f000 f977 	bl	800b580 <_realloc_r>
 800b292:	4606      	mov	r6, r0
 800b294:	2800      	cmp	r0, #0
 800b296:	d1e1      	bne.n	800b25c <__ssputs_r+0x70>
 800b298:	6921      	ldr	r1, [r4, #16]
 800b29a:	4650      	mov	r0, sl
 800b29c:	f7ff ff56 	bl	800b14c <_free_r>
 800b2a0:	e7c7      	b.n	800b232 <__ssputs_r+0x46>
	...

0800b2a4 <_svfiprintf_r>:
 800b2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a8:	4698      	mov	r8, r3
 800b2aa:	898b      	ldrh	r3, [r1, #12]
 800b2ac:	061b      	lsls	r3, r3, #24
 800b2ae:	b09d      	sub	sp, #116	; 0x74
 800b2b0:	4607      	mov	r7, r0
 800b2b2:	460d      	mov	r5, r1
 800b2b4:	4614      	mov	r4, r2
 800b2b6:	d50e      	bpl.n	800b2d6 <_svfiprintf_r+0x32>
 800b2b8:	690b      	ldr	r3, [r1, #16]
 800b2ba:	b963      	cbnz	r3, 800b2d6 <_svfiprintf_r+0x32>
 800b2bc:	2140      	movs	r1, #64	; 0x40
 800b2be:	f7fd fe87 	bl	8008fd0 <_malloc_r>
 800b2c2:	6028      	str	r0, [r5, #0]
 800b2c4:	6128      	str	r0, [r5, #16]
 800b2c6:	b920      	cbnz	r0, 800b2d2 <_svfiprintf_r+0x2e>
 800b2c8:	230c      	movs	r3, #12
 800b2ca:	603b      	str	r3, [r7, #0]
 800b2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b2d0:	e0d1      	b.n	800b476 <_svfiprintf_r+0x1d2>
 800b2d2:	2340      	movs	r3, #64	; 0x40
 800b2d4:	616b      	str	r3, [r5, #20]
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b2da:	2320      	movs	r3, #32
 800b2dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2e4:	2330      	movs	r3, #48	; 0x30
 800b2e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b490 <_svfiprintf_r+0x1ec>
 800b2ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2ee:	f04f 0901 	mov.w	r9, #1
 800b2f2:	4623      	mov	r3, r4
 800b2f4:	469a      	mov	sl, r3
 800b2f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2fa:	b10a      	cbz	r2, 800b300 <_svfiprintf_r+0x5c>
 800b2fc:	2a25      	cmp	r2, #37	; 0x25
 800b2fe:	d1f9      	bne.n	800b2f4 <_svfiprintf_r+0x50>
 800b300:	ebba 0b04 	subs.w	fp, sl, r4
 800b304:	d00b      	beq.n	800b31e <_svfiprintf_r+0x7a>
 800b306:	465b      	mov	r3, fp
 800b308:	4622      	mov	r2, r4
 800b30a:	4629      	mov	r1, r5
 800b30c:	4638      	mov	r0, r7
 800b30e:	f7ff ff6d 	bl	800b1ec <__ssputs_r>
 800b312:	3001      	adds	r0, #1
 800b314:	f000 80aa 	beq.w	800b46c <_svfiprintf_r+0x1c8>
 800b318:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b31a:	445a      	add	r2, fp
 800b31c:	9209      	str	r2, [sp, #36]	; 0x24
 800b31e:	f89a 3000 	ldrb.w	r3, [sl]
 800b322:	2b00      	cmp	r3, #0
 800b324:	f000 80a2 	beq.w	800b46c <_svfiprintf_r+0x1c8>
 800b328:	2300      	movs	r3, #0
 800b32a:	f04f 32ff 	mov.w	r2, #4294967295
 800b32e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b332:	f10a 0a01 	add.w	sl, sl, #1
 800b336:	9304      	str	r3, [sp, #16]
 800b338:	9307      	str	r3, [sp, #28]
 800b33a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b33e:	931a      	str	r3, [sp, #104]	; 0x68
 800b340:	4654      	mov	r4, sl
 800b342:	2205      	movs	r2, #5
 800b344:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b348:	4851      	ldr	r0, [pc, #324]	; (800b490 <_svfiprintf_r+0x1ec>)
 800b34a:	f7f4 ff71 	bl	8000230 <memchr>
 800b34e:	9a04      	ldr	r2, [sp, #16]
 800b350:	b9d8      	cbnz	r0, 800b38a <_svfiprintf_r+0xe6>
 800b352:	06d0      	lsls	r0, r2, #27
 800b354:	bf44      	itt	mi
 800b356:	2320      	movmi	r3, #32
 800b358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b35c:	0711      	lsls	r1, r2, #28
 800b35e:	bf44      	itt	mi
 800b360:	232b      	movmi	r3, #43	; 0x2b
 800b362:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b366:	f89a 3000 	ldrb.w	r3, [sl]
 800b36a:	2b2a      	cmp	r3, #42	; 0x2a
 800b36c:	d015      	beq.n	800b39a <_svfiprintf_r+0xf6>
 800b36e:	9a07      	ldr	r2, [sp, #28]
 800b370:	4654      	mov	r4, sl
 800b372:	2000      	movs	r0, #0
 800b374:	f04f 0c0a 	mov.w	ip, #10
 800b378:	4621      	mov	r1, r4
 800b37a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b37e:	3b30      	subs	r3, #48	; 0x30
 800b380:	2b09      	cmp	r3, #9
 800b382:	d94e      	bls.n	800b422 <_svfiprintf_r+0x17e>
 800b384:	b1b0      	cbz	r0, 800b3b4 <_svfiprintf_r+0x110>
 800b386:	9207      	str	r2, [sp, #28]
 800b388:	e014      	b.n	800b3b4 <_svfiprintf_r+0x110>
 800b38a:	eba0 0308 	sub.w	r3, r0, r8
 800b38e:	fa09 f303 	lsl.w	r3, r9, r3
 800b392:	4313      	orrs	r3, r2
 800b394:	9304      	str	r3, [sp, #16]
 800b396:	46a2      	mov	sl, r4
 800b398:	e7d2      	b.n	800b340 <_svfiprintf_r+0x9c>
 800b39a:	9b03      	ldr	r3, [sp, #12]
 800b39c:	1d19      	adds	r1, r3, #4
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	9103      	str	r1, [sp, #12]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	bfbb      	ittet	lt
 800b3a6:	425b      	neglt	r3, r3
 800b3a8:	f042 0202 	orrlt.w	r2, r2, #2
 800b3ac:	9307      	strge	r3, [sp, #28]
 800b3ae:	9307      	strlt	r3, [sp, #28]
 800b3b0:	bfb8      	it	lt
 800b3b2:	9204      	strlt	r2, [sp, #16]
 800b3b4:	7823      	ldrb	r3, [r4, #0]
 800b3b6:	2b2e      	cmp	r3, #46	; 0x2e
 800b3b8:	d10c      	bne.n	800b3d4 <_svfiprintf_r+0x130>
 800b3ba:	7863      	ldrb	r3, [r4, #1]
 800b3bc:	2b2a      	cmp	r3, #42	; 0x2a
 800b3be:	d135      	bne.n	800b42c <_svfiprintf_r+0x188>
 800b3c0:	9b03      	ldr	r3, [sp, #12]
 800b3c2:	1d1a      	adds	r2, r3, #4
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	9203      	str	r2, [sp, #12]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	bfb8      	it	lt
 800b3cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3d0:	3402      	adds	r4, #2
 800b3d2:	9305      	str	r3, [sp, #20]
 800b3d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b4a0 <_svfiprintf_r+0x1fc>
 800b3d8:	7821      	ldrb	r1, [r4, #0]
 800b3da:	2203      	movs	r2, #3
 800b3dc:	4650      	mov	r0, sl
 800b3de:	f7f4 ff27 	bl	8000230 <memchr>
 800b3e2:	b140      	cbz	r0, 800b3f6 <_svfiprintf_r+0x152>
 800b3e4:	2340      	movs	r3, #64	; 0x40
 800b3e6:	eba0 000a 	sub.w	r0, r0, sl
 800b3ea:	fa03 f000 	lsl.w	r0, r3, r0
 800b3ee:	9b04      	ldr	r3, [sp, #16]
 800b3f0:	4303      	orrs	r3, r0
 800b3f2:	3401      	adds	r4, #1
 800b3f4:	9304      	str	r3, [sp, #16]
 800b3f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3fa:	4826      	ldr	r0, [pc, #152]	; (800b494 <_svfiprintf_r+0x1f0>)
 800b3fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b400:	2206      	movs	r2, #6
 800b402:	f7f4 ff15 	bl	8000230 <memchr>
 800b406:	2800      	cmp	r0, #0
 800b408:	d038      	beq.n	800b47c <_svfiprintf_r+0x1d8>
 800b40a:	4b23      	ldr	r3, [pc, #140]	; (800b498 <_svfiprintf_r+0x1f4>)
 800b40c:	bb1b      	cbnz	r3, 800b456 <_svfiprintf_r+0x1b2>
 800b40e:	9b03      	ldr	r3, [sp, #12]
 800b410:	3307      	adds	r3, #7
 800b412:	f023 0307 	bic.w	r3, r3, #7
 800b416:	3308      	adds	r3, #8
 800b418:	9303      	str	r3, [sp, #12]
 800b41a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b41c:	4433      	add	r3, r6
 800b41e:	9309      	str	r3, [sp, #36]	; 0x24
 800b420:	e767      	b.n	800b2f2 <_svfiprintf_r+0x4e>
 800b422:	fb0c 3202 	mla	r2, ip, r2, r3
 800b426:	460c      	mov	r4, r1
 800b428:	2001      	movs	r0, #1
 800b42a:	e7a5      	b.n	800b378 <_svfiprintf_r+0xd4>
 800b42c:	2300      	movs	r3, #0
 800b42e:	3401      	adds	r4, #1
 800b430:	9305      	str	r3, [sp, #20]
 800b432:	4619      	mov	r1, r3
 800b434:	f04f 0c0a 	mov.w	ip, #10
 800b438:	4620      	mov	r0, r4
 800b43a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b43e:	3a30      	subs	r2, #48	; 0x30
 800b440:	2a09      	cmp	r2, #9
 800b442:	d903      	bls.n	800b44c <_svfiprintf_r+0x1a8>
 800b444:	2b00      	cmp	r3, #0
 800b446:	d0c5      	beq.n	800b3d4 <_svfiprintf_r+0x130>
 800b448:	9105      	str	r1, [sp, #20]
 800b44a:	e7c3      	b.n	800b3d4 <_svfiprintf_r+0x130>
 800b44c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b450:	4604      	mov	r4, r0
 800b452:	2301      	movs	r3, #1
 800b454:	e7f0      	b.n	800b438 <_svfiprintf_r+0x194>
 800b456:	ab03      	add	r3, sp, #12
 800b458:	9300      	str	r3, [sp, #0]
 800b45a:	462a      	mov	r2, r5
 800b45c:	4b0f      	ldr	r3, [pc, #60]	; (800b49c <_svfiprintf_r+0x1f8>)
 800b45e:	a904      	add	r1, sp, #16
 800b460:	4638      	mov	r0, r7
 800b462:	f7fd feaf 	bl	80091c4 <_printf_float>
 800b466:	1c42      	adds	r2, r0, #1
 800b468:	4606      	mov	r6, r0
 800b46a:	d1d6      	bne.n	800b41a <_svfiprintf_r+0x176>
 800b46c:	89ab      	ldrh	r3, [r5, #12]
 800b46e:	065b      	lsls	r3, r3, #25
 800b470:	f53f af2c 	bmi.w	800b2cc <_svfiprintf_r+0x28>
 800b474:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b476:	b01d      	add	sp, #116	; 0x74
 800b478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b47c:	ab03      	add	r3, sp, #12
 800b47e:	9300      	str	r3, [sp, #0]
 800b480:	462a      	mov	r2, r5
 800b482:	4b06      	ldr	r3, [pc, #24]	; (800b49c <_svfiprintf_r+0x1f8>)
 800b484:	a904      	add	r1, sp, #16
 800b486:	4638      	mov	r0, r7
 800b488:	f7fe f940 	bl	800970c <_printf_i>
 800b48c:	e7eb      	b.n	800b466 <_svfiprintf_r+0x1c2>
 800b48e:	bf00      	nop
 800b490:	0800bfdc 	.word	0x0800bfdc
 800b494:	0800bfe6 	.word	0x0800bfe6
 800b498:	080091c5 	.word	0x080091c5
 800b49c:	0800b1ed 	.word	0x0800b1ed
 800b4a0:	0800bfe2 	.word	0x0800bfe2

0800b4a4 <_read_r>:
 800b4a4:	b538      	push	{r3, r4, r5, lr}
 800b4a6:	4d07      	ldr	r5, [pc, #28]	; (800b4c4 <_read_r+0x20>)
 800b4a8:	4604      	mov	r4, r0
 800b4aa:	4608      	mov	r0, r1
 800b4ac:	4611      	mov	r1, r2
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	602a      	str	r2, [r5, #0]
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	f7f6 fb9a 	bl	8001bec <_read>
 800b4b8:	1c43      	adds	r3, r0, #1
 800b4ba:	d102      	bne.n	800b4c2 <_read_r+0x1e>
 800b4bc:	682b      	ldr	r3, [r5, #0]
 800b4be:	b103      	cbz	r3, 800b4c2 <_read_r+0x1e>
 800b4c0:	6023      	str	r3, [r4, #0]
 800b4c2:	bd38      	pop	{r3, r4, r5, pc}
 800b4c4:	20003300 	.word	0x20003300

0800b4c8 <__assert_func>:
 800b4c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b4ca:	4614      	mov	r4, r2
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	4b09      	ldr	r3, [pc, #36]	; (800b4f4 <__assert_func+0x2c>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4605      	mov	r5, r0
 800b4d4:	68d8      	ldr	r0, [r3, #12]
 800b4d6:	b14c      	cbz	r4, 800b4ec <__assert_func+0x24>
 800b4d8:	4b07      	ldr	r3, [pc, #28]	; (800b4f8 <__assert_func+0x30>)
 800b4da:	9100      	str	r1, [sp, #0]
 800b4dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b4e0:	4906      	ldr	r1, [pc, #24]	; (800b4fc <__assert_func+0x34>)
 800b4e2:	462b      	mov	r3, r5
 800b4e4:	f000 f80e 	bl	800b504 <fiprintf>
 800b4e8:	f000 fa98 	bl	800ba1c <abort>
 800b4ec:	4b04      	ldr	r3, [pc, #16]	; (800b500 <__assert_func+0x38>)
 800b4ee:	461c      	mov	r4, r3
 800b4f0:	e7f3      	b.n	800b4da <__assert_func+0x12>
 800b4f2:	bf00      	nop
 800b4f4:	20000010 	.word	0x20000010
 800b4f8:	0800bfed 	.word	0x0800bfed
 800b4fc:	0800bffa 	.word	0x0800bffa
 800b500:	0800c028 	.word	0x0800c028

0800b504 <fiprintf>:
 800b504:	b40e      	push	{r1, r2, r3}
 800b506:	b503      	push	{r0, r1, lr}
 800b508:	4601      	mov	r1, r0
 800b50a:	ab03      	add	r3, sp, #12
 800b50c:	4805      	ldr	r0, [pc, #20]	; (800b524 <fiprintf+0x20>)
 800b50e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b512:	6800      	ldr	r0, [r0, #0]
 800b514:	9301      	str	r3, [sp, #4]
 800b516:	f000 f883 	bl	800b620 <_vfiprintf_r>
 800b51a:	b002      	add	sp, #8
 800b51c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b520:	b003      	add	sp, #12
 800b522:	4770      	bx	lr
 800b524:	20000010 	.word	0x20000010

0800b528 <__ascii_mbtowc>:
 800b528:	b082      	sub	sp, #8
 800b52a:	b901      	cbnz	r1, 800b52e <__ascii_mbtowc+0x6>
 800b52c:	a901      	add	r1, sp, #4
 800b52e:	b142      	cbz	r2, 800b542 <__ascii_mbtowc+0x1a>
 800b530:	b14b      	cbz	r3, 800b546 <__ascii_mbtowc+0x1e>
 800b532:	7813      	ldrb	r3, [r2, #0]
 800b534:	600b      	str	r3, [r1, #0]
 800b536:	7812      	ldrb	r2, [r2, #0]
 800b538:	1e10      	subs	r0, r2, #0
 800b53a:	bf18      	it	ne
 800b53c:	2001      	movne	r0, #1
 800b53e:	b002      	add	sp, #8
 800b540:	4770      	bx	lr
 800b542:	4610      	mov	r0, r2
 800b544:	e7fb      	b.n	800b53e <__ascii_mbtowc+0x16>
 800b546:	f06f 0001 	mvn.w	r0, #1
 800b54a:	e7f8      	b.n	800b53e <__ascii_mbtowc+0x16>

0800b54c <memmove>:
 800b54c:	4288      	cmp	r0, r1
 800b54e:	b510      	push	{r4, lr}
 800b550:	eb01 0402 	add.w	r4, r1, r2
 800b554:	d902      	bls.n	800b55c <memmove+0x10>
 800b556:	4284      	cmp	r4, r0
 800b558:	4623      	mov	r3, r4
 800b55a:	d807      	bhi.n	800b56c <memmove+0x20>
 800b55c:	1e43      	subs	r3, r0, #1
 800b55e:	42a1      	cmp	r1, r4
 800b560:	d008      	beq.n	800b574 <memmove+0x28>
 800b562:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b566:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b56a:	e7f8      	b.n	800b55e <memmove+0x12>
 800b56c:	4402      	add	r2, r0
 800b56e:	4601      	mov	r1, r0
 800b570:	428a      	cmp	r2, r1
 800b572:	d100      	bne.n	800b576 <memmove+0x2a>
 800b574:	bd10      	pop	{r4, pc}
 800b576:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b57a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b57e:	e7f7      	b.n	800b570 <memmove+0x24>

0800b580 <_realloc_r>:
 800b580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b582:	4607      	mov	r7, r0
 800b584:	4614      	mov	r4, r2
 800b586:	460e      	mov	r6, r1
 800b588:	b921      	cbnz	r1, 800b594 <_realloc_r+0x14>
 800b58a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b58e:	4611      	mov	r1, r2
 800b590:	f7fd bd1e 	b.w	8008fd0 <_malloc_r>
 800b594:	b922      	cbnz	r2, 800b5a0 <_realloc_r+0x20>
 800b596:	f7ff fdd9 	bl	800b14c <_free_r>
 800b59a:	4625      	mov	r5, r4
 800b59c:	4628      	mov	r0, r5
 800b59e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5a0:	f000 faa8 	bl	800baf4 <_malloc_usable_size_r>
 800b5a4:	42a0      	cmp	r0, r4
 800b5a6:	d20f      	bcs.n	800b5c8 <_realloc_r+0x48>
 800b5a8:	4621      	mov	r1, r4
 800b5aa:	4638      	mov	r0, r7
 800b5ac:	f7fd fd10 	bl	8008fd0 <_malloc_r>
 800b5b0:	4605      	mov	r5, r0
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	d0f2      	beq.n	800b59c <_realloc_r+0x1c>
 800b5b6:	4631      	mov	r1, r6
 800b5b8:	4622      	mov	r2, r4
 800b5ba:	f7fd fcf2 	bl	8008fa2 <memcpy>
 800b5be:	4631      	mov	r1, r6
 800b5c0:	4638      	mov	r0, r7
 800b5c2:	f7ff fdc3 	bl	800b14c <_free_r>
 800b5c6:	e7e9      	b.n	800b59c <_realloc_r+0x1c>
 800b5c8:	4635      	mov	r5, r6
 800b5ca:	e7e7      	b.n	800b59c <_realloc_r+0x1c>

0800b5cc <__sfputc_r>:
 800b5cc:	6893      	ldr	r3, [r2, #8]
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	b410      	push	{r4}
 800b5d4:	6093      	str	r3, [r2, #8]
 800b5d6:	da08      	bge.n	800b5ea <__sfputc_r+0x1e>
 800b5d8:	6994      	ldr	r4, [r2, #24]
 800b5da:	42a3      	cmp	r3, r4
 800b5dc:	db01      	blt.n	800b5e2 <__sfputc_r+0x16>
 800b5de:	290a      	cmp	r1, #10
 800b5e0:	d103      	bne.n	800b5ea <__sfputc_r+0x1e>
 800b5e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5e6:	f000 b94b 	b.w	800b880 <__swbuf_r>
 800b5ea:	6813      	ldr	r3, [r2, #0]
 800b5ec:	1c58      	adds	r0, r3, #1
 800b5ee:	6010      	str	r0, [r2, #0]
 800b5f0:	7019      	strb	r1, [r3, #0]
 800b5f2:	4608      	mov	r0, r1
 800b5f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5f8:	4770      	bx	lr

0800b5fa <__sfputs_r>:
 800b5fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fc:	4606      	mov	r6, r0
 800b5fe:	460f      	mov	r7, r1
 800b600:	4614      	mov	r4, r2
 800b602:	18d5      	adds	r5, r2, r3
 800b604:	42ac      	cmp	r4, r5
 800b606:	d101      	bne.n	800b60c <__sfputs_r+0x12>
 800b608:	2000      	movs	r0, #0
 800b60a:	e007      	b.n	800b61c <__sfputs_r+0x22>
 800b60c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b610:	463a      	mov	r2, r7
 800b612:	4630      	mov	r0, r6
 800b614:	f7ff ffda 	bl	800b5cc <__sfputc_r>
 800b618:	1c43      	adds	r3, r0, #1
 800b61a:	d1f3      	bne.n	800b604 <__sfputs_r+0xa>
 800b61c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b620 <_vfiprintf_r>:
 800b620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b624:	460d      	mov	r5, r1
 800b626:	b09d      	sub	sp, #116	; 0x74
 800b628:	4614      	mov	r4, r2
 800b62a:	4698      	mov	r8, r3
 800b62c:	4606      	mov	r6, r0
 800b62e:	b118      	cbz	r0, 800b638 <_vfiprintf_r+0x18>
 800b630:	6983      	ldr	r3, [r0, #24]
 800b632:	b90b      	cbnz	r3, 800b638 <_vfiprintf_r+0x18>
 800b634:	f7fd fbf0 	bl	8008e18 <__sinit>
 800b638:	4b89      	ldr	r3, [pc, #548]	; (800b860 <_vfiprintf_r+0x240>)
 800b63a:	429d      	cmp	r5, r3
 800b63c:	d11b      	bne.n	800b676 <_vfiprintf_r+0x56>
 800b63e:	6875      	ldr	r5, [r6, #4]
 800b640:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b642:	07d9      	lsls	r1, r3, #31
 800b644:	d405      	bmi.n	800b652 <_vfiprintf_r+0x32>
 800b646:	89ab      	ldrh	r3, [r5, #12]
 800b648:	059a      	lsls	r2, r3, #22
 800b64a:	d402      	bmi.n	800b652 <_vfiprintf_r+0x32>
 800b64c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b64e:	f7fd fca6 	bl	8008f9e <__retarget_lock_acquire_recursive>
 800b652:	89ab      	ldrh	r3, [r5, #12]
 800b654:	071b      	lsls	r3, r3, #28
 800b656:	d501      	bpl.n	800b65c <_vfiprintf_r+0x3c>
 800b658:	692b      	ldr	r3, [r5, #16]
 800b65a:	b9eb      	cbnz	r3, 800b698 <_vfiprintf_r+0x78>
 800b65c:	4629      	mov	r1, r5
 800b65e:	4630      	mov	r0, r6
 800b660:	f000 f96e 	bl	800b940 <__swsetup_r>
 800b664:	b1c0      	cbz	r0, 800b698 <_vfiprintf_r+0x78>
 800b666:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b668:	07dc      	lsls	r4, r3, #31
 800b66a:	d50e      	bpl.n	800b68a <_vfiprintf_r+0x6a>
 800b66c:	f04f 30ff 	mov.w	r0, #4294967295
 800b670:	b01d      	add	sp, #116	; 0x74
 800b672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b676:	4b7b      	ldr	r3, [pc, #492]	; (800b864 <_vfiprintf_r+0x244>)
 800b678:	429d      	cmp	r5, r3
 800b67a:	d101      	bne.n	800b680 <_vfiprintf_r+0x60>
 800b67c:	68b5      	ldr	r5, [r6, #8]
 800b67e:	e7df      	b.n	800b640 <_vfiprintf_r+0x20>
 800b680:	4b79      	ldr	r3, [pc, #484]	; (800b868 <_vfiprintf_r+0x248>)
 800b682:	429d      	cmp	r5, r3
 800b684:	bf08      	it	eq
 800b686:	68f5      	ldreq	r5, [r6, #12]
 800b688:	e7da      	b.n	800b640 <_vfiprintf_r+0x20>
 800b68a:	89ab      	ldrh	r3, [r5, #12]
 800b68c:	0598      	lsls	r0, r3, #22
 800b68e:	d4ed      	bmi.n	800b66c <_vfiprintf_r+0x4c>
 800b690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b692:	f7fd fc85 	bl	8008fa0 <__retarget_lock_release_recursive>
 800b696:	e7e9      	b.n	800b66c <_vfiprintf_r+0x4c>
 800b698:	2300      	movs	r3, #0
 800b69a:	9309      	str	r3, [sp, #36]	; 0x24
 800b69c:	2320      	movs	r3, #32
 800b69e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6a6:	2330      	movs	r3, #48	; 0x30
 800b6a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b86c <_vfiprintf_r+0x24c>
 800b6ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6b0:	f04f 0901 	mov.w	r9, #1
 800b6b4:	4623      	mov	r3, r4
 800b6b6:	469a      	mov	sl, r3
 800b6b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6bc:	b10a      	cbz	r2, 800b6c2 <_vfiprintf_r+0xa2>
 800b6be:	2a25      	cmp	r2, #37	; 0x25
 800b6c0:	d1f9      	bne.n	800b6b6 <_vfiprintf_r+0x96>
 800b6c2:	ebba 0b04 	subs.w	fp, sl, r4
 800b6c6:	d00b      	beq.n	800b6e0 <_vfiprintf_r+0xc0>
 800b6c8:	465b      	mov	r3, fp
 800b6ca:	4622      	mov	r2, r4
 800b6cc:	4629      	mov	r1, r5
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	f7ff ff93 	bl	800b5fa <__sfputs_r>
 800b6d4:	3001      	adds	r0, #1
 800b6d6:	f000 80aa 	beq.w	800b82e <_vfiprintf_r+0x20e>
 800b6da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6dc:	445a      	add	r2, fp
 800b6de:	9209      	str	r2, [sp, #36]	; 0x24
 800b6e0:	f89a 3000 	ldrb.w	r3, [sl]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	f000 80a2 	beq.w	800b82e <_vfiprintf_r+0x20e>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b6f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6f4:	f10a 0a01 	add.w	sl, sl, #1
 800b6f8:	9304      	str	r3, [sp, #16]
 800b6fa:	9307      	str	r3, [sp, #28]
 800b6fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b700:	931a      	str	r3, [sp, #104]	; 0x68
 800b702:	4654      	mov	r4, sl
 800b704:	2205      	movs	r2, #5
 800b706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b70a:	4858      	ldr	r0, [pc, #352]	; (800b86c <_vfiprintf_r+0x24c>)
 800b70c:	f7f4 fd90 	bl	8000230 <memchr>
 800b710:	9a04      	ldr	r2, [sp, #16]
 800b712:	b9d8      	cbnz	r0, 800b74c <_vfiprintf_r+0x12c>
 800b714:	06d1      	lsls	r1, r2, #27
 800b716:	bf44      	itt	mi
 800b718:	2320      	movmi	r3, #32
 800b71a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b71e:	0713      	lsls	r3, r2, #28
 800b720:	bf44      	itt	mi
 800b722:	232b      	movmi	r3, #43	; 0x2b
 800b724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b728:	f89a 3000 	ldrb.w	r3, [sl]
 800b72c:	2b2a      	cmp	r3, #42	; 0x2a
 800b72e:	d015      	beq.n	800b75c <_vfiprintf_r+0x13c>
 800b730:	9a07      	ldr	r2, [sp, #28]
 800b732:	4654      	mov	r4, sl
 800b734:	2000      	movs	r0, #0
 800b736:	f04f 0c0a 	mov.w	ip, #10
 800b73a:	4621      	mov	r1, r4
 800b73c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b740:	3b30      	subs	r3, #48	; 0x30
 800b742:	2b09      	cmp	r3, #9
 800b744:	d94e      	bls.n	800b7e4 <_vfiprintf_r+0x1c4>
 800b746:	b1b0      	cbz	r0, 800b776 <_vfiprintf_r+0x156>
 800b748:	9207      	str	r2, [sp, #28]
 800b74a:	e014      	b.n	800b776 <_vfiprintf_r+0x156>
 800b74c:	eba0 0308 	sub.w	r3, r0, r8
 800b750:	fa09 f303 	lsl.w	r3, r9, r3
 800b754:	4313      	orrs	r3, r2
 800b756:	9304      	str	r3, [sp, #16]
 800b758:	46a2      	mov	sl, r4
 800b75a:	e7d2      	b.n	800b702 <_vfiprintf_r+0xe2>
 800b75c:	9b03      	ldr	r3, [sp, #12]
 800b75e:	1d19      	adds	r1, r3, #4
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	9103      	str	r1, [sp, #12]
 800b764:	2b00      	cmp	r3, #0
 800b766:	bfbb      	ittet	lt
 800b768:	425b      	neglt	r3, r3
 800b76a:	f042 0202 	orrlt.w	r2, r2, #2
 800b76e:	9307      	strge	r3, [sp, #28]
 800b770:	9307      	strlt	r3, [sp, #28]
 800b772:	bfb8      	it	lt
 800b774:	9204      	strlt	r2, [sp, #16]
 800b776:	7823      	ldrb	r3, [r4, #0]
 800b778:	2b2e      	cmp	r3, #46	; 0x2e
 800b77a:	d10c      	bne.n	800b796 <_vfiprintf_r+0x176>
 800b77c:	7863      	ldrb	r3, [r4, #1]
 800b77e:	2b2a      	cmp	r3, #42	; 0x2a
 800b780:	d135      	bne.n	800b7ee <_vfiprintf_r+0x1ce>
 800b782:	9b03      	ldr	r3, [sp, #12]
 800b784:	1d1a      	adds	r2, r3, #4
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	9203      	str	r2, [sp, #12]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	bfb8      	it	lt
 800b78e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b792:	3402      	adds	r4, #2
 800b794:	9305      	str	r3, [sp, #20]
 800b796:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b87c <_vfiprintf_r+0x25c>
 800b79a:	7821      	ldrb	r1, [r4, #0]
 800b79c:	2203      	movs	r2, #3
 800b79e:	4650      	mov	r0, sl
 800b7a0:	f7f4 fd46 	bl	8000230 <memchr>
 800b7a4:	b140      	cbz	r0, 800b7b8 <_vfiprintf_r+0x198>
 800b7a6:	2340      	movs	r3, #64	; 0x40
 800b7a8:	eba0 000a 	sub.w	r0, r0, sl
 800b7ac:	fa03 f000 	lsl.w	r0, r3, r0
 800b7b0:	9b04      	ldr	r3, [sp, #16]
 800b7b2:	4303      	orrs	r3, r0
 800b7b4:	3401      	adds	r4, #1
 800b7b6:	9304      	str	r3, [sp, #16]
 800b7b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7bc:	482c      	ldr	r0, [pc, #176]	; (800b870 <_vfiprintf_r+0x250>)
 800b7be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7c2:	2206      	movs	r2, #6
 800b7c4:	f7f4 fd34 	bl	8000230 <memchr>
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	d03f      	beq.n	800b84c <_vfiprintf_r+0x22c>
 800b7cc:	4b29      	ldr	r3, [pc, #164]	; (800b874 <_vfiprintf_r+0x254>)
 800b7ce:	bb1b      	cbnz	r3, 800b818 <_vfiprintf_r+0x1f8>
 800b7d0:	9b03      	ldr	r3, [sp, #12]
 800b7d2:	3307      	adds	r3, #7
 800b7d4:	f023 0307 	bic.w	r3, r3, #7
 800b7d8:	3308      	adds	r3, #8
 800b7da:	9303      	str	r3, [sp, #12]
 800b7dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7de:	443b      	add	r3, r7
 800b7e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b7e2:	e767      	b.n	800b6b4 <_vfiprintf_r+0x94>
 800b7e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7e8:	460c      	mov	r4, r1
 800b7ea:	2001      	movs	r0, #1
 800b7ec:	e7a5      	b.n	800b73a <_vfiprintf_r+0x11a>
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	3401      	adds	r4, #1
 800b7f2:	9305      	str	r3, [sp, #20]
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	f04f 0c0a 	mov.w	ip, #10
 800b7fa:	4620      	mov	r0, r4
 800b7fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b800:	3a30      	subs	r2, #48	; 0x30
 800b802:	2a09      	cmp	r2, #9
 800b804:	d903      	bls.n	800b80e <_vfiprintf_r+0x1ee>
 800b806:	2b00      	cmp	r3, #0
 800b808:	d0c5      	beq.n	800b796 <_vfiprintf_r+0x176>
 800b80a:	9105      	str	r1, [sp, #20]
 800b80c:	e7c3      	b.n	800b796 <_vfiprintf_r+0x176>
 800b80e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b812:	4604      	mov	r4, r0
 800b814:	2301      	movs	r3, #1
 800b816:	e7f0      	b.n	800b7fa <_vfiprintf_r+0x1da>
 800b818:	ab03      	add	r3, sp, #12
 800b81a:	9300      	str	r3, [sp, #0]
 800b81c:	462a      	mov	r2, r5
 800b81e:	4b16      	ldr	r3, [pc, #88]	; (800b878 <_vfiprintf_r+0x258>)
 800b820:	a904      	add	r1, sp, #16
 800b822:	4630      	mov	r0, r6
 800b824:	f7fd fcce 	bl	80091c4 <_printf_float>
 800b828:	4607      	mov	r7, r0
 800b82a:	1c78      	adds	r0, r7, #1
 800b82c:	d1d6      	bne.n	800b7dc <_vfiprintf_r+0x1bc>
 800b82e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b830:	07d9      	lsls	r1, r3, #31
 800b832:	d405      	bmi.n	800b840 <_vfiprintf_r+0x220>
 800b834:	89ab      	ldrh	r3, [r5, #12]
 800b836:	059a      	lsls	r2, r3, #22
 800b838:	d402      	bmi.n	800b840 <_vfiprintf_r+0x220>
 800b83a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b83c:	f7fd fbb0 	bl	8008fa0 <__retarget_lock_release_recursive>
 800b840:	89ab      	ldrh	r3, [r5, #12]
 800b842:	065b      	lsls	r3, r3, #25
 800b844:	f53f af12 	bmi.w	800b66c <_vfiprintf_r+0x4c>
 800b848:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b84a:	e711      	b.n	800b670 <_vfiprintf_r+0x50>
 800b84c:	ab03      	add	r3, sp, #12
 800b84e:	9300      	str	r3, [sp, #0]
 800b850:	462a      	mov	r2, r5
 800b852:	4b09      	ldr	r3, [pc, #36]	; (800b878 <_vfiprintf_r+0x258>)
 800b854:	a904      	add	r1, sp, #16
 800b856:	4630      	mov	r0, r6
 800b858:	f7fd ff58 	bl	800970c <_printf_i>
 800b85c:	e7e4      	b.n	800b828 <_vfiprintf_r+0x208>
 800b85e:	bf00      	nop
 800b860:	0800bd70 	.word	0x0800bd70
 800b864:	0800bd90 	.word	0x0800bd90
 800b868:	0800bd50 	.word	0x0800bd50
 800b86c:	0800bfdc 	.word	0x0800bfdc
 800b870:	0800bfe6 	.word	0x0800bfe6
 800b874:	080091c5 	.word	0x080091c5
 800b878:	0800b5fb 	.word	0x0800b5fb
 800b87c:	0800bfe2 	.word	0x0800bfe2

0800b880 <__swbuf_r>:
 800b880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b882:	460e      	mov	r6, r1
 800b884:	4614      	mov	r4, r2
 800b886:	4605      	mov	r5, r0
 800b888:	b118      	cbz	r0, 800b892 <__swbuf_r+0x12>
 800b88a:	6983      	ldr	r3, [r0, #24]
 800b88c:	b90b      	cbnz	r3, 800b892 <__swbuf_r+0x12>
 800b88e:	f7fd fac3 	bl	8008e18 <__sinit>
 800b892:	4b21      	ldr	r3, [pc, #132]	; (800b918 <__swbuf_r+0x98>)
 800b894:	429c      	cmp	r4, r3
 800b896:	d12b      	bne.n	800b8f0 <__swbuf_r+0x70>
 800b898:	686c      	ldr	r4, [r5, #4]
 800b89a:	69a3      	ldr	r3, [r4, #24]
 800b89c:	60a3      	str	r3, [r4, #8]
 800b89e:	89a3      	ldrh	r3, [r4, #12]
 800b8a0:	071a      	lsls	r2, r3, #28
 800b8a2:	d52f      	bpl.n	800b904 <__swbuf_r+0x84>
 800b8a4:	6923      	ldr	r3, [r4, #16]
 800b8a6:	b36b      	cbz	r3, 800b904 <__swbuf_r+0x84>
 800b8a8:	6923      	ldr	r3, [r4, #16]
 800b8aa:	6820      	ldr	r0, [r4, #0]
 800b8ac:	1ac0      	subs	r0, r0, r3
 800b8ae:	6963      	ldr	r3, [r4, #20]
 800b8b0:	b2f6      	uxtb	r6, r6
 800b8b2:	4283      	cmp	r3, r0
 800b8b4:	4637      	mov	r7, r6
 800b8b6:	dc04      	bgt.n	800b8c2 <__swbuf_r+0x42>
 800b8b8:	4621      	mov	r1, r4
 800b8ba:	4628      	mov	r0, r5
 800b8bc:	f7ff f852 	bl	800a964 <_fflush_r>
 800b8c0:	bb30      	cbnz	r0, 800b910 <__swbuf_r+0x90>
 800b8c2:	68a3      	ldr	r3, [r4, #8]
 800b8c4:	3b01      	subs	r3, #1
 800b8c6:	60a3      	str	r3, [r4, #8]
 800b8c8:	6823      	ldr	r3, [r4, #0]
 800b8ca:	1c5a      	adds	r2, r3, #1
 800b8cc:	6022      	str	r2, [r4, #0]
 800b8ce:	701e      	strb	r6, [r3, #0]
 800b8d0:	6963      	ldr	r3, [r4, #20]
 800b8d2:	3001      	adds	r0, #1
 800b8d4:	4283      	cmp	r3, r0
 800b8d6:	d004      	beq.n	800b8e2 <__swbuf_r+0x62>
 800b8d8:	89a3      	ldrh	r3, [r4, #12]
 800b8da:	07db      	lsls	r3, r3, #31
 800b8dc:	d506      	bpl.n	800b8ec <__swbuf_r+0x6c>
 800b8de:	2e0a      	cmp	r6, #10
 800b8e0:	d104      	bne.n	800b8ec <__swbuf_r+0x6c>
 800b8e2:	4621      	mov	r1, r4
 800b8e4:	4628      	mov	r0, r5
 800b8e6:	f7ff f83d 	bl	800a964 <_fflush_r>
 800b8ea:	b988      	cbnz	r0, 800b910 <__swbuf_r+0x90>
 800b8ec:	4638      	mov	r0, r7
 800b8ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8f0:	4b0a      	ldr	r3, [pc, #40]	; (800b91c <__swbuf_r+0x9c>)
 800b8f2:	429c      	cmp	r4, r3
 800b8f4:	d101      	bne.n	800b8fa <__swbuf_r+0x7a>
 800b8f6:	68ac      	ldr	r4, [r5, #8]
 800b8f8:	e7cf      	b.n	800b89a <__swbuf_r+0x1a>
 800b8fa:	4b09      	ldr	r3, [pc, #36]	; (800b920 <__swbuf_r+0xa0>)
 800b8fc:	429c      	cmp	r4, r3
 800b8fe:	bf08      	it	eq
 800b900:	68ec      	ldreq	r4, [r5, #12]
 800b902:	e7ca      	b.n	800b89a <__swbuf_r+0x1a>
 800b904:	4621      	mov	r1, r4
 800b906:	4628      	mov	r0, r5
 800b908:	f000 f81a 	bl	800b940 <__swsetup_r>
 800b90c:	2800      	cmp	r0, #0
 800b90e:	d0cb      	beq.n	800b8a8 <__swbuf_r+0x28>
 800b910:	f04f 37ff 	mov.w	r7, #4294967295
 800b914:	e7ea      	b.n	800b8ec <__swbuf_r+0x6c>
 800b916:	bf00      	nop
 800b918:	0800bd70 	.word	0x0800bd70
 800b91c:	0800bd90 	.word	0x0800bd90
 800b920:	0800bd50 	.word	0x0800bd50

0800b924 <__ascii_wctomb>:
 800b924:	b149      	cbz	r1, 800b93a <__ascii_wctomb+0x16>
 800b926:	2aff      	cmp	r2, #255	; 0xff
 800b928:	bf85      	ittet	hi
 800b92a:	238a      	movhi	r3, #138	; 0x8a
 800b92c:	6003      	strhi	r3, [r0, #0]
 800b92e:	700a      	strbls	r2, [r1, #0]
 800b930:	f04f 30ff 	movhi.w	r0, #4294967295
 800b934:	bf98      	it	ls
 800b936:	2001      	movls	r0, #1
 800b938:	4770      	bx	lr
 800b93a:	4608      	mov	r0, r1
 800b93c:	4770      	bx	lr
	...

0800b940 <__swsetup_r>:
 800b940:	4b32      	ldr	r3, [pc, #200]	; (800ba0c <__swsetup_r+0xcc>)
 800b942:	b570      	push	{r4, r5, r6, lr}
 800b944:	681d      	ldr	r5, [r3, #0]
 800b946:	4606      	mov	r6, r0
 800b948:	460c      	mov	r4, r1
 800b94a:	b125      	cbz	r5, 800b956 <__swsetup_r+0x16>
 800b94c:	69ab      	ldr	r3, [r5, #24]
 800b94e:	b913      	cbnz	r3, 800b956 <__swsetup_r+0x16>
 800b950:	4628      	mov	r0, r5
 800b952:	f7fd fa61 	bl	8008e18 <__sinit>
 800b956:	4b2e      	ldr	r3, [pc, #184]	; (800ba10 <__swsetup_r+0xd0>)
 800b958:	429c      	cmp	r4, r3
 800b95a:	d10f      	bne.n	800b97c <__swsetup_r+0x3c>
 800b95c:	686c      	ldr	r4, [r5, #4]
 800b95e:	89a3      	ldrh	r3, [r4, #12]
 800b960:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b964:	0719      	lsls	r1, r3, #28
 800b966:	d42c      	bmi.n	800b9c2 <__swsetup_r+0x82>
 800b968:	06dd      	lsls	r5, r3, #27
 800b96a:	d411      	bmi.n	800b990 <__swsetup_r+0x50>
 800b96c:	2309      	movs	r3, #9
 800b96e:	6033      	str	r3, [r6, #0]
 800b970:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b974:	81a3      	strh	r3, [r4, #12]
 800b976:	f04f 30ff 	mov.w	r0, #4294967295
 800b97a:	e03e      	b.n	800b9fa <__swsetup_r+0xba>
 800b97c:	4b25      	ldr	r3, [pc, #148]	; (800ba14 <__swsetup_r+0xd4>)
 800b97e:	429c      	cmp	r4, r3
 800b980:	d101      	bne.n	800b986 <__swsetup_r+0x46>
 800b982:	68ac      	ldr	r4, [r5, #8]
 800b984:	e7eb      	b.n	800b95e <__swsetup_r+0x1e>
 800b986:	4b24      	ldr	r3, [pc, #144]	; (800ba18 <__swsetup_r+0xd8>)
 800b988:	429c      	cmp	r4, r3
 800b98a:	bf08      	it	eq
 800b98c:	68ec      	ldreq	r4, [r5, #12]
 800b98e:	e7e6      	b.n	800b95e <__swsetup_r+0x1e>
 800b990:	0758      	lsls	r0, r3, #29
 800b992:	d512      	bpl.n	800b9ba <__swsetup_r+0x7a>
 800b994:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b996:	b141      	cbz	r1, 800b9aa <__swsetup_r+0x6a>
 800b998:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b99c:	4299      	cmp	r1, r3
 800b99e:	d002      	beq.n	800b9a6 <__swsetup_r+0x66>
 800b9a0:	4630      	mov	r0, r6
 800b9a2:	f7ff fbd3 	bl	800b14c <_free_r>
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	6363      	str	r3, [r4, #52]	; 0x34
 800b9aa:	89a3      	ldrh	r3, [r4, #12]
 800b9ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b9b0:	81a3      	strh	r3, [r4, #12]
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	6063      	str	r3, [r4, #4]
 800b9b6:	6923      	ldr	r3, [r4, #16]
 800b9b8:	6023      	str	r3, [r4, #0]
 800b9ba:	89a3      	ldrh	r3, [r4, #12]
 800b9bc:	f043 0308 	orr.w	r3, r3, #8
 800b9c0:	81a3      	strh	r3, [r4, #12]
 800b9c2:	6923      	ldr	r3, [r4, #16]
 800b9c4:	b94b      	cbnz	r3, 800b9da <__swsetup_r+0x9a>
 800b9c6:	89a3      	ldrh	r3, [r4, #12]
 800b9c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b9cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9d0:	d003      	beq.n	800b9da <__swsetup_r+0x9a>
 800b9d2:	4621      	mov	r1, r4
 800b9d4:	4630      	mov	r0, r6
 800b9d6:	f000 f84d 	bl	800ba74 <__smakebuf_r>
 800b9da:	89a0      	ldrh	r0, [r4, #12]
 800b9dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b9e0:	f010 0301 	ands.w	r3, r0, #1
 800b9e4:	d00a      	beq.n	800b9fc <__swsetup_r+0xbc>
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	60a3      	str	r3, [r4, #8]
 800b9ea:	6963      	ldr	r3, [r4, #20]
 800b9ec:	425b      	negs	r3, r3
 800b9ee:	61a3      	str	r3, [r4, #24]
 800b9f0:	6923      	ldr	r3, [r4, #16]
 800b9f2:	b943      	cbnz	r3, 800ba06 <__swsetup_r+0xc6>
 800b9f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b9f8:	d1ba      	bne.n	800b970 <__swsetup_r+0x30>
 800b9fa:	bd70      	pop	{r4, r5, r6, pc}
 800b9fc:	0781      	lsls	r1, r0, #30
 800b9fe:	bf58      	it	pl
 800ba00:	6963      	ldrpl	r3, [r4, #20]
 800ba02:	60a3      	str	r3, [r4, #8]
 800ba04:	e7f4      	b.n	800b9f0 <__swsetup_r+0xb0>
 800ba06:	2000      	movs	r0, #0
 800ba08:	e7f7      	b.n	800b9fa <__swsetup_r+0xba>
 800ba0a:	bf00      	nop
 800ba0c:	20000010 	.word	0x20000010
 800ba10:	0800bd70 	.word	0x0800bd70
 800ba14:	0800bd90 	.word	0x0800bd90
 800ba18:	0800bd50 	.word	0x0800bd50

0800ba1c <abort>:
 800ba1c:	b508      	push	{r3, lr}
 800ba1e:	2006      	movs	r0, #6
 800ba20:	f000 f898 	bl	800bb54 <raise>
 800ba24:	2001      	movs	r0, #1
 800ba26:	f7f6 f8d7 	bl	8001bd8 <_exit>

0800ba2a <__swhatbuf_r>:
 800ba2a:	b570      	push	{r4, r5, r6, lr}
 800ba2c:	460e      	mov	r6, r1
 800ba2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba32:	2900      	cmp	r1, #0
 800ba34:	b096      	sub	sp, #88	; 0x58
 800ba36:	4614      	mov	r4, r2
 800ba38:	461d      	mov	r5, r3
 800ba3a:	da07      	bge.n	800ba4c <__swhatbuf_r+0x22>
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	602b      	str	r3, [r5, #0]
 800ba40:	89b3      	ldrh	r3, [r6, #12]
 800ba42:	061a      	lsls	r2, r3, #24
 800ba44:	d410      	bmi.n	800ba68 <__swhatbuf_r+0x3e>
 800ba46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba4a:	e00e      	b.n	800ba6a <__swhatbuf_r+0x40>
 800ba4c:	466a      	mov	r2, sp
 800ba4e:	f000 f89d 	bl	800bb8c <_fstat_r>
 800ba52:	2800      	cmp	r0, #0
 800ba54:	dbf2      	blt.n	800ba3c <__swhatbuf_r+0x12>
 800ba56:	9a01      	ldr	r2, [sp, #4]
 800ba58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba60:	425a      	negs	r2, r3
 800ba62:	415a      	adcs	r2, r3
 800ba64:	602a      	str	r2, [r5, #0]
 800ba66:	e7ee      	b.n	800ba46 <__swhatbuf_r+0x1c>
 800ba68:	2340      	movs	r3, #64	; 0x40
 800ba6a:	2000      	movs	r0, #0
 800ba6c:	6023      	str	r3, [r4, #0]
 800ba6e:	b016      	add	sp, #88	; 0x58
 800ba70:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ba74 <__smakebuf_r>:
 800ba74:	898b      	ldrh	r3, [r1, #12]
 800ba76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba78:	079d      	lsls	r5, r3, #30
 800ba7a:	4606      	mov	r6, r0
 800ba7c:	460c      	mov	r4, r1
 800ba7e:	d507      	bpl.n	800ba90 <__smakebuf_r+0x1c>
 800ba80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba84:	6023      	str	r3, [r4, #0]
 800ba86:	6123      	str	r3, [r4, #16]
 800ba88:	2301      	movs	r3, #1
 800ba8a:	6163      	str	r3, [r4, #20]
 800ba8c:	b002      	add	sp, #8
 800ba8e:	bd70      	pop	{r4, r5, r6, pc}
 800ba90:	ab01      	add	r3, sp, #4
 800ba92:	466a      	mov	r2, sp
 800ba94:	f7ff ffc9 	bl	800ba2a <__swhatbuf_r>
 800ba98:	9900      	ldr	r1, [sp, #0]
 800ba9a:	4605      	mov	r5, r0
 800ba9c:	4630      	mov	r0, r6
 800ba9e:	f7fd fa97 	bl	8008fd0 <_malloc_r>
 800baa2:	b948      	cbnz	r0, 800bab8 <__smakebuf_r+0x44>
 800baa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baa8:	059a      	lsls	r2, r3, #22
 800baaa:	d4ef      	bmi.n	800ba8c <__smakebuf_r+0x18>
 800baac:	f023 0303 	bic.w	r3, r3, #3
 800bab0:	f043 0302 	orr.w	r3, r3, #2
 800bab4:	81a3      	strh	r3, [r4, #12]
 800bab6:	e7e3      	b.n	800ba80 <__smakebuf_r+0xc>
 800bab8:	4b0d      	ldr	r3, [pc, #52]	; (800baf0 <__smakebuf_r+0x7c>)
 800baba:	62b3      	str	r3, [r6, #40]	; 0x28
 800babc:	89a3      	ldrh	r3, [r4, #12]
 800babe:	6020      	str	r0, [r4, #0]
 800bac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bac4:	81a3      	strh	r3, [r4, #12]
 800bac6:	9b00      	ldr	r3, [sp, #0]
 800bac8:	6163      	str	r3, [r4, #20]
 800baca:	9b01      	ldr	r3, [sp, #4]
 800bacc:	6120      	str	r0, [r4, #16]
 800bace:	b15b      	cbz	r3, 800bae8 <__smakebuf_r+0x74>
 800bad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bad4:	4630      	mov	r0, r6
 800bad6:	f000 f86b 	bl	800bbb0 <_isatty_r>
 800bada:	b128      	cbz	r0, 800bae8 <__smakebuf_r+0x74>
 800badc:	89a3      	ldrh	r3, [r4, #12]
 800bade:	f023 0303 	bic.w	r3, r3, #3
 800bae2:	f043 0301 	orr.w	r3, r3, #1
 800bae6:	81a3      	strh	r3, [r4, #12]
 800bae8:	89a0      	ldrh	r0, [r4, #12]
 800baea:	4305      	orrs	r5, r0
 800baec:	81a5      	strh	r5, [r4, #12]
 800baee:	e7cd      	b.n	800ba8c <__smakebuf_r+0x18>
 800baf0:	08008db1 	.word	0x08008db1

0800baf4 <_malloc_usable_size_r>:
 800baf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baf8:	1f18      	subs	r0, r3, #4
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	bfbc      	itt	lt
 800bafe:	580b      	ldrlt	r3, [r1, r0]
 800bb00:	18c0      	addlt	r0, r0, r3
 800bb02:	4770      	bx	lr

0800bb04 <_raise_r>:
 800bb04:	291f      	cmp	r1, #31
 800bb06:	b538      	push	{r3, r4, r5, lr}
 800bb08:	4604      	mov	r4, r0
 800bb0a:	460d      	mov	r5, r1
 800bb0c:	d904      	bls.n	800bb18 <_raise_r+0x14>
 800bb0e:	2316      	movs	r3, #22
 800bb10:	6003      	str	r3, [r0, #0]
 800bb12:	f04f 30ff 	mov.w	r0, #4294967295
 800bb16:	bd38      	pop	{r3, r4, r5, pc}
 800bb18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb1a:	b112      	cbz	r2, 800bb22 <_raise_r+0x1e>
 800bb1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb20:	b94b      	cbnz	r3, 800bb36 <_raise_r+0x32>
 800bb22:	4620      	mov	r0, r4
 800bb24:	f000 f830 	bl	800bb88 <_getpid_r>
 800bb28:	462a      	mov	r2, r5
 800bb2a:	4601      	mov	r1, r0
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb32:	f000 b817 	b.w	800bb64 <_kill_r>
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	d00a      	beq.n	800bb50 <_raise_r+0x4c>
 800bb3a:	1c59      	adds	r1, r3, #1
 800bb3c:	d103      	bne.n	800bb46 <_raise_r+0x42>
 800bb3e:	2316      	movs	r3, #22
 800bb40:	6003      	str	r3, [r0, #0]
 800bb42:	2001      	movs	r0, #1
 800bb44:	e7e7      	b.n	800bb16 <_raise_r+0x12>
 800bb46:	2400      	movs	r4, #0
 800bb48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	4798      	blx	r3
 800bb50:	2000      	movs	r0, #0
 800bb52:	e7e0      	b.n	800bb16 <_raise_r+0x12>

0800bb54 <raise>:
 800bb54:	4b02      	ldr	r3, [pc, #8]	; (800bb60 <raise+0xc>)
 800bb56:	4601      	mov	r1, r0
 800bb58:	6818      	ldr	r0, [r3, #0]
 800bb5a:	f7ff bfd3 	b.w	800bb04 <_raise_r>
 800bb5e:	bf00      	nop
 800bb60:	20000010 	.word	0x20000010

0800bb64 <_kill_r>:
 800bb64:	b538      	push	{r3, r4, r5, lr}
 800bb66:	4d07      	ldr	r5, [pc, #28]	; (800bb84 <_kill_r+0x20>)
 800bb68:	2300      	movs	r3, #0
 800bb6a:	4604      	mov	r4, r0
 800bb6c:	4608      	mov	r0, r1
 800bb6e:	4611      	mov	r1, r2
 800bb70:	602b      	str	r3, [r5, #0]
 800bb72:	f7f6 f821 	bl	8001bb8 <_kill>
 800bb76:	1c43      	adds	r3, r0, #1
 800bb78:	d102      	bne.n	800bb80 <_kill_r+0x1c>
 800bb7a:	682b      	ldr	r3, [r5, #0]
 800bb7c:	b103      	cbz	r3, 800bb80 <_kill_r+0x1c>
 800bb7e:	6023      	str	r3, [r4, #0]
 800bb80:	bd38      	pop	{r3, r4, r5, pc}
 800bb82:	bf00      	nop
 800bb84:	20003300 	.word	0x20003300

0800bb88 <_getpid_r>:
 800bb88:	f7f6 b80e 	b.w	8001ba8 <_getpid>

0800bb8c <_fstat_r>:
 800bb8c:	b538      	push	{r3, r4, r5, lr}
 800bb8e:	4d07      	ldr	r5, [pc, #28]	; (800bbac <_fstat_r+0x20>)
 800bb90:	2300      	movs	r3, #0
 800bb92:	4604      	mov	r4, r0
 800bb94:	4608      	mov	r0, r1
 800bb96:	4611      	mov	r1, r2
 800bb98:	602b      	str	r3, [r5, #0]
 800bb9a:	f7f6 f86c 	bl	8001c76 <_fstat>
 800bb9e:	1c43      	adds	r3, r0, #1
 800bba0:	d102      	bne.n	800bba8 <_fstat_r+0x1c>
 800bba2:	682b      	ldr	r3, [r5, #0]
 800bba4:	b103      	cbz	r3, 800bba8 <_fstat_r+0x1c>
 800bba6:	6023      	str	r3, [r4, #0]
 800bba8:	bd38      	pop	{r3, r4, r5, pc}
 800bbaa:	bf00      	nop
 800bbac:	20003300 	.word	0x20003300

0800bbb0 <_isatty_r>:
 800bbb0:	b538      	push	{r3, r4, r5, lr}
 800bbb2:	4d06      	ldr	r5, [pc, #24]	; (800bbcc <_isatty_r+0x1c>)
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	4608      	mov	r0, r1
 800bbba:	602b      	str	r3, [r5, #0]
 800bbbc:	f7f6 f86b 	bl	8001c96 <_isatty>
 800bbc0:	1c43      	adds	r3, r0, #1
 800bbc2:	d102      	bne.n	800bbca <_isatty_r+0x1a>
 800bbc4:	682b      	ldr	r3, [r5, #0]
 800bbc6:	b103      	cbz	r3, 800bbca <_isatty_r+0x1a>
 800bbc8:	6023      	str	r3, [r4, #0]
 800bbca:	bd38      	pop	{r3, r4, r5, pc}
 800bbcc:	20003300 	.word	0x20003300

0800bbd0 <_init>:
 800bbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbd2:	bf00      	nop
 800bbd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbd6:	bc08      	pop	{r3}
 800bbd8:	469e      	mov	lr, r3
 800bbda:	4770      	bx	lr

0800bbdc <_fini>:
 800bbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbde:	bf00      	nop
 800bbe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbe2:	bc08      	pop	{r3}
 800bbe4:	469e      	mov	lr, r3
 800bbe6:	4770      	bx	lr
